/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={954:(t,e,n)=>{n.d(e,{k:()=>Hl,j:()=>Gl});const s=function(t){const e=[];let n=0;for(let s=0;s<t.length;s++){let r=t.charCodeAt(s);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&s+1<t.length&&56320==(64512&t.charCodeAt(s+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++s)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let e=0;e<t.length;e+=3){const r=t[e],i=e+1<t.length,o=i?t[e+1]:0,a=e+2<t.length,c=a?t[e+2]:0,u=r>>2,h=(3&r)<<4|o>>4;let l=(15&o)<<2|c>>6,d=63&c;a||(d=64,i||(l=64)),s.push(n[u],n[h],n[l],n[d])}return s.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let n=0,s=0;for(;n<t.length;){const r=t[n++];if(r<128)e[s++]=String.fromCharCode(r);else if(r>191&&r<224){const i=t[n++];e[s++]=String.fromCharCode((31&r)<<6|63&i)}else if(r>239&&r<365){const i=((7&r)<<18|(63&t[n++])<<12|(63&t[n++])<<6|63&t[n++])-65536;e[s++]=String.fromCharCode(55296+(i>>10)),e[s++]=String.fromCharCode(56320+(1023&i))}else{const i=t[n++],o=t[n++];e[s++]=String.fromCharCode((15&r)<<12|(63&i)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const n=e?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let e=0;e<t.length;){const r=n[t.charAt(e++)],o=e<t.length?n[t.charAt(e)]:0;++e;const a=e<t.length?n[t.charAt(e)]:64;++e;const c=e<t.length?n[t.charAt(e)]:64;if(++e,null==r||null==o||null==a||null==c)throw new i;const u=r<<2|o>>4;if(s.push(u),64!==a){const t=o<<4&240|a>>2;if(s.push(t),64!==c){const t=a<<6&192|c;s.push(t)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class i extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const o=function(t){return function(t){const e=s(t);return r.encodeByteArray(e,!0)}(t).replace(/\./g,"")},a=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process)return;const t="MISSING_ENV_VAR".__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null}(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},c=()=>{var t;return null===(t=a())||void 0===t?void 0:t.config};class u{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,n)=>{e?this.reject(e):this.resolve(n),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,n))}}}class h extends Error{constructor(t,e,n){super(e),this.code=t,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,h.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,l.prototype.create)}}class l{constructor(t,e,n){this.service=t,this.serviceName=e,this.errors=n}create(t,...e){const n=e[0]||{},s=`${this.service}/${t}`,r=this.errors[t],i=r?function(t,e){return t.replace(d,((t,n)=>{const s=e[n];return null!=s?String(s):`<${n}?>`}))}(r,n):"Error",o=`${this.serviceName}: ${i} (${s}).`;return new h(s,o,n)}}const d=/\{\$([^}]+)}/g;function f(t,e){if(t===e)return!0;const n=Object.keys(t),s=Object.keys(e);for(const r of n){if(!s.includes(r))return!1;const n=t[r],i=e[r];if(g(n)&&g(i)){if(!f(n,i))return!1}else if(n!==i)return!1}for(const t of s)if(!n.includes(t))return!1;return!0}function g(t){return null!==t&&"object"==typeof t}function p(t){return t&&t._delegate?t._delegate:t}class m{constructor(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const y="[DEFAULT]";class v{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new u;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:e});n&&t.resolve(n)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),s=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(s)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:y})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:n});e.resolve(t)}catch(t){}}}}clearInstance(t=y){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=y){return this.instances.has(t)}getOptions(t=y){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,n=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:n,options:e});for(const[t,e]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(t)&&e.resolve(s);return s}onInit(t,e){var n;const s=this.normalizeInstanceIdentifier(e),r=null!==(n=this.onInitCallbacks.get(s))&&void 0!==n?n:new Set;r.add(t),this.onInitCallbacks.set(s,r);const i=this.instances.get(s);return i&&t(i,s),()=>{r.delete(t)}}invokeOnInitCallbacks(t,e){const n=this.onInitCallbacks.get(e);if(n)for(const s of n)try{s(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let n=this.instances.get(t);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(s=t,s===y?void 0:s),options:e}),this.instances.set(t,n),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(n,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,n)}catch(t){}var s;return n||null}normalizeInstanceIdentifier(t=y){return this.component?this.component.multipleInstances?t:y:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class w{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new v(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const E=[];var b,T;(T=b||(b={}))[T.DEBUG=0]="DEBUG",T[T.VERBOSE=1]="VERBOSE",T[T.INFO=2]="INFO",T[T.WARN=3]="WARN",T[T.ERROR=4]="ERROR",T[T.SILENT=5]="SILENT";const C={debug:b.DEBUG,verbose:b.VERBOSE,info:b.INFO,warn:b.WARN,error:b.ERROR,silent:b.SILENT},I=b.INFO,S={[b.DEBUG]:"log",[b.VERBOSE]:"log",[b.INFO]:"info",[b.WARN]:"warn",[b.ERROR]:"error"},A=(t,e,...n)=>{if(e<t.logLevel)return;const s=(new Date).toISOString(),r=S[e];if(!r)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[r](`[${s}]  ${t.name}:`,...n)};class _{constructor(t){this.name=t,this._logLevel=I,this._logHandler=A,this._userLogHandler=null,E.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in b))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?C[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,b.DEBUG,...t),this._logHandler(this,b.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,b.VERBOSE,...t),this._logHandler(this,b.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,b.INFO,...t),this._logHandler(this,b.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,b.WARN,...t),this._logHandler(this,b.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,b.ERROR,...t),this._logHandler(this,b.ERROR,...t)}}const D=(t,e)=>e.some((e=>t instanceof e));let k,N;const x=new WeakMap,R=new WeakMap,L=new WeakMap,M=new WeakMap,O=new WeakMap;let P={get(t,e,n){if(t instanceof IDBTransaction){if("done"===e)return R.get(t);if("objectStoreNames"===e)return t.objectStoreNames||L.get(t);if("store"===e)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return V(t[e])},set:(t,e,n)=>(t[e]=n,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function F(t){return"function"==typeof t?(e=t)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(N||(N=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(U(this),t),V(x.get(this))}:function(...t){return V(e.apply(U(this),t))}:function(t,...n){const s=e.call(U(this),t,...n);return L.set(s,t.sort?t.sort():[t]),V(s)}:(t instanceof IDBTransaction&&function(t){if(R.has(t))return;const e=new Promise(((e,n)=>{const s=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),s()},i=()=>{n(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)}));R.set(t,e)}(t),D(t,k||(k=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,P):t);var e}function V(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,n)=>{const s=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(V(t.result)),s()},i=()=>{n(t.error),s()};t.addEventListener("success",r),t.addEventListener("error",i)}));return e.then((e=>{e instanceof IDBCursor&&x.set(e,t)})).catch((()=>{})),O.set(e,t),e}(t);if(M.has(t))return M.get(t);const e=F(t);return e!==t&&(M.set(t,e),O.set(e,t)),e}const U=t=>O.get(t),B=["get","getKey","getAll","getAllKeys","count"],j=["put","add","delete","clear"],q=new Map;function $(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(q.get(e))return q.get(e);const n=e.replace(/FromIndex$/,""),s=e!==n,r=j.includes(n);if(!(n in(s?IDBIndex:IDBObjectStore).prototype)||!r&&!B.includes(n))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let o=i.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[n](...e),r&&i.done]))[0]};return q.set(e,i),i}var z;z=P,P={...z,get:(t,e,n)=>$(t,e)||z.get(t,e,n),has:(t,e)=>!!$(t,e)||z.has(t,e)};class K{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const G="@firebase/app",H="0.9.12",Q=new _("@firebase/app"),W="[DEFAULT]",X={[G]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},Y=new Map,J=new Map;function Z(t,e){try{t.container.addComponent(e)}catch(n){Q.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function tt(t){const e=t.name;if(J.has(e))return Q.debug(`There were multiple attempts to register component ${e}.`),!1;J.set(e,t);for(const e of Y.values())Z(e,t);return!0}const et=new l("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class nt{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new m("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw et.create("app-deleted",{appName:this._name})}}function st(t,e={}){let n=t;"object"!=typeof e&&(e={name:e});const s=Object.assign({name:W,automaticDataCollectionEnabled:!1},e),r=s.name;if("string"!=typeof r||!r)throw et.create("bad-app-name",{appName:String(r)});if(n||(n=c()),!n)throw et.create("no-options");const i=Y.get(r);if(i){if(f(n,i.options)&&f(s,i.config))return i;throw et.create("duplicate-app",{appName:r})}const o=new w(r);for(const t of J.values())o.addComponent(t);const a=new nt(n,s,o);return Y.set(r,a),a}function rt(t,e,n){var s;let r=null!==(s=X[t])&&void 0!==s?s:t;n&&(r+=`-${n}`);const i=r.match(/\s|\//),o=e.match(/\s|\//);if(i||o){const t=[`Unable to register library "${r}" with version "${e}":`];return i&&t.push(`library name "${r}" contains illegal characters (whitespace or "/")`),i&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void Q.warn(t.join(" "))}tt(new m(`${r}-version`,(()=>({library:r,version:e})),"VERSION"))}const it="firebase-heartbeat-database",ot=1,at="firebase-heartbeat-store";let ct=null;function ut(){return ct||(ct=function(t,e,{blocked:n,upgrade:s,blocking:r,terminated:i}={}){const o=indexedDB.open(t,e),a=V(o);return s&&o.addEventListener("upgradeneeded",(t=>{s(V(o.result),t.oldVersion,t.newVersion,V(o.transaction),t)})),n&&o.addEventListener("blocked",(t=>n(t.oldVersion,t.newVersion,t))),a.then((t=>{i&&t.addEventListener("close",(()=>i())),r&&t.addEventListener("versionchange",(t=>r(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),a}(it,ot,{upgrade:(t,e)=>{0===e&&t.createObjectStore(at)}}).catch((t=>{throw et.create("idb-open",{originalErrorMessage:t.message})}))),ct}async function ht(t,e){try{const n=(await ut()).transaction(at,"readwrite"),s=n.objectStore(at);await s.put(e,lt(t)),await n.done}catch(t){if(t instanceof h)Q.warn(t.message);else{const e=et.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});Q.warn(e.message)}}}function lt(t){return`${t.name}!${t.options.appId}`}class dt{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new gt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=ft();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=ft(),{heartbeatsToSend:e,unsentEntries:n}=function(t,e=1024){const n=[];let s=t.slice();for(const r of t){const t=n.find((t=>t.agent===r.agent));if(t){if(t.dates.push(r.date),pt(n)>e){t.dates.pop();break}}else if(n.push({agent:r.agent,dates:[r.date]}),pt(n)>e){n.pop();break}s=s.slice(1)}return{heartbeatsToSend:n,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=o(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function ft(){return(new Date).toISOString().substring(0,10)}class gt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(t){return!1}}()&&new Promise(((t,e)=>{try{let n=!0;const s="validate-browser-context-for-indexeddb-analytics-module",r=self.indexedDB.open(s);r.onsuccess=()=>{r.result.close(),n||self.indexedDB.deleteDatabase(s),t(!0)},r.onupgradeneeded=()=>{n=!1},r.onerror=()=>{var t;e((null===(t=r.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const t=await async function(t){try{const e=await ut();return await e.transaction(at).objectStore(at).get(lt(t))}catch(t){if(t instanceof h)Q.warn(t.message);else{const e=et.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});Q.warn(e.message)}}}(this.app);return t||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const n=await this.read();return ht(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:n.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const n=await this.read();return ht(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...t.heartbeats]})}}}function pt(t){return o(JSON.stringify({version:2,heartbeats:t})).length}tt(new m("platform-logger",(t=>new K(t)),"PRIVATE")),tt(new m("heartbeat",(t=>new dt(t)),"PRIVATE")),rt(G,H,""),rt(G,H,"esm2017"),rt("fire-js","");var mt,yt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},vt={},wt=wt||{},Et=yt||self;function bt(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function Tt(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Ct="closure_uid_"+(1e9*Math.random()>>>0),It=0;function St(t,e,n){return t.call.apply(t.bind,arguments)}function At(t,e,n){if(!t)throw Error();if(2<arguments.length){var s=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,s),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function _t(t,e,n){return(_t=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?St:At).apply(null,arguments)}function Dt(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function kt(t,e){function n(){}n.prototype=e.prototype,t.$=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.ac=function(t,n,s){for(var r=Array(arguments.length-2),i=2;i<arguments.length;i++)r[i-2]=arguments[i];return e.prototype[n].apply(t,r)}}function Nt(){this.s=this.s,this.o=this.o}Nt.prototype.s=!1,Nt.prototype.sa=function(){var t;!this.s&&(this.s=!0,this.N(),0)&&(t=this,Object.prototype.hasOwnProperty.call(t,Ct)&&t[Ct]||(t[Ct]=++It))},Nt.prototype.N=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const xt=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(let n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1};function Rt(t){const e=t.length;if(0<e){const n=Array(e);for(let s=0;s<e;s++)n[s]=t[s];return n}return[]}function Lt(t,e){for(let e=1;e<arguments.length;e++){const n=arguments[e];if(bt(n)){const e=t.length||0,s=n.length||0;t.length=e+s;for(let r=0;r<s;r++)t[e+r]=n[r]}else t.push(n)}}function Mt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}Mt.prototype.h=function(){this.defaultPrevented=!0};var Ot=function(){if(!Et.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Et.addEventListener("test",(()=>{}),e),Et.removeEventListener("test",(()=>{}),e)}catch(t){}return t}();function Pt(t){return/^[\s\xa0]*$/.test(t)}function Ft(){var t=Et.navigator;return t&&(t=t.userAgent)?t:""}function Vt(t){return-1!=Ft().indexOf(t)}function Ut(t){return Ut[" "](t),t}Ut[" "]=function(){};var Bt,jt,qt,$t=Vt("Opera"),zt=Vt("Trident")||Vt("MSIE"),Kt=Vt("Edge"),Gt=Kt||zt,Ht=Vt("Gecko")&&!(-1!=Ft().toLowerCase().indexOf("webkit")&&!Vt("Edge"))&&!(Vt("Trident")||Vt("MSIE"))&&!Vt("Edge"),Qt=-1!=Ft().toLowerCase().indexOf("webkit")&&!Vt("Edge");function Wt(){var t=Et.document;return t?t.documentMode:void 0}t:{var Xt="",Yt=(jt=Ft(),Ht?/rv:([^\);]+)(\)|;)/.exec(jt):Kt?/Edge\/([\d\.]+)/.exec(jt):zt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(jt):Qt?/WebKit\/(\S+)/.exec(jt):$t?/(?:Version)[ \/]?(\S+)/.exec(jt):void 0);if(Yt&&(Xt=Yt?Yt[1]:""),zt){var Jt=Wt();if(null!=Jt&&Jt>parseFloat(Xt)){Bt=String(Jt);break t}}Bt=Xt}Et.document&&zt?qt=Wt()||parseInt(Bt,10)||void 0:qt=void 0;var Zt=qt;function te(t,e){if(Mt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,s=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(Ht){t:{try{Ut(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,s?(this.clientX=void 0!==s.clientX?s.clientX:s.pageX,this.clientY=void 0!==s.clientY?s.clientY:s.pageY,this.screenX=s.screenX||0,this.screenY=s.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:ee[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&te.$.h.call(this)}}kt(te,Mt);var ee={2:"touch",3:"pen",4:"mouse"};te.prototype.h=function(){te.$.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var ne="closure_listenable_"+(1e6*Math.random()|0),se=0;function re(t,e,n,s,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!s,this.la=r,this.key=++se,this.fa=this.ia=!1}function ie(t){t.fa=!0,t.listener=null,t.proxy=null,t.src=null,t.la=null}function oe(t,e,n){for(const s in t)e.call(n,t[s],s,t)}function ae(t){const e={};for(const n in t)e[n]=t[n];return e}const ce="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ue(t,e){let n,s;for(let e=1;e<arguments.length;e++){for(n in s=arguments[e],s)t[n]=s[n];for(let e=0;e<ce.length;e++)n=ce[e],Object.prototype.hasOwnProperty.call(s,n)&&(t[n]=s[n])}}function he(t){this.src=t,this.g={},this.h=0}function le(t,e){var n=e.type;if(n in t.g){var s,r=t.g[n],i=xt(r,e);(s=0<=i)&&Array.prototype.splice.call(r,i,1),s&&(ie(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function de(t,e,n,s){for(var r=0;r<t.length;++r){var i=t[r];if(!i.fa&&i.listener==e&&i.capture==!!n&&i.la==s)return r}return-1}he.prototype.add=function(t,e,n,s,r){var i=t.toString();(t=this.g[i])||(t=this.g[i]=[],this.h++);var o=de(t,e,s,r);return-1<o?(e=t[o],n||(e.ia=!1)):((e=new re(e,this.src,i,!!s,r)).ia=n,t.push(e)),e};var fe="closure_lm_"+(1e6*Math.random()|0),ge={};function pe(t,e,n,s,r){if(s&&s.once)return ye(t,e,n,s,r);if(Array.isArray(e)){for(var i=0;i<e.length;i++)pe(t,e[i],n,s,r);return null}return n=Ie(n),t&&t[ne]?t.O(e,n,Tt(s)?!!s.capture:!!s,r):me(t,e,n,!1,s,r)}function me(t,e,n,s,r,i){if(!e)throw Error("Invalid event type");var o=Tt(r)?!!r.capture:!!r,a=Te(t);if(a||(t[fe]=a=new he(t)),(n=a.add(e,n,s,o,i)).proxy)return n;if(s=function(){const t=be;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=s,s.src=t,s.listener=n,t.addEventListener)Ot||(r=o),void 0===r&&(r=!1),t.addEventListener(e.toString(),s,r);else if(t.attachEvent)t.attachEvent(Ee(e.toString()),s);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(s)}return n}function ye(t,e,n,s,r){if(Array.isArray(e)){for(var i=0;i<e.length;i++)ye(t,e[i],n,s,r);return null}return n=Ie(n),t&&t[ne]?t.P(e,n,Tt(s)?!!s.capture:!!s,r):me(t,e,n,!0,s,r)}function ve(t,e,n,s,r){if(Array.isArray(e))for(var i=0;i<e.length;i++)ve(t,e[i],n,s,r);else s=Tt(s)?!!s.capture:!!s,n=Ie(n),t&&t[ne]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=de(i=t.g[e],n,s,r))&&(ie(i[n]),Array.prototype.splice.call(i,n,1),0==i.length&&(delete t.g[e],t.h--))):t&&(t=Te(t))&&(e=t.g[e.toString()],t=-1,e&&(t=de(e,n,s,r)),(n=-1<t?e[t]:null)&&we(n))}function we(t){if("number"!=typeof t&&t&&!t.fa){var e=t.src;if(e&&e[ne])le(e.i,t);else{var n=t.type,s=t.proxy;e.removeEventListener?e.removeEventListener(n,s,t.capture):e.detachEvent?e.detachEvent(Ee(n),s):e.addListener&&e.removeListener&&e.removeListener(s),(n=Te(e))?(le(n,t),0==n.h&&(n.src=null,e[fe]=null)):ie(t)}}}function Ee(t){return t in ge?ge[t]:ge[t]="on"+t}function be(t,e){if(t.fa)t=!0;else{e=new te(e,this);var n=t.listener,s=t.la||t.src;t.ia&&we(t),t=n.call(s,e)}return t}function Te(t){return(t=t[fe])instanceof he?t:null}var Ce="__closure_events_fn_"+(1e9*Math.random()>>>0);function Ie(t){return"function"==typeof t?t:(t[Ce]||(t[Ce]=function(e){return t.handleEvent(e)}),t[Ce])}function Se(){Nt.call(this),this.i=new he(this),this.S=this,this.J=null}function Ae(t,e){var n,s=t.J;if(s)for(n=[];s;s=s.J)n.push(s);if(t=t.S,s=e.type||e,"string"==typeof e)e=new Mt(e,t);else if(e instanceof Mt)e.target=e.target||t;else{var r=e;ue(e=new Mt(s,t),r)}if(r=!0,n)for(var i=n.length-1;0<=i;i--){var o=e.g=n[i];r=_e(o,s,!0,e)&&r}if(r=_e(o=e.g=t,s,!0,e)&&r,r=_e(o,s,!1,e)&&r,n)for(i=0;i<n.length;i++)r=_e(o=e.g=n[i],s,!1,e)&&r}function _e(t,e,n,s){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var r=!0,i=0;i<e.length;++i){var o=e[i];if(o&&!o.fa&&o.capture==n){var a=o.listener,c=o.la||o.src;o.ia&&le(t.i,o),r=!1!==a.call(c,s)&&r}}return r&&!s.defaultPrevented}kt(Se,Nt),Se.prototype[ne]=!0,Se.prototype.removeEventListener=function(t,e,n,s){ve(this,t,e,n,s)},Se.prototype.N=function(){if(Se.$.N.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],s=0;s<n.length;s++)ie(n[s]);delete e.g[t],e.h--}}this.J=null},Se.prototype.O=function(t,e,n,s){return this.i.add(String(t),e,!1,n,s)},Se.prototype.P=function(t,e,n,s){return this.i.add(String(t),e,!0,n,s)};var De=Et.JSON.stringify;function ke(){var t=Pe;let e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var Ne=new class{constructor(t,e){this.i=t,this.j=e,this.h=0,this.g=null}get(){let t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t}}((()=>new xe),(t=>t.reset()));class xe{constructor(){this.next=this.g=this.h=null}set(t,e){this.h=t,this.g=e,this.next=null}reset(){this.next=this.g=this.h=null}}function Re(t){var e=1;t=t.split(":");const n=[];for(;0<e&&t.length;)n.push(t.shift()),e--;return t.length&&n.push(t.join(":")),n}function Le(t){Et.setTimeout((()=>{throw t}),0)}let Me,Oe=!1,Pe=new class{constructor(){this.h=this.g=null}add(t,e){const n=Ne.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n}},Fe=()=>{const t=Et.Promise.resolve(void 0);Me=()=>{t.then(Ve)}};var Ve=()=>{for(var t;t=ke();){try{t.h.call(t.g)}catch(t){Le(t)}var e=Ne;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Oe=!1};function Ue(t,e){Se.call(this),this.h=t||1,this.g=e||Et,this.j=_t(this.qb,this),this.l=Date.now()}function Be(t){t.ga=!1,t.T&&(t.g.clearTimeout(t.T),t.T=null)}function je(t,e,n){if("function"==typeof t)n&&(t=_t(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=_t(t.handleEvent,t)}return 2147483647<Number(e)?-1:Et.setTimeout(t,e||0)}function qe(t){t.g=je((()=>{t.g=null,t.i&&(t.i=!1,qe(t))}),t.j);const e=t.h;t.h=null,t.m.apply(null,e)}kt(Ue,Se),(mt=Ue.prototype).ga=!1,mt.T=null,mt.qb=function(){if(this.ga){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.T=this.g.setTimeout(this.j,this.h-t):(this.T&&(this.g.clearTimeout(this.T),this.T=null),Ae(this,"tick"),this.ga&&(Be(this),this.start()))}},mt.start=function(){this.ga=!0,this.T||(this.T=this.g.setTimeout(this.j,this.h),this.l=Date.now())},mt.N=function(){Ue.$.N.call(this),Be(this),delete this.g};class $e extends Nt{constructor(t,e){super(),this.m=t,this.j=e,this.h=null,this.i=!1,this.g=null}l(t){this.h=arguments,this.g?this.i=!0:qe(this)}N(){super.N(),this.g&&(Et.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function ze(t){Nt.call(this),this.h=t,this.g={}}kt(ze,Nt);var Ke=[];function Ge(t,e,n,s){Array.isArray(n)||(n&&(Ke[0]=n.toString()),n=Ke);for(var r=0;r<n.length;r++){var i=pe(e,n[r],s||t.handleEvent,!1,t.h||t);if(!i)break;t.g[i.key]=i}}function He(t){oe(t.g,(function(t,e){this.g.hasOwnProperty(e)&&we(t)}),t),t.g={}}function Qe(){this.g=!0}function We(t,e,n,s){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var s=n[t];if(!(2>s.length)){var r=s[1];if(Array.isArray(r)&&!(1>r.length)){var i=r[0];if("noop"!=i&&"stop"!=i&&"close"!=i)for(var o=1;o<r.length;o++)r[o]=""}}}return De(n)}catch(t){return e}}(t,n)+(s?" "+s:"")}))}ze.prototype.N=function(){ze.$.N.call(this),He(this)},ze.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Qe.prototype.Ea=function(){this.g=!1},Qe.prototype.info=function(){};var Xe={},Ye=null;function Je(){return Ye=Ye||new Se}function Ze(t){Mt.call(this,Xe.Ta,t)}function tn(t){const e=Je();Ae(e,new Ze(e))}function en(t,e){Mt.call(this,Xe.STAT_EVENT,t),this.stat=e}function nn(t){const e=Je();Ae(e,new en(e,t))}function sn(t,e){Mt.call(this,Xe.Ua,t),this.size=e}function rn(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return Et.setTimeout((function(){t()}),e)}Xe.Ta="serverreachability",kt(Ze,Mt),Xe.STAT_EVENT="statevent",kt(en,Mt),Xe.Ua="timingevent",kt(sn,Mt);var on={NO_ERROR:0,rb:1,Eb:2,Db:3,yb:4,Cb:5,Fb:6,Qa:7,TIMEOUT:8,Ib:9},an={wb:"complete",Sb:"success",Ra:"error",Qa:"abort",Kb:"ready",Lb:"readystatechange",TIMEOUT:"timeout",Gb:"incrementaldata",Jb:"progress",zb:"downloadprogress",$b:"uploadprogress"};function cn(){}function un(t){return t.h||(t.h=t.i())}function hn(){}cn.prototype.h=null;var ln,dn={OPEN:"a",vb:"b",Ra:"c",Hb:"d"};function fn(){Mt.call(this,"d")}function gn(){Mt.call(this,"c")}function pn(){}function mn(t,e,n,s){this.l=t,this.j=e,this.m=n,this.W=s||1,this.U=new ze(this),this.P=vn,t=Gt?125:void 0,this.V=new Ue(t),this.I=null,this.i=!1,this.s=this.A=this.v=this.L=this.G=this.Y=this.B=null,this.F=[],this.g=null,this.C=0,this.o=this.u=null,this.ca=-1,this.J=!1,this.O=0,this.M=null,this.ba=this.K=this.aa=this.S=!1,this.h=new yn}function yn(){this.i=null,this.g="",this.h=!1}kt(fn,Mt),kt(gn,Mt),kt(pn,cn),pn.prototype.g=function(){return new XMLHttpRequest},pn.prototype.i=function(){return{}},ln=new pn;var vn=45e3,wn={},En={};function bn(t,e,n){t.L=1,t.v=Bn(On(e)),t.s=n,t.S=!0,Tn(t,null)}function Tn(t,e){t.G=Date.now(),An(t),t.A=On(t.v);var n=t.A,s=t.W;Array.isArray(s)||(s=[String(s)]),Zn(n.i,"t",s),t.C=0,n=t.l.J,t.h=new yn,t.g=Js(t.l,n?e:null,!t.s),0<t.O&&(t.M=new $e(_t(t.Pa,t,t.g),t.O)),Ge(t.U,t.g,"readystatechange",t.nb),e=t.I?ae(t.I):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ha(t.A,t.u,t.s,e)):(t.u="GET",t.g.ha(t.A,t.u,null,e)),tn(),function(t,e,n,s,r,i){t.info((function(){if(t.g)if(i)for(var o="",a=i.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var h=u[0];u=u[1];var l=h.split("_");o=2<=l.length&&"type"==l[1]?o+(h+"=")+u+"&":o+(h+"=redacted&")}}else o=null;else o=i;return"XMLHTTP REQ ("+s+") [attempt "+r+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.W,t.s)}function Cn(t){return!!t.g&&"GET"==t.u&&2!=t.L&&t.l.Ha}function In(t,e,n){let s,r=!0;for(;!t.J&&t.C<n.length;){if(s=Sn(t,n),s==En){4==e&&(t.o=4,nn(14),r=!1),We(t.j,t.m,null,"[Incomplete Response]");break}if(s==wn){t.o=4,nn(15),We(t.j,t.m,n,"[Invalid Chunk]"),r=!1;break}We(t.j,t.m,s,null),xn(t,s)}Cn(t)&&s!=En&&s!=wn&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,nn(16),r=!1),t.i=t.i&&r,r?0<n.length&&!t.ba&&(t.ba=!0,(e=t.l).g==t&&e.ca&&!e.M&&(e.l.info("Great, no buffering proxy detected. Bytes received: "+n.length),zs(e),e.M=!0,nn(11))):(We(t.j,t.m,n,"[Invalid Chunked Response]"),Nn(t),kn(t))}function Sn(t,e){var n=t.C,s=e.indexOf("\n",n);return-1==s?En:(n=Number(e.substring(n,s)),isNaN(n)?wn:(s+=1)+n>e.length?En:(e=e.slice(s,s+n),t.C=s+n,e))}function An(t){t.Y=Date.now()+t.P,_n(t,t.P)}function _n(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=rn(_t(t.lb,t),e)}function Dn(t){t.B&&(Et.clearTimeout(t.B),t.B=null)}function kn(t){0==t.l.H||t.J||Hs(t.l,t)}function Nn(t){Dn(t);var e=t.M;e&&"function"==typeof e.sa&&e.sa(),t.M=null,Be(t.V),He(t.U),t.g&&(e=t.g,t.g=null,e.abort(),e.sa())}function xn(t,e){try{var n=t.l;if(0!=n.H&&(n.g==t||is(n.i,t)))if(!t.K&&is(n.i,t)&&3==n.H){try{var s=n.Ja.g.parse(e)}catch(t){s=null}if(Array.isArray(s)&&3==s.length){var r=s;if(0==r[0]){t:if(!n.u){if(n.g){if(!(n.g.G+3e3<t.G))break t;Gs(n),Ps(n)}$s(n),nn(18)}}else n.Fa=r[1],0<n.Fa-n.V&&37500>r[2]&&n.G&&0==n.A&&!n.v&&(n.v=rn(_t(n.ib,n),6e3));if(1>=rs(n.i)&&n.oa){try{n.oa()}catch(t){}n.oa=void 0}}else Ws(n,11)}else if((t.K||n.g==t)&&Gs(n),!Pt(e))for(r=n.Ja.g.parse(e),e=0;e<r.length;e++){let u=r[e];if(n.V=u[0],u=u[1],2==n.H)if("c"==u[0]){n.K=u[1],n.pa=u[2];const e=u[3];null!=e&&(n.ra=e,n.l.info("VER="+n.ra));const r=u[4];null!=r&&(n.Ga=r,n.l.info("SVER="+n.Ga));const h=u[5];null!=h&&"number"==typeof h&&0<h&&(s=1.5*h,n.L=s,n.l.info("backChannelRequestTimeoutMs_="+s)),s=n;const l=t.g;if(l){const t=l.g?l.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(t){var i=s.i;i.g||-1==t.indexOf("spdy")&&-1==t.indexOf("quic")&&-1==t.indexOf("h2")||(i.j=i.l,i.g=new Set,i.h&&(os(i,i.h),i.h=null))}if(s.F){const t=l.g?l.g.getResponseHeader("X-HTTP-Session-Id"):null;t&&(s.Da=t,Un(s.I,s.F,t))}}n.H=3,n.h&&n.h.Ba(),n.ca&&(n.S=Date.now()-t.G,n.l.info("Handshake RTT: "+n.S+"ms"));var o=t;if((s=n).wa=Ys(s,s.J?s.pa:null,s.Y),o.K){as(s.i,o);var a=o,c=s.L;c&&a.setTimeout(c),a.B&&(Dn(a),An(a)),s.g=o}else qs(s);0<n.j.length&&Vs(n)}else"stop"!=u[0]&&"close"!=u[0]||Ws(n,7);else 3==n.H&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?Ws(n,7):Os(n):"noop"!=u[0]&&n.h&&n.h.Aa(u),n.A=0)}tn()}catch(t){}}function Rn(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(bt(t)||"string"==typeof t)Array.prototype.forEach.call(t,e,void 0);else for(var n=function(t){if(t.ta&&"function"==typeof t.ta)return t.ta();if(!t.Z||"function"!=typeof t.Z){if("undefined"!=typeof Map&&t instanceof Map)return Array.from(t.keys());if(!("undefined"!=typeof Set&&t instanceof Set)){if(bt(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}e=[],n=0;for(const s in t)e[n++]=s;return e}}}(t),s=function(t){if(t.Z&&"function"==typeof t.Z)return t.Z();if("undefined"!=typeof Map&&t instanceof Map||"undefined"!=typeof Set&&t instanceof Set)return Array.from(t.values());if("string"==typeof t)return t.split("");if(bt(t)){for(var e=[],n=t.length,s=0;s<n;s++)e.push(t[s]);return e}for(s in e=[],n=0,t)e[n++]=t[s];return e}(t),r=s.length,i=0;i<r;i++)e.call(void 0,s[i],n&&n[i],t)}(mt=mn.prototype).setTimeout=function(t){this.P=t},mt.nb=function(t){t=t.target;const e=this.M;e&&3==ks(t)?e.l():this.Pa(t)},mt.Pa=function(t){try{if(t==this.g)t:{const h=ks(this.g);var e=this.g.Ia();if(this.g.da(),!(3>h)&&(3!=h||Gt||this.g&&(this.h.h||this.g.ja()||Ns(this.g)))){this.J||4!=h||7==e||tn(),Dn(this);var n=this.g.da();this.ca=n;e:if(Cn(this)){var s=Ns(this.g);t="";var r=s.length,i=4==ks(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){Nn(this),kn(this);var o="";break e}this.h.i=new Et.TextDecoder}for(e=0;e<r;e++)this.h.h=!0,t+=this.h.i.decode(s[e],{stream:i&&e==r-1});s.splice(0,r),this.h.g+=t,this.C=0,o=this.h.g}else o=this.g.ja();if(this.i=200==n,function(t,e,n,s,r,i,o){t.info((function(){return"XMLHTTP RESP ("+s+") [ attempt "+r+"]: "+e+"\n"+n+"\n"+i+" "+o}))}(this.j,this.u,this.A,this.m,this.W,h,n),this.i){if(this.aa&&!this.K){e:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Pt(a)){var u=a;break e}}u=null}if(!(n=u)){this.i=!1,this.o=3,nn(12),Nn(this),kn(this);break t}We(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.K=!0,xn(this,n)}this.S?(In(this,h,o),Gt&&this.i&&3==h&&(Ge(this.U,this.V,"tick",this.mb),this.V.start())):(We(this.j,this.m,o,null),xn(this,o)),4==h&&Nn(this),this.i&&!this.J&&(4==h?Hs(this.l,this):(this.i=!1,An(this)))}else(function(t){const e={};t=(t.g&&2<=ks(t)&&t.g.getAllResponseHeaders()||"").split("\r\n");for(let s=0;s<t.length;s++){if(Pt(t[s]))continue;var n=Re(t[s]);const r=n[0];if("string"!=typeof(n=n[1]))continue;n=n.trim();const i=e[r]||[];e[r]=i,i.push(n)}!function(t,e){for(const n in t)e.call(void 0,t[n],n,t)}(e,(function(t){return t.join(", ")}))})(this.g),400==n&&0<o.indexOf("Unknown SID")?(this.o=3,nn(12)):(this.o=0,nn(13)),Nn(this),kn(this)}}}catch(t){}},mt.mb=function(){if(this.g){var t=ks(this.g),e=this.g.ja();this.C<e.length&&(Dn(this),In(this,t,e),this.i&&4!=t&&An(this))}},mt.cancel=function(){this.J=!0,Nn(this)},mt.lb=function(){this.B=null;const t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.L&&(tn(),nn(17)),Nn(this),this.o=2,kn(this)):_n(this,this.Y-t)};var Ln=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");function Mn(t){if(this.g=this.s=this.j="",this.m=null,this.o=this.l="",this.h=!1,t instanceof Mn){this.h=t.h,Pn(this,t.j),this.s=t.s,this.g=t.g,Fn(this,t.m),this.l=t.l;var e=t.i,n=new Wn;n.i=e.i,e.g&&(n.g=new Map(e.g),n.h=e.h),Vn(this,n),this.o=t.o}else t&&(e=String(t).match(Ln))?(this.h=!1,Pn(this,e[1]||"",!0),this.s=jn(e[2]||""),this.g=jn(e[3]||"",!0),Fn(this,e[4]),this.l=jn(e[5]||"",!0),Vn(this,e[6]||"",!0),this.o=jn(e[7]||"")):(this.h=!1,this.i=new Wn(null,this.h))}function On(t){return new Mn(t)}function Pn(t,e,n){t.j=n?jn(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function Fn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Vn(t,e,n){e instanceof Wn?(t.i=e,function(t,e){e&&!t.j&&(Xn(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Yn(this,e),Zn(this,n,t))}),t)),t.j=e}(t.i,t.h)):(n||(e=qn(e,Hn)),t.i=new Wn(e,t.h))}function Un(t,e,n){t.i.set(e,n)}function Bn(t){return Un(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function jn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function qn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,$n),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function $n(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Mn.prototype.toString=function(){var t=[],e=this.j;e&&t.push(qn(e,zn,!0),":");var n=this.g;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(qn(e,zn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.g&&"/"!=n.charAt(0)&&t.push("/"),t.push(qn(n,"/"==n.charAt(0)?Gn:Kn,!0))),(n=this.i.toString())&&t.push("?",n),(n=this.o)&&t.push("#",qn(n,Qn)),t.join("")};var zn=/[#\/\?@]/g,Kn=/[#\?:]/g,Gn=/[#\?]/g,Hn=/[#\?@]/g,Qn=/#/g;function Wn(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Xn(t){t.g||(t.g=new Map,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var s=t[n].indexOf("="),r=null;if(0<=s){var i=t[n].substring(0,s);r=t[n].substring(s+1)}else i=t[n];e(i,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Yn(t,e){Xn(t),e=ts(t,e),t.g.has(e)&&(t.i=null,t.h-=t.g.get(e).length,t.g.delete(e))}function Jn(t,e){return Xn(t),e=ts(t,e),t.g.has(e)}function Zn(t,e,n){Yn(t,e),0<n.length&&(t.i=null,t.g.set(ts(t,e),Rt(n)),t.h+=n.length)}function ts(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}function es(t){this.l=t||ns,t=Et.PerformanceNavigationTiming?0<(t=Et.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Et.g&&Et.g.Ka&&Et.g.Ka()&&Et.g.Ka().ec),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(mt=Wn.prototype).add=function(t,e){Xn(this),this.i=null,t=ts(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},mt.forEach=function(t,e){Xn(this),this.g.forEach((function(n,s){n.forEach((function(n){t.call(e,n,s,this)}),this)}),this)},mt.ta=function(){Xn(this);const t=Array.from(this.g.values()),e=Array.from(this.g.keys()),n=[];for(let s=0;s<e.length;s++){const r=t[s];for(let t=0;t<r.length;t++)n.push(e[s])}return n},mt.Z=function(t){Xn(this);let e=[];if("string"==typeof t)Jn(this,t)&&(e=e.concat(this.g.get(ts(this,t))));else{t=Array.from(this.g.values());for(let n=0;n<t.length;n++)e=e.concat(t[n])}return e},mt.set=function(t,e){return Xn(this),this.i=null,Jn(this,t=ts(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},mt.get=function(t,e){return t&&0<(t=this.Z(t)).length?String(t[0]):e},mt.toString=function(){if(this.i)return this.i;if(!this.g)return"";const t=[],e=Array.from(this.g.keys());for(var n=0;n<e.length;n++){var s=e[n];const i=encodeURIComponent(String(s)),o=this.Z(s);for(s=0;s<o.length;s++){var r=i;""!==o[s]&&(r+="="+encodeURIComponent(String(o[s]))),t.push(r)}}return this.i=t.join("&")};var ns=10;function ss(t){return!!t.h||!!t.g&&t.g.size>=t.j}function rs(t){return t.h?1:t.g?t.g.size:0}function is(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function os(t,e){t.g?t.g.add(e):t.h=e}function as(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function cs(t){if(null!=t.h)return t.i.concat(t.h.F);if(null!=t.g&&0!==t.g.size){let e=t.i;for(const n of t.g.values())e=e.concat(n.F);return e}return Rt(t.i)}es.prototype.cancel=function(){if(this.i=cs(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const t of this.g.values())t.cancel();this.g.clear()}};var us=class{stringify(t){return Et.JSON.stringify(t,void 0)}parse(t){return Et.JSON.parse(t,void 0)}};function hs(){this.g=new us}function ls(t,e,n){const s=n||"";try{Rn(t,(function(t,n){let r=t;Tt(t)&&(r=De(t)),e.push(s+n+"="+encodeURIComponent(r))}))}catch(t){throw e.push(s+"type="+encodeURIComponent("_badmap")),t}}function ds(t,e,n,s,r){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,r(s)}catch(t){}}function fs(t){this.l=t.fc||null,this.j=t.ob||!1}function gs(t,e){Se.call(this),this.F=t,this.u=e,this.m=void 0,this.readyState=ps,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}kt(fs,cn),fs.prototype.g=function(){return new gs(this.l,this.j)},fs.prototype.i=function(t){return function(){return t}}({}),kt(gs,Se);var ps=0;function ms(t){t.j.read().then(t.Xa.bind(t)).catch(t.ka.bind(t))}function ys(t){t.readyState=4,t.l=null,t.j=null,t.A=null,vs(t)}function vs(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(mt=gs.prototype).open=function(t,e){if(this.readyState!=ps)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,vs(this)},mt.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.F||Et).fetch(new Request(this.B,e)).then(this.$a.bind(this),this.ka.bind(this))},mt.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted.").catch((()=>{})),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,ys(this)),this.readyState=ps},mt.$a=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,vs(this)),this.g&&(this.readyState=3,vs(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ya.bind(this),this.ka.bind(this));else if(void 0!==Et.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;ms(this)}else t.text().then(this.Za.bind(this),this.ka.bind(this))},mt.Xa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?ys(this):vs(this),3==this.readyState&&ms(this)}},mt.Za=function(t){this.g&&(this.response=this.responseText=t,ys(this))},mt.Ya=function(t){this.g&&(this.response=t,ys(this))},mt.ka=function(){this.g&&ys(this)},mt.setRequestHeader=function(t,e){this.v.append(t,e)},mt.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},mt.getAllResponseHeaders=function(){if(!this.h)return"";const t=[],e=this.h.entries();for(var n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(gs.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var ws=Et.JSON.parse;function Es(t){Se.call(this),this.headers=new Map,this.u=t||null,this.h=!1,this.C=this.g=null,this.I="",this.m=0,this.j="",this.l=this.G=this.v=this.F=!1,this.B=0,this.A=null,this.K=bs,this.L=this.M=!1}kt(Es,Se);var bs="",Ts=/^https?$/i,Cs=["POST","PUT"];function Is(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Ss(t),_s(t)}function Ss(t){t.F||(t.F=!0,Ae(t,"complete"),Ae(t,"error"))}function As(t){if(t.h&&void 0!==wt&&(!t.C[1]||4!=ks(t)||2!=t.da()))if(t.v&&4==ks(t))je(t.La,0,t);else if(Ae(t,"readystatechange"),4==ks(t)){t.h=!1;try{const o=t.da();t:switch(o){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}var n;if(!(n=e)){var s;if(s=0===o){var r=String(t.I).match(Ln)[1]||null;!r&&Et.self&&Et.self.location&&(r=Et.self.location.protocol.slice(0,-1)),s=!Ts.test(r?r.toLowerCase():"")}n=s}if(n)Ae(t,"complete"),Ae(t,"success");else{t.m=6;try{var i=2<ks(t)?t.g.statusText:""}catch(t){i=""}t.j=i+" ["+t.da()+"]",Ss(t)}}finally{_s(t)}}}function _s(t,e){if(t.g){Ds(t);const n=t.g,s=t.C[0]?()=>{}:null;t.g=null,t.C=null,e||Ae(t,"ready");try{n.onreadystatechange=s}catch(t){}}}function Ds(t){t.g&&t.L&&(t.g.ontimeout=null),t.A&&(Et.clearTimeout(t.A),t.A=null)}function ks(t){return t.g?t.g.readyState:0}function Ns(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.K){case bs:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function xs(t){let e="";return oe(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}function Rs(t,e,n){t:{for(s in n){var s=!1;break t}s=!0}s||(n=xs(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Un(t,e,n))}function Ls(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Ms(t){this.Ga=0,this.j=[],this.l=new Qe,this.pa=this.wa=this.I=this.Y=this.g=this.Da=this.F=this.na=this.o=this.U=this.s=null,this.fb=this.W=0,this.cb=Ls("failFast",!1,t),this.G=this.v=this.u=this.m=this.h=null,this.aa=!0,this.Fa=this.V=-1,this.ba=this.A=this.C=0,this.ab=Ls("baseRetryDelayMs",5e3,t),this.hb=Ls("retryDelaySeedMs",1e4,t),this.eb=Ls("forwardChannelMaxRetries",2,t),this.xa=Ls("forwardChannelRequestTimeoutMs",2e4,t),this.va=t&&t.xmlHttpFactory||void 0,this.Ha=t&&t.dc||!1,this.L=void 0,this.J=t&&t.supportsCrossDomainXhr||!1,this.K="",this.i=new es(t&&t.concurrentRequestLimit),this.Ja=new hs,this.P=t&&t.fastHandshake||!1,this.O=t&&t.encodeInitMessageHeaders||!1,this.P&&this.O&&(this.O=!1),this.bb=t&&t.bc||!1,t&&t.Ea&&this.l.Ea(),t&&t.forceLongPolling&&(this.aa=!1),this.ca=!this.P&&this.aa&&t&&t.detectBufferingProxy||!1,this.qa=void 0,t&&t.longPollingTimeout&&0<t.longPollingTimeout&&(this.qa=t.longPollingTimeout),this.oa=void 0,this.S=0,this.M=!1,this.ma=this.B=null}function Os(t){if(Fs(t),3==t.H){var e=t.W++,n=On(t.I);if(Un(n,"SID",t.K),Un(n,"RID",e),Un(n,"TYPE","terminate"),Bs(t,n),(e=new mn(t,t.l,e)).L=2,e.v=Bn(On(n)),n=!1,Et.navigator&&Et.navigator.sendBeacon)try{n=Et.navigator.sendBeacon(e.v.toString(),"")}catch(t){}!n&&Et.Image&&((new Image).src=e.v,n=!0),n||(e.g=Js(e.l,null),e.g.ha(e.v)),e.G=Date.now(),An(e)}Xs(t)}function Ps(t){t.g&&(zs(t),t.g.cancel(),t.g=null)}function Fs(t){Ps(t),t.u&&(Et.clearTimeout(t.u),t.u=null),Gs(t),t.i.cancel(),t.m&&("number"==typeof t.m&&Et.clearTimeout(t.m),t.m=null)}function Vs(t){if(!ss(t.i)&&!t.m){t.m=!0;var e=t.Na;Me||Fe(),Oe||(Me(),Oe=!0),Pe.add(e,t),t.C=0}}function Us(t,e){var n;n=e?e.m:t.W++;const s=On(t.I);Un(s,"SID",t.K),Un(s,"RID",n),Un(s,"AID",t.V),Bs(t,s),t.o&&t.s&&Rs(s,t.o,t.s),n=new mn(t,t.l,n,t.C+1),null===t.o&&(n.I=t.s),e&&(t.j=e.F.concat(t.j)),e=js(t,n,1e3),n.setTimeout(Math.round(.5*t.xa)+Math.round(.5*t.xa*Math.random())),os(t.i,n),bn(n,s,e)}function Bs(t,e){t.na&&oe(t.na,(function(t,n){Un(e,n,t)})),t.h&&Rn({},(function(t,n){Un(e,n,t)}))}function js(t,e,n){n=Math.min(t.j.length,n);var s=t.h?_t(t.h.Va,t.h,t):null;t:{var r=t.j;let e=-1;for(;;){const t=["count="+n];-1==e?0<n?(e=r[0].g,t.push("ofs="+e)):e=0:t.push("ofs="+e);let i=!0;for(let o=0;o<n;o++){let n=r[o].g;const a=r[o].map;if(n-=e,0>n)e=Math.max(0,r[o].g-100),i=!1;else try{ls(a,t,"req"+n+"_")}catch(t){s&&s(a)}}if(i){s=t.join("&");break t}}}return t=t.j.splice(0,n),e.F=t,s}function qs(t){if(!t.g&&!t.u){t.ba=1;var e=t.Ma;Me||Fe(),Oe||(Me(),Oe=!0),Pe.add(e,t),t.A=0}}function $s(t){return!(t.g||t.u||3<=t.A||(t.ba++,t.u=rn(_t(t.Ma,t),Qs(t,t.A)),t.A++,0))}function zs(t){null!=t.B&&(Et.clearTimeout(t.B),t.B=null)}function Ks(t){t.g=new mn(t,t.l,"rpc",t.ba),null===t.o&&(t.g.I=t.s),t.g.O=0;var e=On(t.wa);Un(e,"RID","rpc"),Un(e,"SID",t.K),Un(e,"AID",t.V),Un(e,"CI",t.G?"0":"1"),!t.G&&t.qa&&Un(e,"TO",t.qa),Un(e,"TYPE","xmlhttp"),Bs(t,e),t.o&&t.s&&Rs(e,t.o,t.s),t.L&&t.g.setTimeout(t.L);var n=t.g;t=t.pa,n.L=1,n.v=Bn(On(e)),n.s=null,n.S=!0,Tn(n,t)}function Gs(t){null!=t.v&&(Et.clearTimeout(t.v),t.v=null)}function Hs(t,e){var n=null;if(t.g==e){Gs(t),zs(t),t.g=null;var s=2}else{if(!is(t.i,e))return;n=e.F,as(t.i,e),s=1}if(0!=t.H)if(e.i)if(1==s){n=e.s?e.s.length:0,e=Date.now()-e.G;var r=t.C;Ae(s=Je(),new sn(s,n)),Vs(t)}else qs(t);else if(3==(r=e.o)||0==r&&0<e.ca||!(1==s&&function(t,e){return!(rs(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.j=e.F.concat(t.j),0):1==t.H||2==t.H||t.C>=(t.cb?0:t.eb)||(t.m=rn(_t(t.Na,t,e),Qs(t,t.C)),t.C++,0)))}(t,e)||2==s&&$s(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),r){case 1:Ws(t,5);break;case 4:Ws(t,10);break;case 3:Ws(t,6);break;default:Ws(t,2)}}function Qs(t,e){let n=t.ab+Math.floor(Math.random()*t.hb);return t.isActive()||(n*=2),n*e}function Ws(t,e){if(t.l.info("Error code "+e),2==e){var n=null;t.h&&(n=null);var s=_t(t.pb,t);n||(n=new Mn("//www.google.com/images/cleardot.gif"),Et.location&&"http"==Et.location.protocol||Pn(n,"https"),Bn(n)),function(t,e){const n=new Qe;if(Et.Image){const s=new Image;s.onload=Dt(ds,n,s,"TestLoadImage: loaded",!0,e),s.onerror=Dt(ds,n,s,"TestLoadImage: error",!1,e),s.onabort=Dt(ds,n,s,"TestLoadImage: abort",!1,e),s.ontimeout=Dt(ds,n,s,"TestLoadImage: timeout",!1,e),Et.setTimeout((function(){s.ontimeout&&s.ontimeout()}),1e4),s.src=t}else e(!1)}(n.toString(),s)}else nn(2);t.H=0,t.h&&t.h.za(e),Xs(t),Fs(t)}function Xs(t){if(t.H=0,t.ma=[],t.h){const e=cs(t.i);0==e.length&&0==t.j.length||(Lt(t.ma,e),Lt(t.ma,t.j),t.i.i.length=0,Rt(t.j),t.j.length=0),t.h.ya()}}function Ys(t,e,n){var s=n instanceof Mn?On(n):new Mn(n);if(""!=s.g)e&&(s.g=e+"."+s.g),Fn(s,s.m);else{var r=Et.location;s=r.protocol,e=e?e+"."+r.hostname:r.hostname,r=+r.port;var i=new Mn(null);s&&Pn(i,s),e&&(i.g=e),r&&Fn(i,r),n&&(i.l=n),s=i}return n=t.F,e=t.Da,n&&e&&Un(s,n,e),Un(s,"VER",t.ra),Bs(t,s),s}function Js(t,e,n){if(e&&!t.J)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ha&&!t.va?new Es(new fs({ob:!0})):new Es(t.va)).Oa(t.J),e}function Zs(){}function tr(){if(zt&&!(10<=Number(Zt)))throw Error("Environmental error: no available transport.")}function er(t,e){Se.call(this),this.g=new Ms(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.Ca&&(t?t["X-WebChannel-Client-Profile"]=e.Ca:t={"X-WebChannel-Client-Profile":e.Ca}),this.g.U=t,(t=e&&e.cc)&&!Pt(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!Pt(e)&&(this.g.F=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new rr(this)}function nr(t){fn.call(this),t.__headers__&&(this.headers=t.__headers__,this.statusCode=t.__status__,delete t.__headers__,delete t.__status__);var e=t.__sm__;if(e){t:{for(const n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function sr(){gn.call(this),this.status=1}function rr(t){this.g=t}function ir(){this.blockSize=-1,this.blockSize=64,this.g=Array(4),this.m=Array(this.blockSize),this.i=this.h=0,this.reset()}function or(t,e,n){n||(n=0);var s=Array(16);if("string"==typeof e)for(var r=0;16>r;++r)s[r]=e.charCodeAt(n++)|e.charCodeAt(n++)<<8|e.charCodeAt(n++)<<16|e.charCodeAt(n++)<<24;else for(r=0;16>r;++r)s[r]=e[n++]|e[n++]<<8|e[n++]<<16|e[n++]<<24;e=t.g[0],n=t.g[1],r=t.g[2];var i=t.g[3],o=e+(i^n&(r^i))+s[0]+3614090360&4294967295;o=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=n+(o<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[1]+3905402710&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[2]+606105819&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[3]+3250441966&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[4]+4118548399&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[5]+1200080426&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[6]+2821735955&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[7]+4249261313&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[8]+1770035416&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[9]+2336552879&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[10]+4294925233&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[11]+2304563134&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[12]+1804603682&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[13]+4254626195&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[14]+2792965006&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[15]+1236535329&4294967295)<<22&4294967295|o>>>10))+((o=e+(r^i&(n^r))+s[1]+4129170786&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[6]+3225465664&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[11]+643717713&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[0]+3921069994&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[5]+3593408605&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[10]+38016083&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[15]+3634488961&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[4]+3889429448&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[9]+568446438&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[14]+3275163606&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[3]+4107603335&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[8]+1163531501&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[13]+2850285829&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[2]+4243563512&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[7]+1735328473&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[12]+2368359562&4294967295)<<20&4294967295|o>>>12))+((o=e+(n^r^i)+s[5]+4294588738&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[8]+2272392833&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[11]+1839030562&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[14]+4259657740&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[1]+2763975236&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[4]+1272893353&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[7]+4139469664&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[10]+3200236656&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[13]+681279174&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[0]+3936430074&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[3]+3572445317&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[6]+76029189&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[9]+3654602809&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[12]+3873151461&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[15]+530742520&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[2]+3299628645&4294967295)<<23&4294967295|o>>>9))+((o=e+(r^(n|~i))+s[0]+4096336452&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[7]+1126891415&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[14]+2878612391&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[5]+4237533241&4294967295)<<21&4294967295|o>>>11))+((o=e+(r^(n|~i))+s[12]+1700485571&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[3]+2399980690&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[10]+4293915773&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[1]+2240044497&4294967295)<<21&4294967295|o>>>11))+((o=e+(r^(n|~i))+s[8]+1873313359&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[15]+4264355552&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[6]+2734768916&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[13]+1309151649&4294967295)<<21&4294967295|o>>>11))+((i=(e=n+((o=e+(r^(n|~i))+s[4]+4149444226&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[11]+3174756917&4294967295)<<10&4294967295|o>>>22))^((r=i+((o=r+(e^(i|~n))+s[2]+718787259&4294967295)<<15&4294967295|o>>>17))|~e))+s[9]+3951481745&4294967295,t.g[0]=t.g[0]+e&4294967295,t.g[1]=t.g[1]+(r+(o<<21&4294967295|o>>>11))&4294967295,t.g[2]=t.g[2]+r&4294967295,t.g[3]=t.g[3]+i&4294967295}function ar(t,e){this.h=e;for(var n=[],s=!0,r=t.length-1;0<=r;r--){var i=0|t[r];s&&i==e||(n[r]=i,s=!1)}this.g=n}(mt=Es.prototype).Oa=function(t){this.M=t},mt.ha=function(t,e,n,s){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.I+"; newUri="+t);e=e?e.toUpperCase():"GET",this.I=t,this.j="",this.m=0,this.F=!1,this.h=!0,this.g=this.u?this.u.g():ln.g(),this.C=this.u?un(this.u):un(ln),this.g.onreadystatechange=_t(this.La,this);try{this.G=!0,this.g.open(e,String(t),!0),this.G=!1}catch(t){return void Is(this,t)}if(t=n||"",n=new Map(this.headers),s)if(Object.getPrototypeOf(s)===Object.prototype)for(var r in s)n.set(r,s[r]);else{if("function"!=typeof s.keys||"function"!=typeof s.get)throw Error("Unknown input type for opt_headers: "+String(s));for(const t of s.keys())n.set(t,s.get(t))}s=Array.from(n.keys()).find((t=>"content-type"==t.toLowerCase())),r=Et.FormData&&t instanceof Et.FormData,!(0<=xt(Cs,e))||s||r||n.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");for(const[t,e]of n)this.g.setRequestHeader(t,e);this.K&&(this.g.responseType=this.K),"withCredentials"in this.g&&this.g.withCredentials!==this.M&&(this.g.withCredentials=this.M);try{Ds(this),0<this.B&&((this.L=function(t){return zt&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=_t(this.ua,this)):this.A=je(this.ua,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){Is(this,t)}},mt.ua=function(){void 0!==wt&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Ae(this,"timeout"),this.abort(8))},mt.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,Ae(this,"complete"),Ae(this,"abort"),_s(this))},mt.N=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),_s(this,!0)),Es.$.N.call(this)},mt.La=function(){this.s||(this.G||this.v||this.l?As(this):this.kb())},mt.kb=function(){As(this)},mt.isActive=function(){return!!this.g},mt.da=function(){try{return 2<ks(this)?this.g.status:-1}catch(t){return-1}},mt.ja=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},mt.Wa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ws(e)}},mt.Ia=function(){return this.m},mt.Sa=function(){return"string"==typeof this.j?this.j:String(this.j)},(mt=Ms.prototype).ra=8,mt.H=1,mt.Na=function(t){if(this.m)if(this.m=null,1==this.H){if(!t){this.W=Math.floor(1e5*Math.random()),t=this.W++;const r=new mn(this,this.l,t);let i=this.s;if(this.U&&(i?(i=ae(i),ue(i,this.U)):i=this.U),null!==this.o||this.O||(r.I=i,i=null),this.P)t:{for(var e=0,n=0;n<this.j.length;n++){var s=this.j[n];if(void 0===(s="__data__"in s.map&&"string"==typeof(s=s.map.__data__)?s.length:void 0))break;if(4096<(e+=s)){e=n;break t}if(4096===e||n===this.j.length-1){e=n+1;break t}}e=1e3}else e=1e3;e=js(this,r,e),Un(n=On(this.I),"RID",t),Un(n,"CVER",22),this.F&&Un(n,"X-HTTP-Session-Id",this.F),Bs(this,n),i&&(this.O?e="headers="+encodeURIComponent(String(xs(i)))+"&"+e:this.o&&Rs(n,this.o,i)),os(this.i,r),this.bb&&Un(n,"TYPE","init"),this.P?(Un(n,"$req",e),Un(n,"SID","null"),r.aa=!0,bn(r,n,null)):bn(r,n,e),this.H=2}}else 3==this.H&&(t?Us(this,t):0==this.j.length||ss(this.i)||Us(this))},mt.Ma=function(){if(this.u=null,Ks(this),this.ca&&!(this.M||null==this.g||0>=this.S)){var t=2*this.S;this.l.info("BP detection timer enabled: "+t),this.B=rn(_t(this.jb,this),t)}},mt.jb=function(){this.B&&(this.B=null,this.l.info("BP detection timeout reached."),this.l.info("Buffering proxy detected and switch to long-polling!"),this.G=!1,this.M=!0,nn(10),Ps(this),Ks(this))},mt.ib=function(){null!=this.v&&(this.v=null,Ps(this),$s(this),nn(19))},mt.pb=function(t){t?(this.l.info("Successfully pinged google.com"),nn(2)):(this.l.info("Failed to ping google.com"),nn(1))},mt.isActive=function(){return!!this.h&&this.h.isActive(this)},(mt=Zs.prototype).Ba=function(){},mt.Aa=function(){},mt.za=function(){},mt.ya=function(){},mt.isActive=function(){return!0},mt.Va=function(){},tr.prototype.g=function(t,e){return new er(t,e)},kt(er,Se),er.prototype.m=function(){this.g.h=this.j,this.A&&(this.g.J=!0);var t=this.g,e=this.l,n=this.h||void 0;nn(0),t.Y=e,t.na=n||{},t.G=t.aa,t.I=Ys(t,null,t.Y),Vs(t)},er.prototype.close=function(){Os(this.g)},er.prototype.u=function(t){var e=this.g;if("string"==typeof t){var n={};n.__data__=t,t=n}else this.v&&((n={}).__data__=De(t),t=n);e.j.push(new class{constructor(t,e){this.g=t,this.map=e}}(e.fb++,t)),3==e.H&&Vs(e)},er.prototype.N=function(){this.g.h=null,delete this.j,Os(this.g),delete this.g,er.$.N.call(this)},kt(nr,fn),kt(sr,gn),kt(rr,Zs),rr.prototype.Ba=function(){Ae(this.g,"a")},rr.prototype.Aa=function(t){Ae(this.g,new nr(t))},rr.prototype.za=function(t){Ae(this.g,new sr)},rr.prototype.ya=function(){Ae(this.g,"b")},kt(ir,(function(){this.blockSize=-1})),ir.prototype.reset=function(){this.g[0]=1732584193,this.g[1]=4023233417,this.g[2]=2562383102,this.g[3]=271733878,this.i=this.h=0},ir.prototype.j=function(t,e){void 0===e&&(e=t.length);for(var n=e-this.blockSize,s=this.m,r=this.h,i=0;i<e;){if(0==r)for(;i<=n;)or(this,t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(s[r++]=t.charCodeAt(i++),r==this.blockSize){or(this,s),r=0;break}}else for(;i<e;)if(s[r++]=t[i++],r==this.blockSize){or(this,s),r=0;break}}this.h=r,this.i+=e},ir.prototype.l=function(){var t=Array((56>this.h?this.blockSize:2*this.blockSize)-this.h);t[0]=128;for(var e=1;e<t.length-8;++e)t[e]=0;var n=8*this.i;for(e=t.length-8;e<t.length;++e)t[e]=255&n,n/=256;for(this.j(t),t=Array(16),e=n=0;4>e;++e)for(var s=0;32>s;s+=8)t[n++]=this.g[e]>>>s&255;return t};var cr={};function ur(t){return-128<=t&&128>t?function(t,e){var n=cr;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=function(t){return new ar([0|t],0>t?-1:0)}(t)}(t):new ar([0|t],0>t?-1:0)}function hr(t){if(isNaN(t)||!isFinite(t))return dr;if(0>t)return yr(hr(-t));for(var e=[],n=1,s=0;t>=n;s++)e[s]=t/n|0,n*=lr;return new ar(e,0)}var lr=4294967296,dr=ur(0),fr=ur(1),gr=ur(16777216);function pr(t){if(0!=t.h)return!1;for(var e=0;e<t.g.length;e++)if(0!=t.g[e])return!1;return!0}function mr(t){return-1==t.h}function yr(t){for(var e=t.g.length,n=[],s=0;s<e;s++)n[s]=~t.g[s];return new ar(n,~t.h).add(fr)}function vr(t,e){return t.add(yr(e))}function wr(t,e){for(;(65535&t[e])!=t[e];)t[e+1]+=t[e]>>>16,t[e]&=65535,e++}function Er(t,e){this.g=t,this.h=e}function br(t,e){if(pr(e))throw Error("division by zero");if(pr(t))return new Er(dr,dr);if(mr(t))return e=br(yr(t),e),new Er(yr(e.g),yr(e.h));if(mr(e))return e=br(t,yr(e)),new Er(yr(e.g),e.h);if(30<t.g.length){if(mr(t)||mr(e))throw Error("slowDivide_ only works with positive integers.");for(var n=fr,s=e;0>=s.X(t);)n=Tr(n),s=Tr(s);var r=Cr(n,1),i=Cr(s,1);for(s=Cr(s,2),n=Cr(n,2);!pr(s);){var o=i.add(s);0>=o.X(t)&&(r=r.add(n),i=o),s=Cr(s,1),n=Cr(n,1)}return e=vr(t,r.R(e)),new Er(r,e)}for(r=dr;0<=t.X(e);){for(n=Math.max(1,Math.floor(t.ea()/e.ea())),s=48>=(s=Math.ceil(Math.log(n)/Math.LN2))?1:Math.pow(2,s-48),o=(i=hr(n)).R(e);mr(o)||0<o.X(t);)o=(i=hr(n-=s)).R(e);pr(i)&&(i=fr),r=r.add(i),t=vr(t,o)}return new Er(r,t)}function Tr(t){for(var e=t.g.length+1,n=[],s=0;s<e;s++)n[s]=t.D(s)<<1|t.D(s-1)>>>31;return new ar(n,t.h)}function Cr(t,e){var n=e>>5;e%=32;for(var s=t.g.length-n,r=[],i=0;i<s;i++)r[i]=0<e?t.D(i+n)>>>e|t.D(i+n+1)<<32-e:t.D(i+n);return new ar(r,t.h)}(mt=ar.prototype).ea=function(){if(mr(this))return-yr(this).ea();for(var t=0,e=1,n=0;n<this.g.length;n++){var s=this.D(n);t+=(0<=s?s:lr+s)*e,e*=lr}return t},mt.toString=function(t){if(2>(t=t||10)||36<t)throw Error("radix out of range: "+t);if(pr(this))return"0";if(mr(this))return"-"+yr(this).toString(t);for(var e=hr(Math.pow(t,6)),n=this,s="";;){var r=br(n,e).g,i=((0<(n=vr(n,r.R(e))).g.length?n.g[0]:n.h)>>>0).toString(t);if(pr(n=r))return i+s;for(;6>i.length;)i="0"+i;s=i+s}},mt.D=function(t){return 0>t?0:t<this.g.length?this.g[t]:this.h},mt.X=function(t){return mr(t=vr(this,t))?-1:pr(t)?0:1},mt.abs=function(){return mr(this)?yr(this):this},mt.add=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0,r=0;r<=e;r++){var i=s+(65535&this.D(r))+(65535&t.D(r)),o=(i>>>16)+(this.D(r)>>>16)+(t.D(r)>>>16);s=o>>>16,i&=65535,o&=65535,n[r]=o<<16|i}return new ar(n,-2147483648&n[n.length-1]?-1:0)},mt.R=function(t){if(pr(this)||pr(t))return dr;if(mr(this))return mr(t)?yr(this).R(yr(t)):yr(yr(this).R(t));if(mr(t))return yr(this.R(yr(t)));if(0>this.X(gr)&&0>t.X(gr))return hr(this.ea()*t.ea());for(var e=this.g.length+t.g.length,n=[],s=0;s<2*e;s++)n[s]=0;for(s=0;s<this.g.length;s++)for(var r=0;r<t.g.length;r++){var i=this.D(s)>>>16,o=65535&this.D(s),a=t.D(r)>>>16,c=65535&t.D(r);n[2*s+2*r]+=o*c,wr(n,2*s+2*r),n[2*s+2*r+1]+=i*c,wr(n,2*s+2*r+1),n[2*s+2*r+1]+=o*a,wr(n,2*s+2*r+1),n[2*s+2*r+2]+=i*a,wr(n,2*s+2*r+2)}for(s=0;s<e;s++)n[s]=n[2*s+1]<<16|n[2*s];for(s=e;s<2*e;s++)n[s]=0;return new ar(n,0)},mt.gb=function(t){return br(this,t).h},mt.and=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)&t.D(s);return new ar(n,this.h&t.h)},mt.or=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)|t.D(s);return new ar(n,this.h|t.h)},mt.xor=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)^t.D(s);return new ar(n,this.h^t.h)},tr.prototype.createWebChannel=tr.prototype.g,er.prototype.send=er.prototype.u,er.prototype.open=er.prototype.m,er.prototype.close=er.prototype.close,on.NO_ERROR=0,on.TIMEOUT=8,on.HTTP_ERROR=6,an.COMPLETE="complete",hn.EventType=dn,dn.OPEN="a",dn.CLOSE="b",dn.ERROR="c",dn.MESSAGE="d",Se.prototype.listen=Se.prototype.O,Es.prototype.listenOnce=Es.prototype.P,Es.prototype.getLastError=Es.prototype.Sa,Es.prototype.getLastErrorCode=Es.prototype.Ia,Es.prototype.getStatus=Es.prototype.da,Es.prototype.getResponseJson=Es.prototype.Wa,Es.prototype.getResponseText=Es.prototype.ja,Es.prototype.send=Es.prototype.ha,Es.prototype.setWithCredentials=Es.prototype.Oa,ir.prototype.digest=ir.prototype.l,ir.prototype.reset=ir.prototype.reset,ir.prototype.update=ir.prototype.j,ar.prototype.add=ar.prototype.add,ar.prototype.multiply=ar.prototype.R,ar.prototype.modulo=ar.prototype.gb,ar.prototype.compare=ar.prototype.X,ar.prototype.toNumber=ar.prototype.ea,ar.prototype.toString=ar.prototype.toString,ar.prototype.getBits=ar.prototype.D,ar.fromNumber=hr,ar.fromString=function t(e,n){if(0==e.length)throw Error("number format error: empty string");if(2>(n=n||10)||36<n)throw Error("radix out of range: "+n);if("-"==e.charAt(0))return yr(t(e.substring(1),n));if(0<=e.indexOf("-"))throw Error('number format error: interior "-" character');for(var s=hr(Math.pow(n,8)),r=dr,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),a=parseInt(e.substring(i,i+o),n);8>o?(o=hr(Math.pow(n,o)),r=r.R(o).add(hr(a))):r=(r=r.R(s)).add(hr(a))}return r};var Ir=vt.createWebChannelTransport=function(){return new tr},Sr=vt.getStatEventTarget=function(){return Je()},Ar=vt.ErrorCode=on,_r=vt.EventType=an,Dr=vt.Event=Xe,kr=vt.Stat={xb:0,Ab:1,Bb:2,Ub:3,Zb:4,Wb:5,Xb:6,Vb:7,Tb:8,Yb:9,PROXY:10,NOPROXY:11,Rb:12,Nb:13,Ob:14,Mb:15,Pb:16,Qb:17,tb:18,sb:19,ub:20},Nr=vt.FetchXmlHttpFactory=fs,xr=vt.WebChannel=hn,Rr=vt.XhrIo=Es,Lr=vt.Md5=ir,Mr=vt.Integer=ar;const Or="@firebase/firestore";class Pr{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}Pr.UNAUTHENTICATED=new Pr(null),Pr.GOOGLE_CREDENTIALS=new Pr("google-credentials-uid"),Pr.FIRST_PARTY=new Pr("first-party-uid"),Pr.MOCK_USER=new Pr("mock-user");let Fr="9.22.2";const Vr=new _("@firebase/firestore");function Ur(){return Vr.logLevel}function Br(t,...e){if(Vr.logLevel<=b.DEBUG){const n=e.map($r);Vr.debug(`Firestore (${Fr}): ${t}`,...n)}}function jr(t,...e){if(Vr.logLevel<=b.ERROR){const n=e.map($r);Vr.error(`Firestore (${Fr}): ${t}`,...n)}}function qr(t,...e){if(Vr.logLevel<=b.WARN){const n=e.map($r);Vr.warn(`Firestore (${Fr}): ${t}`,...n)}}function $r(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function zr(t="Unexpected state"){const e=`FIRESTORE (${Fr}) INTERNAL ASSERTION FAILED: `+t;throw jr(e),new Error(e)}function Kr(t,e){t||zr()}function Gr(t,e){return t}const Hr={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class Qr extends h{constructor(t,e){super(t,e),this.code=t,this.message=e,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Wr{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class Xr{constructor(t,e){this.user=e,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${t}`)}}class Yr{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(Pr.UNAUTHENTICATED)))}shutdown(){}}class Jr{constructor(t){this.token=t,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(t,e){this.changeListener=e,t.enqueueRetryable((()=>e(this.token.user)))}shutdown(){this.changeListener=null}}class Zr{constructor(t){this.t=t,this.currentUser=Pr.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const s=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let r=new Wr;this.o=()=>{this.i++,this.currentUser=this.u(),r.resolve(),r=new Wr,t.enqueueRetryable((()=>s(this.currentUser)))};const i=()=>{const e=r;t.enqueueRetryable((async()=>{await e.promise,await s(this.currentUser)}))},o=t=>{Br("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),i()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(Br("FirebaseAuthCredentialsProvider","Auth not yet detected"),r.resolve(),r=new Wr)}}),0),i()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(Br("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(Kr("string"==typeof e.accessToken),new Xr(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return Kr(null===t||"string"==typeof t),new Pr(t)}}class ti{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=Pr.FIRST_PARTY,this.g=new Map}p(){return this.m?this.m():null}get headers(){this.g.set("X-Goog-AuthUser",this.h);const t=this.p();return t&&this.g.set("Authorization",t),this.l&&this.g.set("X-Goog-Iam-Authorization-Token",this.l),this.g}}class ei{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new ti(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(Pr.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class ni{constructor(t){this.value=t,this.type="AppCheck",this.headers=new Map,t&&t.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class si{constructor(t){this.I=t,this.forceRefresh=!1,this.appCheck=null,this.T=null}start(t,e){const n=t=>{null!=t.error&&Br("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`);const n=t.token!==this.T;return this.T=t.token,Br("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?e(t.token):Promise.resolve()};this.o=e=>{t.enqueueRetryable((()=>n(e)))};const s=t=>{Br("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=t,this.appCheck.addTokenListener(this.o)};this.I.onInit((t=>s(t))),setTimeout((()=>{if(!this.appCheck){const t=this.I.getImmediate({optional:!0});t?s(t):Br("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const t=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(t).then((t=>t?(Kr("string"==typeof t.token),this.T=t.token,new ni(t.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function ri(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}class ii{static A(){const t=62*Math.floor(256/62);let e="";for(;e.length<20;){const n=ri(40);for(let s=0;s<n.length;++s)e.length<20&&n[s]<t&&(e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[s]%62))}return e}}function oi(t,e){return t<e?-1:t>e?1:0}function ai(t,e,n){return t.length===e.length&&t.every(((t,s)=>n(t,e[s])))}class ci{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return ci.fromMillis(Date.now())}static fromDate(t){return ci.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new ci(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?oi(this.nanoseconds,t.nanoseconds):oi(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class ui{constructor(t){this.timestamp=t}static fromTimestamp(t){return new ui(t)}static min(){return new ui(new ci(0,0))}static max(){return new ui(new ci(253402300799,999999999))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class hi{constructor(t,e,n){void 0===e?e=0:e>t.length&&zr(),void 0===n?n=t.length-e:n>t.length-e&&zr(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===hi.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof hi?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let s=0;s<n;s++){const n=t.get(s),r=e.get(s);if(n<r)return-1;if(n>r)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class li extends hi{construct(t,e,n){return new li(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new Qr(Hr.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new li(e)}static emptyPath(){return new li([])}}const di=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class fi extends hi{construct(t,e,n){return new fi(t,e,n)}static isValidIdentifier(t){return di.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),fi.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new fi(["__name__"])}static fromServerFormat(t){const e=[];let n="",s=0;const r=()=>{if(0===n.length)throw new Qr(Hr.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let i=!1;for(;s<t.length;){const e=t[s];if("\\"===e){if(s+1===t.length)throw new Qr(Hr.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[s+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new Qr(Hr.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,s+=2}else"`"===e?(i=!i,s++):"."!==e||i?(n+=e,s++):(r(),s++)}if(r(),i)throw new Qr(Hr.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new fi(e)}static emptyPath(){return new fi([])}}class gi{constructor(t){this.path=t}static fromPath(t){return new gi(li.fromString(t))}static fromName(t){return new gi(li.fromString(t).popFirst(5))}static empty(){return new gi(li.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(t){return null!==t&&0===li.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return li.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new gi(new li(t.slice()))}}function pi(t){return new mi(t.readTime,t.key,-1)}class mi{constructor(t,e,n){this.readTime=t,this.documentKey=e,this.largestBatchId=n}static min(){return new mi(ui.min(),gi.empty(),-1)}static max(){return new mi(ui.max(),gi.empty(),-1)}}function yi(t,e){let n=t.readTime.compareTo(e.readTime);return 0!==n?n:(n=gi.comparator(t.documentKey,e.documentKey),0!==n?n:oi(t.largestBatchId,e.largestBatchId))}const vi="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class wi{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}async function Ei(t){if(t.code!==Hr.FAILED_PRECONDITION||t.message!==vi)throw t;Br("LocalStore","Unexpectedly lost primary lease")}class bi{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&zr(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new bi(((n,s)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,s)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,s)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof bi?e:bi.resolve(e)}catch(t){return bi.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):bi.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):bi.reject(e)}static resolve(t){return new bi(((e,n)=>{e(t)}))}static reject(t){return new bi(((e,n)=>{n(t)}))}static waitFor(t){return new bi(((e,n)=>{let s=0,r=0,i=!1;t.forEach((t=>{++s,t.next((()=>{++r,i&&r===s&&e()}),(t=>n(t)))})),i=!0,r===s&&e()}))}static or(t){let e=bi.resolve(!1);for(const n of t)e=e.next((t=>t?bi.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,s)=>{n.push(e.call(this,t,s))})),this.waitFor(n)}static mapArray(t,e){return new bi(((n,s)=>{const r=t.length,i=new Array(r);let o=0;for(let a=0;a<r;a++){const c=a;e(t[c]).next((t=>{i[c]=t,++o,o===r&&n(i)}),(t=>s(t)))}}))}static doWhile(t,e){return new bi(((n,s)=>{const r=()=>{!0===t()?e().next((()=>{r()}),s):n()};r()}))}}function Ti(t){return"IndexedDbTransactionError"===t.name}class Ci{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.ot(t),this.ut=t=>e.writeSequenceNumber(t))}ot(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.ut&&this.ut(t),t}}function Ii(t){return null==t}function Si(t){return 0===t&&1/t==-1/0}Ci.ct=-1;function Ai(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function _i(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Di(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class ki{constructor(t,e){this.comparator=t,this.root=e||xi.EMPTY}insert(t,e){return new ki(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,xi.BLACK,null,null))}remove(t){return new ki(this.comparator,this.root.remove(t,this.comparator).copy(null,null,xi.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const s=this.comparator(t,n.key);if(0===s)return e+n.left.size;s<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new Ni(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new Ni(this.root,t,this.comparator,!1)}getReverseIterator(){return new Ni(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new Ni(this.root,t,this.comparator,!0)}}class Ni{constructor(t,e,n,s){this.isReverse=s,this.nodeStack=[];let r=1;for(;!t.isEmpty();)if(r=e?n(t.key,e):1,e&&s&&(r*=-1),r<0)t=this.isReverse?t.left:t.right;else{if(0===r){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class xi{constructor(t,e,n,s,r){this.key=t,this.value=e,this.color=null!=n?n:xi.RED,this.left=null!=s?s:xi.EMPTY,this.right=null!=r?r:xi.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,s,r){return new xi(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=r?r:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let s=this;const r=n(t,s.key);return s=r<0?s.copy(null,null,null,s.left.insert(t,e,n),null):0===r?s.copy(null,e,null,null,null):s.copy(null,null,null,null,s.right.insert(t,e,n)),s.fixUp()}removeMin(){if(this.left.isEmpty())return xi.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,s=this;if(e(t,s.key)<0)s.left.isEmpty()||s.left.isRed()||s.left.left.isRed()||(s=s.moveRedLeft()),s=s.copy(null,null,null,s.left.remove(t,e),null);else{if(s.left.isRed()&&(s=s.rotateRight()),s.right.isEmpty()||s.right.isRed()||s.right.left.isRed()||(s=s.moveRedRight()),0===e(t,s.key)){if(s.right.isEmpty())return xi.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.removeMin())}s=s.copy(null,null,null,null,s.right.remove(t,e))}return s.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,xi.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,xi.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw zr();if(this.right.isRed())throw zr();const t=this.left.check();if(t!==this.right.check())throw zr();return t+(this.isRed()?0:1)}}xi.EMPTY=null,xi.RED=!0,xi.BLACK=!1,xi.EMPTY=new class{constructor(){this.size=0}get key(){throw zr()}get value(){throw zr()}get color(){throw zr()}get left(){throw zr()}get right(){throw zr()}copy(t,e,n,s,r){return this}insert(t,e,n){return new xi(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class Ri{constructor(t){this.comparator=t,this.data=new ki(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const s=n.getNext();if(this.comparator(s.key,t[1])>=0)return;e(s.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new Li(this.data.getIterator())}getIteratorFrom(t){return new Li(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof Ri))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(0!==this.comparator(t,s))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new Ri(this.comparator);return e.data=t,e}}class Li{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}class Mi{constructor(t){this.fields=t,t.sort(fi.comparator)}static empty(){return new Mi([])}unionWith(t){let e=new Ri(fi.comparator);for(const t of this.fields)e=e.add(t);for(const n of t)e=e.add(n);return new Mi(e.toArray())}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return ai(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class Oi extends Error{constructor(){super(...arguments),this.name="Base64DecodeError"}}class Pi{constructor(t){this.binaryString=t}static fromBase64String(t){const e=function(t){try{return atob(t)}catch(t){throw"undefined"!=typeof DOMException&&t instanceof DOMException?new Oi("Invalid base64 string: "+t):t}}(t);return new Pi(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new Pi(e)}[Symbol.iterator](){let t=0;return{next:()=>t<this.binaryString.length?{value:this.binaryString.charCodeAt(t++),done:!1}:{value:void 0,done:!0}}}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return oi(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}Pi.EMPTY_BYTE_STRING=new Pi("");const Fi=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Vi(t){if(Kr(!!t),"string"==typeof t){let e=0;const n=Fi.exec(t);if(Kr(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const s=new Date(t);return{seconds:Math.floor(s.getTime()/1e3),nanos:e}}return{seconds:Ui(t.seconds),nanos:Ui(t.nanos)}}function Ui(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Bi(t){return"string"==typeof t?Pi.fromBase64String(t):Pi.fromUint8Array(t)}function ji(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function qi(t){const e=t.mapValue.fields.__previous_value__;return ji(e)?qi(e):e}function $i(t){const e=Vi(t.mapValue.fields.__local_write_time__.timestampValue);return new ci(e.seconds,e.nanos)}class zi{constructor(t,e,n,s,r,i,o,a,c){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=s,this.ssl=r,this.forceLongPolling=i,this.autoDetectLongPolling=o,this.longPollingOptions=a,this.useFetchStreams=c}}class Ki{constructor(t,e){this.projectId=t,this.database=e||"(default)"}static empty(){return new Ki("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof Ki&&t.projectId===this.projectId&&t.database===this.database}}const Gi={mapValue:{fields:{__type__:{stringValue:"__max__"}}}};function Hi(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?ji(t)?4:oo(t)?9007199254740991:10:zr()}function Qi(t,e){if(t===e)return!0;const n=Hi(t);if(n!==Hi(e))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return $i(t).isEqual($i(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=Vi(t.timestampValue),s=Vi(e.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Bi(t.bytesValue).isEqual(Bi(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Ui(t.geoPointValue.latitude)===Ui(e.geoPointValue.latitude)&&Ui(t.geoPointValue.longitude)===Ui(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Ui(t.integerValue)===Ui(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=Ui(t.doubleValue),s=Ui(e.doubleValue);return n===s?Si(n)===Si(s):isNaN(n)&&isNaN(s)}return!1}(t,e);case 9:return ai(t.arrayValue.values||[],e.arrayValue.values||[],Qi);case 10:return function(t,e){const n=t.mapValue.fields||{},s=e.mapValue.fields||{};if(Ai(n)!==Ai(s))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===s[t]||!Qi(n[t],s[t])))return!1;return!0}(t,e);default:return zr()}}function Wi(t,e){return void 0!==(t.values||[]).find((t=>Qi(t,e)))}function Xi(t,e){if(t===e)return 0;const n=Hi(t),s=Hi(e);if(n!==s)return oi(n,s);switch(n){case 0:case 9007199254740991:return 0;case 1:return oi(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=Ui(t.integerValue||t.doubleValue),s=Ui(e.integerValue||e.doubleValue);return n<s?-1:n>s?1:n===s?0:isNaN(n)?isNaN(s)?0:-1:1}(t,e);case 3:return Yi(t.timestampValue,e.timestampValue);case 4:return Yi($i(t),$i(e));case 5:return oi(t.stringValue,e.stringValue);case 6:return function(t,e){const n=Bi(t),s=Bi(e);return n.compareTo(s)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),s=e.split("/");for(let t=0;t<n.length&&t<s.length;t++){const e=oi(n[t],s[t]);if(0!==e)return e}return oi(n.length,s.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=oi(Ui(t.latitude),Ui(e.latitude));return 0!==n?n:oi(Ui(t.longitude),Ui(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],s=e.values||[];for(let t=0;t<n.length&&t<s.length;++t){const e=Xi(n[t],s[t]);if(e)return e}return oi(n.length,s.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){if(t===Gi.mapValue&&e===Gi.mapValue)return 0;if(t===Gi.mapValue)return 1;if(e===Gi.mapValue)return-1;const n=t.fields||{},s=Object.keys(n),r=e.fields||{},i=Object.keys(r);s.sort(),i.sort();for(let t=0;t<s.length&&t<i.length;++t){const e=oi(s[t],i[t]);if(0!==e)return e;const o=Xi(n[s[t]],r[i[t]]);if(0!==o)return o}return oi(s.length,i.length)}(t.mapValue,e.mapValue);default:throw zr()}}function Yi(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return oi(t,e);const n=Vi(t),s=Vi(e),r=oi(n.seconds,s.seconds);return 0!==r?r:oi(n.nanos,s.nanos)}function Ji(t){return Zi(t)}function Zi(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=Vi(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Bi(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,gi.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const s of t.values||[])n?n=!1:e+=",",e+=Zi(s);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",s=!0;for(const r of e)s?s=!1:n+=",",n+=`${r}:${Zi(t.fields[r])}`;return n+"}"}(t.mapValue):zr();var e,n}function to(t){return!!t&&"integerValue"in t}function eo(t){return!!t&&"arrayValue"in t}function no(t){return!!t&&"nullValue"in t}function so(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function ro(t){return!!t&&"mapValue"in t}function io(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return _i(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=io(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=io(t.arrayValue.values[n]);return e}return Object.assign({},t)}function oo(t){return"__max__"===(((t.mapValue||{}).fields||{}).__type__||{}).stringValue}class ao{constructor(t){this.value=t}static empty(){return new ao({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!ro(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=io(e)}setAll(t){let e=fi.emptyPath(),n={},s=[];t.forEach(((t,r)=>{if(!e.isImmediateParentOf(r)){const t=this.getFieldsMap(e);this.applyChanges(t,n,s),n={},s=[],e=r.popLast()}t?n[r.lastSegment()]=io(t):s.push(r.lastSegment())}));const r=this.getFieldsMap(e);this.applyChanges(r,n,s)}delete(t){const e=this.field(t.popLast());ro(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return Qi(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let s=e.mapValue.fields[t.get(n)];ro(s)&&s.mapValue.fields||(s={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=s),e=s}return e.mapValue.fields}applyChanges(t,e,n){_i(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new ao(io(this.value))}}function co(t){const e=[];return _i(t.fields,((t,n)=>{const s=new fi([t]);if(ro(n)){const t=co(n.mapValue).fields;if(0===t.length)e.push(s);else for(const n of t)e.push(s.child(n))}else e.push(s)})),new Mi(e)}class uo{constructor(t,e,n,s,r,i,o){this.key=t,this.documentType=e,this.version=n,this.readTime=s,this.createTime=r,this.data=i,this.documentState=o}static newInvalidDocument(t){return new uo(t,0,ui.min(),ui.min(),ui.min(),ao.empty(),0)}static newFoundDocument(t,e,n,s){return new uo(t,1,e,ui.min(),n,s,0)}static newNoDocument(t,e){return new uo(t,2,e,ui.min(),ui.min(),ao.empty(),0)}static newUnknownDocument(t,e){return new uo(t,3,e,ui.min(),ui.min(),ao.empty(),2)}convertToFoundDocument(t,e){return!this.createTime.isEqual(ui.min())||2!==this.documentType&&0!==this.documentType||(this.createTime=t),this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=ao.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=ao.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=ui.min(),this}setReadTime(t){return this.readTime=t,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof uo&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}mutableCopy(){return new uo(this.key,this.documentType,this.version,this.readTime,this.createTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class ho{constructor(t,e){this.position=t,this.inclusive=e}}function lo(t,e,n){let s=0;for(let r=0;r<t.position.length;r++){const i=e[r],o=t.position[r];if(s=i.field.isKeyField()?gi.comparator(gi.fromName(o.referenceValue),n.key):Xi(o,n.data.field(i.field)),"desc"===i.dir&&(s*=-1),0!==s)break}return s}function fo(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.inclusive!==e.inclusive||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!Qi(t.position[n],e.position[n]))return!1;return!0}class go{constructor(t,e="asc"){this.field=t,this.dir=e}}function po(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}class mo{}class yo extends mo{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.createKeyFieldInFilter(t,e,n):new Io(t,e,n):"array-contains"===e?new Do(t,n):"in"===e?new ko(t,n):"not-in"===e?new No(t,n):"array-contains-any"===e?new xo(t,n):new yo(t,e,n)}static createKeyFieldInFilter(t,e,n){return"in"===e?new So(t,n):new Ao(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.matchesComparison(Xi(e,this.value)):null!==e&&Hi(this.value)===Hi(e)&&this.matchesComparison(Xi(e,this.value))}matchesComparison(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return zr()}}isInequality(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}getFlattenedFilters(){return[this]}getFilters(){return[this]}getFirstInequalityField(){return this.isInequality()?this.field:null}}class vo extends mo{constructor(t,e){super(),this.filters=t,this.op=e,this.lt=null}static create(t,e){return new vo(t,e)}matches(t){return wo(this)?void 0===this.filters.find((e=>!e.matches(t))):void 0!==this.filters.find((e=>e.matches(t)))}getFlattenedFilters(){return null!==this.lt||(this.lt=this.filters.reduce(((t,e)=>t.concat(e.getFlattenedFilters())),[])),this.lt}getFilters(){return Object.assign([],this.filters)}getFirstInequalityField(){const t=this.ft((t=>t.isInequality()));return null!==t?t.field:null}ft(t){for(const e of this.getFlattenedFilters())if(t(e))return e;return null}}function wo(t){return"and"===t.op}function Eo(t){return function(t){for(const e of t.filters)if(e instanceof vo)return!1;return!0}(t)&&wo(t)}function bo(t){if(t instanceof yo)return t.field.canonicalString()+t.op.toString()+Ji(t.value);if(Eo(t))return t.filters.map((t=>bo(t))).join(",");{const e=t.filters.map((t=>bo(t))).join(",");return`${t.op}(${e})`}}function To(t,e){return t instanceof yo?function(t,e){return e instanceof yo&&t.op===e.op&&t.field.isEqual(e.field)&&Qi(t.value,e.value)}(t,e):t instanceof vo?function(t,e){return e instanceof vo&&t.op===e.op&&t.filters.length===e.filters.length&&t.filters.reduce(((t,n,s)=>t&&To(n,e.filters[s])),!0)}(t,e):void zr()}function Co(t){return t instanceof yo?function(t){return`${t.field.canonicalString()} ${t.op} ${Ji(t.value)}`}(t):t instanceof vo?function(t){return t.op.toString()+" {"+t.getFilters().map(Co).join(" ,")+"}"}(t):"Filter"}class Io extends yo{constructor(t,e,n){super(t,e,n),this.key=gi.fromName(n.referenceValue)}matches(t){const e=gi.comparator(t.key,this.key);return this.matchesComparison(e)}}class So extends yo{constructor(t,e){super(t,"in",e),this.keys=_o(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class Ao extends yo{constructor(t,e){super(t,"not-in",e),this.keys=_o(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function _o(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>gi.fromName(t.referenceValue)))}class Do extends yo{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return eo(e)&&Wi(e.arrayValue,this.value)}}class ko extends yo{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&Wi(this.value.arrayValue,e)}}class No extends yo{constructor(t,e){super(t,"not-in",e)}matches(t){if(Wi(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!Wi(this.value.arrayValue,e)}}class xo extends yo{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!eo(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>Wi(this.value.arrayValue,t)))}}class Ro{constructor(t,e=null,n=[],s=[],r=null,i=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=s,this.limit=r,this.startAt=i,this.endAt=o,this.dt=null}}function Lo(t,e=null,n=[],s=[],r=null,i=null,o=null){return new Ro(t,e,n,s,r,i,o)}function Mo(t){const e=Gr(t);if(null===e.dt){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>bo(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),Ii(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((t=>Ji(t))).join(",")),e.endAt&&(t+="|ub:",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((t=>Ji(t))).join(",")),e.dt=t}return e.dt}function Oo(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!po(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let n=0;n<t.filters.length;n++)if(!To(t.filters[n],e.filters[n]))return!1;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!fo(t.startAt,e.startAt)&&fo(t.endAt,e.endAt)}function Po(t){return gi.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class Fo{constructor(t,e=null,n=[],s=[],r=null,i="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=s,this.limit=r,this.limitType=i,this.startAt=o,this.endAt=a,this.wt=null,this._t=null,this.startAt,this.endAt}}function Vo(t){return new Fo(t)}function Uo(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}function Bo(t){const e=Gr(t);if(null===e.wt){e.wt=[];const t=function(t){for(const e of t.filters){const t=e.getFirstInequalityField();if(null!==t)return t}return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.wt.push(new go(t)),e.wt.push(new go(fi.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.wt.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.wt.push(new go(fi.keyField(),t))}}}return e.wt}function jo(t){const e=Gr(t);if(!e._t)if("F"===e.limitType)e._t=Lo(e.path,e.collectionGroup,Bo(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Bo(e)){const e="desc"===n.dir?"asc":"desc";t.push(new go(n.field,e))}const n=e.endAt?new ho(e.endAt.position,e.endAt.inclusive):null,s=e.startAt?new ho(e.startAt.position,e.startAt.inclusive):null;e._t=Lo(e.path,e.collectionGroup,t,e.filters,e.limit,n,s)}return e._t}function qo(t,e,n){return new Fo(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function $o(t,e){return Oo(jo(t),jo(e))&&t.limitType===e.limitType}function zo(t){return`${Mo(jo(t))}|lt:${t.limitType}`}function Ko(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>Co(t))).join(", ")}]`),Ii(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: ",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((t=>Ji(t))).join(",")),t.endAt&&(e+=", endAt: ",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((t=>Ji(t))).join(",")),`Target(${e})`}(jo(t))}; limitType=${t.limitType})`}function Go(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):gi.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of Bo(t))if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!function(t,e,n){const s=lo(t,e,n);return t.inclusive?s<=0:s<0}(t.startAt,Bo(t),e)||t.endAt&&!function(t,e,n){const s=lo(t,e,n);return t.inclusive?s>=0:s>0}(t.endAt,Bo(t),e))}(t,e)}function Ho(t){return(e,n)=>{let s=!1;for(const r of Bo(t)){const t=Qo(r,e,n);if(0!==t)return t;s=s||r.field.isKeyField()}return 0}}function Qo(t,e,n){const s=t.field.isKeyField()?gi.comparator(e.key,n.key):function(t,e,n){const s=e.data.field(t),r=n.data.field(t);return null!==s&&null!==r?Xi(s,r):zr()}(t.field,e,n);switch(t.dir){case"asc":return s;case"desc":return-1*s;default:return zr()}}class Wo{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={},this.innerSize=0}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,s]of n)if(this.equalsFn(e,t))return s}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),s=this.inner[n];if(void 0===s)return this.inner[n]=[[t,e]],void this.innerSize++;for(let n=0;n<s.length;n++)if(this.equalsFn(s[n][0],t))return void(s[n]=[t,e]);s.push([t,e]),this.innerSize++}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let s=0;s<n.length;s++)if(this.equalsFn(n[s][0],t))return 1===n.length?delete this.inner[e]:n.splice(s,1),this.innerSize--,!0;return!1}forEach(t){_i(this.inner,((e,n)=>{for(const[e,s]of n)t(e,s)}))}isEmpty(){return Di(this.inner)}size(){return this.innerSize}}const Xo=new ki(gi.comparator);function Yo(){return Xo}const Jo=new ki(gi.comparator);function Zo(...t){let e=Jo;for(const n of t)e=e.insert(n.key,n);return e}function ta(t){let e=Jo;return t.forEach(((t,n)=>e=e.insert(t,n.overlayedDocument))),e}function ea(){return sa()}function na(){return sa()}function sa(){return new Wo((t=>t.toString()),((t,e)=>t.isEqual(e)))}const ra=new ki(gi.comparator),ia=new Ri(gi.comparator);function oa(...t){let e=ia;for(const n of t)e=e.add(n);return e}const aa=new Ri(oi);function ca(t,e){if(t.useProto3Json){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Si(e)?"-0":e}}function ua(t){return{integerValue:""+t}}function ha(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!Si(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?ua(e):ca(t,e)}class la{constructor(){this._=void 0}}function da(t,e,n){return t instanceof pa?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&ji(e)&&(e=qi(e)),e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof ma?ya(t,e):t instanceof va?wa(t,e):function(t,e){const n=ga(t,e),s=ba(n)+ba(t.gt);return to(n)&&to(t.gt)?ua(s):ca(t.serializer,s)}(t,e)}function fa(t,e,n){return t instanceof ma?ya(t,e):t instanceof va?wa(t,e):n}function ga(t,e){return t instanceof Ea?to(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class pa extends la{}class ma extends la{constructor(t){super(),this.elements=t}}function ya(t,e){const n=Ta(e);for(const e of t.elements)n.some((t=>Qi(t,e)))||n.push(e);return{arrayValue:{values:n}}}class va extends la{constructor(t){super(),this.elements=t}}function wa(t,e){let n=Ta(e);for(const e of t.elements)n=n.filter((t=>!Qi(t,e)));return{arrayValue:{values:n}}}class Ea extends la{constructor(t,e){super(),this.serializer=t,this.gt=e}}function ba(t){return Ui(t.integerValue||t.doubleValue)}function Ta(t){return eo(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class Ca{constructor(t,e){this.version=t,this.transformResults=e}}class Ia{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new Ia}static exists(t){return new Ia(void 0,t)}static updateTime(t){return new Ia(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function Sa(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class Aa{}function _a(t,e){if(!t.hasLocalMutations||e&&0===e.fields.length)return null;if(null===e)return t.isNoDocument()?new Fa(t.key,Ia.none()):new Ra(t.key,t.data,Ia.none());{const n=t.data,s=ao.empty();let r=new Ri(fi.comparator);for(let t of e.fields)if(!r.has(t)){let e=n.field(t);null===e&&t.length>1&&(t=t.popLast(),e=n.field(t)),null===e?s.delete(t):s.set(t,e),r=r.add(t)}return new La(t.key,s,new Mi(r.toArray()),Ia.none())}}function Da(t,e,n){t instanceof Ra?function(t,e,n){const s=t.value.clone(),r=Oa(t.fieldTransforms,e,n.transformResults);s.setAll(r),e.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(t,e,n):t instanceof La?function(t,e,n){if(!Sa(t.precondition,e))return void e.convertToUnknownDocument(n.version);const s=Oa(t.fieldTransforms,e,n.transformResults),r=e.data;r.setAll(Ma(t)),r.setAll(s),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function ka(t,e,n,s){return t instanceof Ra?function(t,e,n,s){if(!Sa(t.precondition,e))return n;const r=t.value.clone(),i=Pa(t.fieldTransforms,s,e);return r.setAll(i),e.convertToFoundDocument(e.version,r).setHasLocalMutations(),null}(t,e,n,s):t instanceof La?function(t,e,n,s){if(!Sa(t.precondition,e))return n;const r=Pa(t.fieldTransforms,s,e),i=e.data;return i.setAll(Ma(t)),i.setAll(r),e.convertToFoundDocument(e.version,i).setHasLocalMutations(),null===n?null:n.unionWith(t.fieldMask.fields).unionWith(t.fieldTransforms.map((t=>t.field)))}(t,e,n,s):function(t,e,n){return Sa(t.precondition,e)?(e.convertToNoDocument(e.version).setHasLocalMutations(),null):n}(t,e,n)}function Na(t,e){let n=null;for(const s of t.fieldTransforms){const t=e.data.field(s.field),r=ga(s.transform,t||null);null!=r&&(null===n&&(n=ao.empty()),n.set(s.field,r))}return n||null}function xa(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&ai(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof ma&&e instanceof ma||t instanceof va&&e instanceof va?ai(t.elements,e.elements,Qi):t instanceof Ea&&e instanceof Ea?Qi(t.gt,e.gt):t instanceof pa&&e instanceof pa}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}class Ra extends Aa{constructor(t,e,n,s=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=s,this.type=0}getFieldMask(){return null}}class La extends Aa{constructor(t,e,n,s,r=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=s,this.fieldTransforms=r,this.type=1}getFieldMask(){return this.fieldMask}}function Ma(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const s=t.data.field(n);e.set(n,s)}})),e}function Oa(t,e,n){const s=new Map;Kr(t.length===n.length);for(let r=0;r<n.length;r++){const i=t[r],o=i.transform,a=e.data.field(i.field);s.set(i.field,fa(o,a,n[r]))}return s}function Pa(t,e,n){const s=new Map;for(const r of t){const t=r.transform,i=n.data.field(r.field);s.set(r.field,da(t,i,e))}return s}class Fa extends Aa{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Va extends Aa{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class Ua{constructor(t,e,n,s){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=s}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const s=this.mutations[e];s.key.isEqual(t.key)&&Da(s,t,n[e])}}applyToLocalView(t,e){for(const n of this.baseMutations)n.key.isEqual(t.key)&&(e=ka(n,t,e,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(t.key)&&(e=ka(n,t,e,this.localWriteTime));return e}applyToLocalDocumentSet(t,e){const n=na();return this.mutations.forEach((s=>{const r=t.get(s.key),i=r.overlayedDocument;let o=this.applyToLocalView(i,r.mutatedFields);o=e.has(s.key)?null:o;const a=_a(i,o);null!==a&&n.set(s.key,a),i.isValidDocument()||i.convertToNoDocument(ui.min())})),n}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),oa())}isEqual(t){return this.batchId===t.batchId&&ai(this.mutations,t.mutations,((t,e)=>xa(t,e)))&&ai(this.baseMutations,t.baseMutations,((t,e)=>xa(t,e)))}}class Ba{constructor(t,e,n,s){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=s}static from(t,e,n){Kr(t.mutations.length===n.length);let s=ra;const r=t.mutations;for(let t=0;t<r.length;t++)s=s.insert(r[t].key,n[t].version);return new Ba(t,e,n,s)}}class ja{constructor(t,e){this.largestBatchId=t,this.mutation=e}getKey(){return this.mutation.key}isEqual(t){return null!==t&&this.mutation===t.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class qa{constructor(t,e){this.count=t,this.unchangedNames=e}}var $a,za;function Ka(t){if(void 0===t)return jr("GRPC error has no .code"),Hr.UNKNOWN;switch(t){case $a.OK:return Hr.OK;case $a.CANCELLED:return Hr.CANCELLED;case $a.UNKNOWN:return Hr.UNKNOWN;case $a.DEADLINE_EXCEEDED:return Hr.DEADLINE_EXCEEDED;case $a.RESOURCE_EXHAUSTED:return Hr.RESOURCE_EXHAUSTED;case $a.INTERNAL:return Hr.INTERNAL;case $a.UNAVAILABLE:return Hr.UNAVAILABLE;case $a.UNAUTHENTICATED:return Hr.UNAUTHENTICATED;case $a.INVALID_ARGUMENT:return Hr.INVALID_ARGUMENT;case $a.NOT_FOUND:return Hr.NOT_FOUND;case $a.ALREADY_EXISTS:return Hr.ALREADY_EXISTS;case $a.PERMISSION_DENIED:return Hr.PERMISSION_DENIED;case $a.FAILED_PRECONDITION:return Hr.FAILED_PRECONDITION;case $a.ABORTED:return Hr.ABORTED;case $a.OUT_OF_RANGE:return Hr.OUT_OF_RANGE;case $a.UNIMPLEMENTED:return Hr.UNIMPLEMENTED;case $a.DATA_LOSS:return Hr.DATA_LOSS;default:return zr()}}(za=$a||($a={}))[za.OK=0]="OK",za[za.CANCELLED=1]="CANCELLED",za[za.UNKNOWN=2]="UNKNOWN",za[za.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",za[za.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",za[za.NOT_FOUND=5]="NOT_FOUND",za[za.ALREADY_EXISTS=6]="ALREADY_EXISTS",za[za.PERMISSION_DENIED=7]="PERMISSION_DENIED",za[za.UNAUTHENTICATED=16]="UNAUTHENTICATED",za[za.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",za[za.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",za[za.ABORTED=10]="ABORTED",za[za.OUT_OF_RANGE=11]="OUT_OF_RANGE",za[za.UNIMPLEMENTED=12]="UNIMPLEMENTED",za[za.INTERNAL=13]="INTERNAL",za[za.UNAVAILABLE=14]="UNAVAILABLE",za[za.DATA_LOSS=15]="DATA_LOSS";class Ga{constructor(){this.onExistenceFilterMismatchCallbacks=new Map}static get instance(){return Ha}static getOrCreateInstance(){return null===Ha&&(Ha=new Ga),Ha}onExistenceFilterMismatch(t){const e=Symbol();return this.onExistenceFilterMismatchCallbacks.set(e,t),()=>this.onExistenceFilterMismatchCallbacks.delete(e)}notifyOnExistenceFilterMismatch(t){this.onExistenceFilterMismatchCallbacks.forEach((e=>e(t)))}}let Ha=null;const Qa=new Mr([4294967295,4294967295],0);function Wa(t){const e=(new TextEncoder).encode(t),n=new Lr;return n.update(e),new Uint8Array(n.digest())}function Xa(t){const e=new DataView(t.buffer),n=e.getUint32(0,!0),s=e.getUint32(4,!0),r=e.getUint32(8,!0),i=e.getUint32(12,!0);return[new Mr([n,s],0),new Mr([r,i],0)]}class Ya{constructor(t,e,n){if(this.bitmap=t,this.padding=e,this.hashCount=n,e<0||e>=8)throw new Ja(`Invalid padding: ${e}`);if(n<0)throw new Ja(`Invalid hash count: ${n}`);if(t.length>0&&0===this.hashCount)throw new Ja(`Invalid hash count: ${n}`);if(0===t.length&&0!==e)throw new Ja(`Invalid padding when bitmap length is 0: ${e}`);this.It=8*t.length-e,this.Tt=Mr.fromNumber(this.It)}Et(t,e,n){let s=t.add(e.multiply(Mr.fromNumber(n)));return 1===s.compare(Qa)&&(s=new Mr([s.getBits(0),s.getBits(1)],0)),s.modulo(this.Tt).toNumber()}At(t){return 0!=(this.bitmap[Math.floor(t/8)]&1<<t%8)}vt(t){if(0===this.It)return!1;const e=Wa(t),[n,s]=Xa(e);for(let t=0;t<this.hashCount;t++){const e=this.Et(n,s,t);if(!this.At(e))return!1}return!0}static create(t,e,n){const s=t%8==0?0:8-t%8,r=new Uint8Array(Math.ceil(t/8)),i=new Ya(r,s,e);return n.forEach((t=>i.insert(t))),i}insert(t){if(0===this.It)return;const e=Wa(t),[n,s]=Xa(e);for(let t=0;t<this.hashCount;t++){const e=this.Et(n,s,t);this.Rt(e)}}Rt(t){const e=Math.floor(t/8),n=t%8;this.bitmap[e]|=1<<n}}class Ja extends Error{constructor(){super(...arguments),this.name="BloomFilterError"}}class Za{constructor(t,e,n,s,r){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=s,this.resolvedLimboDocuments=r}static createSynthesizedRemoteEventForCurrentChange(t,e,n){const s=new Map;return s.set(t,tc.createSynthesizedTargetChangeForCurrentChange(t,e,n)),new Za(ui.min(),s,new ki(oi),Yo(),oa())}}class tc{constructor(t,e,n,s,r){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=s,this.removedDocuments=r}static createSynthesizedTargetChangeForCurrentChange(t,e,n){return new tc(n,e,oa(),oa(),oa())}}class ec{constructor(t,e,n,s){this.Pt=t,this.removedTargetIds=e,this.key=n,this.bt=s}}class nc{constructor(t,e){this.targetId=t,this.Vt=e}}class sc{constructor(t,e,n=Pi.EMPTY_BYTE_STRING,s=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=s}}class rc{constructor(){this.St=0,this.Dt=ac(),this.Ct=Pi.EMPTY_BYTE_STRING,this.xt=!1,this.Nt=!0}get current(){return this.xt}get resumeToken(){return this.Ct}get kt(){return 0!==this.St}get Mt(){return this.Nt}$t(t){t.approximateByteSize()>0&&(this.Nt=!0,this.Ct=t)}Ot(){let t=oa(),e=oa(),n=oa();return this.Dt.forEach(((s,r)=>{switch(r){case 0:t=t.add(s);break;case 2:e=e.add(s);break;case 1:n=n.add(s);break;default:zr()}})),new tc(this.Ct,this.xt,t,e,n)}Ft(){this.Nt=!1,this.Dt=ac()}Bt(t,e){this.Nt=!0,this.Dt=this.Dt.insert(t,e)}Lt(t){this.Nt=!0,this.Dt=this.Dt.remove(t)}qt(){this.St+=1}Ut(){this.St-=1}Kt(){this.Nt=!0,this.xt=!0}}class ic{constructor(t){this.Gt=t,this.Qt=new Map,this.jt=Yo(),this.zt=oc(),this.Wt=new ki(oi)}Ht(t){for(const e of t.Pt)t.bt&&t.bt.isFoundDocument()?this.Jt(e,t.bt):this.Yt(e,t.key,t.bt);for(const e of t.removedTargetIds)this.Yt(e,t.key,t.bt)}Xt(t){this.forEachTarget(t,(e=>{const n=this.Zt(e);switch(t.state){case 0:this.te(e)&&n.$t(t.resumeToken);break;case 1:n.Ut(),n.kt||n.Ft(),n.$t(t.resumeToken);break;case 2:n.Ut(),n.kt||this.removeTarget(e);break;case 3:this.te(e)&&(n.Kt(),n.$t(t.resumeToken));break;case 4:this.te(e)&&(this.ee(e),n.$t(t.resumeToken));break;default:zr()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.Qt.forEach(((t,n)=>{this.te(n)&&e(n)}))}ne(t){var e;const n=t.targetId,s=t.Vt.count,r=this.se(n);if(r){const i=r.target;if(Po(i))if(0===s){const t=new gi(i.path);this.Yt(n,t,uo.newNoDocument(t,ui.min()))}else Kr(1===s);else{const r=this.ie(n);if(r!==s){const s=this.re(t,r);if(0!==s){this.ee(n);const t=2===s?"TargetPurposeExistenceFilterMismatchBloom":"TargetPurposeExistenceFilterMismatch";this.Wt=this.Wt.insert(n,t)}null===(e=Ga.instance)||void 0===e||e.notifyOnExistenceFilterMismatch(function(t,e,n){var s,r,i,o,a,c;const u={localCacheCount:e,existenceFilterCount:n.count},h=n.unchangedNames;return h&&(u.bloomFilter={applied:0===t,hashCount:null!==(s=null==h?void 0:h.hashCount)&&void 0!==s?s:0,bitmapLength:null!==(o=null===(i=null===(r=null==h?void 0:h.bits)||void 0===r?void 0:r.bitmap)||void 0===i?void 0:i.length)&&void 0!==o?o:0,padding:null!==(c=null===(a=null==h?void 0:h.bits)||void 0===a?void 0:a.padding)&&void 0!==c?c:0}),u}(s,r,t.Vt))}}}}re(t,e){const{unchangedNames:n,count:s}=t.Vt;if(!n||!n.bits)return 1;const{bits:{bitmap:r="",padding:i=0},hashCount:o=0}=n;let a,c;try{a=Bi(r).toUint8Array()}catch(t){if(t instanceof Oi)return qr("Decoding the base64 bloom filter in existence filter failed ("+t.message+"); ignoring the bloom filter and falling back to full re-query."),1;throw t}try{c=new Ya(a,i,o)}catch(t){return qr(t instanceof Ja?"BloomFilter error: ":"Applying bloom filter failed: ",t),1}return 0===c.It?1:s!==e-this.oe(t.targetId,c)?2:0}oe(t,e){const n=this.Gt.getRemoteKeysForTarget(t);let s=0;return n.forEach((n=>{const r=this.Gt.ue(),i=`projects/${r.projectId}/databases/${r.database}/documents/${n.path.canonicalString()}`;e.vt(i)||(this.Yt(t,n,null),s++)})),s}ce(t){const e=new Map;this.Qt.forEach(((n,s)=>{const r=this.se(s);if(r){if(n.current&&Po(r.target)){const e=new gi(r.target.path);null!==this.jt.get(e)||this.ae(s,e)||this.Yt(s,e,uo.newNoDocument(e,t))}n.Mt&&(e.set(s,n.Ot()),n.Ft())}}));let n=oa();this.zt.forEach(((t,e)=>{let s=!0;e.forEachWhile((t=>{const e=this.se(t);return!e||"TargetPurposeLimboResolution"===e.purpose||(s=!1,!1)})),s&&(n=n.add(t))})),this.jt.forEach(((e,n)=>n.setReadTime(t)));const s=new Za(t,e,this.Wt,this.jt,n);return this.jt=Yo(),this.zt=oc(),this.Wt=new ki(oi),s}Jt(t,e){if(!this.te(t))return;const n=this.ae(t,e.key)?2:0;this.Zt(t).Bt(e.key,n),this.jt=this.jt.insert(e.key,e),this.zt=this.zt.insert(e.key,this.he(e.key).add(t))}Yt(t,e,n){if(!this.te(t))return;const s=this.Zt(t);this.ae(t,e)?s.Bt(e,1):s.Lt(e),this.zt=this.zt.insert(e,this.he(e).delete(t)),n&&(this.jt=this.jt.insert(e,n))}removeTarget(t){this.Qt.delete(t)}ie(t){const e=this.Zt(t).Ot();return this.Gt.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}qt(t){this.Zt(t).qt()}Zt(t){let e=this.Qt.get(t);return e||(e=new rc,this.Qt.set(t,e)),e}he(t){let e=this.zt.get(t);return e||(e=new Ri(oi),this.zt=this.zt.insert(t,e)),e}te(t){const e=null!==this.se(t);return e||Br("WatchChangeAggregator","Detected inactive target",t),e}se(t){const e=this.Qt.get(t);return e&&e.kt?null:this.Gt.le(t)}ee(t){this.Qt.set(t,new rc),this.Gt.getRemoteKeysForTarget(t).forEach((e=>{this.Yt(t,e,null)}))}ae(t,e){return this.Gt.getRemoteKeysForTarget(t).has(e)}}function oc(){return new ki(gi.comparator)}function ac(){return new ki(gi.comparator)}const cc={asc:"ASCENDING",desc:"DESCENDING"},uc={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},hc={and:"AND",or:"OR"};class lc{constructor(t,e){this.databaseId=t,this.useProto3Json=e}}function dc(t,e){return t.useProto3Json||Ii(e)?e:{value:e}}function fc(t,e){return t.useProto3Json?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function gc(t,e){return t.useProto3Json?e.toBase64():e.toUint8Array()}function pc(t,e){return fc(t,e.toTimestamp())}function mc(t){return Kr(!!t),ui.fromTimestamp(function(t){const e=Vi(t);return new ci(e.seconds,e.nanos)}(t))}function yc(t,e){return function(t){return new li(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function vc(t){const e=li.fromString(t);return Kr(Pc(e)),e}function wc(t,e){return yc(t.databaseId,e.path)}function Ec(t,e){const n=vc(e);if(n.get(1)!==t.databaseId.projectId)throw new Qr(Hr.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new Qr(Hr.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new gi(Cc(n))}function bc(t,e){return yc(t.databaseId,e)}function Tc(t){return new li(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function Cc(t){return Kr(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function Ic(t,e,n){return{name:wc(t,e),fields:n.value.mapValue.fields}}function Sc(t,e){return{documents:[bc(t,e.path)]}}function Ac(t,e){const n={structuredQuery:{}},s=e.path;null!==e.collectionGroup?(n.parent=bc(t,s),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=bc(t,s.popLast()),n.structuredQuery.from=[{collectionId:s.lastSegment()}]);const r=function(t){if(0!==t.length)return Mc(vo.create(t,"and"))}(e.filters);r&&(n.structuredQuery.where=r);const i=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:Rc(t.field),direction:kc(t.dir)}}(t)))}(e.orderBy);i&&(n.structuredQuery.orderBy=i);const o=dc(t,e.limit);var a;return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt={before:(a=e.startAt).inclusive,values:a.position}),e.endAt&&(n.structuredQuery.endAt=function(t){return{before:!t.inclusive,values:t.position}}(e.endAt)),n}function _c(t){let e=function(t){const e=vc(t);return 4===e.length?li.emptyPath():Cc(e)}(t.parent);const n=t.structuredQuery,s=n.from?n.from.length:0;let r=null;if(s>0){Kr(1===s);const t=n.from[0];t.allDescendants?r=t.collectionId:e=e.child(t.collectionId)}let i=[];n.where&&(i=function(t){const e=Dc(t);return e instanceof vo&&Eo(e)?e.getFilters():[e]}(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new go(Lc(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,Ii(e)?null:e}(n.limit));let c=null;n.startAt&&(c=function(t){const e=!!t.before,n=t.values||[];return new ho(n,e)}(n.startAt));let u=null;return n.endAt&&(u=function(t){const e=!t.before,n=t.values||[];return new ho(n,e)}(n.endAt)),function(t,e,n,s,r,i,o,a){return new Fo(t,e,n,s,r,i,o,a)}(e,r,o,i,a,"F",c,u)}function Dc(t){return void 0!==t.unaryFilter?function(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Lc(t.unaryFilter.field);return yo.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Lc(t.unaryFilter.field);return yo.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const s=Lc(t.unaryFilter.field);return yo.create(s,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const r=Lc(t.unaryFilter.field);return yo.create(r,"!=",{nullValue:"NULL_VALUE"});default:return zr()}}(t):void 0!==t.fieldFilter?function(t){return yo.create(Lc(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return zr()}}(t.fieldFilter.op),t.fieldFilter.value)}(t):void 0!==t.compositeFilter?function(t){return vo.create(t.compositeFilter.filters.map((t=>Dc(t))),function(t){switch(t){case"AND":return"and";case"OR":return"or";default:return zr()}}(t.compositeFilter.op))}(t):zr()}function kc(t){return cc[t]}function Nc(t){return uc[t]}function xc(t){return hc[t]}function Rc(t){return{fieldPath:t.canonicalString()}}function Lc(t){return fi.fromServerFormat(t.fieldPath)}function Mc(t){return t instanceof yo?function(t){if("=="===t.op){if(so(t.value))return{unaryFilter:{field:Rc(t.field),op:"IS_NAN"}};if(no(t.value))return{unaryFilter:{field:Rc(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(so(t.value))return{unaryFilter:{field:Rc(t.field),op:"IS_NOT_NAN"}};if(no(t.value))return{unaryFilter:{field:Rc(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Rc(t.field),op:Nc(t.op),value:t.value}}}(t):t instanceof vo?function(t){const e=t.getFilters().map((t=>Mc(t)));return 1===e.length?e[0]:{compositeFilter:{op:xc(t.op),filters:e}}}(t):zr()}function Oc(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Pc(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}class Fc{constructor(t,e,n,s,r=ui.min(),i=ui.min(),o=Pi.EMPTY_BYTE_STRING,a=null){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=s,this.snapshotVersion=r,this.lastLimboFreeSnapshotVersion=i,this.resumeToken=o,this.expectedCount=a}withSequenceNumber(t){return new Fc(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,this.expectedCount)}withResumeToken(t,e){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t,null)}withExpectedCount(t){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,t)}withLastLimboFreeSnapshotVersion(t){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken,this.expectedCount)}}class Vc{constructor(t){this.fe=t}}function Uc(t){const e=_c({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?qo(e,e.limit,"L"):e}class Bc{constructor(){}_e(t,e){this.me(t,e),e.ge()}me(t,e){if("nullValue"in t)this.ye(e,5);else if("booleanValue"in t)this.ye(e,10),e.pe(t.booleanValue?1:0);else if("integerValue"in t)this.ye(e,15),e.pe(Ui(t.integerValue));else if("doubleValue"in t){const n=Ui(t.doubleValue);isNaN(n)?this.ye(e,13):(this.ye(e,15),Si(n)?e.pe(0):e.pe(n))}else if("timestampValue"in t){const n=t.timestampValue;this.ye(e,20),"string"==typeof n?e.Ie(n):(e.Ie(`${n.seconds||""}`),e.pe(n.nanos||0))}else if("stringValue"in t)this.Te(t.stringValue,e),this.Ee(e);else if("bytesValue"in t)this.ye(e,30),e.Ae(Bi(t.bytesValue)),this.Ee(e);else if("referenceValue"in t)this.ve(t.referenceValue,e);else if("geoPointValue"in t){const n=t.geoPointValue;this.ye(e,45),e.pe(n.latitude||0),e.pe(n.longitude||0)}else"mapValue"in t?oo(t)?this.ye(e,Number.MAX_SAFE_INTEGER):(this.Re(t.mapValue,e),this.Ee(e)):"arrayValue"in t?(this.Pe(t.arrayValue,e),this.Ee(e)):zr()}Te(t,e){this.ye(e,25),this.be(t,e)}be(t,e){e.Ie(t)}Re(t,e){const n=t.fields||{};this.ye(e,55);for(const t of Object.keys(n))this.Te(t,e),this.me(n[t],e)}Pe(t,e){const n=t.values||[];this.ye(e,50);for(const t of n)this.me(t,e)}ve(t,e){this.ye(e,37),gi.fromName(t).path.forEach((t=>{this.ye(e,60),this.be(t,e)}))}ye(t,e){t.pe(e)}Ee(t){t.pe(2)}}Bc.Ve=new Bc;class jc{constructor(){this.rn=new qc}addToCollectionParentIndex(t,e){return this.rn.add(e),bi.resolve()}getCollectionParents(t,e){return bi.resolve(this.rn.getEntries(e))}addFieldIndex(t,e){return bi.resolve()}deleteFieldIndex(t,e){return bi.resolve()}getDocumentsMatchingTarget(t,e){return bi.resolve(null)}getIndexType(t,e){return bi.resolve(0)}getFieldIndexes(t,e){return bi.resolve([])}getNextCollectionGroupToUpdate(t){return bi.resolve(null)}getMinOffset(t,e){return bi.resolve(mi.min())}getMinOffsetFromCollectionGroup(t,e){return bi.resolve(mi.min())}updateCollectionGroup(t,e,n){return bi.resolve()}updateIndexEntries(t,e){return bi.resolve()}}class qc{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e]||new Ri(li.comparator),r=!s.has(n);return this.index[e]=s.add(n),r}has(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e];return s&&s.has(n)}getEntries(t){return(this.index[t]||new Ri(li.comparator)).toArray()}}new Uint8Array(0);class $c{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new $c(t,$c.DEFAULT_COLLECTION_PERCENTILE,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}$c.DEFAULT_COLLECTION_PERCENTILE=10,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,$c.DEFAULT=new $c(41943040,$c.DEFAULT_COLLECTION_PERCENTILE,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),$c.DISABLED=new $c(-1,0,0);class zc{constructor(t){this.Nn=t}next(){return this.Nn+=2,this.Nn}static kn(){return new zc(0)}static Mn(){return new zc(-1)}}class Kc{constructor(){this.changes=new Wo((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}addEntry(t){this.assertNotApplied(),this.changes.set(t.key,t)}removeEntry(t,e){this.assertNotApplied(),this.changes.set(t,uo.newInvalidDocument(t).setReadTime(e))}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?bi.resolve(n):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class Gc{constructor(t,e){this.overlayedDocument=t,this.mutatedFields=e}}class Hc{constructor(t,e,n,s){this.remoteDocumentCache=t,this.mutationQueue=e,this.documentOverlayCache=n,this.indexManager=s}getDocument(t,e){let n=null;return this.documentOverlayCache.getOverlay(t,e).next((s=>(n=s,this.remoteDocumentCache.getEntry(t,e)))).next((t=>(null!==n&&ka(n.mutation,t,Mi.empty(),ci.now()),t)))}getDocuments(t,e){return this.remoteDocumentCache.getEntries(t,e).next((e=>this.getLocalViewOfDocuments(t,e,oa()).next((()=>e))))}getLocalViewOfDocuments(t,e,n=oa()){const s=ea();return this.populateOverlays(t,s,e).next((()=>this.computeViews(t,e,s,n).next((t=>{let e=Zo();return t.forEach(((t,n)=>{e=e.insert(t,n.overlayedDocument)})),e}))))}getOverlayedDocuments(t,e){const n=ea();return this.populateOverlays(t,n,e).next((()=>this.computeViews(t,e,n,oa())))}populateOverlays(t,e,n){const s=[];return n.forEach((t=>{e.has(t)||s.push(t)})),this.documentOverlayCache.getOverlays(t,s).next((t=>{t.forEach(((t,n)=>{e.set(t,n)}))}))}computeViews(t,e,n,s){let r=Yo();const i=sa(),o=sa();return e.forEach(((t,e)=>{const o=n.get(e.key);s.has(e.key)&&(void 0===o||o.mutation instanceof La)?r=r.insert(e.key,e):void 0!==o?(i.set(e.key,o.mutation.getFieldMask()),ka(o.mutation,e,o.mutation.getFieldMask(),ci.now())):i.set(e.key,Mi.empty())})),this.recalculateAndSaveOverlays(t,r).next((t=>(t.forEach(((t,e)=>i.set(t,e))),e.forEach(((t,e)=>{var n;return o.set(t,new Gc(e,null!==(n=i.get(t))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(t,e){const n=sa();let s=new ki(((t,e)=>t-e)),r=oa();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>{for(const r of t)r.keys().forEach((t=>{const i=e.get(t);if(null===i)return;let o=n.get(t)||Mi.empty();o=r.applyToLocalView(i,o),n.set(t,o);const a=(s.get(r.batchId)||oa()).add(t);s=s.insert(r.batchId,a)}))})).next((()=>{const i=[],o=s.getReverseIterator();for(;o.hasNext();){const s=o.getNext(),a=s.key,c=s.value,u=na();c.forEach((t=>{if(!r.has(t)){const s=_a(e.get(t),n.get(t));null!==s&&u.set(t,s),r=r.add(t)}})),i.push(this.documentOverlayCache.saveOverlays(t,a,u))}return bi.waitFor(i)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(t,e){return this.remoteDocumentCache.getEntries(t,e).next((e=>this.recalculateAndSaveOverlays(t,e)))}getDocumentsMatchingQuery(t,e,n){return function(t){return gi.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.getDocumentsMatchingDocumentQuery(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.getDocumentsMatchingCollectionGroupQuery(t,e,n):this.getDocumentsMatchingCollectionQuery(t,e,n)}getNextDocuments(t,e,n,s){return this.remoteDocumentCache.getAllFromCollectionGroup(t,e,n,s).next((r=>{const i=s-r.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(t,e,n.largestBatchId,s-r.size):bi.resolve(ea());let o=-1,a=r;return i.next((e=>bi.forEach(e,((e,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),r.get(e)?bi.resolve():this.remoteDocumentCache.getEntry(t,e).next((t=>{a=a.insert(e,t)}))))).next((()=>this.populateOverlays(t,e,r))).next((()=>this.computeViews(t,a,e,oa()))).next((t=>({batchId:o,changes:ta(t)})))))}))}getDocumentsMatchingDocumentQuery(t,e){return this.getDocument(t,new gi(e)).next((t=>{let e=Zo();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}getDocumentsMatchingCollectionGroupQuery(t,e,n){const s=e.collectionGroup;let r=Zo();return this.indexManager.getCollectionParents(t,s).next((i=>bi.forEach(i,(i=>{const o=function(t,e){return new Fo(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,i.child(s));return this.getDocumentsMatchingCollectionQuery(t,o,n).next((t=>{t.forEach(((t,e)=>{r=r.insert(t,e)}))}))})).next((()=>r))))}getDocumentsMatchingCollectionQuery(t,e,n){let s;return this.documentOverlayCache.getOverlaysForCollection(t,e.path,n.largestBatchId).next((r=>(s=r,this.remoteDocumentCache.getDocumentsMatchingQuery(t,e,n,s)))).next((t=>{s.forEach(((e,n)=>{const s=n.getKey();null===t.get(s)&&(t=t.insert(s,uo.newInvalidDocument(s)))}));let n=Zo();return t.forEach(((t,r)=>{const i=s.get(t);void 0!==i&&ka(i.mutation,r,Mi.empty(),ci.now()),Go(e,r)&&(n=n.insert(t,r))})),n}))}}class Qc{constructor(t){this.serializer=t,this.cs=new Map,this.hs=new Map}getBundleMetadata(t,e){return bi.resolve(this.cs.get(e))}saveBundleMetadata(t,e){var n;return this.cs.set(e.id,{id:(n=e).id,version:n.version,createTime:mc(n.createTime)}),bi.resolve()}getNamedQuery(t,e){return bi.resolve(this.hs.get(e))}saveNamedQuery(t,e){return this.hs.set(e.name,function(t){return{name:t.name,query:Uc(t.bundledQuery),readTime:mc(t.readTime)}}(e)),bi.resolve()}}class Wc{constructor(){this.overlays=new ki(gi.comparator),this.ls=new Map}getOverlay(t,e){return bi.resolve(this.overlays.get(e))}getOverlays(t,e){const n=ea();return bi.forEach(e,(e=>this.getOverlay(t,e).next((t=>{null!==t&&n.set(e,t)})))).next((()=>n))}saveOverlays(t,e,n){return n.forEach(((n,s)=>{this.we(t,e,s)})),bi.resolve()}removeOverlaysForBatchId(t,e,n){const s=this.ls.get(n);return void 0!==s&&(s.forEach((t=>this.overlays=this.overlays.remove(t))),this.ls.delete(n)),bi.resolve()}getOverlaysForCollection(t,e,n){const s=ea(),r=e.length+1,i=new gi(e.child("")),o=this.overlays.getIteratorFrom(i);for(;o.hasNext();){const t=o.getNext().value,i=t.getKey();if(!e.isPrefixOf(i.path))break;i.path.length===r&&t.largestBatchId>n&&s.set(t.getKey(),t)}return bi.resolve(s)}getOverlaysForCollectionGroup(t,e,n,s){let r=new ki(((t,e)=>t-e));const i=this.overlays.getIterator();for(;i.hasNext();){const t=i.getNext().value;if(t.getKey().getCollectionGroup()===e&&t.largestBatchId>n){let e=r.get(t.largestBatchId);null===e&&(e=ea(),r=r.insert(t.largestBatchId,e)),e.set(t.getKey(),t)}}const o=ea(),a=r.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((t,e)=>o.set(t,e))),!(o.size()>=s)););return bi.resolve(o)}we(t,e,n){const s=this.overlays.get(n.key);if(null!==s){const t=this.ls.get(s.largestBatchId).delete(n.key);this.ls.set(s.largestBatchId,t)}this.overlays=this.overlays.insert(n.key,new ja(e,n));let r=this.ls.get(e);void 0===r&&(r=oa(),this.ls.set(e,r)),this.ls.set(e,r.add(n.key))}}class Xc{constructor(){this.fs=new Ri(Yc.ds),this.ws=new Ri(Yc._s)}isEmpty(){return this.fs.isEmpty()}addReference(t,e){const n=new Yc(t,e);this.fs=this.fs.add(n),this.ws=this.ws.add(n)}gs(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.ys(new Yc(t,e))}ps(t,e){t.forEach((t=>this.removeReference(t,e)))}Is(t){const e=new gi(new li([])),n=new Yc(e,t),s=new Yc(e,t+1),r=[];return this.ws.forEachInRange([n,s],(t=>{this.ys(t),r.push(t.key)})),r}Ts(){this.fs.forEach((t=>this.ys(t)))}ys(t){this.fs=this.fs.delete(t),this.ws=this.ws.delete(t)}Es(t){const e=new gi(new li([])),n=new Yc(e,t),s=new Yc(e,t+1);let r=oa();return this.ws.forEachInRange([n,s],(t=>{r=r.add(t.key)})),r}containsKey(t){const e=new Yc(t,0),n=this.fs.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class Yc{constructor(t,e){this.key=t,this.As=e}static ds(t,e){return gi.comparator(t.key,e.key)||oi(t.As,e.As)}static _s(t,e){return oi(t.As,e.As)||gi.comparator(t.key,e.key)}}class Jc{constructor(t,e){this.indexManager=t,this.referenceDelegate=e,this.mutationQueue=[],this.vs=1,this.Rs=new Ri(Yc.ds)}checkEmpty(t){return bi.resolve(0===this.mutationQueue.length)}addMutationBatch(t,e,n,s){const r=this.vs;this.vs++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const i=new Ua(r,e,n,s);this.mutationQueue.push(i);for(const e of s)this.Rs=this.Rs.add(new Yc(e.key,r)),this.indexManager.addToCollectionParentIndex(t,e.key.path.popLast());return bi.resolve(i)}lookupMutationBatch(t,e){return bi.resolve(this.Ps(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,s=this.bs(n),r=s<0?0:s;return bi.resolve(this.mutationQueue.length>r?this.mutationQueue[r]:null)}getHighestUnacknowledgedBatchId(){return bi.resolve(0===this.mutationQueue.length?-1:this.vs-1)}getAllMutationBatches(t){return bi.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new Yc(e,0),s=new Yc(e,Number.POSITIVE_INFINITY),r=[];return this.Rs.forEachInRange([n,s],(t=>{const e=this.Ps(t.As);r.push(e)})),bi.resolve(r)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new Ri(oi);return e.forEach((t=>{const e=new Yc(t,0),s=new Yc(t,Number.POSITIVE_INFINITY);this.Rs.forEachInRange([e,s],(t=>{n=n.add(t.As)}))})),bi.resolve(this.Vs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,s=n.length+1;let r=n;gi.isDocumentKey(r)||(r=r.child(""));const i=new Yc(new gi(r),0);let o=new Ri(oi);return this.Rs.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===s&&(o=o.add(t.As)),!0)}),i),bi.resolve(this.Vs(o))}Vs(t){const e=[];return t.forEach((t=>{const n=this.Ps(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){Kr(0===this.Ss(e.batchId,"removed")),this.mutationQueue.shift();let n=this.Rs;return bi.forEach(e.mutations,(s=>{const r=new Yc(s.key,e.batchId);return n=n.delete(r),this.referenceDelegate.markPotentiallyOrphaned(t,s.key)})).next((()=>{this.Rs=n}))}Cn(t){}containsKey(t,e){const n=new Yc(e,0),s=this.Rs.firstAfterOrEqual(n);return bi.resolve(e.isEqual(s&&s.key))}performConsistencyCheck(t){return this.mutationQueue.length,bi.resolve()}Ss(t,e){return this.bs(t)}bs(t){return 0===this.mutationQueue.length?0:t-this.mutationQueue[0].batchId}Ps(t){const e=this.bs(t);return e<0||e>=this.mutationQueue.length?null:this.mutationQueue[e]}}class Zc{constructor(t){this.Ds=t,this.docs=new ki(gi.comparator),this.size=0}setIndexManager(t){this.indexManager=t}addEntry(t,e){const n=e.key,s=this.docs.get(n),r=s?s.size:0,i=this.Ds(e);return this.docs=this.docs.insert(n,{document:e.mutableCopy(),size:i}),this.size+=i-r,this.indexManager.addToCollectionParentIndex(t,n.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return bi.resolve(n?n.document.mutableCopy():uo.newInvalidDocument(e))}getEntries(t,e){let n=Yo();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.mutableCopy():uo.newInvalidDocument(t))})),bi.resolve(n)}getDocumentsMatchingQuery(t,e,n,s){let r=Yo();const i=e.path,o=new gi(i.child("")),a=this.docs.getIteratorFrom(o);for(;a.hasNext();){const{key:t,value:{document:o}}=a.getNext();if(!i.isPrefixOf(t.path))break;t.path.length>i.length+1||yi(pi(o),n)<=0||(s.has(o.key)||Go(e,o))&&(r=r.insert(o.key,o.mutableCopy()))}return bi.resolve(r)}getAllFromCollectionGroup(t,e,n,s){zr()}Cs(t,e){return bi.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new tu(this)}getSize(t){return bi.resolve(this.size)}}class tu extends Kc{constructor(t){super(),this.os=t}applyChanges(t){const e=[];return this.changes.forEach(((n,s)=>{s.isValidDocument()?e.push(this.os.addEntry(t,s)):this.os.removeEntry(n)})),bi.waitFor(e)}getFromCache(t,e){return this.os.getEntry(t,e)}getAllFromCache(t,e){return this.os.getEntries(t,e)}}class eu{constructor(t){this.persistence=t,this.xs=new Wo((t=>Mo(t)),Oo),this.lastRemoteSnapshotVersion=ui.min(),this.highestTargetId=0,this.Ns=0,this.ks=new Xc,this.targetCount=0,this.Ms=zc.kn()}forEachTarget(t,e){return this.xs.forEach(((t,n)=>e(n))),bi.resolve()}getLastRemoteSnapshotVersion(t){return bi.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return bi.resolve(this.Ns)}allocateTargetId(t){return this.highestTargetId=this.Ms.next(),bi.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Ns&&(this.Ns=e),bi.resolve()}Fn(t){this.xs.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Ms=new zc(e),this.highestTargetId=e),t.sequenceNumber>this.Ns&&(this.Ns=t.sequenceNumber)}addTargetData(t,e){return this.Fn(e),this.targetCount+=1,bi.resolve()}updateTargetData(t,e){return this.Fn(e),bi.resolve()}removeTargetData(t,e){return this.xs.delete(e.target),this.ks.Is(e.targetId),this.targetCount-=1,bi.resolve()}removeTargets(t,e,n){let s=0;const r=[];return this.xs.forEach(((i,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.xs.delete(i),r.push(this.removeMatchingKeysForTargetId(t,o.targetId)),s++)})),bi.waitFor(r).next((()=>s))}getTargetCount(t){return bi.resolve(this.targetCount)}getTargetData(t,e){const n=this.xs.get(e)||null;return bi.resolve(n)}addMatchingKeys(t,e,n){return this.ks.gs(e,n),bi.resolve()}removeMatchingKeys(t,e,n){this.ks.ps(e,n);const s=this.persistence.referenceDelegate,r=[];return s&&e.forEach((e=>{r.push(s.markPotentiallyOrphaned(t,e))})),bi.waitFor(r)}removeMatchingKeysForTargetId(t,e){return this.ks.Is(e),bi.resolve()}getMatchingKeysForTargetId(t,e){const n=this.ks.Es(e);return bi.resolve(n)}containsKey(t,e){return bi.resolve(this.ks.containsKey(e))}}class nu{constructor(t,e){this.$s={},this.overlays={},this.Os=new Ci(0),this.Fs=!1,this.Fs=!0,this.referenceDelegate=t(this),this.Bs=new eu(this),this.indexManager=new jc,this.remoteDocumentCache=function(t){return new Zc(t)}((t=>this.referenceDelegate.Ls(t))),this.serializer=new Vc(e),this.qs=new Qc(this.serializer)}start(){return Promise.resolve()}shutdown(){return this.Fs=!1,Promise.resolve()}get started(){return this.Fs}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(t){return this.indexManager}getDocumentOverlayCache(t){let e=this.overlays[t.toKey()];return e||(e=new Wc,this.overlays[t.toKey()]=e),e}getMutationQueue(t,e){let n=this.$s[t.toKey()];return n||(n=new Jc(e,this.referenceDelegate),this.$s[t.toKey()]=n),n}getTargetCache(){return this.Bs}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.qs}runTransaction(t,e,n){Br("MemoryPersistence","Starting transaction:",t);const s=new su(this.Os.next());return this.referenceDelegate.Us(),n(s).next((t=>this.referenceDelegate.Ks(s).next((()=>t)))).toPromise().then((t=>(s.raiseOnCommittedEvent(),t)))}Gs(t,e){return bi.or(Object.values(this.$s).map((n=>()=>n.containsKey(t,e))))}}class su extends wi{constructor(t){super(),this.currentSequenceNumber=t}}class ru{constructor(t){this.persistence=t,this.Qs=new Xc,this.js=null}static zs(t){return new ru(t)}get Ws(){if(this.js)return this.js;throw zr()}addReference(t,e,n){return this.Qs.addReference(n,e),this.Ws.delete(n.toString()),bi.resolve()}removeReference(t,e,n){return this.Qs.removeReference(n,e),this.Ws.add(n.toString()),bi.resolve()}markPotentiallyOrphaned(t,e){return this.Ws.add(e.toString()),bi.resolve()}removeTarget(t,e){this.Qs.Is(e.targetId).forEach((t=>this.Ws.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.Ws.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}Us(){this.js=new Set}Ks(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return bi.forEach(this.Ws,(n=>{const s=gi.fromPath(n);return this.Hs(t,s).next((t=>{t||e.removeEntry(s,ui.min())}))})).next((()=>(this.js=null,e.apply(t))))}updateLimboDocument(t,e){return this.Hs(t,e).next((t=>{t?this.Ws.delete(e.toString()):this.Ws.add(e.toString())}))}Ls(t){return 0}Hs(t,e){return bi.or([()=>bi.resolve(this.Qs.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Gs(t,e)])}}class iu{constructor(t,e,n,s){this.targetId=t,this.fromCache=e,this.Fi=n,this.Bi=s}static Li(t,e){let n=oa(),s=oa();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:s=s.add(t.doc.key)}return new iu(t,e.fromCache,n,s)}}class ou{constructor(){this.qi=!1}initialize(t,e){this.Ui=t,this.indexManager=e,this.qi=!0}getDocumentsMatchingQuery(t,e,n,s){return this.Ki(t,e).next((r=>r||this.Gi(t,e,s,n))).next((n=>n||this.Qi(t,e)))}Ki(t,e){if(Uo(e))return bi.resolve(null);let n=jo(e);return this.indexManager.getIndexType(t,n).next((s=>0===s?null:(null!==e.limit&&1===s&&(e=qo(e,null,"F"),n=jo(e)),this.indexManager.getDocumentsMatchingTarget(t,n).next((s=>{const r=oa(...s);return this.Ui.getDocuments(t,r).next((s=>this.indexManager.getMinOffset(t,n).next((n=>{const i=this.ji(e,s);return this.zi(e,i,r,n.readTime)?this.Ki(t,qo(e,null,"F")):this.Wi(t,i,e,n)}))))})))))}Gi(t,e,n,s){return Uo(e)||s.isEqual(ui.min())?this.Qi(t,e):this.Ui.getDocuments(t,n).next((r=>{const i=this.ji(e,r);return this.zi(e,i,n,s)?this.Qi(t,e):(Ur()<=b.DEBUG&&Br("QueryEngine","Re-using previous result from %s to execute query: %s",s.toString(),Ko(e)),this.Wi(t,i,e,function(t,e){const n=t.toTimestamp().seconds,s=t.toTimestamp().nanoseconds+1,r=ui.fromTimestamp(1e9===s?new ci(n+1,0):new ci(n,s));return new mi(r,gi.empty(),e)}(s,-1)))}))}ji(t,e){let n=new Ri(Ho(t));return e.forEach(((e,s)=>{Go(t,s)&&(n=n.add(s))})),n}zi(t,e,n,s){if(null===t.limit)return!1;if(n.size!==e.size)return!0;const r="F"===t.limitType?e.last():e.first();return!!r&&(r.hasPendingWrites||r.version.compareTo(s)>0)}Qi(t,e){return Ur()<=b.DEBUG&&Br("QueryEngine","Using full collection scan to execute query:",Ko(e)),this.Ui.getDocumentsMatchingQuery(t,e,mi.min())}Wi(t,e,n,s){return this.Ui.getDocumentsMatchingQuery(t,n,s).next((t=>(e.forEach((e=>{t=t.insert(e.key,e)})),t)))}}class au{constructor(t,e,n,s){this.persistence=t,this.Hi=e,this.serializer=s,this.Ji=new ki(oi),this.Yi=new Wo((t=>Mo(t)),Oo),this.Xi=new Map,this.Zi=t.getRemoteDocumentCache(),this.Bs=t.getTargetCache(),this.qs=t.getBundleCache(),this.tr(n)}tr(t){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(t),this.indexManager=this.persistence.getIndexManager(t),this.mutationQueue=this.persistence.getMutationQueue(t,this.indexManager),this.localDocuments=new Hc(this.Zi,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.Zi.setIndexManager(this.indexManager),this.Hi.initialize(this.localDocuments,this.indexManager)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Ji)))}}async function cu(t,e){const n=Gr(t);return await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.mutationQueue.getAllMutationBatches(t).next((r=>(s=r,n.tr(e),n.mutationQueue.getAllMutationBatches(t)))).next((e=>{const r=[],i=[];let o=oa();for(const t of s){r.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){i.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return n.localDocuments.getDocuments(t,o).next((t=>({er:t,removedBatchIds:r,addedBatchIds:i})))}))}))}function uu(t){const e=Gr(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.Bs.getLastRemoteSnapshotVersion(t)))}function hu(t,e){const n=Gr(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(t,e))))}async function lu(t,e,n){const s=Gr(t),r=s.Ji.get(e),i=n?"readwrite":"readwrite-primary";try{n||await s.persistence.runTransaction("Release target",i,(t=>s.persistence.referenceDelegate.removeTarget(t,r)))}catch(t){if(!Ti(t))throw t;Br("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}s.Ji=s.Ji.remove(e),s.Yi.delete(r.target)}function du(t,e,n){const s=Gr(t);let r=ui.min(),i=oa();return s.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const s=Gr(t),r=s.Yi.get(n);return void 0!==r?bi.resolve(s.Ji.get(r)):s.Bs.getTargetData(e,n)}(s,t,jo(e)).next((e=>{if(e)return r=e.lastLimboFreeSnapshotVersion,s.Bs.getMatchingKeysForTargetId(t,e.targetId).next((t=>{i=t}))})).next((()=>s.Hi.getDocumentsMatchingQuery(t,e,n?r:ui.min(),n?i:oa()))).next((t=>(function(t,e,n){let s=t.Xi.get(e)||ui.min();n.forEach(((t,e)=>{e.readTime.compareTo(s)>0&&(s=e.readTime)})),t.Xi.set(e,s)}(s,function(t){return t.collectionGroup||(t.path.length%2==1?t.path.lastSegment():t.path.get(t.path.length-2))}(e),t),{documents:t,ir:i})))))}class fu{constructor(){this.activeTargetIds=aa}lr(t){this.activeTargetIds=this.activeTargetIds.add(t)}dr(t){this.activeTargetIds=this.activeTargetIds.delete(t)}hr(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class gu{constructor(){this.Hr=new fu,this.Jr={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.Hr.lr(t),this.Jr[t]||"not-current"}updateQueryState(t,e,n){this.Jr[t]=e}removeLocalQueryTarget(t){this.Hr.dr(t)}isLocalQueryTarget(t){return this.Hr.activeTargetIds.has(t)}clearQueryState(t){delete this.Jr[t]}getAllActiveQueryTargets(){return this.Hr.activeTargetIds}isActiveQueryTarget(t){return this.Hr.activeTargetIds.has(t)}start(){return this.Hr=new fu,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(t){}}class pu{Yr(t){}shutdown(){}}class mu{constructor(){this.Xr=()=>this.Zr(),this.eo=()=>this.no(),this.so=[],this.io()}Yr(t){this.so.push(t)}shutdown(){window.removeEventListener("online",this.Xr),window.removeEventListener("offline",this.eo)}io(){window.addEventListener("online",this.Xr),window.addEventListener("offline",this.eo)}Zr(){Br("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.so)t(0)}no(){Br("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.so)t(1)}static D(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}let yu=null;function vu(){return null===yu?yu=268435456+Math.round(2147483648*Math.random()):yu++,"0x"+yu.toString(16)}const wu={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery",RunAggregationQuery:"runAggregationQuery"};class Eu{constructor(t){this.ro=t.ro,this.oo=t.oo}uo(t){this.co=t}ao(t){this.ho=t}onMessage(t){this.lo=t}close(){this.oo()}send(t){this.ro(t)}fo(){this.co()}wo(t){this.ho(t)}_o(t){this.lo(t)}}const bu="WebChannelConnection";class Tu extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.mo=e+"://"+t.host,this.yo="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}get po(){return!1}Io(t,e,n,s,r){const i=vu(),o=this.To(t,e);Br("RestConnection",`Sending RPC '${t}' ${i}:`,o,n);const a={};return this.Eo(a,s,r),this.Ao(t,o,a,n).then((e=>(Br("RestConnection",`Received RPC '${t}' ${i}: `,e),e)),(e=>{throw qr("RestConnection",`RPC '${t}' ${i} failed with error: `,e,"url: ",o,"request:",n),e}))}vo(t,e,n,s,r,i){return this.Io(t,e,n,s,r)}Eo(t,e,n){t["X-Goog-Api-Client"]="gl-js/ fire/"+Fr,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e&&e.headers.forEach(((e,n)=>t[n]=e)),n&&n.headers.forEach(((e,n)=>t[n]=e))}To(t,e){const n=wu[t];return`${this.mo}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams,this.longPollingOptions=t.longPollingOptions}Ao(t,e,n,s){const r=vu();return new Promise(((i,o)=>{const a=new Rr;a.setWithCredentials(!0),a.listenOnce(_r.COMPLETE,(()=>{try{switch(a.getLastErrorCode()){case Ar.NO_ERROR:const e=a.getResponseJson();Br(bu,`XHR for RPC '${t}' ${r} received:`,JSON.stringify(e)),i(e);break;case Ar.TIMEOUT:Br(bu,`RPC '${t}' ${r} timed out`),o(new Qr(Hr.DEADLINE_EXCEEDED,"Request time out"));break;case Ar.HTTP_ERROR:const n=a.getStatus();if(Br(bu,`RPC '${t}' ${r} failed with status:`,n,"response text:",a.getResponseText()),n>0){let t=a.getResponseJson();Array.isArray(t)&&(t=t[0]);const e=null==t?void 0:t.error;if(e&&e.status&&e.message){const t=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(Hr).indexOf(e)>=0?e:Hr.UNKNOWN}(e.status);o(new Qr(t,e.message))}else o(new Qr(Hr.UNKNOWN,"Server responded with status "+a.getStatus()))}else o(new Qr(Hr.UNAVAILABLE,"Connection failed."));break;default:zr()}}finally{Br(bu,`RPC '${t}' ${r} completed.`)}}));const c=JSON.stringify(s);Br(bu,`RPC '${t}' ${r} sending request:`,s),a.send(e,"POST",c,n,15)}))}Ro(t,e,n){const s=vu(),r=[this.mo,"/","google.firestore.v1.Firestore","/",t,"/channel"],i=Ir(),o=Sr(),a={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling},c=this.longPollingOptions.timeoutSeconds;void 0!==c&&(a.longPollingTimeout=Math.round(1e3*c)),this.useFetchStreams&&(a.xmlHttpFactory=new Nr({})),this.Eo(a.initMessageHeaders,e,n),a.encodeInitMessageHeaders=!0;const u=r.join("");Br(bu,`Creating RPC '${t}' stream ${s}: ${u}`,a);const h=i.createWebChannel(u,a);let l=!1,d=!1;const f=new Eu({ro:e=>{d?Br(bu,`Not sending because RPC '${t}' stream ${s} is closed:`,e):(l||(Br(bu,`Opening RPC '${t}' stream ${s} transport.`),h.open(),l=!0),Br(bu,`RPC '${t}' stream ${s} sending:`,e),h.send(e))},oo:()=>h.close()}),g=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return g(h,xr.EventType.OPEN,(()=>{d||Br(bu,`RPC '${t}' stream ${s} transport opened.`)})),g(h,xr.EventType.CLOSE,(()=>{d||(d=!0,Br(bu,`RPC '${t}' stream ${s} transport closed`),f.wo())})),g(h,xr.EventType.ERROR,(e=>{d||(d=!0,qr(bu,`RPC '${t}' stream ${s} transport errored:`,e),f.wo(new Qr(Hr.UNAVAILABLE,"The operation could not be completed")))})),g(h,xr.EventType.MESSAGE,(e=>{var n;if(!d){const r=e.data[0];Kr(!!r);const i=r,o=i.error||(null===(n=i[0])||void 0===n?void 0:n.error);if(o){Br(bu,`RPC '${t}' stream ${s} received error:`,o);const e=o.status;let n=function(t){const e=$a[t];if(void 0!==e)return Ka(e)}(e),r=o.message;void 0===n&&(n=Hr.INTERNAL,r="Unknown error status: "+e+" with message "+o.message),d=!0,f.wo(new Qr(n,r)),h.close()}else Br(bu,`RPC '${t}' stream ${s} received:`,r),f._o(r)}})),g(o,Dr.STAT_EVENT,(e=>{e.stat===kr.PROXY?Br(bu,`RPC '${t}' stream ${s} detected buffering proxy`):e.stat===kr.NOPROXY&&Br(bu,`RPC '${t}' stream ${s} detected no buffering proxy`)})),setTimeout((()=>{f.fo()}),0),f}}function Cu(){return"undefined"!=typeof document?document:null}function Iu(t){return new lc(t,!0)}class Su{constructor(t,e,n=1e3,s=1.5,r=6e4){this.ii=t,this.timerId=e,this.Po=n,this.bo=s,this.Vo=r,this.So=0,this.Do=null,this.Co=Date.now(),this.reset()}reset(){this.So=0}xo(){this.So=this.Vo}No(t){this.cancel();const e=Math.floor(this.So+this.ko()),n=Math.max(0,Date.now()-this.Co),s=Math.max(0,e-n);s>0&&Br("ExponentialBackoff",`Backing off for ${s} ms (base delay: ${this.So} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Do=this.ii.enqueueAfterDelay(this.timerId,s,(()=>(this.Co=Date.now(),t()))),this.So*=this.bo,this.So<this.Po&&(this.So=this.Po),this.So>this.Vo&&(this.So=this.Vo)}Mo(){null!==this.Do&&(this.Do.skipDelay(),this.Do=null)}cancel(){null!==this.Do&&(this.Do.cancel(),this.Do=null)}ko(){return(Math.random()-.5)*this.So}}class Au{constructor(t,e,n,s,r,i,o,a){this.ii=t,this.$o=n,this.Oo=s,this.connection=r,this.authCredentialsProvider=i,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Fo=0,this.Bo=null,this.Lo=null,this.stream=null,this.qo=new Su(t,e)}Uo(){return 1===this.state||5===this.state||this.Ko()}Ko(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.Go()}async stop(){this.Uo()&&await this.close(0)}Qo(){this.state=0,this.qo.reset()}jo(){this.Ko()&&null===this.Bo&&(this.Bo=this.ii.enqueueAfterDelay(this.$o,6e4,(()=>this.zo())))}Wo(t){this.Ho(),this.stream.send(t)}async zo(){if(this.Ko())return this.close(0)}Ho(){this.Bo&&(this.Bo.cancel(),this.Bo=null)}Jo(){this.Lo&&(this.Lo.cancel(),this.Lo=null)}async close(t,e){this.Ho(),this.Jo(),this.qo.cancel(),this.Fo++,4!==t?this.qo.reset():e&&e.code===Hr.RESOURCE_EXHAUSTED?(jr(e.toString()),jr("Using maximum backoff delay to prevent overloading the backend."),this.qo.xo()):e&&e.code===Hr.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Yo(),this.stream.close(),this.stream=null),this.state=t,await this.listener.ao(e)}Yo(){}auth(){this.state=1;const t=this.Xo(this.Fo),e=this.Fo;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([t,n])=>{this.Fo===e&&this.Zo(t,n)}),(e=>{t((()=>{const t=new Qr(Hr.UNKNOWN,"Fetching auth token failed: "+e.message);return this.tu(t)}))}))}Zo(t,e){const n=this.Xo(this.Fo);this.stream=this.eu(t,e),this.stream.uo((()=>{n((()=>(this.state=2,this.Lo=this.ii.enqueueAfterDelay(this.Oo,1e4,(()=>(this.Ko()&&(this.state=3),Promise.resolve()))),this.listener.uo())))})),this.stream.ao((t=>{n((()=>this.tu(t)))})),this.stream.onMessage((t=>{n((()=>this.onMessage(t)))}))}Go(){this.state=5,this.qo.No((async()=>{this.state=0,this.start()}))}tu(t){return Br("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(4,t)}Xo(t){return e=>{this.ii.enqueueAndForget((()=>this.Fo===t?e():(Br("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class _u extends Au{constructor(t,e,n,s,r,i){super(t,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",e,n,s,i),this.serializer=r}eu(t,e){return this.connection.Ro("Listen",t,e)}onMessage(t){this.qo.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const s=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:zr()}(e.targetChange.targetChangeType||"NO_CHANGE"),r=e.targetChange.targetIds||[],i=function(t,e){return t.useProto3Json?(Kr(void 0===e||"string"==typeof e),Pi.fromBase64String(e||"")):(Kr(void 0===e||e instanceof Uint8Array),Pi.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?Hr.UNKNOWN:Ka(t.code);return new Qr(e,t.message||"")}(o);n=new sc(s,r,i,a||null)}else if("documentChange"in e){e.documentChange;const s=e.documentChange;s.document,s.document.name,s.document.updateTime;const r=Ec(t,s.document.name),i=mc(s.document.updateTime),o=s.document.createTime?mc(s.document.createTime):ui.min(),a=new ao({mapValue:{fields:s.document.fields}}),c=uo.newFoundDocument(r,i,o,a),u=s.targetIds||[],h=s.removedTargetIds||[];n=new ec(u,h,c.key,c)}else if("documentDelete"in e){e.documentDelete;const s=e.documentDelete;s.document;const r=Ec(t,s.document),i=s.readTime?mc(s.readTime):ui.min(),o=uo.newNoDocument(r,i),a=s.removedTargetIds||[];n=new ec([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const s=e.documentRemove;s.document;const r=Ec(t,s.document),i=s.removedTargetIds||[];n=new ec([],i,r,null)}else{if(!("filter"in e))return zr();{e.filter;const t=e.filter;t.targetId;const{count:s=0,unchangedNames:r}=t,i=new qa(s,r),o=t.targetId;n=new nc(o,i)}}return n}(this.serializer,t),n=function(t){if(!("targetChange"in t))return ui.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?ui.min():e.readTime?mc(e.readTime):ui.min()}(t);return this.listener.nu(e,n)}su(t){const e={};e.database=Tc(this.serializer),e.addTarget=function(t,e){let n;const s=e.target;if(n=Po(s)?{documents:Sc(t,s)}:{query:Ac(t,s)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0){n.resumeToken=gc(t,e.resumeToken);const s=dc(t,e.expectedCount);null!==s&&(n.expectedCount=s)}else if(e.snapshotVersion.compareTo(ui.min())>0){n.readTime=fc(t,e.snapshotVersion.toTimestamp());const s=dc(t,e.expectedCount);null!==s&&(n.expectedCount=s)}return n}(this.serializer,t);const n=function(t,e){const n=function(t){switch(t){case"TargetPurposeListen":return null;case"TargetPurposeExistenceFilterMismatch":return"existence-filter-mismatch";case"TargetPurposeExistenceFilterMismatchBloom":return"existence-filter-mismatch-bloom";case"TargetPurposeLimboResolution":return"limbo-document";default:return zr()}}(e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.serializer,t);n&&(e.labels=n),this.Wo(e)}iu(t){const e={};e.database=Tc(this.serializer),e.removeTarget=t,this.Wo(e)}}class Du extends Au{constructor(t,e,n,s,r,i){super(t,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",e,n,s,i),this.serializer=r,this.ru=!1}get ou(){return this.ru}start(){this.ru=!1,this.lastStreamToken=void 0,super.start()}Yo(){this.ru&&this.uu([])}eu(t,e){return this.connection.Ro("Write",t,e)}onMessage(t){if(Kr(!!t.streamToken),this.lastStreamToken=t.streamToken,this.ru){this.qo.reset();const e=function(t,e){return t&&t.length>0?(Kr(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?mc(t.updateTime):mc(e);return n.isEqual(ui.min())&&(n=mc(e)),new Ca(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=mc(t.commitTime);return this.listener.cu(n,e)}return Kr(!t.writeResults||0===t.writeResults.length),this.ru=!0,this.listener.au()}hu(){const t={};t.database=Tc(this.serializer),this.Wo(t)}uu(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof Ra)n={update:Ic(t,e.key,e.value)};else if(e instanceof Fa)n={delete:wc(t,e.key)};else if(e instanceof La)n={update:Ic(t,e.key,e.data),updateMask:Oc(e.fieldMask)};else{if(!(e instanceof Va))return zr();n={verify:wc(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof pa)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof ma)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof va)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Ea)return{fieldPath:e.field.canonicalString(),increment:n.gt};throw zr()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:pc(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:zr()}(t,e.precondition)),n}(this.serializer,t)))};this.Wo(e)}}class ku extends class{}{constructor(t,e,n,s){super(),this.authCredentials=t,this.appCheckCredentials=e,this.connection=n,this.serializer=s,this.lu=!1}fu(){if(this.lu)throw new Qr(Hr.FAILED_PRECONDITION,"The client has already been terminated.")}Io(t,e,n){return this.fu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,r])=>this.connection.Io(t,e,n,s,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Hr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new Qr(Hr.UNKNOWN,t.toString())}))}vo(t,e,n,s){return this.fu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([r,i])=>this.connection.vo(t,e,n,r,i,s))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Hr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new Qr(Hr.UNKNOWN,t.toString())}))}terminate(){this.lu=!0}}class Nu{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.wu=0,this._u=null,this.mu=!0}gu(){0===this.wu&&(this.yu("Unknown"),this._u=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this._u=null,this.pu("Backend didn't respond within 10 seconds."),this.yu("Offline"),Promise.resolve()))))}Iu(t){"Online"===this.state?this.yu("Unknown"):(this.wu++,this.wu>=1&&(this.Tu(),this.pu(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.yu("Offline")))}set(t){this.Tu(),this.wu=0,"Online"===t&&(this.mu=!1),this.yu(t)}yu(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}pu(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.mu?(jr(e),this.mu=!1):Br("OnlineStateTracker",e)}Tu(){null!==this._u&&(this._u.cancel(),this._u=null)}}class xu{constructor(t,e,n,s,r){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Eu=[],this.Au=new Map,this.vu=new Set,this.Ru=[],this.Pu=r,this.Pu.Yr((t=>{n.enqueueAndForget((async()=>{Bu(this)&&(Br("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=Gr(t);e.vu.add(4),await Lu(e),e.bu.set("Unknown"),e.vu.delete(4),await Ru(e)}(this))}))})),this.bu=new Nu(n,s)}}async function Ru(t){if(Bu(t))for(const e of t.Ru)await e(!0)}async function Lu(t){for(const e of t.Ru)await e(!1)}function Mu(t,e){const n=Gr(t);n.Au.has(e.targetId)||(n.Au.set(e.targetId,e),Uu(n)?Vu(n):sh(n).Ko()&&Pu(n,e))}function Ou(t,e){const n=Gr(t),s=sh(n);n.Au.delete(e),s.Ko()&&Fu(n,e),0===n.Au.size&&(s.Ko()?s.jo():Bu(n)&&n.bu.set("Unknown"))}function Pu(t,e){if(t.Vu.qt(e.targetId),e.resumeToken.approximateByteSize()>0||e.snapshotVersion.compareTo(ui.min())>0){const n=t.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;e=e.withExpectedCount(n)}sh(t).su(e)}function Fu(t,e){t.Vu.qt(e),sh(t).iu(e)}function Vu(t){t.Vu=new ic({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),le:e=>t.Au.get(e)||null,ue:()=>t.datastore.serializer.databaseId}),sh(t).start(),t.bu.gu()}function Uu(t){return Bu(t)&&!sh(t).Uo()&&t.Au.size>0}function Bu(t){return 0===Gr(t).vu.size}function ju(t){t.Vu=void 0}async function qu(t){t.Au.forEach(((e,n)=>{Pu(t,e)}))}async function $u(t,e){ju(t),Uu(t)?(t.bu.Iu(e),Vu(t)):t.bu.set("Unknown")}async function zu(t,e,n){if(t.bu.set("Online"),e instanceof sc&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const s of e.targetIds)t.Au.has(s)&&(await t.remoteSyncer.rejectListen(s,n),t.Au.delete(s),t.Vu.removeTarget(s))}(t,e)}catch(n){Br("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await Ku(t,n)}else if(e instanceof ec?t.Vu.Ht(e):e instanceof nc?t.Vu.ne(e):t.Vu.Xt(e),!n.isEqual(ui.min()))try{const e=await uu(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Vu.ce(e);return n.targetChanges.forEach(((n,s)=>{if(n.resumeToken.approximateByteSize()>0){const r=t.Au.get(s);r&&t.Au.set(s,r.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach(((e,n)=>{const s=t.Au.get(e);if(!s)return;t.Au.set(e,s.withResumeToken(Pi.EMPTY_BYTE_STRING,s.snapshotVersion)),Fu(t,e);const r=new Fc(s.target,e,n,s.sequenceNumber);Pu(t,r)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){Br("RemoteStore","Failed to raise snapshot:",e),await Ku(t,e)}}async function Ku(t,e,n){if(!Ti(e))throw e;t.vu.add(1),await Lu(t),t.bu.set("Offline"),n||(n=()=>uu(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{Br("RemoteStore","Retrying IndexedDB access"),await n(),t.vu.delete(1),await Ru(t)}))}function Gu(t,e){return e().catch((n=>Ku(t,n,e)))}async function Hu(t){const e=Gr(t),n=rh(e);let s=e.Eu.length>0?e.Eu[e.Eu.length-1].batchId:-1;for(;Qu(e);)try{const t=await hu(e.localStore,s);if(null===t){0===e.Eu.length&&n.jo();break}s=t.batchId,Wu(e,t)}catch(t){await Ku(e,t)}Xu(e)&&Yu(e)}function Qu(t){return Bu(t)&&t.Eu.length<10}function Wu(t,e){t.Eu.push(e);const n=rh(t);n.Ko()&&n.ou&&n.uu(e.mutations)}function Xu(t){return Bu(t)&&!rh(t).Uo()&&t.Eu.length>0}function Yu(t){rh(t).start()}async function Ju(t){rh(t).hu()}async function Zu(t){const e=rh(t);for(const n of t.Eu)e.uu(n.mutations)}async function th(t,e,n){const s=t.Eu.shift(),r=Ba.from(s,e,n);await Gu(t,(()=>t.remoteSyncer.applySuccessfulWrite(r))),await Hu(t)}async function eh(t,e){e&&rh(t).ou&&await async function(t,e){if(function(t){switch(t){default:return zr();case Hr.CANCELLED:case Hr.UNKNOWN:case Hr.DEADLINE_EXCEEDED:case Hr.RESOURCE_EXHAUSTED:case Hr.INTERNAL:case Hr.UNAVAILABLE:case Hr.UNAUTHENTICATED:return!1;case Hr.INVALID_ARGUMENT:case Hr.NOT_FOUND:case Hr.ALREADY_EXISTS:case Hr.PERMISSION_DENIED:case Hr.FAILED_PRECONDITION:case Hr.ABORTED:case Hr.OUT_OF_RANGE:case Hr.UNIMPLEMENTED:case Hr.DATA_LOSS:return!0}}(n=e.code)&&n!==Hr.ABORTED){const n=t.Eu.shift();rh(t).Qo(),await Gu(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await Hu(t)}var n}(t,e),Xu(t)&&Yu(t)}async function nh(t,e){const n=Gr(t);n.asyncQueue.verifyOperationInProgress(),Br("RemoteStore","RemoteStore received new credentials");const s=Bu(n);n.vu.add(3),await Lu(n),s&&n.bu.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.vu.delete(3),await Ru(n)}function sh(t){return t.Su||(t.Su=function(t,e,n){const s=Gr(t);return s.fu(),new _u(e,s.connection,s.authCredentials,s.appCheckCredentials,s.serializer,n)}(t.datastore,t.asyncQueue,{uo:qu.bind(null,t),ao:$u.bind(null,t),nu:zu.bind(null,t)}),t.Ru.push((async e=>{e?(t.Su.Qo(),Uu(t)?Vu(t):t.bu.set("Unknown")):(await t.Su.stop(),ju(t))}))),t.Su}function rh(t){return t.Du||(t.Du=function(t,e,n){const s=Gr(t);return s.fu(),new Du(e,s.connection,s.authCredentials,s.appCheckCredentials,s.serializer,n)}(t.datastore,t.asyncQueue,{uo:Ju.bind(null,t),ao:eh.bind(null,t),au:Zu.bind(null,t),cu:th.bind(null,t)}),t.Ru.push((async e=>{e?(t.Du.Qo(),await Hu(t)):(await t.Du.stop(),t.Eu.length>0&&(Br("RemoteStore",`Stopping write stream with ${t.Eu.length} pending writes`),t.Eu=[]))}))),t.Du}class ih{constructor(t,e,n,s,r){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=s,this.removalCallback=r,this.deferred=new Wr,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,s,r){const i=Date.now()+n,o=new ih(t,e,i,s,r);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new Qr(Hr.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function oh(t,e){if(jr("AsyncQueue",`${e}: ${t}`),Ti(t))return new Qr(Hr.UNAVAILABLE,`${e}: ${t}`);throw t}class ah{constructor(t){this.comparator=t?(e,n)=>t(e,n)||gi.comparator(e.key,n.key):(t,e)=>gi.comparator(t.key,e.key),this.keyedMap=Zo(),this.sortedSet=new ki(this.comparator)}static emptySet(t){return new ah(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof ah))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(!t.isEqual(s))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new ah;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class ch{constructor(){this.Cu=new ki(gi.comparator)}track(t){const e=t.doc.key,n=this.Cu.get(e);n?0!==t.type&&3===n.type?this.Cu=this.Cu.insert(e,t):3===t.type&&1!==n.type?this.Cu=this.Cu.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Cu=this.Cu.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Cu=this.Cu.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Cu=this.Cu.remove(e):1===t.type&&2===n.type?this.Cu=this.Cu.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Cu=this.Cu.insert(e,{type:2,doc:t.doc}):zr():this.Cu=this.Cu.insert(e,t)}xu(){const t=[];return this.Cu.inorderTraversal(((e,n)=>{t.push(n)})),t}}class uh{constructor(t,e,n,s,r,i,o,a,c){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=s,this.mutatedKeys=r,this.fromCache=i,this.syncStateChanged=o,this.excludesMetadataChanges=a,this.hasCachedResults=c}static fromInitialDocuments(t,e,n,s,r){const i=[];return e.forEach((t=>{i.push({type:0,doc:t})})),new uh(t,e,ah.emptySet(e),i,n,s,!0,!1,r)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.hasCachedResults===t.hasCachedResults&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&$o(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class hh{constructor(){this.Nu=void 0,this.listeners=[]}}class lh{constructor(){this.queries=new Wo((t=>zo(t)),$o),this.onlineState="Unknown",this.ku=new Set}}function dh(t,e){const n=Gr(t);let s=!1;for(const t of e){const e=t.query,r=n.queries.get(e);if(r){for(const e of r.listeners)e.$u(t)&&(s=!0);r.Nu=t}}s&&gh(n)}function fh(t,e,n){const s=Gr(t),r=s.queries.get(e);if(r)for(const t of r.listeners)t.onError(n);s.queries.delete(e)}function gh(t){t.ku.forEach((t=>{t.next()}))}class ph{constructor(t,e,n){this.query=t,this.Ou=e,this.Fu=!1,this.Bu=null,this.onlineState="Unknown",this.options=n||{}}$u(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new uh(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0,t.hasCachedResults)}let e=!1;return this.Fu?this.Lu(t)&&(this.Ou.next(t),e=!0):this.qu(t,this.onlineState)&&(this.Uu(t),e=!0),this.Bu=t,e}onError(t){this.Ou.error(t)}Mu(t){this.onlineState=t;let e=!1;return this.Bu&&!this.Fu&&this.qu(this.Bu,t)&&(this.Uu(this.Bu),e=!0),e}qu(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return(!this.options.Ku||!n)&&(!t.docs.isEmpty()||t.hasCachedResults||"Offline"===e)}Lu(t){if(t.docChanges.length>0)return!0;const e=this.Bu&&this.Bu.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}Uu(t){t=uh.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache,t.hasCachedResults),this.Fu=!0,this.Ou.next(t)}}class mh{constructor(t){this.key=t}}class yh{constructor(t){this.key=t}}class vh{constructor(t,e){this.query=t,this.Yu=e,this.Xu=null,this.hasCachedResults=!1,this.current=!1,this.Zu=oa(),this.mutatedKeys=oa(),this.tc=Ho(t),this.ec=new ah(this.tc)}get nc(){return this.Yu}sc(t,e){const n=e?e.ic:new ch,s=e?e.ec:this.ec;let r=e?e.mutatedKeys:this.mutatedKeys,i=s,o=!1;const a="F"===this.query.limitType&&s.size===this.query.limit?s.last():null,c="L"===this.query.limitType&&s.size===this.query.limit?s.first():null;if(t.inorderTraversal(((t,e)=>{const u=s.get(t),h=Go(this.query,e)?e:null,l=!!u&&this.mutatedKeys.has(u.key),d=!!h&&(h.hasLocalMutations||this.mutatedKeys.has(h.key)&&h.hasCommittedMutations);let f=!1;u&&h?u.data.isEqual(h.data)?l!==d&&(n.track({type:3,doc:h}),f=!0):this.rc(u,h)||(n.track({type:2,doc:h}),f=!0,(a&&this.tc(h,a)>0||c&&this.tc(h,c)<0)&&(o=!0)):!u&&h?(n.track({type:0,doc:h}),f=!0):u&&!h&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(h?(i=i.add(h),r=d?r.add(t):r.delete(t)):(i=i.delete(t),r=r.delete(t)))})),null!==this.query.limit)for(;i.size>this.query.limit;){const t="F"===this.query.limitType?i.last():i.first();i=i.delete(t.key),r=r.delete(t.key),n.track({type:1,doc:t})}return{ec:i,ic:n,zi:o,mutatedKeys:r}}rc(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const s=this.ec;this.ec=t.ec,this.mutatedKeys=t.mutatedKeys;const r=t.ic.xu();r.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return zr()}};return n(t)-n(e)}(t.type,e.type)||this.tc(t.doc,e.doc))),this.oc(n);const i=e?this.uc():[],o=0===this.Zu.size&&this.current?1:0,a=o!==this.Xu;return this.Xu=o,0!==r.length||a?{snapshot:new uh(this.query,t.ec,s,r,t.mutatedKeys,0===o,a,!1,!!n&&n.resumeToken.approximateByteSize()>0),cc:i}:{cc:i}}Mu(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({ec:this.ec,ic:new ch,mutatedKeys:this.mutatedKeys,zi:!1},!1)):{cc:[]}}ac(t){return!this.Yu.has(t)&&!!this.ec.has(t)&&!this.ec.get(t).hasLocalMutations}oc(t){t&&(t.addedDocuments.forEach((t=>this.Yu=this.Yu.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this.Yu=this.Yu.delete(t))),this.current=t.current)}uc(){if(!this.current)return[];const t=this.Zu;this.Zu=oa(),this.ec.forEach((t=>{this.ac(t.key)&&(this.Zu=this.Zu.add(t.key))}));const e=[];return t.forEach((t=>{this.Zu.has(t)||e.push(new yh(t))})),this.Zu.forEach((n=>{t.has(n)||e.push(new mh(n))})),e}hc(t){this.Yu=t.ir,this.Zu=oa();const e=this.sc(t.documents);return this.applyChanges(e,!0)}lc(){return uh.fromInitialDocuments(this.query,this.ec,this.mutatedKeys,0===this.Xu,this.hasCachedResults)}}class wh{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Eh{constructor(t){this.key=t,this.fc=!1}}class bh{constructor(t,e,n,s,r,i){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=s,this.currentUser=r,this.maxConcurrentLimboResolutions=i,this.dc={},this.wc=new Wo((t=>zo(t)),$o),this._c=new Map,this.mc=new Set,this.gc=new ki(gi.comparator),this.yc=new Map,this.Ic=new Xc,this.Tc={},this.Ec=new Map,this.Ac=zc.Mn(),this.onlineState="Unknown",this.vc=void 0}get isPrimaryClient(){return!0===this.vc}}async function Th(t,e){const n=function(t){const e=Gr(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Ih.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Vh.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=Ah.bind(null,e),e.dc.nu=dh.bind(null,e.eventManager),e.dc.Pc=fh.bind(null,e.eventManager),e}(t);let s,r;const i=n.wc.get(e);if(i)s=i.targetId,n.sharedClientState.addLocalQueryTarget(s),r=i.view.lc();else{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let s;return n.Bs.getTargetData(t,e).next((r=>r?(s=r,bi.resolve(s)):n.Bs.allocateTargetId(t).next((r=>(s=new Fc(e,r,"TargetPurposeListen",t.currentSequenceNumber),n.Bs.addTargetData(t,s).next((()=>s)))))))})).then((t=>{const s=n.Ji.get(t.targetId);return(null===s||t.snapshotVersion.compareTo(s.snapshotVersion)>0)&&(n.Ji=n.Ji.insert(t.targetId,t),n.Yi.set(e,t.targetId)),t}))}(n.localStore,jo(e)),i=n.sharedClientState.addLocalQueryTarget(t.targetId);s=t.targetId,r=await async function(t,e,n,s,r){t.Rc=(e,n,s)=>async function(t,e,n,s){let r=e.view.sc(n);r.zi&&(r=await du(t.localStore,e.query,!1).then((({documents:t})=>e.view.sc(t,r))));const i=s&&s.targetChanges.get(e.targetId),o=e.view.applyChanges(r,t.isPrimaryClient,i);return Lh(t,e.targetId,o.cc),o.snapshot}(t,e,n,s);const i=await du(t.localStore,e,!0),o=new vh(e,i.ir),a=o.sc(i.documents),c=tc.createSynthesizedTargetChangeForCurrentChange(n,s&&"Offline"!==t.onlineState,r),u=o.applyChanges(a,t.isPrimaryClient,c);Lh(t,n,u.cc);const h=new wh(e,n,o);return t.wc.set(e,h),t._c.has(n)?t._c.get(n).push(e):t._c.set(n,[e]),u.snapshot}(n,e,s,"current"===i,t.resumeToken),n.isPrimaryClient&&Mu(n.remoteStore,t)}return r}async function Ch(t,e){const n=Gr(t),s=n.wc.get(e),r=n._c.get(s.targetId);if(r.length>1)return n._c.set(s.targetId,r.filter((t=>!$o(t,e)))),void n.wc.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(s.targetId),n.sharedClientState.isActiveQueryTarget(s.targetId)||await lu(n.localStore,s.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(s.targetId),Ou(n.remoteStore,s.targetId),xh(n,s.targetId)})).catch(Ei)):(xh(n,s.targetId),await lu(n.localStore,s.targetId,!0))}async function Ih(t,e){const n=Gr(t);try{const t=await function(t,e){const n=Gr(t),s=e.snapshotVersion;let r=n.Ji;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const i=n.Zi.newChangeBuffer({trackRemovals:!0});r=n.Ji;const o=[];e.targetChanges.forEach(((i,a)=>{const c=r.get(a);if(!c)return;o.push(n.Bs.removeMatchingKeys(t,i.removedDocuments,a).next((()=>n.Bs.addMatchingKeys(t,i.addedDocuments,a))));let u=c.withSequenceNumber(t.currentSequenceNumber);null!==e.targetMismatches.get(a)?u=u.withResumeToken(Pi.EMPTY_BYTE_STRING,ui.min()).withLastLimboFreeSnapshotVersion(ui.min()):i.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(i.resumeToken,s)),r=r.insert(a,u),function(t,e,n){return 0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,u,i)&&o.push(n.Bs.updateTargetData(t,u))}));let a=Yo(),c=oa();if(e.documentUpdates.forEach((s=>{e.resolvedLimboDocuments.has(s)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,s))})),o.push(function(t,e,n){let s=oa(),r=oa();return n.forEach((t=>s=s.add(t))),e.getEntries(t,s).next((t=>{let s=Yo();return n.forEach(((n,i)=>{const o=t.get(n);i.isFoundDocument()!==o.isFoundDocument()&&(r=r.add(n)),i.isNoDocument()&&i.version.isEqual(ui.min())?(e.removeEntry(n,i.readTime),s=s.insert(n,i)):!o.isValidDocument()||i.version.compareTo(o.version)>0||0===i.version.compareTo(o.version)&&o.hasPendingWrites?(e.addEntry(i),s=s.insert(n,i)):Br("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",i.version)})),{nr:s,sr:r}}))}(t,i,e.documentUpdates).next((t=>{a=t.nr,c=t.sr}))),!s.isEqual(ui.min())){const e=n.Bs.getLastRemoteSnapshotVersion(t).next((e=>n.Bs.setTargetsMetadata(t,t.currentSequenceNumber,s)));o.push(e)}return bi.waitFor(o).next((()=>i.apply(t))).next((()=>n.localDocuments.getLocalViewOfDocuments(t,a,c))).next((()=>a))})).then((t=>(n.Ji=r,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const s=n.yc.get(e);s&&(Kr(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?s.fc=!0:t.modifiedDocuments.size>0?Kr(s.fc):t.removedDocuments.size>0&&(Kr(s.fc),s.fc=!1))})),await Ph(n,t,e)}catch(t){await Ei(t)}}function Sh(t,e,n){const s=Gr(t);if(s.isPrimaryClient&&0===n||!s.isPrimaryClient&&1===n){const t=[];s.wc.forEach(((n,s)=>{const r=s.view.Mu(e);r.snapshot&&t.push(r.snapshot)})),function(t,e){const n=Gr(t);n.onlineState=e;let s=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.Mu(e)&&(s=!0)})),s&&gh(n)}(s.eventManager,e),t.length&&s.dc.nu(t),s.onlineState=e,s.isPrimaryClient&&s.sharedClientState.setOnlineState(e)}}async function Ah(t,e,n){const s=Gr(t);s.sharedClientState.updateQueryState(e,"rejected",n);const r=s.yc.get(e),i=r&&r.key;if(i){let t=new ki(gi.comparator);t=t.insert(i,uo.newNoDocument(i,ui.min()));const n=oa().add(i),r=new Za(ui.min(),new Map,new ki(oi),t,n);await Ih(s,r),s.gc=s.gc.remove(i),s.yc.delete(e),Oh(s)}else await lu(s.localStore,e,!1).then((()=>xh(s,e,n))).catch(Ei)}async function _h(t,e){const n=Gr(t),s=e.batch.batchId;try{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const s=e.batch.keys(),r=n.Zi.newChangeBuffer({trackRemovals:!0});return function(t,e,n,s){const r=n.batch,i=r.keys();let o=bi.resolve();return i.forEach((t=>{o=o.next((()=>s.getEntry(e,t))).next((e=>{const i=n.docVersions.get(t);Kr(null!==i),e.version.compareTo(i)<0&&(r.applyToRemoteDocument(e,n),e.isValidDocument()&&(e.setReadTime(n.commitVersion),s.addEntry(e)))}))})),o.next((()=>t.mutationQueue.removeMutationBatch(e,r)))}(n,t,e,r).next((()=>r.apply(t))).next((()=>n.mutationQueue.performConsistencyCheck(t))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(t,s,e.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t,function(t){let e=oa();for(let n=0;n<t.mutationResults.length;++n)t.mutationResults[n].transformResults.length>0&&(e=e.add(t.batch.mutations[n].key));return e}(e)))).next((()=>n.localDocuments.getDocuments(t,s)))}))}(n.localStore,e);Nh(n,s,null),kh(n,s),n.sharedClientState.updateMutationState(s,"acknowledged"),await Ph(n,t)}catch(t){await Ei(t)}}async function Dh(t,e,n){const s=Gr(t);try{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let s;return n.mutationQueue.lookupMutationBatch(t,e).next((e=>(Kr(null!==e),s=e.keys(),n.mutationQueue.removeMutationBatch(t,e)))).next((()=>n.mutationQueue.performConsistencyCheck(t))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(t,s,e))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t,s))).next((()=>n.localDocuments.getDocuments(t,s)))}))}(s.localStore,e);Nh(s,e,n),kh(s,e),s.sharedClientState.updateMutationState(e,"rejected",n),await Ph(s,t)}catch(n){await Ei(n)}}function kh(t,e){(t.Ec.get(e)||[]).forEach((t=>{t.resolve()})),t.Ec.delete(e)}function Nh(t,e,n){const s=Gr(t);let r=s.Tc[s.currentUser.toKey()];if(r){const t=r.get(e);t&&(n?t.reject(n):t.resolve(),r=r.remove(e)),s.Tc[s.currentUser.toKey()]=r}}function xh(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const s of t._c.get(e))t.wc.delete(s),n&&t.dc.Pc(s,n);t._c.delete(e),t.isPrimaryClient&&t.Ic.Is(e).forEach((e=>{t.Ic.containsKey(e)||Rh(t,e)}))}function Rh(t,e){t.mc.delete(e.path.canonicalString());const n=t.gc.get(e);null!==n&&(Ou(t.remoteStore,n),t.gc=t.gc.remove(e),t.yc.delete(n),Oh(t))}function Lh(t,e,n){for(const s of n)s instanceof mh?(t.Ic.addReference(s.key,e),Mh(t,s)):s instanceof yh?(Br("SyncEngine","Document no longer in limbo: "+s.key),t.Ic.removeReference(s.key,e),t.Ic.containsKey(s.key)||Rh(t,s.key)):zr()}function Mh(t,e){const n=e.key,s=n.path.canonicalString();t.gc.get(n)||t.mc.has(s)||(Br("SyncEngine","New document in limbo: "+n),t.mc.add(s),Oh(t))}function Oh(t){for(;t.mc.size>0&&t.gc.size<t.maxConcurrentLimboResolutions;){const e=t.mc.values().next().value;t.mc.delete(e);const n=new gi(li.fromString(e)),s=t.Ac.next();t.yc.set(s,new Eh(n)),t.gc=t.gc.insert(n,s),Mu(t.remoteStore,new Fc(jo(Vo(n.path)),s,"TargetPurposeLimboResolution",Ci.ct))}}async function Ph(t,e,n){const s=Gr(t),r=[],i=[],o=[];s.wc.isEmpty()||(s.wc.forEach(((t,a)=>{o.push(s.Rc(a,e,n).then((t=>{if((t||n)&&s.isPrimaryClient&&s.sharedClientState.updateQueryState(a.targetId,(null==t?void 0:t.fromCache)?"not-current":"current"),t){r.push(t);const e=iu.Li(a.targetId,t);i.push(e)}})))})),await Promise.all(o),s.dc.nu(r),await async function(t,e){const n=Gr(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>bi.forEach(e,(e=>bi.forEach(e.Fi,(s=>n.persistence.referenceDelegate.addReference(t,e.targetId,s))).next((()=>bi.forEach(e.Bi,(s=>n.persistence.referenceDelegate.removeReference(t,e.targetId,s)))))))))}catch(t){if(!Ti(t))throw t;Br("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Ji.get(e),s=t.snapshotVersion,r=t.withLastLimboFreeSnapshotVersion(s);n.Ji=n.Ji.insert(e,r)}}}(s.localStore,i))}async function Fh(t,e){const n=Gr(t);if(!n.currentUser.isEqual(e)){Br("SyncEngine","User change. New user:",e.toKey());const t=await cu(n.localStore,e);n.currentUser=e,function(t,e){t.Ec.forEach((t=>{t.forEach((t=>{t.reject(new Qr(Hr.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Ec.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Ph(n,t.er)}}function Vh(t,e){const n=Gr(t),s=n.yc.get(e);if(s&&s.fc)return oa().add(s.key);{let t=oa();const s=n._c.get(e);if(!s)return t;for(const e of s){const s=n.wc.get(e);t=t.unionWith(s.view.nc)}return t}}function Uh(t){const e=Gr(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=_h.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=Dh.bind(null,e),e}class Bh{constructor(){this.synchronizeTabs=!1}async initialize(t){this.serializer=Iu(t.databaseInfo.databaseId),this.sharedClientState=this.createSharedClientState(t),this.persistence=this.createPersistence(t),await this.persistence.start(),this.localStore=this.createLocalStore(t),this.gcScheduler=this.createGarbageCollectionScheduler(t,this.localStore),this.indexBackfillerScheduler=this.createIndexBackfillerScheduler(t,this.localStore)}createGarbageCollectionScheduler(t,e){return null}createIndexBackfillerScheduler(t,e){return null}createLocalStore(t){return function(t,e,n,s){return new au(t,e,n,s)}(this.persistence,new ou,t.initialUser,this.serializer)}createPersistence(t){return new nu(ru.zs,this.serializer)}createSharedClientState(t){return new gu}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class jh{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>Sh(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Fh.bind(null,this.syncEngine),await async function(t,e){const n=Gr(t);e?(n.vu.delete(2),await Ru(n)):e||(n.vu.add(2),await Lu(n),n.bu.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new lh}createDatastore(t){const e=Iu(t.databaseInfo.databaseId),n=(s=t.databaseInfo,new Tu(s));var s;return function(t,e,n,s){return new ku(t,e,n,s)}(t.authCredentials,t.appCheckCredentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,s=t.asyncQueue,r=t=>Sh(this.syncEngine,t,0),i=mu.D()?new mu:new pu,new xu(e,n,s,r,i);var e,n,s,r,i}createSyncEngine(t,e){return function(t,e,n,s,r,i,o){const a=new bh(t,e,n,s,r,i);return o&&(a.vc=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=Gr(t);Br("RemoteStore","RemoteStore shutting down."),e.vu.add(5),await Lu(e),e.Pu.shutdown(),e.bu.set("Unknown")}(this.remoteStore)}}class qh{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.Sc(this.observer.next,t)}error(t){this.observer.error?this.Sc(this.observer.error,t):jr("Uncaught Error in snapshot listener:",t.toString())}Dc(){this.muted=!0}Sc(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class $h{constructor(t,e,n,s){this.authCredentials=t,this.appCheckCredentials=e,this.asyncQueue=n,this.databaseInfo=s,this.user=Pr.UNAUTHENTICATED,this.clientId=ii.A(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async t=>{Br("FirestoreClient","Received user=",t.uid),await this.authCredentialListener(t),this.user=t})),this.appCheckCredentials.start(n,(t=>(Br("FirestoreClient","Received new app check token=",t),this.appCheckCredentialListener(t,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.authCredentialListener=t}setAppCheckTokenChangeListener(t){this.appCheckCredentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new Qr(Hr.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new Wr;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this._onlineComponents&&await this._onlineComponents.terminate(),this._offlineComponents&&await this._offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),t.resolve()}catch(e){const n=oh(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function zh(t,e){t.asyncQueue.verifyOperationInProgress(),Br("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let s=n.initialUser;t.setCredentialChangeListener((async t=>{s.isEqual(t)||(await cu(e.localStore,t),s=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t._offlineComponents=e}async function Kh(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){if(!t._offlineComponents)if(t._uninitializedComponentsProvider){Br("FirestoreClient","Using user provided OfflineComponentProvider");try{await zh(t,t._uninitializedComponentsProvider._offline)}catch(e){const n=e;if(!function(t){return"FirebaseError"===t.name?t.code===Hr.FAILED_PRECONDITION||t.code===Hr.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(n))throw n;qr("Error using user provided cache. Falling back to memory cache: "+n),await zh(t,new Bh)}}else Br("FirestoreClient","Using default OfflineComponentProvider"),await zh(t,new Bh);return t._offlineComponents}(t);Br("FirestoreClient","Initializing OnlineComponentProvider");const s=await t.getConfiguration();await e.initialize(n,s),t.setCredentialChangeListener((t=>nh(e.remoteStore,t))),t.setAppCheckTokenChangeListener(((t,n)=>nh(e.remoteStore,n))),t._onlineComponents=e}async function Gh(t){return t._onlineComponents||(t._uninitializedComponentsProvider?(Br("FirestoreClient","Using user provided OnlineComponentProvider"),await Kh(t,t._uninitializedComponentsProvider._online)):(Br("FirestoreClient","Using default OnlineComponentProvider"),await Kh(t,new jh))),t._onlineComponents}async function Hh(t){const e=await Gh(t),n=e.eventManager;return n.onListen=Th.bind(null,e.syncEngine),n.onUnlisten=Ch.bind(null,e.syncEngine),n}function Qh(t,e,n={}){const s=new Wr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,s,r){const i=new qh({next:n=>{e.enqueueAndForget((()=>async function(t,e){const n=Gr(t),s=e.query;let r=!1;const i=n.queries.get(s);if(i){const t=i.listeners.indexOf(e);t>=0&&(i.listeners.splice(t,1),r=0===i.listeners.length)}if(r)return n.queries.delete(s),n.onUnlisten(s)}(t,o))),n.fromCache&&"server"===s.source?r.reject(new Qr(Hr.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):r.resolve(n)},error:t=>r.reject(t)}),o=new ph(n,i,{includeMetadataChanges:!0,Ku:!0});return async function(t,e){const n=Gr(t),s=e.query;let r=!1,i=n.queries.get(s);if(i||(r=!0,i=new hh),r)try{i.Nu=await n.onListen(s)}catch(t){const n=oh(t,`Initialization of query '${Ko(e.query)}' failed`);return void e.onError(n)}n.queries.set(s,i),i.listeners.push(e),e.Mu(n.onlineState),i.Nu&&e.$u(i.Nu)&&gh(n)}(t,o)}(await Hh(t),t.asyncQueue,e,n,s))),s.promise}function Wh(t){const e={};return void 0!==t.timeoutSeconds&&(e.timeoutSeconds=t.timeoutSeconds),e}const Xh=new Map;function Yh(t,e,n){if(!n)throw new Qr(Hr.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function Jh(t){if(!gi.isDocumentKey(t))throw new Qr(Hr.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Zh(t){if(gi.isDocumentKey(t))throw new Qr(Hr.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function tl(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){return t.constructor?t.constructor.name:null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":zr()}function el(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new Qr(Hr.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=tl(t);throw new Qr(Hr.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class nl{constructor(t){var e,n;if(void 0===t.host){if(void 0!==t.ssl)throw new Qr(Hr.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,this.cache=t.localCache,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Qr(Hr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}(function(t,e,n,s){if(!0===e&&!0===s)throw new Qr(Hr.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")})(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling),this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalForceLongPolling?this.experimentalAutoDetectLongPolling=!1:void 0===t.experimentalAutoDetectLongPolling?this.experimentalAutoDetectLongPolling=!0:this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.experimentalLongPollingOptions=Wh(null!==(n=t.experimentalLongPollingOptions)&&void 0!==n?n:{}),function(t){if(void 0!==t.timeoutSeconds){if(isNaN(t.timeoutSeconds))throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);if(t.timeoutSeconds<5)throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);if(t.timeoutSeconds>30)throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`)}}(this.experimentalLongPollingOptions),this.useFetchStreams=!!t.useFetchStreams}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&(e=this.experimentalLongPollingOptions,n=t.experimentalLongPollingOptions,e.timeoutSeconds===n.timeoutSeconds)&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams;var e,n}}class sl{constructor(t,e,n,s){this._authCredentials=t,this._appCheckCredentials=e,this._databaseId=n,this._app=s,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new nl({}),this._settingsFrozen=!1}get app(){if(!this._app)throw new Qr(Hr.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new Qr(Hr.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new nl(t),void 0!==t.credentials&&(this._authCredentials=function(t){if(!t)return new Yr;switch(t.type){case"firstParty":return new ei(t.sessionIndex||"0",t.iamToken||null,t.authTokenFactory||null);case"provider":return t.client;default:throw new Qr(Hr.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=Xh.get(t);e&&(Br("ComponentProvider","Removing Datastore"),Xh.delete(t),e.terminate())}(this),Promise.resolve()}}class rl{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new ol(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new rl(this.firestore,t,this._key)}}class il{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new il(this.firestore,t,this._query)}}class ol extends il{constructor(t,e,n){super(t,e,Vo(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new rl(this.firestore,null,new gi(t))}withConverter(t){return new ol(this.firestore,t,this._path)}}function al(t,e,...n){if(t=p(t),Yh("collection","path",e),t instanceof sl){const s=li.fromString(e,...n);return Zh(s),new ol(t,null,s)}{if(!(t instanceof rl||t instanceof ol))throw new Qr(Hr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(li.fromString(e,...n));return Zh(s),new ol(t.firestore,null,s)}}function cl(t,e,...n){if(t=p(t),1===arguments.length&&(e=ii.A()),Yh("doc","path",e),t instanceof sl){const s=li.fromString(e,...n);return Jh(s),new rl(t,null,new gi(s))}{if(!(t instanceof rl||t instanceof ol))throw new Qr(Hr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(li.fromString(e,...n));return Jh(s),new rl(t.firestore,t instanceof ol?t.converter:null,new gi(s))}}class ul{constructor(){this.Gc=Promise.resolve(),this.Qc=[],this.jc=!1,this.zc=[],this.Wc=null,this.Hc=!1,this.Jc=!1,this.Yc=[],this.qo=new Su(this,"async_queue_retry"),this.Xc=()=>{const t=Cu();t&&Br("AsyncQueue","Visibility state changed to "+t.visibilityState),this.qo.Mo()};const t=Cu();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Xc)}get isShuttingDown(){return this.jc}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Zc(),this.ta(t)}enterRestrictedMode(t){if(!this.jc){this.jc=!0,this.Jc=t||!1;const e=Cu();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Xc)}}enqueue(t){if(this.Zc(),this.jc)return new Promise((()=>{}));const e=new Wr;return this.ta((()=>this.jc&&this.Jc?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.Qc.push(t),this.ea())))}async ea(){if(0!==this.Qc.length){try{await this.Qc[0](),this.Qc.shift(),this.qo.reset()}catch(t){if(!Ti(t))throw t;Br("AsyncQueue","Operation failed with retryable error: "+t)}this.Qc.length>0&&this.qo.No((()=>this.ea()))}}ta(t){const e=this.Gc.then((()=>(this.Hc=!0,t().catch((t=>{this.Wc=t,this.Hc=!1;const e=function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t);throw jr("INTERNAL UNHANDLED ERROR: ",e),t})).then((t=>(this.Hc=!1,t))))));return this.Gc=e,e}enqueueAfterDelay(t,e,n){this.Zc(),this.Yc.indexOf(t)>-1&&(e=0);const s=ih.createAndSchedule(this,t,e,n,(t=>this.na(t)));return this.zc.push(s),s}Zc(){this.Wc&&zr()}verifyOperationInProgress(){}async sa(){let t;do{t=this.Gc,await t}while(t!==this.Gc)}ia(t){for(const e of this.zc)if(e.timerId===t)return!0;return!1}ra(t){return this.sa().then((()=>{this.zc.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this.zc)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.sa()}))}oa(t){this.Yc.push(t)}na(t){const e=this.zc.indexOf(t);this.zc.splice(e,1)}}class hl extends sl{constructor(t,e,n,s){super(t,e,n,s),this.type="firestore",this._queue=new ul,this._persistenceKey=(null==s?void 0:s.name)||"[DEFAULT]"}_terminate(){return this._firestoreClient||dl(this),this._firestoreClient.terminate()}}function ll(t){return t._firestoreClient||dl(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function dl(t){var e,n,s;const r=t._freezeSettings(),i=function(t,e,n,s){return new zi(t,e,n,s.host,s.ssl,s.experimentalForceLongPolling,s.experimentalAutoDetectLongPolling,Wh(s.experimentalLongPollingOptions),s.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,r);t._firestoreClient=new $h(t._authCredentials,t._appCheckCredentials,t._queue,i),(null===(n=r.cache)||void 0===n?void 0:n._offlineComponentProvider)&&(null===(s=r.cache)||void 0===s?void 0:s._onlineComponentProvider)&&(t._firestoreClient._uninitializedComponentsProvider={_offlineKind:r.cache.kind,_offline:r.cache._offlineComponentProvider,_online:r.cache._onlineComponentProvider})}class fl{constructor(t){this._byteString=t}static fromBase64String(t){try{return new fl(Pi.fromBase64String(t))}catch(t){throw new Qr(Hr.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new fl(Pi.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class gl{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new Qr(Hr.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new fi(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class pl{constructor(t){this._methodName=t}}class ml{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new Qr(Hr.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Qr(Hr.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return oi(this._lat,t._lat)||oi(this._long,t._long)}}const yl=/^__.*__$/;class vl{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new La(t,this.data,this.fieldMask,e,this.fieldTransforms):new Ra(t,this.data,e,this.fieldTransforms)}}function wl(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw zr()}}class El{constructor(t,e,n,s,r,i){this.settings=t,this.databaseId=e,this.serializer=n,this.ignoreUndefinedProperties=s,void 0===r&&this.ua(),this.fieldTransforms=r||[],this.fieldMask=i||[]}get path(){return this.settings.path}get ca(){return this.settings.ca}aa(t){return new El(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}ha(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.aa({path:n,la:!1});return s.fa(t),s}da(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.aa({path:n,la:!1});return s.ua(),s}wa(t){return this.aa({path:void 0,la:!0})}_a(t){return xl(t,this.settings.methodName,this.settings.ma||!1,this.path,this.settings.ga)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}ua(){if(this.path)for(let t=0;t<this.path.length;t++)this.fa(this.path.get(t))}fa(t){if(0===t.length)throw this._a("Document fields must not be empty");if(wl(this.ca)&&yl.test(t))throw this._a('Document fields cannot begin and end with "__"')}}class bl{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.serializer=n||Iu(t)}ya(t,e,n,s=!1){return new El({ca:t,methodName:e,ga:n,path:fi.emptyPath(),la:!1,ma:s},this.databaseId,this.serializer,this.ignoreUndefinedProperties)}}function Tl(t){const e=t._freezeSettings(),n=Iu(t._databaseId);return new bl(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Cl(t,e,n,s,r,i={}){const o=t.ya(i.merge||i.mergeFields?2:0,e,n,r);_l("Data must be an object, but it was:",o,s);const a=Sl(s,o);let c,u;if(i.merge)c=new Mi(o.fieldMask),u=o.fieldTransforms;else if(i.mergeFields){const t=[];for(const s of i.mergeFields){const r=Dl(e,s,n);if(!o.contains(r))throw new Qr(Hr.INVALID_ARGUMENT,`Field '${r}' is specified in your field mask but missing from your input data.`);Rl(t,r)||t.push(r)}c=new Mi(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new vl(new ao(a),c,u)}function Il(t,e){if(Al(t=p(t)))return _l("Unsupported field value:",e,t),Sl(t,e);if(t instanceof pl)return function(t,e){if(!wl(e.ca))throw e._a(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e._a(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.la&&4!==e.ca)throw e._a("Nested arrays are not supported");return function(t,e){const n=[];let s=0;for(const r of t){let t=Il(r,e.wa(s));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),s++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=p(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return ha(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=ci.fromDate(t);return{timestampValue:fc(e.serializer,n)}}if(t instanceof ci){const n=new ci(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:fc(e.serializer,n)}}if(t instanceof ml)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof fl)return{bytesValue:gc(e.serializer,t._byteString)};if(t instanceof rl){const n=e.databaseId,s=t.firestore._databaseId;if(!s.isEqual(n))throw e._a(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:yc(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e._a(`Unsupported field value: ${tl(t)}`)}(t,e)}function Sl(t,e){const n={};return Di(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):_i(t,((t,s)=>{const r=Il(s,e.ha(t));null!=r&&(n[t]=r)})),{mapValue:{fields:n}}}function Al(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof ci||t instanceof ml||t instanceof fl||t instanceof rl||t instanceof pl)}function _l(t,e,n){if(!Al(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const s=tl(n);throw"an object"===s?e._a(t+" a custom object"):e._a(t+" "+s)}}function Dl(t,e,n){if((e=p(e))instanceof gl)return e._internalPath;if("string"==typeof e)return Nl(t,e);throw xl("Field path arguments must be of type string or ",t,!1,void 0,n)}const kl=new RegExp("[~\\*/\\[\\]]");function Nl(t,e,n){if(e.search(kl)>=0)throw xl(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new gl(...e.split("."))._internalPath}catch(s){throw xl(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function xl(t,e,n,s,r){const i=s&&!s.isEmpty(),o=void 0!==r;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(i||o)&&(c+=" (found",i&&(c+=` in field ${s}`),o&&(c+=` in document ${r}`),c+=")"),new Qr(Hr.INVALID_ARGUMENT,a+t+c)}function Rl(t,e){return t.some((t=>t.isEqual(e)))}class Ll{constructor(t,e,n,s,r){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=s,this._converter=r}get id(){return this._key.path.lastSegment()}get ref(){return new rl(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new Ml(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(Ol("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class Ml extends Ll{data(){return super.data()}}function Ol(t,e){return"string"==typeof e?Nl(t,e):e instanceof gl?e._internalPath:e._delegate._internalPath}class Pl{convertValue(t,e="none"){switch(Hi(t)){case 0:return null;case 1:return t.booleanValue;case 2:return Ui(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes(Bi(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw zr()}}convertObject(t,e){return this.convertObjectMap(t.fields,e)}convertObjectMap(t,e="none"){const n={};return _i(t,((t,s)=>{n[t]=this.convertValue(s,e)})),n}convertGeoPoint(t){return new ml(Ui(t.latitude),Ui(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=qi(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp($i(t));default:return null}}convertTimestamp(t){const e=Vi(t);return new ci(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=li.fromString(t);Kr(Pc(n));const s=new Ki(n.get(1),n.get(3)),r=new gi(n.popFirst(5));return s.isEqual(e)||jr(`Document ${r} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),r}}class Fl{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class Vl extends Ll{constructor(t,e,n,s,r,i){super(t,e,n,s,i),this._firestore=t,this._firestoreImpl=t,this.metadata=r}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new Ul(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(Ol("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class Ul extends Vl{data(t={}){return super.data(t)}}class Bl{constructor(t,e,n,s){this._firestore=t,this._userDataWriter=e,this._snapshot=s,this.metadata=new Fl(s.hasPendingWrites,s.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new Ul(this._firestore,this._userDataWriter,n.key,n,new Fl(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new Qr(Hr.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>{const s=new Ul(t._firestore,t._userDataWriter,n.doc.key,n.doc,new Fl(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter);return n.doc,{type:"added",doc:s,oldIndex:-1,newIndex:e++}}))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const s=new Ul(t._firestore,t._userDataWriter,e.doc.key,e.doc,new Fl(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let r=-1,i=-1;return 0!==e.type&&(r=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),i=n.indexOf(e.doc.key)),{type:jl(e.type),doc:s,oldIndex:r,newIndex:i}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function jl(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return zr()}}class ql extends Pl{constructor(t){super(),this.firestore=t}convertBytes(t){return new fl(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new rl(this.firestore,null,e)}}function $l(t){t=el(t,il);const e=el(t.firestore,hl),n=ll(e),s=new ql(e);return function(t){if("L"===t.limitType&&0===t.explicitOrderBy.length)throw new Qr(Hr.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(t._query),Qh(n,t._query).then((n=>new Bl(e,s,t,n)))}function zl(t,e,n){t=el(t,rl);const s=el(t.firestore,hl),r=function(t,e,n){let s;return s=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,s}(t.converter,e,n);return function(t,e){return function(t,e){const n=new Wr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const s=Uh(t);try{const t=await function(t,e){const n=Gr(t),s=ci.now(),r=e.reduce(((t,e)=>t.add(e.key)),oa());let i,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>{let a=Yo(),c=oa();return n.Zi.getEntries(t,r).next((t=>{a=t,a.forEach(((t,e)=>{e.isValidDocument()||(c=c.add(t))}))})).next((()=>n.localDocuments.getOverlayedDocuments(t,a))).next((r=>{i=r;const o=[];for(const t of e){const e=Na(t,i.get(t.key).overlayedDocument);null!=e&&o.push(new La(t.key,e,co(e.value.mapValue),Ia.exists(!0)))}return n.mutationQueue.addMutationBatch(t,s,o,e)})).next((e=>{o=e;const s=e.applyToLocalDocumentSet(i,c);return n.documentOverlayCache.saveOverlays(t,e.batchId,s)}))})).then((()=>({batchId:o.batchId,changes:ta(i)})))}(s.localStore,e);s.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let s=t.Tc[t.currentUser.toKey()];s||(s=new ki(oi)),s=s.insert(e,n),t.Tc[t.currentUser.toKey()]=s}(s,t.batchId,n),await Ph(s,t.changes),await Hu(s.remoteStore)}catch(t){const e=oh(t,"Failed to persist write");n.reject(e)}}(await function(t){return Gh(t).then((t=>t.syncEngine))}(t),e,n))),n.promise}(ll(t),e)}(s,[Cl(Tl(s),"setDoc",t._key,r,null!==t.converter,n).toMutation(t._key,Ia.none())])}!function(t,e=!0){Fr="9.22.2",tt(new m("firestore",((t,{instanceIdentifier:n,options:s})=>{const r=t.getProvider("app").getImmediate(),i=new hl(new Zr(t.getProvider("auth-internal")),new si(t.getProvider("app-check-internal")),function(t,e){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Qr(Hr.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Ki(t.options.projectId,e)}(r,n),r);return s=Object.assign({useFetchStreams:e},s),i._setSettings(s),i}),"PUBLIC").setMultipleInstances(!0)),rt(Or,"3.12.2",t),rt(Or,"3.12.2","esm2017")}(),rt("firebase","9.22.2","app");const Kl=function(t,e){const n="string"==typeof t?t:"(default)",s=function(t,e){const n=t.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),t.container.getProvider(e)}("object"==typeof t?t:function(t=W){const e=Y.get(t);if(!e&&t===W&&c())return st();if(!e)throw et.create("no-app",{appName:t});return e}(),"firestore").getImmediate({identifier:n});if(!s._initialized){const t=(t=>{const e=(t=>{var e,n;return null===(n=null===(e=a())||void 0===e?void 0:e.emulatorHosts)||void 0===n?void 0:n[t]})(t);if(!e)return;const n=e.lastIndexOf(":");if(n<=0||n+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const s=parseInt(e.substring(n+1),10);return"["===e[0]?[e.substring(1,n-1),s]:[e.substring(0,n),s]})("firestore");t&&function(t,e,n,s={}){var r;const i=(t=el(t,sl))._getSettings(),a=`${e}:${n}`;if("firestore.googleapis.com"!==i.host&&i.host!==a&&qr("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."),t._setSettings(Object.assign(Object.assign({},i),{host:a,ssl:!1})),s.mockUserToken){let e,n;if("string"==typeof s.mockUserToken)e=s.mockUserToken,n=Pr.MOCK_USER;else{e=function(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=e||"demo-project",s=t.iat||0,r=t.sub||t.user_id;if(!r)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const i=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:s,exp:s+3600,auth_time:s,sub:r,user_id:r,firebase:{sign_in_provider:"custom",identities:{}}},t);return[o(JSON.stringify({alg:"none",type:"JWT"})),o(JSON.stringify(i)),""].join(".")}(s.mockUserToken,null===(r=t._app)||void 0===r?void 0:r.options.projectId);const i=s.mockUserToken.sub||s.mockUserToken.user_id;if(!i)throw new Qr(Hr.INVALID_ARGUMENT,"mockUserToken must contain 'sub' or 'user_id' field!");n=new Pr(i)}t._authCredentials=new Jr(new Xr(e,n))}}(s,...t)}return s}(st({apiKey:"AIzaSyDtK7q2GcDLLV_tsTg05Q5EB1Qe-Qvsqmk",authDomain:"where-is-waldo-4eb8f.firebaseapp.com",projectId:"where-is-waldo-4eb8f",storageBucket:"where-is-waldo-4eb8f.appspot.com",messagingSenderId:"721147782545",appId:"1:721147782545:web:35d976dcd7877c8b742630"}));console.log("app-logic.js says: this seem to be working");const Gl=(()=>{const t=document.getElementById("backgroundImg"),e=e=>{const n=t.getBoundingClientRect(),s=e.clientX-n.left,r=e.clientY-n.top,i=window.innerWidth/1920;return{x:s,y:r,scaledX:s/i,scaledY:r/i}};return{characters:{bowser:{left:1430,top:3130,right:1730,bottom:3424},neo:{left:690,top:4700,right:900,bottom:4900},waldo:{left:1450,top:6550,right:1650,bottom:6750},meg:{left:256,top:484,right:456,bottom:684},pikachu:{left:982,top:1437,right:1182,bottom:1637},mike:{left:1121,top:1538,right:1321,bottom:1738}},getCoordinates:e,getCoordinateArea:t=>{const{scaledX:n,scaledY:s}=e(t),r={left:n-100,top:s-100,right:n+100,bottom:s+100};console.log(`Area: ${JSON.stringify(r)}`)}}})(),Hl=(()=>{const t=Gl.characters;return{storeCharacterLocations:()=>{try{Object.entries(t).forEach((([t,{left:e,top:n,right:s,bottom:r}])=>{zl(cl(Kl,"characterLocations",t),{left:e,top:n,right:s,bottom:r}).then((()=>{console.log(`${t} location stored successfully.`)})).catch((e=>{console.error(`Error storing ${t} location:`,e)}))}))}catch(t){console.error("Error storing character locations:",t)}},getCharacterLocations:async()=>{try{(await $l(al(Kl,"characterLocations"))).forEach((t=>{const e=t.id,{left:n,top:s,right:r,bottom:i}=t.data();console.log(`${e}: (${n}, ${s}, ${r}, ${i})`)}))}catch(t){console.error("Error retrieving character locations:",t)}},verifyClickedPosition:async(t,e,n)=>{try{const s=await $l(al(Kl,"characterLocations"));let r=null;return s.forEach((s=>{const i=s.id,{left:o,top:a,right:c,bottom:u}=s.data();("cyberpunk"!==n||"bowser"!==i&&"neo"!==i&&"waldo"!==i)&&("robot"!==n||"meg"!==i&&"pikachu"!==i&&"mike"!==i)||t>=o&&t<=c&&e>=a&&e<=u&&(console.log(`Clicked within ${i}'s area.`),r=i)})),r}catch(t){return console.error("Error verifying clicked position:",t),null}},storeUserTime:async(t,e)=>{try{await zl(cl(Kl,"userTimes",t),{time:e}),console.log(`User time stored successfully for ${t}`)}catch(e){console.error(`Error storing user time for ${t}:`,e)}},getAllUserTimes:async()=>{try{const t=await $l(al(Kl,"userTimes")),e=[];return t.forEach((t=>{const n=t.id,{time:s}=t.data();e.push({username:n,time:s})})),e.sort(((t,e)=>t.time.localeCompare(e.time))),e.forEach((t=>{console.log(`Username: ${t.username}, Time: ${t.time}`)})),e}catch(t){console.error("Error retrieving user times:",t)}}}})()},768:(t,e,n)=>{n.d(e,{Q:()=>h}),console.log("render.js says: this seem to be working");const s=(t,e,n)=>{const s=t;s.style.left=`${e}px`,s.style.top=`${n}px`},r=(t,e)=>{const n=document.createElement("div");return n.className=t,e&&(n.textContent=e),n},i=(t,e)=>{const n=document.createElement("button");return n.textContent=t,n.type="button",n.dataset.character=e,n.addEventListener("click",h.handleCharacterButtonClick),n},o=t=>{t.parentNode&&t.parentNode.removeChild(t)},a=(()=>{const t=document.getElementById("content"),e=[],n=[];return{createFeedbackMsg:(e,n,i,o="red")=>{const a=r("feedback",e);s(a,n-150,i-100),a.style.background=`rgba(${"green"===o?"0, 255, 0":"255, 0, 0"}, 0.7)`,t.appendChild(a),setTimeout((()=>{a.remove()}),5e3)},removeCircle:()=>{if(e.length>0){const t=e.pop();o(t)}},createCircle:(n,i)=>{const o=r("circle");s(o,n-50,i-50),t.appendChild(o),e.push(o)},removePopup:()=>{if(n.length>0){const t=n.pop();o(t)}},createPopup:(e,o,a)=>{const c=r("choice");e+60>window.innerWidth-150?s(c,e-160,o-70):s(c,e+60,o-70);const u=h.getGameChoice();let l;"cyberpunk"===u?l=[{text:"Bowser",character:"bowser"},{text:"Neo",character:"neo"},{text:"Waldo",character:"waldo"}]:"robot"===u&&(l=[{text:"Meg",character:"meg"},{text:"Pikachu",character:"pikachu"},{text:"Mike",character:"mike"}]),l.forEach((t=>{const e=i(t.text,t.character);a.includes(t.character)&&(e.classList.add("found"),e.removeEventListener("click",h.handleCharacterButtonClick)),c.appendChild(e)})),t.appendChild(c),n.push(c)},createTable:t=>{const e=document.getElementById("tableBody");e.textContent="",t.forEach((t=>{const n=document.createElement("tr"),s=document.createElement("td");s.textContent=t.username;const r=document.createElement("td");r.textContent=t.time,n.appendChild(s),n.appendChild(r),e.appendChild(n)}))}}})();var c=n(954);console.log("utils.js says: this seem to be working");const u=(()=>{const t=document.getElementById("timer");let e,n=0;const s=()=>{clearInterval(e)},r=t=>{t.closest(".overlay").style.display="flex",t.style.display="flex"};return{startTimer:()=>{let n=0;e=setInterval((()=>{n+=1;const e=(t=>{const e=Math.floor(t/3600),n=Math.floor(t%3600/60);return`${String(e).padStart(2,"0")}:${String(n).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`})(n);t.textContent=e}),1e3)},stopTimer:s,resetTimer:()=>{s(),t.textContent="00:00:00"},resetCount:()=>{document.getElementById("count").textContent="0/3"},updateCount:()=>{const t=document.getElementById("count"),e=document.querySelectorAll(".grayed-out").length;t.textContent=`${e}/3`},grayOutCharacterIcon:t=>{const e=document.getElementById(t);e&&e.classList.add("grayed-out")},clearCharacterIcons:()=>{["bowser","neo","waldo"].forEach((t=>{const e=document.getElementById(t);e&&e.classList.remove("grayed-out")}))},showModal:r,hideModal:t=>{t.closest(".overlay").style.display="none",t.style.display="none"},getLeaderboard:()=>{const e=document.querySelector(".endgame input");document.getElementById("submitUsername").addEventListener("click",(async()=>{const n=e.value.trim();if(n){c.k.storeUserTime(n,t.textContent);const e=await c.k.getAllUserTimes();a.createTable(e),r(document.querySelector(".modal.leaderboard"))}}))},updateActiveDot:()=>{document.querySelectorAll(".dot").forEach(((t,e)=>{e===n?t.classList.add("active"):t.classList.remove("active")}))},updateActiveSlide:t=>{const e=document.querySelectorAll(".slide"),s=e.length;e[n].classList.remove("active"),"left"===t?(n=(n-1+s)%s,e[n].style.transform="translateX(-100%)",e[n].style.opacity="0"):"right"===t&&(n=(n+1)%s,e[n].style.transform="translateX(100%)",e[n].style.opacity="0"),e[n].classList.add("active"),setTimeout((()=>{e[n].style.transform="translateX(0)",e[n].style.opacity="1"}),0)},setBackgroundImage:()=>{const t=document.querySelector("#backgroundImg");switch(h.getGameChoice()){case"cyberpunk":default:t.src="../dist/images/cyberpunk-city.jpg";break;case"robot":t.src="../dist/images/robot-city.jpg"}},setCharacterIcons:()=>{const t=document.querySelectorAll(".character > .icon"),e=document.querySelectorAll(".character > .text > h3"),n={cyberpunk:[{icon:"../dist/images/bowser.png",title:"Bowser"},{icon:"../dist/images/neo.png",title:"Neo"},{icon:"../dist/images/waldo.png",title:"Waldo"}],robot:[{icon:"../dist/images/meg.png",title:"Meg"},{icon:"../dist/images/pikachu.png",title:"Pikachu"},{icon:"../dist/images/mike.png",title:"Mike"}]};(n[h.getGameChoice()]||n.default).forEach(((n,s)=>{t[s].src=n.icon,e[s].textContent=n.title}))}}})();console.log("app.js says: this seem to be working");const h=(()=>{const t=document.getElementById("content"),e=document.getElementById("dropdownButton"),n=document.getElementById("dropdownMenu"),s=document.querySelectorAll(".startButton"),r=document.getElementById("playAgainButton"),i=document.querySelector(".modal.initial"),o=document.querySelector(".modal.endgame"),h=document.querySelector(".modal.leaderboard"),l=document.querySelector(".arrow.left"),d=document.querySelector(".arrow.right");let f=!1,g=!1,p=!1,m=null,y=null;const v=[],w=t=>{const e=t.target;return y=e.dataset.choice,f||(u.hideModal(i),u.startTimer(),f=!0,g=!0,p=!0,u.setBackgroundImage(),u.setCharacterIcons()),y},E=()=>{f=!1,g=!1,p=!1,m=null,v.length=0,u.resetCount(),u.resetTimer(),u.clearCharacterIcons(),u.hideModal(h),u.hideModal(o),u.showModal(i)},b=async t=>{if(f&&!t.target.closest("header")&&!t.target.closest("footer")&&!t.target.closest(".overlay")){if(g){const{x:e,y:n,scaledX:s,scaledY:r}=c.j.getCoordinates(t);a.createCircle(e,n),a.createPopup(e,n,v);try{m=await c.k.verifyClickedPosition(s,r,y)}catch(t){console.error("Error verifying clicked position:",t)}}else a.removeCircle(),a.removePopup();g=!g,p=!p}},T=t=>{const{x:e,y:n}=c.j.getCoordinates(t);a.removePopup();const s=t.target.dataset.character;if(m===s){const t=m.charAt(0).toUpperCase()+m.slice(1).toLowerCase();a.createFeedbackMsg(`Found ${t}!`,e,n,"green"),u.grayOutCharacterIcon(s),u.updateCount(),v.push(s),a.removePopup(),a.createPopup(e,n,v),3===v.length&&(u.stopTimer(),u.getLeaderboard(),u.showModal(o))}else a.createFeedbackMsg("Keep looking!",e,n);return!1};return{init:()=>{l.addEventListener("click",(()=>{u.updateActiveSlide("left"),u.updateActiveDot()})),d.addEventListener("click",(()=>{u.updateActiveSlide("right"),u.updateActiveDot()})),t.addEventListener("click",b),document.querySelectorAll(".choice button").forEach((t=>{t.addEventListener("click",T)})),e.addEventListener("click",(()=>{n.classList.toggle("show"),e.textContent=n.classList.contains("show")?"▲ Hide Characters ▲":"▼ Show Characters ▼"})),s.forEach((t=>{t.addEventListener("click",w)})),document.getElementById("submitUsername").addEventListener("click",(()=>{u.hideModal(o)})),r.addEventListener("click",E),u.hideModal(h),u.hideModal(o),u.showModal(i)},handleCharacterButtonClick:T,getGameChoice:()=>y}})();h.init()}},e={};function n(s){var r=e[s];if(void 0!==r)return r.exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n(954),n(768)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,