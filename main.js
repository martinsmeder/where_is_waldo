(()=>{"use strict";const e=(()=>{const e=document.getElementById("backgroundImg");return{getCoordinates:t=>{const n=e.getBoundingClientRect(),o=t.clientX-n.left,c=t.clientY-n.top;console.log(`X: ${o}, Y: ${c}`);const r=o/(window.innerWidth/1920),l=c/(window.innerHeight/1080);return console.log(`Scaled X: ${r}, Scaled Y: ${l}`),{x:o,y:c}},formatTime:e=>{const t=Math.floor(e/3600),n=Math.floor(e%3600/60);return`${String(t).padStart(2,"0")}:${String(n).padStart(2,"0")}:${String(e%60).padStart(2,"0")}`}}})();console.log("interface.js says: this seem to be working");const t=(()=>{const e=document.getElementById("content"),o=document.getElementById("overlay"),c=[],r=[],l=(e,t)=>{const n=document.createElement("div");return n.className=e,t&&(n.textContent=t),n},s=(e,t,n)=>{const o=e;o.style.left=`${t}px`,o.style.top=`${n}px`},a=e=>{e.parentNode&&e.parentNode.removeChild(e)};return{createDiv:l,setPosition:s,createFeedbackMsg:(t,n,o)=>{const c=l("feedback",t);s(c,n-150,o-100),c.style.background="rgba(255, 0, 0, 0.7)",e.appendChild(c),setTimeout((()=>{c.remove()}),5e3)},createLink:(e,t)=>{const n=document.createElement("a");return n.textContent=e,n.href="#",n.addEventListener("click",t),n},showOverlay:()=>{o.style.display="flex"},hideOverlay:()=>{o.style.display="none"},removeElement:a,removeCircle:()=>{if(c.length>0){const e=c.pop();a(e)}},createCircle:(t,n)=>{const o=l("circle");s(o,t-50,n-50),e.appendChild(o),c.push(o)},removePopup:()=>{if(r.length>0){const e=r.pop();a(e)}},createPopup:(o,c)=>{const a=l("choice");s(a,o+60,c-70),["Bowser","Neo","Waldo"].forEach((e=>{const o=t.createLink(e,n.handleLinkClick);a.appendChild(o)})),e.appendChild(a),r.push(a)}}})(),n=(()=>{const n=document.getElementById("content"),o=document.getElementById("dropdownButton"),c=document.getElementById("dropdownMenu"),r=document.getElementById("startButton"),l=document.getElementById("timer");let s=!1,a=!1,i=!1;const d=()=>{s||(t.hideOverlay(),(()=>{let t=0;setInterval((()=>{t+=1;const n=e.formatTime(t);l.textContent=n}),1e3)})(),s=!0,a=!0,i=!0)},m=n=>{if(s&&!n.target.closest("header")&&!n.target.closest("footer")&&n.target!==r){if(a){const{x:o,y:c}=e.getCoordinates(n);t.createCircle(o,c),t.createPopup(o,c)}else t.removeCircle(),t.removePopup();a=!a,i=!i}},p=n=>{n.preventDefault(),console.log("handelLinkClick() triggered");const{x:o,y:c}=e.getCoordinates(n);t.removePopup(),t.createFeedbackMsg("Keep looking!",o,c)};return{init:()=>{n.addEventListener("click",m),document.querySelectorAll(".choice a").forEach((e=>{e.addEventListener("click",p)})),o.addEventListener("click",(()=>{c.classList.toggle("show"),o.textContent=c.classList.contains("show")?"▲ Hide Characters ▲":"▼ Show Characters ▼"})),r.addEventListener("click",d),t.showOverlay()},handleLinkClick:p}})();n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,