/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={954:(t,e,n)=>{n.d(e,{k:()=>Ql,j:()=>Hl});const s=function(t){const e=[];let n=0;for(let s=0;s<t.length;s++){let r=t.charCodeAt(s);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&s+1<t.length&&56320==(64512&t.charCodeAt(s+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++s)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let e=0;e<t.length;e+=3){const r=t[e],i=e+1<t.length,o=i?t[e+1]:0,a=e+2<t.length,c=a?t[e+2]:0,u=r>>2,h=(3&r)<<4|o>>4;let l=(15&o)<<2|c>>6,d=63&c;a||(d=64,i||(l=64)),s.push(n[u],n[h],n[l],n[d])}return s.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let n=0,s=0;for(;n<t.length;){const r=t[n++];if(r<128)e[s++]=String.fromCharCode(r);else if(r>191&&r<224){const i=t[n++];e[s++]=String.fromCharCode((31&r)<<6|63&i)}else if(r>239&&r<365){const i=((7&r)<<18|(63&t[n++])<<12|(63&t[n++])<<6|63&t[n++])-65536;e[s++]=String.fromCharCode(55296+(i>>10)),e[s++]=String.fromCharCode(56320+(1023&i))}else{const i=t[n++],o=t[n++];e[s++]=String.fromCharCode((15&r)<<12|(63&i)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const n=e?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let e=0;e<t.length;){const r=n[t.charAt(e++)],o=e<t.length?n[t.charAt(e)]:0;++e;const a=e<t.length?n[t.charAt(e)]:64;++e;const c=e<t.length?n[t.charAt(e)]:64;if(++e,null==r||null==o||null==a||null==c)throw new i;const u=r<<2|o>>4;if(s.push(u),64!==a){const t=o<<4&240|a>>2;if(s.push(t),64!==c){const t=a<<6&192|c;s.push(t)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class i extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const o=function(t){return function(t){const e=s(t);return r.encodeByteArray(e,!0)}(t).replace(/\./g,"")},a=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process)return;const t="MISSING_ENV_VAR".__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null}(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},c=()=>{var t;return null===(t=a())||void 0===t?void 0:t.config};class u{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,n)=>{e?this.reject(e):this.resolve(n),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,n))}}}class h extends Error{constructor(t,e,n){super(e),this.code=t,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,h.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,l.prototype.create)}}class l{constructor(t,e,n){this.service=t,this.serviceName=e,this.errors=n}create(t,...e){const n=e[0]||{},s=`${this.service}/${t}`,r=this.errors[t],i=r?function(t,e){return t.replace(d,((t,n)=>{const s=e[n];return null!=s?String(s):`<${n}?>`}))}(r,n):"Error",o=`${this.serviceName}: ${i} (${s}).`;return new h(s,o,n)}}const d=/\{\$([^}]+)}/g;function f(t,e){if(t===e)return!0;const n=Object.keys(t),s=Object.keys(e);for(const r of n){if(!s.includes(r))return!1;const n=t[r],i=e[r];if(g(n)&&g(i)){if(!f(n,i))return!1}else if(n!==i)return!1}for(const t of s)if(!n.includes(t))return!1;return!0}function g(t){return null!==t&&"object"==typeof t}function p(t){return t&&t._delegate?t._delegate:t}class m{constructor(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const y="[DEFAULT]";class v{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new u;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:e});n&&t.resolve(n)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),s=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(s)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:y})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:n});e.resolve(t)}catch(t){}}}}clearInstance(t=y){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=y){return this.instances.has(t)}getOptions(t=y){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,n=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:n,options:e});for(const[t,e]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(t)&&e.resolve(s);return s}onInit(t,e){var n;const s=this.normalizeInstanceIdentifier(e),r=null!==(n=this.onInitCallbacks.get(s))&&void 0!==n?n:new Set;r.add(t),this.onInitCallbacks.set(s,r);const i=this.instances.get(s);return i&&t(i,s),()=>{r.delete(t)}}invokeOnInitCallbacks(t,e){const n=this.onInitCallbacks.get(e);if(n)for(const s of n)try{s(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let n=this.instances.get(t);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(s=t,s===y?void 0:s),options:e}),this.instances.set(t,n),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(n,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,n)}catch(t){}var s;return n||null}normalizeInstanceIdentifier(t=y){return this.component?this.component.multipleInstances?t:y:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class w{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new v(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const E=[];var b,T;(T=b||(b={}))[T.DEBUG=0]="DEBUG",T[T.VERBOSE=1]="VERBOSE",T[T.INFO=2]="INFO",T[T.WARN=3]="WARN",T[T.ERROR=4]="ERROR",T[T.SILENT=5]="SILENT";const C={debug:b.DEBUG,verbose:b.VERBOSE,info:b.INFO,warn:b.WARN,error:b.ERROR,silent:b.SILENT},S=b.INFO,I={[b.DEBUG]:"log",[b.VERBOSE]:"log",[b.INFO]:"info",[b.WARN]:"warn",[b.ERROR]:"error"},A=(t,e,...n)=>{if(e<t.logLevel)return;const s=(new Date).toISOString(),r=I[e];if(!r)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[r](`[${s}]  ${t.name}:`,...n)};class _{constructor(t){this.name=t,this._logLevel=S,this._logHandler=A,this._userLogHandler=null,E.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in b))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?C[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,b.DEBUG,...t),this._logHandler(this,b.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,b.VERBOSE,...t),this._logHandler(this,b.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,b.INFO,...t),this._logHandler(this,b.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,b.WARN,...t),this._logHandler(this,b.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,b.ERROR,...t),this._logHandler(this,b.ERROR,...t)}}const k=(t,e)=>e.some((e=>t instanceof e));let D,N;const x=new WeakMap,L=new WeakMap,R=new WeakMap,M=new WeakMap,O=new WeakMap;let P={get(t,e,n){if(t instanceof IDBTransaction){if("done"===e)return L.get(t);if("objectStoreNames"===e)return t.objectStoreNames||R.get(t);if("store"===e)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return V(t[e])},set:(t,e,n)=>(t[e]=n,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function F(t){return"function"==typeof t?(e=t)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(N||(N=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(U(this),t),V(x.get(this))}:function(...t){return V(e.apply(U(this),t))}:function(t,...n){const s=e.call(U(this),t,...n);return R.set(s,t.sort?t.sort():[t]),V(s)}:(t instanceof IDBTransaction&&function(t){if(L.has(t))return;const e=new Promise(((e,n)=>{const s=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),s()},i=()=>{n(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)}));L.set(t,e)}(t),k(t,D||(D=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,P):t);var e}function V(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,n)=>{const s=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(V(t.result)),s()},i=()=>{n(t.error),s()};t.addEventListener("success",r),t.addEventListener("error",i)}));return e.then((e=>{e instanceof IDBCursor&&x.set(e,t)})).catch((()=>{})),O.set(e,t),e}(t);if(M.has(t))return M.get(t);const e=F(t);return e!==t&&(M.set(t,e),O.set(e,t)),e}const U=t=>O.get(t),B=["get","getKey","getAll","getAllKeys","count"],j=["put","add","delete","clear"],q=new Map;function $(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(q.get(e))return q.get(e);const n=e.replace(/FromIndex$/,""),s=e!==n,r=j.includes(n);if(!(n in(s?IDBIndex:IDBObjectStore).prototype)||!r&&!B.includes(n))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let o=i.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[n](...e),r&&i.done]))[0]};return q.set(e,i),i}var z;z=P,P={...z,get:(t,e,n)=>$(t,e)||z.get(t,e,n),has:(t,e)=>!!$(t,e)||z.has(t,e)};class K{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const G="@firebase/app",H="0.9.12",Q=new _("@firebase/app"),W="[DEFAULT]",X={[G]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},Y=new Map,J=new Map;function Z(t,e){try{t.container.addComponent(e)}catch(n){Q.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function tt(t){const e=t.name;if(J.has(e))return Q.debug(`There were multiple attempts to register component ${e}.`),!1;J.set(e,t);for(const e of Y.values())Z(e,t);return!0}const et=new l("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class nt{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new m("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw et.create("app-deleted",{appName:this._name})}}function st(t,e={}){let n=t;"object"!=typeof e&&(e={name:e});const s=Object.assign({name:W,automaticDataCollectionEnabled:!1},e),r=s.name;if("string"!=typeof r||!r)throw et.create("bad-app-name",{appName:String(r)});if(n||(n=c()),!n)throw et.create("no-options");const i=Y.get(r);if(i){if(f(n,i.options)&&f(s,i.config))return i;throw et.create("duplicate-app",{appName:r})}const o=new w(r);for(const t of J.values())o.addComponent(t);const a=new nt(n,s,o);return Y.set(r,a),a}function rt(t,e,n){var s;let r=null!==(s=X[t])&&void 0!==s?s:t;n&&(r+=`-${n}`);const i=r.match(/\s|\//),o=e.match(/\s|\//);if(i||o){const t=[`Unable to register library "${r}" with version "${e}":`];return i&&t.push(`library name "${r}" contains illegal characters (whitespace or "/")`),i&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void Q.warn(t.join(" "))}tt(new m(`${r}-version`,(()=>({library:r,version:e})),"VERSION"))}const it="firebase-heartbeat-database",ot=1,at="firebase-heartbeat-store";let ct=null;function ut(){return ct||(ct=function(t,e,{blocked:n,upgrade:s,blocking:r,terminated:i}={}){const o=indexedDB.open(t,e),a=V(o);return s&&o.addEventListener("upgradeneeded",(t=>{s(V(o.result),t.oldVersion,t.newVersion,V(o.transaction),t)})),n&&o.addEventListener("blocked",(t=>n(t.oldVersion,t.newVersion,t))),a.then((t=>{i&&t.addEventListener("close",(()=>i())),r&&t.addEventListener("versionchange",(t=>r(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),a}(it,ot,{upgrade:(t,e)=>{0===e&&t.createObjectStore(at)}}).catch((t=>{throw et.create("idb-open",{originalErrorMessage:t.message})}))),ct}async function ht(t,e){try{const n=(await ut()).transaction(at,"readwrite"),s=n.objectStore(at);await s.put(e,lt(t)),await n.done}catch(t){if(t instanceof h)Q.warn(t.message);else{const e=et.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});Q.warn(e.message)}}}function lt(t){return`${t.name}!${t.options.appId}`}class dt{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new gt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=ft();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=ft(),{heartbeatsToSend:e,unsentEntries:n}=function(t,e=1024){const n=[];let s=t.slice();for(const r of t){const t=n.find((t=>t.agent===r.agent));if(t){if(t.dates.push(r.date),pt(n)>e){t.dates.pop();break}}else if(n.push({agent:r.agent,dates:[r.date]}),pt(n)>e){n.pop();break}s=s.slice(1)}return{heartbeatsToSend:n,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=o(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function ft(){return(new Date).toISOString().substring(0,10)}class gt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(t){return!1}}()&&new Promise(((t,e)=>{try{let n=!0;const s="validate-browser-context-for-indexeddb-analytics-module",r=self.indexedDB.open(s);r.onsuccess=()=>{r.result.close(),n||self.indexedDB.deleteDatabase(s),t(!0)},r.onupgradeneeded=()=>{n=!1},r.onerror=()=>{var t;e((null===(t=r.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const t=await async function(t){try{const e=await ut();return await e.transaction(at).objectStore(at).get(lt(t))}catch(t){if(t instanceof h)Q.warn(t.message);else{const e=et.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});Q.warn(e.message)}}}(this.app);return t||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const n=await this.read();return ht(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:n.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const n=await this.read();return ht(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...t.heartbeats]})}}}function pt(t){return o(JSON.stringify({version:2,heartbeats:t})).length}tt(new m("platform-logger",(t=>new K(t)),"PRIVATE")),tt(new m("heartbeat",(t=>new dt(t)),"PRIVATE")),rt(G,H,""),rt(G,H,"esm2017"),rt("fire-js",""),rt("firebase","9.22.2","app");var mt,yt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},vt={},wt=wt||{},Et=yt||self;function bt(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function Tt(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Ct="closure_uid_"+(1e9*Math.random()>>>0),St=0;function It(t,e,n){return t.call.apply(t.bind,arguments)}function At(t,e,n){if(!t)throw Error();if(2<arguments.length){var s=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,s),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function _t(t,e,n){return(_t=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?It:At).apply(null,arguments)}function kt(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function Dt(t,e){function n(){}n.prototype=e.prototype,t.$=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.ac=function(t,n,s){for(var r=Array(arguments.length-2),i=2;i<arguments.length;i++)r[i-2]=arguments[i];return e.prototype[n].apply(t,r)}}function Nt(){this.s=this.s,this.o=this.o}Nt.prototype.s=!1,Nt.prototype.sa=function(){var t;!this.s&&(this.s=!0,this.N(),0)&&(t=this,Object.prototype.hasOwnProperty.call(t,Ct)&&t[Ct]||(t[Ct]=++St))},Nt.prototype.N=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const xt=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(let n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1};function Lt(t){const e=t.length;if(0<e){const n=Array(e);for(let s=0;s<e;s++)n[s]=t[s];return n}return[]}function Rt(t,e){for(let e=1;e<arguments.length;e++){const n=arguments[e];if(bt(n)){const e=t.length||0,s=n.length||0;t.length=e+s;for(let r=0;r<s;r++)t[e+r]=n[r]}else t.push(n)}}function Mt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}Mt.prototype.h=function(){this.defaultPrevented=!0};var Ot=function(){if(!Et.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Et.addEventListener("test",(()=>{}),e),Et.removeEventListener("test",(()=>{}),e)}catch(t){}return t}();function Pt(t){return/^[\s\xa0]*$/.test(t)}function Ft(){var t=Et.navigator;return t&&(t=t.userAgent)?t:""}function Vt(t){return-1!=Ft().indexOf(t)}function Ut(t){return Ut[" "](t),t}Ut[" "]=function(){};var Bt,jt,qt,$t=Vt("Opera"),zt=Vt("Trident")||Vt("MSIE"),Kt=Vt("Edge"),Gt=Kt||zt,Ht=Vt("Gecko")&&!(-1!=Ft().toLowerCase().indexOf("webkit")&&!Vt("Edge"))&&!(Vt("Trident")||Vt("MSIE"))&&!Vt("Edge"),Qt=-1!=Ft().toLowerCase().indexOf("webkit")&&!Vt("Edge");function Wt(){var t=Et.document;return t?t.documentMode:void 0}t:{var Xt="",Yt=(jt=Ft(),Ht?/rv:([^\);]+)(\)|;)/.exec(jt):Kt?/Edge\/([\d\.]+)/.exec(jt):zt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(jt):Qt?/WebKit\/(\S+)/.exec(jt):$t?/(?:Version)[ \/]?(\S+)/.exec(jt):void 0);if(Yt&&(Xt=Yt?Yt[1]:""),zt){var Jt=Wt();if(null!=Jt&&Jt>parseFloat(Xt)){Bt=String(Jt);break t}}Bt=Xt}Et.document&&zt?qt=Wt()||parseInt(Bt,10)||void 0:qt=void 0;var Zt=qt;function te(t,e){if(Mt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,s=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(Ht){t:{try{Ut(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,s?(this.clientX=void 0!==s.clientX?s.clientX:s.pageX,this.clientY=void 0!==s.clientY?s.clientY:s.pageY,this.screenX=s.screenX||0,this.screenY=s.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:ee[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&te.$.h.call(this)}}Dt(te,Mt);var ee={2:"touch",3:"pen",4:"mouse"};te.prototype.h=function(){te.$.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var ne="closure_listenable_"+(1e6*Math.random()|0),se=0;function re(t,e,n,s,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!s,this.la=r,this.key=++se,this.fa=this.ia=!1}function ie(t){t.fa=!0,t.listener=null,t.proxy=null,t.src=null,t.la=null}function oe(t,e,n){for(const s in t)e.call(n,t[s],s,t)}function ae(t){const e={};for(const n in t)e[n]=t[n];return e}const ce="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ue(t,e){let n,s;for(let e=1;e<arguments.length;e++){for(n in s=arguments[e],s)t[n]=s[n];for(let e=0;e<ce.length;e++)n=ce[e],Object.prototype.hasOwnProperty.call(s,n)&&(t[n]=s[n])}}function he(t){this.src=t,this.g={},this.h=0}function le(t,e){var n=e.type;if(n in t.g){var s,r=t.g[n],i=xt(r,e);(s=0<=i)&&Array.prototype.splice.call(r,i,1),s&&(ie(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function de(t,e,n,s){for(var r=0;r<t.length;++r){var i=t[r];if(!i.fa&&i.listener==e&&i.capture==!!n&&i.la==s)return r}return-1}he.prototype.add=function(t,e,n,s,r){var i=t.toString();(t=this.g[i])||(t=this.g[i]=[],this.h++);var o=de(t,e,s,r);return-1<o?(e=t[o],n||(e.ia=!1)):((e=new re(e,this.src,i,!!s,r)).ia=n,t.push(e)),e};var fe="closure_lm_"+(1e6*Math.random()|0),ge={};function pe(t,e,n,s,r){if(s&&s.once)return ye(t,e,n,s,r);if(Array.isArray(e)){for(var i=0;i<e.length;i++)pe(t,e[i],n,s,r);return null}return n=Se(n),t&&t[ne]?t.O(e,n,Tt(s)?!!s.capture:!!s,r):me(t,e,n,!1,s,r)}function me(t,e,n,s,r,i){if(!e)throw Error("Invalid event type");var o=Tt(r)?!!r.capture:!!r,a=Te(t);if(a||(t[fe]=a=new he(t)),(n=a.add(e,n,s,o,i)).proxy)return n;if(s=function(){const t=be;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=s,s.src=t,s.listener=n,t.addEventListener)Ot||(r=o),void 0===r&&(r=!1),t.addEventListener(e.toString(),s,r);else if(t.attachEvent)t.attachEvent(Ee(e.toString()),s);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(s)}return n}function ye(t,e,n,s,r){if(Array.isArray(e)){for(var i=0;i<e.length;i++)ye(t,e[i],n,s,r);return null}return n=Se(n),t&&t[ne]?t.P(e,n,Tt(s)?!!s.capture:!!s,r):me(t,e,n,!0,s,r)}function ve(t,e,n,s,r){if(Array.isArray(e))for(var i=0;i<e.length;i++)ve(t,e[i],n,s,r);else s=Tt(s)?!!s.capture:!!s,n=Se(n),t&&t[ne]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=de(i=t.g[e],n,s,r))&&(ie(i[n]),Array.prototype.splice.call(i,n,1),0==i.length&&(delete t.g[e],t.h--))):t&&(t=Te(t))&&(e=t.g[e.toString()],t=-1,e&&(t=de(e,n,s,r)),(n=-1<t?e[t]:null)&&we(n))}function we(t){if("number"!=typeof t&&t&&!t.fa){var e=t.src;if(e&&e[ne])le(e.i,t);else{var n=t.type,s=t.proxy;e.removeEventListener?e.removeEventListener(n,s,t.capture):e.detachEvent?e.detachEvent(Ee(n),s):e.addListener&&e.removeListener&&e.removeListener(s),(n=Te(e))?(le(n,t),0==n.h&&(n.src=null,e[fe]=null)):ie(t)}}}function Ee(t){return t in ge?ge[t]:ge[t]="on"+t}function be(t,e){if(t.fa)t=!0;else{e=new te(e,this);var n=t.listener,s=t.la||t.src;t.ia&&we(t),t=n.call(s,e)}return t}function Te(t){return(t=t[fe])instanceof he?t:null}var Ce="__closure_events_fn_"+(1e9*Math.random()>>>0);function Se(t){return"function"==typeof t?t:(t[Ce]||(t[Ce]=function(e){return t.handleEvent(e)}),t[Ce])}function Ie(){Nt.call(this),this.i=new he(this),this.S=this,this.J=null}function Ae(t,e){var n,s=t.J;if(s)for(n=[];s;s=s.J)n.push(s);if(t=t.S,s=e.type||e,"string"==typeof e)e=new Mt(e,t);else if(e instanceof Mt)e.target=e.target||t;else{var r=e;ue(e=new Mt(s,t),r)}if(r=!0,n)for(var i=n.length-1;0<=i;i--){var o=e.g=n[i];r=_e(o,s,!0,e)&&r}if(r=_e(o=e.g=t,s,!0,e)&&r,r=_e(o,s,!1,e)&&r,n)for(i=0;i<n.length;i++)r=_e(o=e.g=n[i],s,!1,e)&&r}function _e(t,e,n,s){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var r=!0,i=0;i<e.length;++i){var o=e[i];if(o&&!o.fa&&o.capture==n){var a=o.listener,c=o.la||o.src;o.ia&&le(t.i,o),r=!1!==a.call(c,s)&&r}}return r&&!s.defaultPrevented}Dt(Ie,Nt),Ie.prototype[ne]=!0,Ie.prototype.removeEventListener=function(t,e,n,s){ve(this,t,e,n,s)},Ie.prototype.N=function(){if(Ie.$.N.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],s=0;s<n.length;s++)ie(n[s]);delete e.g[t],e.h--}}this.J=null},Ie.prototype.O=function(t,e,n,s){return this.i.add(String(t),e,!1,n,s)},Ie.prototype.P=function(t,e,n,s){return this.i.add(String(t),e,!0,n,s)};var ke=Et.JSON.stringify;function De(){var t=Pe;let e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var Ne=new class{constructor(t,e){this.i=t,this.j=e,this.h=0,this.g=null}get(){let t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t}}((()=>new xe),(t=>t.reset()));class xe{constructor(){this.next=this.g=this.h=null}set(t,e){this.h=t,this.g=e,this.next=null}reset(){this.next=this.g=this.h=null}}function Le(t){var e=1;t=t.split(":");const n=[];for(;0<e&&t.length;)n.push(t.shift()),e--;return t.length&&n.push(t.join(":")),n}function Re(t){Et.setTimeout((()=>{throw t}),0)}let Me,Oe=!1,Pe=new class{constructor(){this.h=this.g=null}add(t,e){const n=Ne.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n}},Fe=()=>{const t=Et.Promise.resolve(void 0);Me=()=>{t.then(Ve)}};var Ve=()=>{for(var t;t=De();){try{t.h.call(t.g)}catch(t){Re(t)}var e=Ne;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Oe=!1};function Ue(t,e){Ie.call(this),this.h=t||1,this.g=e||Et,this.j=_t(this.qb,this),this.l=Date.now()}function Be(t){t.ga=!1,t.T&&(t.g.clearTimeout(t.T),t.T=null)}function je(t,e,n){if("function"==typeof t)n&&(t=_t(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=_t(t.handleEvent,t)}return 2147483647<Number(e)?-1:Et.setTimeout(t,e||0)}function qe(t){t.g=je((()=>{t.g=null,t.i&&(t.i=!1,qe(t))}),t.j);const e=t.h;t.h=null,t.m.apply(null,e)}Dt(Ue,Ie),(mt=Ue.prototype).ga=!1,mt.T=null,mt.qb=function(){if(this.ga){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.T=this.g.setTimeout(this.j,this.h-t):(this.T&&(this.g.clearTimeout(this.T),this.T=null),Ae(this,"tick"),this.ga&&(Be(this),this.start()))}},mt.start=function(){this.ga=!0,this.T||(this.T=this.g.setTimeout(this.j,this.h),this.l=Date.now())},mt.N=function(){Ue.$.N.call(this),Be(this),delete this.g};class $e extends Nt{constructor(t,e){super(),this.m=t,this.j=e,this.h=null,this.i=!1,this.g=null}l(t){this.h=arguments,this.g?this.i=!0:qe(this)}N(){super.N(),this.g&&(Et.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function ze(t){Nt.call(this),this.h=t,this.g={}}Dt(ze,Nt);var Ke=[];function Ge(t,e,n,s){Array.isArray(n)||(n&&(Ke[0]=n.toString()),n=Ke);for(var r=0;r<n.length;r++){var i=pe(e,n[r],s||t.handleEvent,!1,t.h||t);if(!i)break;t.g[i.key]=i}}function He(t){oe(t.g,(function(t,e){this.g.hasOwnProperty(e)&&we(t)}),t),t.g={}}function Qe(){this.g=!0}function We(t,e,n,s){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var s=n[t];if(!(2>s.length)){var r=s[1];if(Array.isArray(r)&&!(1>r.length)){var i=r[0];if("noop"!=i&&"stop"!=i&&"close"!=i)for(var o=1;o<r.length;o++)r[o]=""}}}return ke(n)}catch(t){return e}}(t,n)+(s?" "+s:"")}))}ze.prototype.N=function(){ze.$.N.call(this),He(this)},ze.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Qe.prototype.Ea=function(){this.g=!1},Qe.prototype.info=function(){};var Xe={},Ye=null;function Je(){return Ye=Ye||new Ie}function Ze(t){Mt.call(this,Xe.Ta,t)}function tn(t){const e=Je();Ae(e,new Ze(e))}function en(t,e){Mt.call(this,Xe.STAT_EVENT,t),this.stat=e}function nn(t){const e=Je();Ae(e,new en(e,t))}function sn(t,e){Mt.call(this,Xe.Ua,t),this.size=e}function rn(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return Et.setTimeout((function(){t()}),e)}Xe.Ta="serverreachability",Dt(Ze,Mt),Xe.STAT_EVENT="statevent",Dt(en,Mt),Xe.Ua="timingevent",Dt(sn,Mt);var on={NO_ERROR:0,rb:1,Eb:2,Db:3,yb:4,Cb:5,Fb:6,Qa:7,TIMEOUT:8,Ib:9},an={wb:"complete",Sb:"success",Ra:"error",Qa:"abort",Kb:"ready",Lb:"readystatechange",TIMEOUT:"timeout",Gb:"incrementaldata",Jb:"progress",zb:"downloadprogress",$b:"uploadprogress"};function cn(){}function un(t){return t.h||(t.h=t.i())}function hn(){}cn.prototype.h=null;var ln,dn={OPEN:"a",vb:"b",Ra:"c",Hb:"d"};function fn(){Mt.call(this,"d")}function gn(){Mt.call(this,"c")}function pn(){}function mn(t,e,n,s){this.l=t,this.j=e,this.m=n,this.W=s||1,this.U=new ze(this),this.P=vn,t=Gt?125:void 0,this.V=new Ue(t),this.I=null,this.i=!1,this.s=this.A=this.v=this.L=this.G=this.Y=this.B=null,this.F=[],this.g=null,this.C=0,this.o=this.u=null,this.ca=-1,this.J=!1,this.O=0,this.M=null,this.ba=this.K=this.aa=this.S=!1,this.h=new yn}function yn(){this.i=null,this.g="",this.h=!1}Dt(fn,Mt),Dt(gn,Mt),Dt(pn,cn),pn.prototype.g=function(){return new XMLHttpRequest},pn.prototype.i=function(){return{}},ln=new pn;var vn=45e3,wn={},En={};function bn(t,e,n){t.L=1,t.v=Bn(On(e)),t.s=n,t.S=!0,Tn(t,null)}function Tn(t,e){t.G=Date.now(),An(t),t.A=On(t.v);var n=t.A,s=t.W;Array.isArray(s)||(s=[String(s)]),Zn(n.i,"t",s),t.C=0,n=t.l.J,t.h=new yn,t.g=Js(t.l,n?e:null,!t.s),0<t.O&&(t.M=new $e(_t(t.Pa,t,t.g),t.O)),Ge(t.U,t.g,"readystatechange",t.nb),e=t.I?ae(t.I):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ha(t.A,t.u,t.s,e)):(t.u="GET",t.g.ha(t.A,t.u,null,e)),tn(),function(t,e,n,s,r,i){t.info((function(){if(t.g)if(i)for(var o="",a=i.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var h=u[0];u=u[1];var l=h.split("_");o=2<=l.length&&"type"==l[1]?o+(h+"=")+u+"&":o+(h+"=redacted&")}}else o=null;else o=i;return"XMLHTTP REQ ("+s+") [attempt "+r+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.W,t.s)}function Cn(t){return!!t.g&&"GET"==t.u&&2!=t.L&&t.l.Ha}function Sn(t,e,n){let s,r=!0;for(;!t.J&&t.C<n.length;){if(s=In(t,n),s==En){4==e&&(t.o=4,nn(14),r=!1),We(t.j,t.m,null,"[Incomplete Response]");break}if(s==wn){t.o=4,nn(15),We(t.j,t.m,n,"[Invalid Chunk]"),r=!1;break}We(t.j,t.m,s,null),xn(t,s)}Cn(t)&&s!=En&&s!=wn&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,nn(16),r=!1),t.i=t.i&&r,r?0<n.length&&!t.ba&&(t.ba=!0,(e=t.l).g==t&&e.ca&&!e.M&&(e.l.info("Great, no buffering proxy detected. Bytes received: "+n.length),zs(e),e.M=!0,nn(11))):(We(t.j,t.m,n,"[Invalid Chunked Response]"),Nn(t),Dn(t))}function In(t,e){var n=t.C,s=e.indexOf("\n",n);return-1==s?En:(n=Number(e.substring(n,s)),isNaN(n)?wn:(s+=1)+n>e.length?En:(e=e.slice(s,s+n),t.C=s+n,e))}function An(t){t.Y=Date.now()+t.P,_n(t,t.P)}function _n(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=rn(_t(t.lb,t),e)}function kn(t){t.B&&(Et.clearTimeout(t.B),t.B=null)}function Dn(t){0==t.l.H||t.J||Hs(t.l,t)}function Nn(t){kn(t);var e=t.M;e&&"function"==typeof e.sa&&e.sa(),t.M=null,Be(t.V),He(t.U),t.g&&(e=t.g,t.g=null,e.abort(),e.sa())}function xn(t,e){try{var n=t.l;if(0!=n.H&&(n.g==t||is(n.i,t)))if(!t.K&&is(n.i,t)&&3==n.H){try{var s=n.Ja.g.parse(e)}catch(t){s=null}if(Array.isArray(s)&&3==s.length){var r=s;if(0==r[0]){t:if(!n.u){if(n.g){if(!(n.g.G+3e3<t.G))break t;Gs(n),Ps(n)}$s(n),nn(18)}}else n.Fa=r[1],0<n.Fa-n.V&&37500>r[2]&&n.G&&0==n.A&&!n.v&&(n.v=rn(_t(n.ib,n),6e3));if(1>=rs(n.i)&&n.oa){try{n.oa()}catch(t){}n.oa=void 0}}else Ws(n,11)}else if((t.K||n.g==t)&&Gs(n),!Pt(e))for(r=n.Ja.g.parse(e),e=0;e<r.length;e++){let u=r[e];if(n.V=u[0],u=u[1],2==n.H)if("c"==u[0]){n.K=u[1],n.pa=u[2];const e=u[3];null!=e&&(n.ra=e,n.l.info("VER="+n.ra));const r=u[4];null!=r&&(n.Ga=r,n.l.info("SVER="+n.Ga));const h=u[5];null!=h&&"number"==typeof h&&0<h&&(s=1.5*h,n.L=s,n.l.info("backChannelRequestTimeoutMs_="+s)),s=n;const l=t.g;if(l){const t=l.g?l.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(t){var i=s.i;i.g||-1==t.indexOf("spdy")&&-1==t.indexOf("quic")&&-1==t.indexOf("h2")||(i.j=i.l,i.g=new Set,i.h&&(os(i,i.h),i.h=null))}if(s.F){const t=l.g?l.g.getResponseHeader("X-HTTP-Session-Id"):null;t&&(s.Da=t,Un(s.I,s.F,t))}}n.H=3,n.h&&n.h.Ba(),n.ca&&(n.S=Date.now()-t.G,n.l.info("Handshake RTT: "+n.S+"ms"));var o=t;if((s=n).wa=Ys(s,s.J?s.pa:null,s.Y),o.K){as(s.i,o);var a=o,c=s.L;c&&a.setTimeout(c),a.B&&(kn(a),An(a)),s.g=o}else qs(s);0<n.j.length&&Vs(n)}else"stop"!=u[0]&&"close"!=u[0]||Ws(n,7);else 3==n.H&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?Ws(n,7):Os(n):"noop"!=u[0]&&n.h&&n.h.Aa(u),n.A=0)}tn()}catch(t){}}function Ln(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(bt(t)||"string"==typeof t)Array.prototype.forEach.call(t,e,void 0);else for(var n=function(t){if(t.ta&&"function"==typeof t.ta)return t.ta();if(!t.Z||"function"!=typeof t.Z){if("undefined"!=typeof Map&&t instanceof Map)return Array.from(t.keys());if(!("undefined"!=typeof Set&&t instanceof Set)){if(bt(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}e=[],n=0;for(const s in t)e[n++]=s;return e}}}(t),s=function(t){if(t.Z&&"function"==typeof t.Z)return t.Z();if("undefined"!=typeof Map&&t instanceof Map||"undefined"!=typeof Set&&t instanceof Set)return Array.from(t.values());if("string"==typeof t)return t.split("");if(bt(t)){for(var e=[],n=t.length,s=0;s<n;s++)e.push(t[s]);return e}for(s in e=[],n=0,t)e[n++]=t[s];return e}(t),r=s.length,i=0;i<r;i++)e.call(void 0,s[i],n&&n[i],t)}(mt=mn.prototype).setTimeout=function(t){this.P=t},mt.nb=function(t){t=t.target;const e=this.M;e&&3==Ds(t)?e.l():this.Pa(t)},mt.Pa=function(t){try{if(t==this.g)t:{const h=Ds(this.g);var e=this.g.Ia();if(this.g.da(),!(3>h)&&(3!=h||Gt||this.g&&(this.h.h||this.g.ja()||Ns(this.g)))){this.J||4!=h||7==e||tn(),kn(this);var n=this.g.da();this.ca=n;e:if(Cn(this)){var s=Ns(this.g);t="";var r=s.length,i=4==Ds(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){Nn(this),Dn(this);var o="";break e}this.h.i=new Et.TextDecoder}for(e=0;e<r;e++)this.h.h=!0,t+=this.h.i.decode(s[e],{stream:i&&e==r-1});s.splice(0,r),this.h.g+=t,this.C=0,o=this.h.g}else o=this.g.ja();if(this.i=200==n,function(t,e,n,s,r,i,o){t.info((function(){return"XMLHTTP RESP ("+s+") [ attempt "+r+"]: "+e+"\n"+n+"\n"+i+" "+o}))}(this.j,this.u,this.A,this.m,this.W,h,n),this.i){if(this.aa&&!this.K){e:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Pt(a)){var u=a;break e}}u=null}if(!(n=u)){this.i=!1,this.o=3,nn(12),Nn(this),Dn(this);break t}We(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.K=!0,xn(this,n)}this.S?(Sn(this,h,o),Gt&&this.i&&3==h&&(Ge(this.U,this.V,"tick",this.mb),this.V.start())):(We(this.j,this.m,o,null),xn(this,o)),4==h&&Nn(this),this.i&&!this.J&&(4==h?Hs(this.l,this):(this.i=!1,An(this)))}else(function(t){const e={};t=(t.g&&2<=Ds(t)&&t.g.getAllResponseHeaders()||"").split("\r\n");for(let s=0;s<t.length;s++){if(Pt(t[s]))continue;var n=Le(t[s]);const r=n[0];if("string"!=typeof(n=n[1]))continue;n=n.trim();const i=e[r]||[];e[r]=i,i.push(n)}!function(t,e){for(const n in t)e.call(void 0,t[n],n,t)}(e,(function(t){return t.join(", ")}))})(this.g),400==n&&0<o.indexOf("Unknown SID")?(this.o=3,nn(12)):(this.o=0,nn(13)),Nn(this),Dn(this)}}}catch(t){}},mt.mb=function(){if(this.g){var t=Ds(this.g),e=this.g.ja();this.C<e.length&&(kn(this),Sn(this,t,e),this.i&&4!=t&&An(this))}},mt.cancel=function(){this.J=!0,Nn(this)},mt.lb=function(){this.B=null;const t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.L&&(tn(),nn(17)),Nn(this),this.o=2,Dn(this)):_n(this,this.Y-t)};var Rn=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");function Mn(t){if(this.g=this.s=this.j="",this.m=null,this.o=this.l="",this.h=!1,t instanceof Mn){this.h=t.h,Pn(this,t.j),this.s=t.s,this.g=t.g,Fn(this,t.m),this.l=t.l;var e=t.i,n=new Wn;n.i=e.i,e.g&&(n.g=new Map(e.g),n.h=e.h),Vn(this,n),this.o=t.o}else t&&(e=String(t).match(Rn))?(this.h=!1,Pn(this,e[1]||"",!0),this.s=jn(e[2]||""),this.g=jn(e[3]||"",!0),Fn(this,e[4]),this.l=jn(e[5]||"",!0),Vn(this,e[6]||"",!0),this.o=jn(e[7]||"")):(this.h=!1,this.i=new Wn(null,this.h))}function On(t){return new Mn(t)}function Pn(t,e,n){t.j=n?jn(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function Fn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Vn(t,e,n){e instanceof Wn?(t.i=e,function(t,e){e&&!t.j&&(Xn(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Yn(this,e),Zn(this,n,t))}),t)),t.j=e}(t.i,t.h)):(n||(e=qn(e,Hn)),t.i=new Wn(e,t.h))}function Un(t,e,n){t.i.set(e,n)}function Bn(t){return Un(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function jn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function qn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,$n),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function $n(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Mn.prototype.toString=function(){var t=[],e=this.j;e&&t.push(qn(e,zn,!0),":");var n=this.g;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(qn(e,zn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.g&&"/"!=n.charAt(0)&&t.push("/"),t.push(qn(n,"/"==n.charAt(0)?Gn:Kn,!0))),(n=this.i.toString())&&t.push("?",n),(n=this.o)&&t.push("#",qn(n,Qn)),t.join("")};var zn=/[#\/\?@]/g,Kn=/[#\?:]/g,Gn=/[#\?]/g,Hn=/[#\?@]/g,Qn=/#/g;function Wn(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Xn(t){t.g||(t.g=new Map,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var s=t[n].indexOf("="),r=null;if(0<=s){var i=t[n].substring(0,s);r=t[n].substring(s+1)}else i=t[n];e(i,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Yn(t,e){Xn(t),e=ts(t,e),t.g.has(e)&&(t.i=null,t.h-=t.g.get(e).length,t.g.delete(e))}function Jn(t,e){return Xn(t),e=ts(t,e),t.g.has(e)}function Zn(t,e,n){Yn(t,e),0<n.length&&(t.i=null,t.g.set(ts(t,e),Lt(n)),t.h+=n.length)}function ts(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}function es(t){this.l=t||ns,t=Et.PerformanceNavigationTiming?0<(t=Et.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Et.g&&Et.g.Ka&&Et.g.Ka()&&Et.g.Ka().ec),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(mt=Wn.prototype).add=function(t,e){Xn(this),this.i=null,t=ts(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},mt.forEach=function(t,e){Xn(this),this.g.forEach((function(n,s){n.forEach((function(n){t.call(e,n,s,this)}),this)}),this)},mt.ta=function(){Xn(this);const t=Array.from(this.g.values()),e=Array.from(this.g.keys()),n=[];for(let s=0;s<e.length;s++){const r=t[s];for(let t=0;t<r.length;t++)n.push(e[s])}return n},mt.Z=function(t){Xn(this);let e=[];if("string"==typeof t)Jn(this,t)&&(e=e.concat(this.g.get(ts(this,t))));else{t=Array.from(this.g.values());for(let n=0;n<t.length;n++)e=e.concat(t[n])}return e},mt.set=function(t,e){return Xn(this),this.i=null,Jn(this,t=ts(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},mt.get=function(t,e){return t&&0<(t=this.Z(t)).length?String(t[0]):e},mt.toString=function(){if(this.i)return this.i;if(!this.g)return"";const t=[],e=Array.from(this.g.keys());for(var n=0;n<e.length;n++){var s=e[n];const i=encodeURIComponent(String(s)),o=this.Z(s);for(s=0;s<o.length;s++){var r=i;""!==o[s]&&(r+="="+encodeURIComponent(String(o[s]))),t.push(r)}}return this.i=t.join("&")};var ns=10;function ss(t){return!!t.h||!!t.g&&t.g.size>=t.j}function rs(t){return t.h?1:t.g?t.g.size:0}function is(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function os(t,e){t.g?t.g.add(e):t.h=e}function as(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function cs(t){if(null!=t.h)return t.i.concat(t.h.F);if(null!=t.g&&0!==t.g.size){let e=t.i;for(const n of t.g.values())e=e.concat(n.F);return e}return Lt(t.i)}es.prototype.cancel=function(){if(this.i=cs(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const t of this.g.values())t.cancel();this.g.clear()}};var us=class{stringify(t){return Et.JSON.stringify(t,void 0)}parse(t){return Et.JSON.parse(t,void 0)}};function hs(){this.g=new us}function ls(t,e,n){const s=n||"";try{Ln(t,(function(t,n){let r=t;Tt(t)&&(r=ke(t)),e.push(s+n+"="+encodeURIComponent(r))}))}catch(t){throw e.push(s+"type="+encodeURIComponent("_badmap")),t}}function ds(t,e,n,s,r){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,r(s)}catch(t){}}function fs(t){this.l=t.fc||null,this.j=t.ob||!1}function gs(t,e){Ie.call(this),this.F=t,this.u=e,this.m=void 0,this.readyState=ps,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}Dt(fs,cn),fs.prototype.g=function(){return new gs(this.l,this.j)},fs.prototype.i=function(t){return function(){return t}}({}),Dt(gs,Ie);var ps=0;function ms(t){t.j.read().then(t.Xa.bind(t)).catch(t.ka.bind(t))}function ys(t){t.readyState=4,t.l=null,t.j=null,t.A=null,vs(t)}function vs(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(mt=gs.prototype).open=function(t,e){if(this.readyState!=ps)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,vs(this)},mt.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.F||Et).fetch(new Request(this.B,e)).then(this.$a.bind(this),this.ka.bind(this))},mt.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted.").catch((()=>{})),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,ys(this)),this.readyState=ps},mt.$a=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,vs(this)),this.g&&(this.readyState=3,vs(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ya.bind(this),this.ka.bind(this));else if(void 0!==Et.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;ms(this)}else t.text().then(this.Za.bind(this),this.ka.bind(this))},mt.Xa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?ys(this):vs(this),3==this.readyState&&ms(this)}},mt.Za=function(t){this.g&&(this.response=this.responseText=t,ys(this))},mt.Ya=function(t){this.g&&(this.response=t,ys(this))},mt.ka=function(){this.g&&ys(this)},mt.setRequestHeader=function(t,e){this.v.append(t,e)},mt.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},mt.getAllResponseHeaders=function(){if(!this.h)return"";const t=[],e=this.h.entries();for(var n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(gs.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var ws=Et.JSON.parse;function Es(t){Ie.call(this),this.headers=new Map,this.u=t||null,this.h=!1,this.C=this.g=null,this.I="",this.m=0,this.j="",this.l=this.G=this.v=this.F=!1,this.B=0,this.A=null,this.K=bs,this.L=this.M=!1}Dt(Es,Ie);var bs="",Ts=/^https?$/i,Cs=["POST","PUT"];function Ss(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Is(t),_s(t)}function Is(t){t.F||(t.F=!0,Ae(t,"complete"),Ae(t,"error"))}function As(t){if(t.h&&void 0!==wt&&(!t.C[1]||4!=Ds(t)||2!=t.da()))if(t.v&&4==Ds(t))je(t.La,0,t);else if(Ae(t,"readystatechange"),4==Ds(t)){t.h=!1;try{const o=t.da();t:switch(o){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}var n;if(!(n=e)){var s;if(s=0===o){var r=String(t.I).match(Rn)[1]||null;!r&&Et.self&&Et.self.location&&(r=Et.self.location.protocol.slice(0,-1)),s=!Ts.test(r?r.toLowerCase():"")}n=s}if(n)Ae(t,"complete"),Ae(t,"success");else{t.m=6;try{var i=2<Ds(t)?t.g.statusText:""}catch(t){i=""}t.j=i+" ["+t.da()+"]",Is(t)}}finally{_s(t)}}}function _s(t,e){if(t.g){ks(t);const n=t.g,s=t.C[0]?()=>{}:null;t.g=null,t.C=null,e||Ae(t,"ready");try{n.onreadystatechange=s}catch(t){}}}function ks(t){t.g&&t.L&&(t.g.ontimeout=null),t.A&&(Et.clearTimeout(t.A),t.A=null)}function Ds(t){return t.g?t.g.readyState:0}function Ns(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.K){case bs:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function xs(t){let e="";return oe(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}function Ls(t,e,n){t:{for(s in n){var s=!1;break t}s=!0}s||(n=xs(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Un(t,e,n))}function Rs(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Ms(t){this.Ga=0,this.j=[],this.l=new Qe,this.pa=this.wa=this.I=this.Y=this.g=this.Da=this.F=this.na=this.o=this.U=this.s=null,this.fb=this.W=0,this.cb=Rs("failFast",!1,t),this.G=this.v=this.u=this.m=this.h=null,this.aa=!0,this.Fa=this.V=-1,this.ba=this.A=this.C=0,this.ab=Rs("baseRetryDelayMs",5e3,t),this.hb=Rs("retryDelaySeedMs",1e4,t),this.eb=Rs("forwardChannelMaxRetries",2,t),this.xa=Rs("forwardChannelRequestTimeoutMs",2e4,t),this.va=t&&t.xmlHttpFactory||void 0,this.Ha=t&&t.dc||!1,this.L=void 0,this.J=t&&t.supportsCrossDomainXhr||!1,this.K="",this.i=new es(t&&t.concurrentRequestLimit),this.Ja=new hs,this.P=t&&t.fastHandshake||!1,this.O=t&&t.encodeInitMessageHeaders||!1,this.P&&this.O&&(this.O=!1),this.bb=t&&t.bc||!1,t&&t.Ea&&this.l.Ea(),t&&t.forceLongPolling&&(this.aa=!1),this.ca=!this.P&&this.aa&&t&&t.detectBufferingProxy||!1,this.qa=void 0,t&&t.longPollingTimeout&&0<t.longPollingTimeout&&(this.qa=t.longPollingTimeout),this.oa=void 0,this.S=0,this.M=!1,this.ma=this.B=null}function Os(t){if(Fs(t),3==t.H){var e=t.W++,n=On(t.I);if(Un(n,"SID",t.K),Un(n,"RID",e),Un(n,"TYPE","terminate"),Bs(t,n),(e=new mn(t,t.l,e)).L=2,e.v=Bn(On(n)),n=!1,Et.navigator&&Et.navigator.sendBeacon)try{n=Et.navigator.sendBeacon(e.v.toString(),"")}catch(t){}!n&&Et.Image&&((new Image).src=e.v,n=!0),n||(e.g=Js(e.l,null),e.g.ha(e.v)),e.G=Date.now(),An(e)}Xs(t)}function Ps(t){t.g&&(zs(t),t.g.cancel(),t.g=null)}function Fs(t){Ps(t),t.u&&(Et.clearTimeout(t.u),t.u=null),Gs(t),t.i.cancel(),t.m&&("number"==typeof t.m&&Et.clearTimeout(t.m),t.m=null)}function Vs(t){if(!ss(t.i)&&!t.m){t.m=!0;var e=t.Na;Me||Fe(),Oe||(Me(),Oe=!0),Pe.add(e,t),t.C=0}}function Us(t,e){var n;n=e?e.m:t.W++;const s=On(t.I);Un(s,"SID",t.K),Un(s,"RID",n),Un(s,"AID",t.V),Bs(t,s),t.o&&t.s&&Ls(s,t.o,t.s),n=new mn(t,t.l,n,t.C+1),null===t.o&&(n.I=t.s),e&&(t.j=e.F.concat(t.j)),e=js(t,n,1e3),n.setTimeout(Math.round(.5*t.xa)+Math.round(.5*t.xa*Math.random())),os(t.i,n),bn(n,s,e)}function Bs(t,e){t.na&&oe(t.na,(function(t,n){Un(e,n,t)})),t.h&&Ln({},(function(t,n){Un(e,n,t)}))}function js(t,e,n){n=Math.min(t.j.length,n);var s=t.h?_t(t.h.Va,t.h,t):null;t:{var r=t.j;let e=-1;for(;;){const t=["count="+n];-1==e?0<n?(e=r[0].g,t.push("ofs="+e)):e=0:t.push("ofs="+e);let i=!0;for(let o=0;o<n;o++){let n=r[o].g;const a=r[o].map;if(n-=e,0>n)e=Math.max(0,r[o].g-100),i=!1;else try{ls(a,t,"req"+n+"_")}catch(t){s&&s(a)}}if(i){s=t.join("&");break t}}}return t=t.j.splice(0,n),e.F=t,s}function qs(t){if(!t.g&&!t.u){t.ba=1;var e=t.Ma;Me||Fe(),Oe||(Me(),Oe=!0),Pe.add(e,t),t.A=0}}function $s(t){return!(t.g||t.u||3<=t.A||(t.ba++,t.u=rn(_t(t.Ma,t),Qs(t,t.A)),t.A++,0))}function zs(t){null!=t.B&&(Et.clearTimeout(t.B),t.B=null)}function Ks(t){t.g=new mn(t,t.l,"rpc",t.ba),null===t.o&&(t.g.I=t.s),t.g.O=0;var e=On(t.wa);Un(e,"RID","rpc"),Un(e,"SID",t.K),Un(e,"AID",t.V),Un(e,"CI",t.G?"0":"1"),!t.G&&t.qa&&Un(e,"TO",t.qa),Un(e,"TYPE","xmlhttp"),Bs(t,e),t.o&&t.s&&Ls(e,t.o,t.s),t.L&&t.g.setTimeout(t.L);var n=t.g;t=t.pa,n.L=1,n.v=Bn(On(e)),n.s=null,n.S=!0,Tn(n,t)}function Gs(t){null!=t.v&&(Et.clearTimeout(t.v),t.v=null)}function Hs(t,e){var n=null;if(t.g==e){Gs(t),zs(t),t.g=null;var s=2}else{if(!is(t.i,e))return;n=e.F,as(t.i,e),s=1}if(0!=t.H)if(e.i)if(1==s){n=e.s?e.s.length:0,e=Date.now()-e.G;var r=t.C;Ae(s=Je(),new sn(s,n)),Vs(t)}else qs(t);else if(3==(r=e.o)||0==r&&0<e.ca||!(1==s&&function(t,e){return!(rs(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.j=e.F.concat(t.j),0):1==t.H||2==t.H||t.C>=(t.cb?0:t.eb)||(t.m=rn(_t(t.Na,t,e),Qs(t,t.C)),t.C++,0)))}(t,e)||2==s&&$s(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),r){case 1:Ws(t,5);break;case 4:Ws(t,10);break;case 3:Ws(t,6);break;default:Ws(t,2)}}function Qs(t,e){let n=t.ab+Math.floor(Math.random()*t.hb);return t.isActive()||(n*=2),n*e}function Ws(t,e){if(t.l.info("Error code "+e),2==e){var n=null;t.h&&(n=null);var s=_t(t.pb,t);n||(n=new Mn("//www.google.com/images/cleardot.gif"),Et.location&&"http"==Et.location.protocol||Pn(n,"https"),Bn(n)),function(t,e){const n=new Qe;if(Et.Image){const s=new Image;s.onload=kt(ds,n,s,"TestLoadImage: loaded",!0,e),s.onerror=kt(ds,n,s,"TestLoadImage: error",!1,e),s.onabort=kt(ds,n,s,"TestLoadImage: abort",!1,e),s.ontimeout=kt(ds,n,s,"TestLoadImage: timeout",!1,e),Et.setTimeout((function(){s.ontimeout&&s.ontimeout()}),1e4),s.src=t}else e(!1)}(n.toString(),s)}else nn(2);t.H=0,t.h&&t.h.za(e),Xs(t),Fs(t)}function Xs(t){if(t.H=0,t.ma=[],t.h){const e=cs(t.i);0==e.length&&0==t.j.length||(Rt(t.ma,e),Rt(t.ma,t.j),t.i.i.length=0,Lt(t.j),t.j.length=0),t.h.ya()}}function Ys(t,e,n){var s=n instanceof Mn?On(n):new Mn(n);if(""!=s.g)e&&(s.g=e+"."+s.g),Fn(s,s.m);else{var r=Et.location;s=r.protocol,e=e?e+"."+r.hostname:r.hostname,r=+r.port;var i=new Mn(null);s&&Pn(i,s),e&&(i.g=e),r&&Fn(i,r),n&&(i.l=n),s=i}return n=t.F,e=t.Da,n&&e&&Un(s,n,e),Un(s,"VER",t.ra),Bs(t,s),s}function Js(t,e,n){if(e&&!t.J)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ha&&!t.va?new Es(new fs({ob:!0})):new Es(t.va)).Oa(t.J),e}function Zs(){}function tr(){if(zt&&!(10<=Number(Zt)))throw Error("Environmental error: no available transport.")}function er(t,e){Ie.call(this),this.g=new Ms(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.Ca&&(t?t["X-WebChannel-Client-Profile"]=e.Ca:t={"X-WebChannel-Client-Profile":e.Ca}),this.g.U=t,(t=e&&e.cc)&&!Pt(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!Pt(e)&&(this.g.F=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new rr(this)}function nr(t){fn.call(this),t.__headers__&&(this.headers=t.__headers__,this.statusCode=t.__status__,delete t.__headers__,delete t.__status__);var e=t.__sm__;if(e){t:{for(const n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function sr(){gn.call(this),this.status=1}function rr(t){this.g=t}function ir(){this.blockSize=-1,this.blockSize=64,this.g=Array(4),this.m=Array(this.blockSize),this.i=this.h=0,this.reset()}function or(t,e,n){n||(n=0);var s=Array(16);if("string"==typeof e)for(var r=0;16>r;++r)s[r]=e.charCodeAt(n++)|e.charCodeAt(n++)<<8|e.charCodeAt(n++)<<16|e.charCodeAt(n++)<<24;else for(r=0;16>r;++r)s[r]=e[n++]|e[n++]<<8|e[n++]<<16|e[n++]<<24;e=t.g[0],n=t.g[1],r=t.g[2];var i=t.g[3],o=e+(i^n&(r^i))+s[0]+3614090360&4294967295;o=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=(n=(r=(i=(e=n+(o<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[1]+3905402710&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[2]+606105819&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[3]+3250441966&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[4]+4118548399&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[5]+1200080426&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[6]+2821735955&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[7]+4249261313&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[8]+1770035416&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[9]+2336552879&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[10]+4294925233&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[11]+2304563134&4294967295)<<22&4294967295|o>>>10))+((o=e+(i^n&(r^i))+s[12]+1804603682&4294967295)<<7&4294967295|o>>>25))+((o=i+(r^e&(n^r))+s[13]+4254626195&4294967295)<<12&4294967295|o>>>20))+((o=r+(n^i&(e^n))+s[14]+2792965006&4294967295)<<17&4294967295|o>>>15))+((o=n+(e^r&(i^e))+s[15]+1236535329&4294967295)<<22&4294967295|o>>>10))+((o=e+(r^i&(n^r))+s[1]+4129170786&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[6]+3225465664&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[11]+643717713&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[0]+3921069994&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[5]+3593408605&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[10]+38016083&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[15]+3634488961&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[4]+3889429448&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[9]+568446438&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[14]+3275163606&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[3]+4107603335&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[8]+1163531501&4294967295)<<20&4294967295|o>>>12))+((o=e+(r^i&(n^r))+s[13]+2850285829&4294967295)<<5&4294967295|o>>>27))+((o=i+(n^r&(e^n))+s[2]+4243563512&4294967295)<<9&4294967295|o>>>23))+((o=r+(e^n&(i^e))+s[7]+1735328473&4294967295)<<14&4294967295|o>>>18))+((o=n+(i^e&(r^i))+s[12]+2368359562&4294967295)<<20&4294967295|o>>>12))+((o=e+(n^r^i)+s[5]+4294588738&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[8]+2272392833&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[11]+1839030562&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[14]+4259657740&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[1]+2763975236&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[4]+1272893353&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[7]+4139469664&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[10]+3200236656&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[13]+681279174&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[0]+3936430074&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[3]+3572445317&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[6]+76029189&4294967295)<<23&4294967295|o>>>9))+((o=e+(n^r^i)+s[9]+3654602809&4294967295)<<4&4294967295|o>>>28))+((o=i+(e^n^r)+s[12]+3873151461&4294967295)<<11&4294967295|o>>>21))+((o=r+(i^e^n)+s[15]+530742520&4294967295)<<16&4294967295|o>>>16))+((o=n+(r^i^e)+s[2]+3299628645&4294967295)<<23&4294967295|o>>>9))+((o=e+(r^(n|~i))+s[0]+4096336452&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[7]+1126891415&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[14]+2878612391&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[5]+4237533241&4294967295)<<21&4294967295|o>>>11))+((o=e+(r^(n|~i))+s[12]+1700485571&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[3]+2399980690&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[10]+4293915773&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[1]+2240044497&4294967295)<<21&4294967295|o>>>11))+((o=e+(r^(n|~i))+s[8]+1873313359&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[15]+4264355552&4294967295)<<10&4294967295|o>>>22))+((o=r+(e^(i|~n))+s[6]+2734768916&4294967295)<<15&4294967295|o>>>17))+((o=n+(i^(r|~e))+s[13]+1309151649&4294967295)<<21&4294967295|o>>>11))+((i=(e=n+((o=e+(r^(n|~i))+s[4]+4149444226&4294967295)<<6&4294967295|o>>>26))+((o=i+(n^(e|~r))+s[11]+3174756917&4294967295)<<10&4294967295|o>>>22))^((r=i+((o=r+(e^(i|~n))+s[2]+718787259&4294967295)<<15&4294967295|o>>>17))|~e))+s[9]+3951481745&4294967295,t.g[0]=t.g[0]+e&4294967295,t.g[1]=t.g[1]+(r+(o<<21&4294967295|o>>>11))&4294967295,t.g[2]=t.g[2]+r&4294967295,t.g[3]=t.g[3]+i&4294967295}function ar(t,e){this.h=e;for(var n=[],s=!0,r=t.length-1;0<=r;r--){var i=0|t[r];s&&i==e||(n[r]=i,s=!1)}this.g=n}(mt=Es.prototype).Oa=function(t){this.M=t},mt.ha=function(t,e,n,s){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.I+"; newUri="+t);e=e?e.toUpperCase():"GET",this.I=t,this.j="",this.m=0,this.F=!1,this.h=!0,this.g=this.u?this.u.g():ln.g(),this.C=this.u?un(this.u):un(ln),this.g.onreadystatechange=_t(this.La,this);try{this.G=!0,this.g.open(e,String(t),!0),this.G=!1}catch(t){return void Ss(this,t)}if(t=n||"",n=new Map(this.headers),s)if(Object.getPrototypeOf(s)===Object.prototype)for(var r in s)n.set(r,s[r]);else{if("function"!=typeof s.keys||"function"!=typeof s.get)throw Error("Unknown input type for opt_headers: "+String(s));for(const t of s.keys())n.set(t,s.get(t))}s=Array.from(n.keys()).find((t=>"content-type"==t.toLowerCase())),r=Et.FormData&&t instanceof Et.FormData,!(0<=xt(Cs,e))||s||r||n.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");for(const[t,e]of n)this.g.setRequestHeader(t,e);this.K&&(this.g.responseType=this.K),"withCredentials"in this.g&&this.g.withCredentials!==this.M&&(this.g.withCredentials=this.M);try{ks(this),0<this.B&&((this.L=function(t){return zt&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=_t(this.ua,this)):this.A=je(this.ua,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){Ss(this,t)}},mt.ua=function(){void 0!==wt&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Ae(this,"timeout"),this.abort(8))},mt.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,Ae(this,"complete"),Ae(this,"abort"),_s(this))},mt.N=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),_s(this,!0)),Es.$.N.call(this)},mt.La=function(){this.s||(this.G||this.v||this.l?As(this):this.kb())},mt.kb=function(){As(this)},mt.isActive=function(){return!!this.g},mt.da=function(){try{return 2<Ds(this)?this.g.status:-1}catch(t){return-1}},mt.ja=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},mt.Wa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ws(e)}},mt.Ia=function(){return this.m},mt.Sa=function(){return"string"==typeof this.j?this.j:String(this.j)},(mt=Ms.prototype).ra=8,mt.H=1,mt.Na=function(t){if(this.m)if(this.m=null,1==this.H){if(!t){this.W=Math.floor(1e5*Math.random()),t=this.W++;const r=new mn(this,this.l,t);let i=this.s;if(this.U&&(i?(i=ae(i),ue(i,this.U)):i=this.U),null!==this.o||this.O||(r.I=i,i=null),this.P)t:{for(var e=0,n=0;n<this.j.length;n++){var s=this.j[n];if(void 0===(s="__data__"in s.map&&"string"==typeof(s=s.map.__data__)?s.length:void 0))break;if(4096<(e+=s)){e=n;break t}if(4096===e||n===this.j.length-1){e=n+1;break t}}e=1e3}else e=1e3;e=js(this,r,e),Un(n=On(this.I),"RID",t),Un(n,"CVER",22),this.F&&Un(n,"X-HTTP-Session-Id",this.F),Bs(this,n),i&&(this.O?e="headers="+encodeURIComponent(String(xs(i)))+"&"+e:this.o&&Ls(n,this.o,i)),os(this.i,r),this.bb&&Un(n,"TYPE","init"),this.P?(Un(n,"$req",e),Un(n,"SID","null"),r.aa=!0,bn(r,n,null)):bn(r,n,e),this.H=2}}else 3==this.H&&(t?Us(this,t):0==this.j.length||ss(this.i)||Us(this))},mt.Ma=function(){if(this.u=null,Ks(this),this.ca&&!(this.M||null==this.g||0>=this.S)){var t=2*this.S;this.l.info("BP detection timer enabled: "+t),this.B=rn(_t(this.jb,this),t)}},mt.jb=function(){this.B&&(this.B=null,this.l.info("BP detection timeout reached."),this.l.info("Buffering proxy detected and switch to long-polling!"),this.G=!1,this.M=!0,nn(10),Ps(this),Ks(this))},mt.ib=function(){null!=this.v&&(this.v=null,Ps(this),$s(this),nn(19))},mt.pb=function(t){t?(this.l.info("Successfully pinged google.com"),nn(2)):(this.l.info("Failed to ping google.com"),nn(1))},mt.isActive=function(){return!!this.h&&this.h.isActive(this)},(mt=Zs.prototype).Ba=function(){},mt.Aa=function(){},mt.za=function(){},mt.ya=function(){},mt.isActive=function(){return!0},mt.Va=function(){},tr.prototype.g=function(t,e){return new er(t,e)},Dt(er,Ie),er.prototype.m=function(){this.g.h=this.j,this.A&&(this.g.J=!0);var t=this.g,e=this.l,n=this.h||void 0;nn(0),t.Y=e,t.na=n||{},t.G=t.aa,t.I=Ys(t,null,t.Y),Vs(t)},er.prototype.close=function(){Os(this.g)},er.prototype.u=function(t){var e=this.g;if("string"==typeof t){var n={};n.__data__=t,t=n}else this.v&&((n={}).__data__=ke(t),t=n);e.j.push(new class{constructor(t,e){this.g=t,this.map=e}}(e.fb++,t)),3==e.H&&Vs(e)},er.prototype.N=function(){this.g.h=null,delete this.j,Os(this.g),delete this.g,er.$.N.call(this)},Dt(nr,fn),Dt(sr,gn),Dt(rr,Zs),rr.prototype.Ba=function(){Ae(this.g,"a")},rr.prototype.Aa=function(t){Ae(this.g,new nr(t))},rr.prototype.za=function(t){Ae(this.g,new sr)},rr.prototype.ya=function(){Ae(this.g,"b")},Dt(ir,(function(){this.blockSize=-1})),ir.prototype.reset=function(){this.g[0]=1732584193,this.g[1]=4023233417,this.g[2]=2562383102,this.g[3]=271733878,this.i=this.h=0},ir.prototype.j=function(t,e){void 0===e&&(e=t.length);for(var n=e-this.blockSize,s=this.m,r=this.h,i=0;i<e;){if(0==r)for(;i<=n;)or(this,t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(s[r++]=t.charCodeAt(i++),r==this.blockSize){or(this,s),r=0;break}}else for(;i<e;)if(s[r++]=t[i++],r==this.blockSize){or(this,s),r=0;break}}this.h=r,this.i+=e},ir.prototype.l=function(){var t=Array((56>this.h?this.blockSize:2*this.blockSize)-this.h);t[0]=128;for(var e=1;e<t.length-8;++e)t[e]=0;var n=8*this.i;for(e=t.length-8;e<t.length;++e)t[e]=255&n,n/=256;for(this.j(t),t=Array(16),e=n=0;4>e;++e)for(var s=0;32>s;s+=8)t[n++]=this.g[e]>>>s&255;return t};var cr={};function ur(t){return-128<=t&&128>t?function(t,e){var n=cr;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=function(t){return new ar([0|t],0>t?-1:0)}(t)}(t):new ar([0|t],0>t?-1:0)}function hr(t){if(isNaN(t)||!isFinite(t))return dr;if(0>t)return yr(hr(-t));for(var e=[],n=1,s=0;t>=n;s++)e[s]=t/n|0,n*=lr;return new ar(e,0)}var lr=4294967296,dr=ur(0),fr=ur(1),gr=ur(16777216);function pr(t){if(0!=t.h)return!1;for(var e=0;e<t.g.length;e++)if(0!=t.g[e])return!1;return!0}function mr(t){return-1==t.h}function yr(t){for(var e=t.g.length,n=[],s=0;s<e;s++)n[s]=~t.g[s];return new ar(n,~t.h).add(fr)}function vr(t,e){return t.add(yr(e))}function wr(t,e){for(;(65535&t[e])!=t[e];)t[e+1]+=t[e]>>>16,t[e]&=65535,e++}function Er(t,e){this.g=t,this.h=e}function br(t,e){if(pr(e))throw Error("division by zero");if(pr(t))return new Er(dr,dr);if(mr(t))return e=br(yr(t),e),new Er(yr(e.g),yr(e.h));if(mr(e))return e=br(t,yr(e)),new Er(yr(e.g),e.h);if(30<t.g.length){if(mr(t)||mr(e))throw Error("slowDivide_ only works with positive integers.");for(var n=fr,s=e;0>=s.X(t);)n=Tr(n),s=Tr(s);var r=Cr(n,1),i=Cr(s,1);for(s=Cr(s,2),n=Cr(n,2);!pr(s);){var o=i.add(s);0>=o.X(t)&&(r=r.add(n),i=o),s=Cr(s,1),n=Cr(n,1)}return e=vr(t,r.R(e)),new Er(r,e)}for(r=dr;0<=t.X(e);){for(n=Math.max(1,Math.floor(t.ea()/e.ea())),s=48>=(s=Math.ceil(Math.log(n)/Math.LN2))?1:Math.pow(2,s-48),o=(i=hr(n)).R(e);mr(o)||0<o.X(t);)o=(i=hr(n-=s)).R(e);pr(i)&&(i=fr),r=r.add(i),t=vr(t,o)}return new Er(r,t)}function Tr(t){for(var e=t.g.length+1,n=[],s=0;s<e;s++)n[s]=t.D(s)<<1|t.D(s-1)>>>31;return new ar(n,t.h)}function Cr(t,e){var n=e>>5;e%=32;for(var s=t.g.length-n,r=[],i=0;i<s;i++)r[i]=0<e?t.D(i+n)>>>e|t.D(i+n+1)<<32-e:t.D(i+n);return new ar(r,t.h)}(mt=ar.prototype).ea=function(){if(mr(this))return-yr(this).ea();for(var t=0,e=1,n=0;n<this.g.length;n++){var s=this.D(n);t+=(0<=s?s:lr+s)*e,e*=lr}return t},mt.toString=function(t){if(2>(t=t||10)||36<t)throw Error("radix out of range: "+t);if(pr(this))return"0";if(mr(this))return"-"+yr(this).toString(t);for(var e=hr(Math.pow(t,6)),n=this,s="";;){var r=br(n,e).g,i=((0<(n=vr(n,r.R(e))).g.length?n.g[0]:n.h)>>>0).toString(t);if(pr(n=r))return i+s;for(;6>i.length;)i="0"+i;s=i+s}},mt.D=function(t){return 0>t?0:t<this.g.length?this.g[t]:this.h},mt.X=function(t){return mr(t=vr(this,t))?-1:pr(t)?0:1},mt.abs=function(){return mr(this)?yr(this):this},mt.add=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0,r=0;r<=e;r++){var i=s+(65535&this.D(r))+(65535&t.D(r)),o=(i>>>16)+(this.D(r)>>>16)+(t.D(r)>>>16);s=o>>>16,i&=65535,o&=65535,n[r]=o<<16|i}return new ar(n,-2147483648&n[n.length-1]?-1:0)},mt.R=function(t){if(pr(this)||pr(t))return dr;if(mr(this))return mr(t)?yr(this).R(yr(t)):yr(yr(this).R(t));if(mr(t))return yr(this.R(yr(t)));if(0>this.X(gr)&&0>t.X(gr))return hr(this.ea()*t.ea());for(var e=this.g.length+t.g.length,n=[],s=0;s<2*e;s++)n[s]=0;for(s=0;s<this.g.length;s++)for(var r=0;r<t.g.length;r++){var i=this.D(s)>>>16,o=65535&this.D(s),a=t.D(r)>>>16,c=65535&t.D(r);n[2*s+2*r]+=o*c,wr(n,2*s+2*r),n[2*s+2*r+1]+=i*c,wr(n,2*s+2*r+1),n[2*s+2*r+1]+=o*a,wr(n,2*s+2*r+1),n[2*s+2*r+2]+=i*a,wr(n,2*s+2*r+2)}for(s=0;s<e;s++)n[s]=n[2*s+1]<<16|n[2*s];for(s=e;s<2*e;s++)n[s]=0;return new ar(n,0)},mt.gb=function(t){return br(this,t).h},mt.and=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)&t.D(s);return new ar(n,this.h&t.h)},mt.or=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)|t.D(s);return new ar(n,this.h|t.h)},mt.xor=function(t){for(var e=Math.max(this.g.length,t.g.length),n=[],s=0;s<e;s++)n[s]=this.D(s)^t.D(s);return new ar(n,this.h^t.h)},tr.prototype.createWebChannel=tr.prototype.g,er.prototype.send=er.prototype.u,er.prototype.open=er.prototype.m,er.prototype.close=er.prototype.close,on.NO_ERROR=0,on.TIMEOUT=8,on.HTTP_ERROR=6,an.COMPLETE="complete",hn.EventType=dn,dn.OPEN="a",dn.CLOSE="b",dn.ERROR="c",dn.MESSAGE="d",Ie.prototype.listen=Ie.prototype.O,Es.prototype.listenOnce=Es.prototype.P,Es.prototype.getLastError=Es.prototype.Sa,Es.prototype.getLastErrorCode=Es.prototype.Ia,Es.prototype.getStatus=Es.prototype.da,Es.prototype.getResponseJson=Es.prototype.Wa,Es.prototype.getResponseText=Es.prototype.ja,Es.prototype.send=Es.prototype.ha,Es.prototype.setWithCredentials=Es.prototype.Oa,ir.prototype.digest=ir.prototype.l,ir.prototype.reset=ir.prototype.reset,ir.prototype.update=ir.prototype.j,ar.prototype.add=ar.prototype.add,ar.prototype.multiply=ar.prototype.R,ar.prototype.modulo=ar.prototype.gb,ar.prototype.compare=ar.prototype.X,ar.prototype.toNumber=ar.prototype.ea,ar.prototype.toString=ar.prototype.toString,ar.prototype.getBits=ar.prototype.D,ar.fromNumber=hr,ar.fromString=function t(e,n){if(0==e.length)throw Error("number format error: empty string");if(2>(n=n||10)||36<n)throw Error("radix out of range: "+n);if("-"==e.charAt(0))return yr(t(e.substring(1),n));if(0<=e.indexOf("-"))throw Error('number format error: interior "-" character');for(var s=hr(Math.pow(n,8)),r=dr,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),a=parseInt(e.substring(i,i+o),n);8>o?(o=hr(Math.pow(n,o)),r=r.R(o).add(hr(a))):r=(r=r.R(s)).add(hr(a))}return r};var Sr=vt.createWebChannelTransport=function(){return new tr},Ir=vt.getStatEventTarget=function(){return Je()},Ar=vt.ErrorCode=on,_r=vt.EventType=an,kr=vt.Event=Xe,Dr=vt.Stat={xb:0,Ab:1,Bb:2,Ub:3,Zb:4,Wb:5,Xb:6,Vb:7,Tb:8,Yb:9,PROXY:10,NOPROXY:11,Rb:12,Nb:13,Ob:14,Mb:15,Pb:16,Qb:17,tb:18,sb:19,ub:20},Nr=vt.FetchXmlHttpFactory=fs,xr=vt.WebChannel=hn,Lr=vt.XhrIo=Es,Rr=vt.Md5=ir,Mr=vt.Integer=ar;const Or="@firebase/firestore";class Pr{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}Pr.UNAUTHENTICATED=new Pr(null),Pr.GOOGLE_CREDENTIALS=new Pr("google-credentials-uid"),Pr.FIRST_PARTY=new Pr("first-party-uid"),Pr.MOCK_USER=new Pr("mock-user");let Fr="9.22.2";const Vr=new _("@firebase/firestore");function Ur(){return Vr.logLevel}function Br(t,...e){if(Vr.logLevel<=b.DEBUG){const n=e.map($r);Vr.debug(`Firestore (${Fr}): ${t}`,...n)}}function jr(t,...e){if(Vr.logLevel<=b.ERROR){const n=e.map($r);Vr.error(`Firestore (${Fr}): ${t}`,...n)}}function qr(t,...e){if(Vr.logLevel<=b.WARN){const n=e.map($r);Vr.warn(`Firestore (${Fr}): ${t}`,...n)}}function $r(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function zr(t="Unexpected state"){const e=`FIRESTORE (${Fr}) INTERNAL ASSERTION FAILED: `+t;throw jr(e),new Error(e)}function Kr(t,e){t||zr()}function Gr(t,e){return t}const Hr={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class Qr extends h{constructor(t,e){super(t,e),this.code=t,this.message=e,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Wr{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class Xr{constructor(t,e){this.user=e,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${t}`)}}class Yr{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(Pr.UNAUTHENTICATED)))}shutdown(){}}class Jr{constructor(t){this.token=t,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(t,e){this.changeListener=e,t.enqueueRetryable((()=>e(this.token.user)))}shutdown(){this.changeListener=null}}class Zr{constructor(t){this.t=t,this.currentUser=Pr.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const s=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let r=new Wr;this.o=()=>{this.i++,this.currentUser=this.u(),r.resolve(),r=new Wr,t.enqueueRetryable((()=>s(this.currentUser)))};const i=()=>{const e=r;t.enqueueRetryable((async()=>{await e.promise,await s(this.currentUser)}))},o=t=>{Br("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),i()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(Br("FirebaseAuthCredentialsProvider","Auth not yet detected"),r.resolve(),r=new Wr)}}),0),i()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(Br("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(Kr("string"==typeof e.accessToken),new Xr(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return Kr(null===t||"string"==typeof t),new Pr(t)}}class ti{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=Pr.FIRST_PARTY,this.g=new Map}p(){return this.m?this.m():null}get headers(){this.g.set("X-Goog-AuthUser",this.h);const t=this.p();return t&&this.g.set("Authorization",t),this.l&&this.g.set("X-Goog-Iam-Authorization-Token",this.l),this.g}}class ei{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new ti(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(Pr.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class ni{constructor(t){this.value=t,this.type="AppCheck",this.headers=new Map,t&&t.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class si{constructor(t){this.I=t,this.forceRefresh=!1,this.appCheck=null,this.T=null}start(t,e){const n=t=>{null!=t.error&&Br("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`);const n=t.token!==this.T;return this.T=t.token,Br("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?e(t.token):Promise.resolve()};this.o=e=>{t.enqueueRetryable((()=>n(e)))};const s=t=>{Br("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=t,this.appCheck.addTokenListener(this.o)};this.I.onInit((t=>s(t))),setTimeout((()=>{if(!this.appCheck){const t=this.I.getImmediate({optional:!0});t?s(t):Br("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const t=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(t).then((t=>t?(Kr("string"==typeof t.token),this.T=t.token,new ni(t.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function ri(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}class ii{static A(){const t=62*Math.floor(256/62);let e="";for(;e.length<20;){const n=ri(40);for(let s=0;s<n.length;++s)e.length<20&&n[s]<t&&(e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[s]%62))}return e}}function oi(t,e){return t<e?-1:t>e?1:0}function ai(t,e,n){return t.length===e.length&&t.every(((t,s)=>n(t,e[s])))}class ci{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Qr(Hr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return ci.fromMillis(Date.now())}static fromDate(t){return ci.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new ci(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?oi(this.nanoseconds,t.nanoseconds):oi(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class ui{constructor(t){this.timestamp=t}static fromTimestamp(t){return new ui(t)}static min(){return new ui(new ci(0,0))}static max(){return new ui(new ci(253402300799,999999999))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class hi{constructor(t,e,n){void 0===e?e=0:e>t.length&&zr(),void 0===n?n=t.length-e:n>t.length-e&&zr(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===hi.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof hi?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let s=0;s<n;s++){const n=t.get(s),r=e.get(s);if(n<r)return-1;if(n>r)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class li extends hi{construct(t,e,n){return new li(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new Qr(Hr.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new li(e)}static emptyPath(){return new li([])}}const di=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class fi extends hi{construct(t,e,n){return new fi(t,e,n)}static isValidIdentifier(t){return di.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),fi.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new fi(["__name__"])}static fromServerFormat(t){const e=[];let n="",s=0;const r=()=>{if(0===n.length)throw new Qr(Hr.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let i=!1;for(;s<t.length;){const e=t[s];if("\\"===e){if(s+1===t.length)throw new Qr(Hr.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[s+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new Qr(Hr.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,s+=2}else"`"===e?(i=!i,s++):"."!==e||i?(n+=e,s++):(r(),s++)}if(r(),i)throw new Qr(Hr.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new fi(e)}static emptyPath(){return new fi([])}}class gi{constructor(t){this.path=t}static fromPath(t){return new gi(li.fromString(t))}static fromName(t){return new gi(li.fromString(t).popFirst(5))}static empty(){return new gi(li.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(t){return null!==t&&0===li.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return li.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new gi(new li(t.slice()))}}function pi(t){return new mi(t.readTime,t.key,-1)}class mi{constructor(t,e,n){this.readTime=t,this.documentKey=e,this.largestBatchId=n}static min(){return new mi(ui.min(),gi.empty(),-1)}static max(){return new mi(ui.max(),gi.empty(),-1)}}function yi(t,e){let n=t.readTime.compareTo(e.readTime);return 0!==n?n:(n=gi.comparator(t.documentKey,e.documentKey),0!==n?n:oi(t.largestBatchId,e.largestBatchId))}const vi="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class wi{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}async function Ei(t){if(t.code!==Hr.FAILED_PRECONDITION||t.message!==vi)throw t;Br("LocalStore","Unexpectedly lost primary lease")}class bi{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&zr(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new bi(((n,s)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,s)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,s)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof bi?e:bi.resolve(e)}catch(t){return bi.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):bi.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):bi.reject(e)}static resolve(t){return new bi(((e,n)=>{e(t)}))}static reject(t){return new bi(((e,n)=>{n(t)}))}static waitFor(t){return new bi(((e,n)=>{let s=0,r=0,i=!1;t.forEach((t=>{++s,t.next((()=>{++r,i&&r===s&&e()}),(t=>n(t)))})),i=!0,r===s&&e()}))}static or(t){let e=bi.resolve(!1);for(const n of t)e=e.next((t=>t?bi.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,s)=>{n.push(e.call(this,t,s))})),this.waitFor(n)}static mapArray(t,e){return new bi(((n,s)=>{const r=t.length,i=new Array(r);let o=0;for(let a=0;a<r;a++){const c=a;e(t[c]).next((t=>{i[c]=t,++o,o===r&&n(i)}),(t=>s(t)))}}))}static doWhile(t,e){return new bi(((n,s)=>{const r=()=>{!0===t()?e().next((()=>{r()}),s):n()};r()}))}}function Ti(t){return"IndexedDbTransactionError"===t.name}class Ci{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.ot(t),this.ut=t=>e.writeSequenceNumber(t))}ot(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.ut&&this.ut(t),t}}function Si(t){return null==t}function Ii(t){return 0===t&&1/t==-1/0}Ci.ct=-1;function Ai(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function _i(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function ki(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Di{constructor(t,e){this.comparator=t,this.root=e||xi.EMPTY}insert(t,e){return new Di(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,xi.BLACK,null,null))}remove(t){return new Di(this.comparator,this.root.remove(t,this.comparator).copy(null,null,xi.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const s=this.comparator(t,n.key);if(0===s)return e+n.left.size;s<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new Ni(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new Ni(this.root,t,this.comparator,!1)}getReverseIterator(){return new Ni(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new Ni(this.root,t,this.comparator,!0)}}class Ni{constructor(t,e,n,s){this.isReverse=s,this.nodeStack=[];let r=1;for(;!t.isEmpty();)if(r=e?n(t.key,e):1,e&&s&&(r*=-1),r<0)t=this.isReverse?t.left:t.right;else{if(0===r){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class xi{constructor(t,e,n,s,r){this.key=t,this.value=e,this.color=null!=n?n:xi.RED,this.left=null!=s?s:xi.EMPTY,this.right=null!=r?r:xi.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,s,r){return new xi(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=r?r:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let s=this;const r=n(t,s.key);return s=r<0?s.copy(null,null,null,s.left.insert(t,e,n),null):0===r?s.copy(null,e,null,null,null):s.copy(null,null,null,null,s.right.insert(t,e,n)),s.fixUp()}removeMin(){if(this.left.isEmpty())return xi.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,s=this;if(e(t,s.key)<0)s.left.isEmpty()||s.left.isRed()||s.left.left.isRed()||(s=s.moveRedLeft()),s=s.copy(null,null,null,s.left.remove(t,e),null);else{if(s.left.isRed()&&(s=s.rotateRight()),s.right.isEmpty()||s.right.isRed()||s.right.left.isRed()||(s=s.moveRedRight()),0===e(t,s.key)){if(s.right.isEmpty())return xi.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.removeMin())}s=s.copy(null,null,null,null,s.right.remove(t,e))}return s.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,xi.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,xi.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw zr();if(this.right.isRed())throw zr();const t=this.left.check();if(t!==this.right.check())throw zr();return t+(this.isRed()?0:1)}}xi.EMPTY=null,xi.RED=!0,xi.BLACK=!1,xi.EMPTY=new class{constructor(){this.size=0}get key(){throw zr()}get value(){throw zr()}get color(){throw zr()}get left(){throw zr()}get right(){throw zr()}copy(t,e,n,s,r){return this}insert(t,e,n){return new xi(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class Li{constructor(t){this.comparator=t,this.data=new Di(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const s=n.getNext();if(this.comparator(s.key,t[1])>=0)return;e(s.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new Ri(this.data.getIterator())}getIteratorFrom(t){return new Ri(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof Li))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(0!==this.comparator(t,s))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new Li(this.comparator);return e.data=t,e}}class Ri{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}class Mi{constructor(t){this.fields=t,t.sort(fi.comparator)}static empty(){return new Mi([])}unionWith(t){let e=new Li(fi.comparator);for(const t of this.fields)e=e.add(t);for(const n of t)e=e.add(n);return new Mi(e.toArray())}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return ai(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class Oi extends Error{constructor(){super(...arguments),this.name="Base64DecodeError"}}class Pi{constructor(t){this.binaryString=t}static fromBase64String(t){const e=function(t){try{return atob(t)}catch(t){throw"undefined"!=typeof DOMException&&t instanceof DOMException?new Oi("Invalid base64 string: "+t):t}}(t);return new Pi(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new Pi(e)}[Symbol.iterator](){let t=0;return{next:()=>t<this.binaryString.length?{value:this.binaryString.charCodeAt(t++),done:!1}:{value:void 0,done:!0}}}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return oi(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}Pi.EMPTY_BYTE_STRING=new Pi("");const Fi=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Vi(t){if(Kr(!!t),"string"==typeof t){let e=0;const n=Fi.exec(t);if(Kr(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const s=new Date(t);return{seconds:Math.floor(s.getTime()/1e3),nanos:e}}return{seconds:Ui(t.seconds),nanos:Ui(t.nanos)}}function Ui(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Bi(t){return"string"==typeof t?Pi.fromBase64String(t):Pi.fromUint8Array(t)}function ji(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function qi(t){const e=t.mapValue.fields.__previous_value__;return ji(e)?qi(e):e}function $i(t){const e=Vi(t.mapValue.fields.__local_write_time__.timestampValue);return new ci(e.seconds,e.nanos)}class zi{constructor(t,e,n,s,r,i,o,a,c){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=s,this.ssl=r,this.forceLongPolling=i,this.autoDetectLongPolling=o,this.longPollingOptions=a,this.useFetchStreams=c}}class Ki{constructor(t,e){this.projectId=t,this.database=e||"(default)"}static empty(){return new Ki("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof Ki&&t.projectId===this.projectId&&t.database===this.database}}const Gi={mapValue:{fields:{__type__:{stringValue:"__max__"}}}};function Hi(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?ji(t)?4:oo(t)?9007199254740991:10:zr()}function Qi(t,e){if(t===e)return!0;const n=Hi(t);if(n!==Hi(e))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return $i(t).isEqual($i(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=Vi(t.timestampValue),s=Vi(e.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Bi(t.bytesValue).isEqual(Bi(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Ui(t.geoPointValue.latitude)===Ui(e.geoPointValue.latitude)&&Ui(t.geoPointValue.longitude)===Ui(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Ui(t.integerValue)===Ui(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=Ui(t.doubleValue),s=Ui(e.doubleValue);return n===s?Ii(n)===Ii(s):isNaN(n)&&isNaN(s)}return!1}(t,e);case 9:return ai(t.arrayValue.values||[],e.arrayValue.values||[],Qi);case 10:return function(t,e){const n=t.mapValue.fields||{},s=e.mapValue.fields||{};if(Ai(n)!==Ai(s))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===s[t]||!Qi(n[t],s[t])))return!1;return!0}(t,e);default:return zr()}}function Wi(t,e){return void 0!==(t.values||[]).find((t=>Qi(t,e)))}function Xi(t,e){if(t===e)return 0;const n=Hi(t),s=Hi(e);if(n!==s)return oi(n,s);switch(n){case 0:case 9007199254740991:return 0;case 1:return oi(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=Ui(t.integerValue||t.doubleValue),s=Ui(e.integerValue||e.doubleValue);return n<s?-1:n>s?1:n===s?0:isNaN(n)?isNaN(s)?0:-1:1}(t,e);case 3:return Yi(t.timestampValue,e.timestampValue);case 4:return Yi($i(t),$i(e));case 5:return oi(t.stringValue,e.stringValue);case 6:return function(t,e){const n=Bi(t),s=Bi(e);return n.compareTo(s)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),s=e.split("/");for(let t=0;t<n.length&&t<s.length;t++){const e=oi(n[t],s[t]);if(0!==e)return e}return oi(n.length,s.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=oi(Ui(t.latitude),Ui(e.latitude));return 0!==n?n:oi(Ui(t.longitude),Ui(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],s=e.values||[];for(let t=0;t<n.length&&t<s.length;++t){const e=Xi(n[t],s[t]);if(e)return e}return oi(n.length,s.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){if(t===Gi.mapValue&&e===Gi.mapValue)return 0;if(t===Gi.mapValue)return 1;if(e===Gi.mapValue)return-1;const n=t.fields||{},s=Object.keys(n),r=e.fields||{},i=Object.keys(r);s.sort(),i.sort();for(let t=0;t<s.length&&t<i.length;++t){const e=oi(s[t],i[t]);if(0!==e)return e;const o=Xi(n[s[t]],r[i[t]]);if(0!==o)return o}return oi(s.length,i.length)}(t.mapValue,e.mapValue);default:throw zr()}}function Yi(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return oi(t,e);const n=Vi(t),s=Vi(e),r=oi(n.seconds,s.seconds);return 0!==r?r:oi(n.nanos,s.nanos)}function Ji(t){return Zi(t)}function Zi(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=Vi(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Bi(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,gi.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const s of t.values||[])n?n=!1:e+=",",e+=Zi(s);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",s=!0;for(const r of e)s?s=!1:n+=",",n+=`${r}:${Zi(t.fields[r])}`;return n+"}"}(t.mapValue):zr();var e,n}function to(t){return!!t&&"integerValue"in t}function eo(t){return!!t&&"arrayValue"in t}function no(t){return!!t&&"nullValue"in t}function so(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function ro(t){return!!t&&"mapValue"in t}function io(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return _i(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=io(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=io(t.arrayValue.values[n]);return e}return Object.assign({},t)}function oo(t){return"__max__"===(((t.mapValue||{}).fields||{}).__type__||{}).stringValue}class ao{constructor(t){this.value=t}static empty(){return new ao({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!ro(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=io(e)}setAll(t){let e=fi.emptyPath(),n={},s=[];t.forEach(((t,r)=>{if(!e.isImmediateParentOf(r)){const t=this.getFieldsMap(e);this.applyChanges(t,n,s),n={},s=[],e=r.popLast()}t?n[r.lastSegment()]=io(t):s.push(r.lastSegment())}));const r=this.getFieldsMap(e);this.applyChanges(r,n,s)}delete(t){const e=this.field(t.popLast());ro(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return Qi(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let s=e.mapValue.fields[t.get(n)];ro(s)&&s.mapValue.fields||(s={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=s),e=s}return e.mapValue.fields}applyChanges(t,e,n){_i(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new ao(io(this.value))}}function co(t){const e=[];return _i(t.fields,((t,n)=>{const s=new fi([t]);if(ro(n)){const t=co(n.mapValue).fields;if(0===t.length)e.push(s);else for(const n of t)e.push(s.child(n))}else e.push(s)})),new Mi(e)}class uo{constructor(t,e,n,s,r,i,o){this.key=t,this.documentType=e,this.version=n,this.readTime=s,this.createTime=r,this.data=i,this.documentState=o}static newInvalidDocument(t){return new uo(t,0,ui.min(),ui.min(),ui.min(),ao.empty(),0)}static newFoundDocument(t,e,n,s){return new uo(t,1,e,ui.min(),n,s,0)}static newNoDocument(t,e){return new uo(t,2,e,ui.min(),ui.min(),ao.empty(),0)}static newUnknownDocument(t,e){return new uo(t,3,e,ui.min(),ui.min(),ao.empty(),2)}convertToFoundDocument(t,e){return!this.createTime.isEqual(ui.min())||2!==this.documentType&&0!==this.documentType||(this.createTime=t),this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=ao.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=ao.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=ui.min(),this}setReadTime(t){return this.readTime=t,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof uo&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}mutableCopy(){return new uo(this.key,this.documentType,this.version,this.readTime,this.createTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class ho{constructor(t,e){this.position=t,this.inclusive=e}}function lo(t,e,n){let s=0;for(let r=0;r<t.position.length;r++){const i=e[r],o=t.position[r];if(s=i.field.isKeyField()?gi.comparator(gi.fromName(o.referenceValue),n.key):Xi(o,n.data.field(i.field)),"desc"===i.dir&&(s*=-1),0!==s)break}return s}function fo(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.inclusive!==e.inclusive||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!Qi(t.position[n],e.position[n]))return!1;return!0}class go{constructor(t,e="asc"){this.field=t,this.dir=e}}function po(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}class mo{}class yo extends mo{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.createKeyFieldInFilter(t,e,n):new So(t,e,n):"array-contains"===e?new ko(t,n):"in"===e?new Do(t,n):"not-in"===e?new No(t,n):"array-contains-any"===e?new xo(t,n):new yo(t,e,n)}static createKeyFieldInFilter(t,e,n){return"in"===e?new Io(t,n):new Ao(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.matchesComparison(Xi(e,this.value)):null!==e&&Hi(this.value)===Hi(e)&&this.matchesComparison(Xi(e,this.value))}matchesComparison(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return zr()}}isInequality(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}getFlattenedFilters(){return[this]}getFilters(){return[this]}getFirstInequalityField(){return this.isInequality()?this.field:null}}class vo extends mo{constructor(t,e){super(),this.filters=t,this.op=e,this.lt=null}static create(t,e){return new vo(t,e)}matches(t){return wo(this)?void 0===this.filters.find((e=>!e.matches(t))):void 0!==this.filters.find((e=>e.matches(t)))}getFlattenedFilters(){return null!==this.lt||(this.lt=this.filters.reduce(((t,e)=>t.concat(e.getFlattenedFilters())),[])),this.lt}getFilters(){return Object.assign([],this.filters)}getFirstInequalityField(){const t=this.ft((t=>t.isInequality()));return null!==t?t.field:null}ft(t){for(const e of this.getFlattenedFilters())if(t(e))return e;return null}}function wo(t){return"and"===t.op}function Eo(t){return function(t){for(const e of t.filters)if(e instanceof vo)return!1;return!0}(t)&&wo(t)}function bo(t){if(t instanceof yo)return t.field.canonicalString()+t.op.toString()+Ji(t.value);if(Eo(t))return t.filters.map((t=>bo(t))).join(",");{const e=t.filters.map((t=>bo(t))).join(",");return`${t.op}(${e})`}}function To(t,e){return t instanceof yo?function(t,e){return e instanceof yo&&t.op===e.op&&t.field.isEqual(e.field)&&Qi(t.value,e.value)}(t,e):t instanceof vo?function(t,e){return e instanceof vo&&t.op===e.op&&t.filters.length===e.filters.length&&t.filters.reduce(((t,n,s)=>t&&To(n,e.filters[s])),!0)}(t,e):void zr()}function Co(t){return t instanceof yo?function(t){return`${t.field.canonicalString()} ${t.op} ${Ji(t.value)}`}(t):t instanceof vo?function(t){return t.op.toString()+" {"+t.getFilters().map(Co).join(" ,")+"}"}(t):"Filter"}class So extends yo{constructor(t,e,n){super(t,e,n),this.key=gi.fromName(n.referenceValue)}matches(t){const e=gi.comparator(t.key,this.key);return this.matchesComparison(e)}}class Io extends yo{constructor(t,e){super(t,"in",e),this.keys=_o(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class Ao extends yo{constructor(t,e){super(t,"not-in",e),this.keys=_o(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function _o(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>gi.fromName(t.referenceValue)))}class ko extends yo{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return eo(e)&&Wi(e.arrayValue,this.value)}}class Do extends yo{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&Wi(this.value.arrayValue,e)}}class No extends yo{constructor(t,e){super(t,"not-in",e)}matches(t){if(Wi(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!Wi(this.value.arrayValue,e)}}class xo extends yo{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!eo(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>Wi(this.value.arrayValue,t)))}}class Lo{constructor(t,e=null,n=[],s=[],r=null,i=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=s,this.limit=r,this.startAt=i,this.endAt=o,this.dt=null}}function Ro(t,e=null,n=[],s=[],r=null,i=null,o=null){return new Lo(t,e,n,s,r,i,o)}function Mo(t){const e=Gr(t);if(null===e.dt){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>bo(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),Si(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((t=>Ji(t))).join(",")),e.endAt&&(t+="|ub:",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((t=>Ji(t))).join(",")),e.dt=t}return e.dt}function Oo(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!po(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let n=0;n<t.filters.length;n++)if(!To(t.filters[n],e.filters[n]))return!1;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!fo(t.startAt,e.startAt)&&fo(t.endAt,e.endAt)}function Po(t){return gi.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class Fo{constructor(t,e=null,n=[],s=[],r=null,i="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=s,this.limit=r,this.limitType=i,this.startAt=o,this.endAt=a,this.wt=null,this._t=null,this.startAt,this.endAt}}function Vo(t){return new Fo(t)}function Uo(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}function Bo(t){const e=Gr(t);if(null===e.wt){e.wt=[];const t=function(t){for(const e of t.filters){const t=e.getFirstInequalityField();if(null!==t)return t}return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.wt.push(new go(t)),e.wt.push(new go(fi.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.wt.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.wt.push(new go(fi.keyField(),t))}}}return e.wt}function jo(t){const e=Gr(t);if(!e._t)if("F"===e.limitType)e._t=Ro(e.path,e.collectionGroup,Bo(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Bo(e)){const e="desc"===n.dir?"asc":"desc";t.push(new go(n.field,e))}const n=e.endAt?new ho(e.endAt.position,e.endAt.inclusive):null,s=e.startAt?new ho(e.startAt.position,e.startAt.inclusive):null;e._t=Ro(e.path,e.collectionGroup,t,e.filters,e.limit,n,s)}return e._t}function qo(t,e,n){return new Fo(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function $o(t,e){return Oo(jo(t),jo(e))&&t.limitType===e.limitType}function zo(t){return`${Mo(jo(t))}|lt:${t.limitType}`}function Ko(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>Co(t))).join(", ")}]`),Si(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: ",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((t=>Ji(t))).join(",")),t.endAt&&(e+=", endAt: ",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((t=>Ji(t))).join(",")),`Target(${e})`}(jo(t))}; limitType=${t.limitType})`}function Go(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):gi.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of Bo(t))if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!function(t,e,n){const s=lo(t,e,n);return t.inclusive?s<=0:s<0}(t.startAt,Bo(t),e)||t.endAt&&!function(t,e,n){const s=lo(t,e,n);return t.inclusive?s>=0:s>0}(t.endAt,Bo(t),e))}(t,e)}function Ho(t){return(e,n)=>{let s=!1;for(const r of Bo(t)){const t=Qo(r,e,n);if(0!==t)return t;s=s||r.field.isKeyField()}return 0}}function Qo(t,e,n){const s=t.field.isKeyField()?gi.comparator(e.key,n.key):function(t,e,n){const s=e.data.field(t),r=n.data.field(t);return null!==s&&null!==r?Xi(s,r):zr()}(t.field,e,n);switch(t.dir){case"asc":return s;case"desc":return-1*s;default:return zr()}}class Wo{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={},this.innerSize=0}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,s]of n)if(this.equalsFn(e,t))return s}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),s=this.inner[n];if(void 0===s)return this.inner[n]=[[t,e]],void this.innerSize++;for(let n=0;n<s.length;n++)if(this.equalsFn(s[n][0],t))return void(s[n]=[t,e]);s.push([t,e]),this.innerSize++}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let s=0;s<n.length;s++)if(this.equalsFn(n[s][0],t))return 1===n.length?delete this.inner[e]:n.splice(s,1),this.innerSize--,!0;return!1}forEach(t){_i(this.inner,((e,n)=>{for(const[e,s]of n)t(e,s)}))}isEmpty(){return ki(this.inner)}size(){return this.innerSize}}const Xo=new Di(gi.comparator);function Yo(){return Xo}const Jo=new Di(gi.comparator);function Zo(...t){let e=Jo;for(const n of t)e=e.insert(n.key,n);return e}function ta(t){let e=Jo;return t.forEach(((t,n)=>e=e.insert(t,n.overlayedDocument))),e}function ea(){return sa()}function na(){return sa()}function sa(){return new Wo((t=>t.toString()),((t,e)=>t.isEqual(e)))}const ra=new Di(gi.comparator),ia=new Li(gi.comparator);function oa(...t){let e=ia;for(const n of t)e=e.add(n);return e}const aa=new Li(oi);function ca(t,e){if(t.useProto3Json){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Ii(e)?"-0":e}}function ua(t){return{integerValue:""+t}}function ha(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!Ii(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?ua(e):ca(t,e)}class la{constructor(){this._=void 0}}function da(t,e,n){return t instanceof pa?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&ji(e)&&(e=qi(e)),e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof ma?ya(t,e):t instanceof va?wa(t,e):function(t,e){const n=ga(t,e),s=ba(n)+ba(t.gt);return to(n)&&to(t.gt)?ua(s):ca(t.serializer,s)}(t,e)}function fa(t,e,n){return t instanceof ma?ya(t,e):t instanceof va?wa(t,e):n}function ga(t,e){return t instanceof Ea?to(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class pa extends la{}class ma extends la{constructor(t){super(),this.elements=t}}function ya(t,e){const n=Ta(e);for(const e of t.elements)n.some((t=>Qi(t,e)))||n.push(e);return{arrayValue:{values:n}}}class va extends la{constructor(t){super(),this.elements=t}}function wa(t,e){let n=Ta(e);for(const e of t.elements)n=n.filter((t=>!Qi(t,e)));return{arrayValue:{values:n}}}class Ea extends la{constructor(t,e){super(),this.serializer=t,this.gt=e}}function ba(t){return Ui(t.integerValue||t.doubleValue)}function Ta(t){return eo(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class Ca{constructor(t,e){this.version=t,this.transformResults=e}}class Sa{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new Sa}static exists(t){return new Sa(void 0,t)}static updateTime(t){return new Sa(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function Ia(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class Aa{}function _a(t,e){if(!t.hasLocalMutations||e&&0===e.fields.length)return null;if(null===e)return t.isNoDocument()?new Fa(t.key,Sa.none()):new La(t.key,t.data,Sa.none());{const n=t.data,s=ao.empty();let r=new Li(fi.comparator);for(let t of e.fields)if(!r.has(t)){let e=n.field(t);null===e&&t.length>1&&(t=t.popLast(),e=n.field(t)),null===e?s.delete(t):s.set(t,e),r=r.add(t)}return new Ra(t.key,s,new Mi(r.toArray()),Sa.none())}}function ka(t,e,n){t instanceof La?function(t,e,n){const s=t.value.clone(),r=Oa(t.fieldTransforms,e,n.transformResults);s.setAll(r),e.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(t,e,n):t instanceof Ra?function(t,e,n){if(!Ia(t.precondition,e))return void e.convertToUnknownDocument(n.version);const s=Oa(t.fieldTransforms,e,n.transformResults),r=e.data;r.setAll(Ma(t)),r.setAll(s),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function Da(t,e,n,s){return t instanceof La?function(t,e,n,s){if(!Ia(t.precondition,e))return n;const r=t.value.clone(),i=Pa(t.fieldTransforms,s,e);return r.setAll(i),e.convertToFoundDocument(e.version,r).setHasLocalMutations(),null}(t,e,n,s):t instanceof Ra?function(t,e,n,s){if(!Ia(t.precondition,e))return n;const r=Pa(t.fieldTransforms,s,e),i=e.data;return i.setAll(Ma(t)),i.setAll(r),e.convertToFoundDocument(e.version,i).setHasLocalMutations(),null===n?null:n.unionWith(t.fieldMask.fields).unionWith(t.fieldTransforms.map((t=>t.field)))}(t,e,n,s):function(t,e,n){return Ia(t.precondition,e)?(e.convertToNoDocument(e.version).setHasLocalMutations(),null):n}(t,e,n)}function Na(t,e){let n=null;for(const s of t.fieldTransforms){const t=e.data.field(s.field),r=ga(s.transform,t||null);null!=r&&(null===n&&(n=ao.empty()),n.set(s.field,r))}return n||null}function xa(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&ai(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof ma&&e instanceof ma||t instanceof va&&e instanceof va?ai(t.elements,e.elements,Qi):t instanceof Ea&&e instanceof Ea?Qi(t.gt,e.gt):t instanceof pa&&e instanceof pa}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}class La extends Aa{constructor(t,e,n,s=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=s,this.type=0}getFieldMask(){return null}}class Ra extends Aa{constructor(t,e,n,s,r=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=s,this.fieldTransforms=r,this.type=1}getFieldMask(){return this.fieldMask}}function Ma(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const s=t.data.field(n);e.set(n,s)}})),e}function Oa(t,e,n){const s=new Map;Kr(t.length===n.length);for(let r=0;r<n.length;r++){const i=t[r],o=i.transform,a=e.data.field(i.field);s.set(i.field,fa(o,a,n[r]))}return s}function Pa(t,e,n){const s=new Map;for(const r of t){const t=r.transform,i=n.data.field(r.field);s.set(r.field,da(t,i,e))}return s}class Fa extends Aa{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Va extends Aa{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class Ua{constructor(t,e,n,s){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=s}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const s=this.mutations[e];s.key.isEqual(t.key)&&ka(s,t,n[e])}}applyToLocalView(t,e){for(const n of this.baseMutations)n.key.isEqual(t.key)&&(e=Da(n,t,e,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(t.key)&&(e=Da(n,t,e,this.localWriteTime));return e}applyToLocalDocumentSet(t,e){const n=na();return this.mutations.forEach((s=>{const r=t.get(s.key),i=r.overlayedDocument;let o=this.applyToLocalView(i,r.mutatedFields);o=e.has(s.key)?null:o;const a=_a(i,o);null!==a&&n.set(s.key,a),i.isValidDocument()||i.convertToNoDocument(ui.min())})),n}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),oa())}isEqual(t){return this.batchId===t.batchId&&ai(this.mutations,t.mutations,((t,e)=>xa(t,e)))&&ai(this.baseMutations,t.baseMutations,((t,e)=>xa(t,e)))}}class Ba{constructor(t,e,n,s){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=s}static from(t,e,n){Kr(t.mutations.length===n.length);let s=ra;const r=t.mutations;for(let t=0;t<r.length;t++)s=s.insert(r[t].key,n[t].version);return new Ba(t,e,n,s)}}class ja{constructor(t,e){this.largestBatchId=t,this.mutation=e}getKey(){return this.mutation.key}isEqual(t){return null!==t&&this.mutation===t.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class qa{constructor(t,e){this.count=t,this.unchangedNames=e}}var $a,za;function Ka(t){if(void 0===t)return jr("GRPC error has no .code"),Hr.UNKNOWN;switch(t){case $a.OK:return Hr.OK;case $a.CANCELLED:return Hr.CANCELLED;case $a.UNKNOWN:return Hr.UNKNOWN;case $a.DEADLINE_EXCEEDED:return Hr.DEADLINE_EXCEEDED;case $a.RESOURCE_EXHAUSTED:return Hr.RESOURCE_EXHAUSTED;case $a.INTERNAL:return Hr.INTERNAL;case $a.UNAVAILABLE:return Hr.UNAVAILABLE;case $a.UNAUTHENTICATED:return Hr.UNAUTHENTICATED;case $a.INVALID_ARGUMENT:return Hr.INVALID_ARGUMENT;case $a.NOT_FOUND:return Hr.NOT_FOUND;case $a.ALREADY_EXISTS:return Hr.ALREADY_EXISTS;case $a.PERMISSION_DENIED:return Hr.PERMISSION_DENIED;case $a.FAILED_PRECONDITION:return Hr.FAILED_PRECONDITION;case $a.ABORTED:return Hr.ABORTED;case $a.OUT_OF_RANGE:return Hr.OUT_OF_RANGE;case $a.UNIMPLEMENTED:return Hr.UNIMPLEMENTED;case $a.DATA_LOSS:return Hr.DATA_LOSS;default:return zr()}}(za=$a||($a={}))[za.OK=0]="OK",za[za.CANCELLED=1]="CANCELLED",za[za.UNKNOWN=2]="UNKNOWN",za[za.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",za[za.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",za[za.NOT_FOUND=5]="NOT_FOUND",za[za.ALREADY_EXISTS=6]="ALREADY_EXISTS",za[za.PERMISSION_DENIED=7]="PERMISSION_DENIED",za[za.UNAUTHENTICATED=16]="UNAUTHENTICATED",za[za.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",za[za.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",za[za.ABORTED=10]="ABORTED",za[za.OUT_OF_RANGE=11]="OUT_OF_RANGE",za[za.UNIMPLEMENTED=12]="UNIMPLEMENTED",za[za.INTERNAL=13]="INTERNAL",za[za.UNAVAILABLE=14]="UNAVAILABLE",za[za.DATA_LOSS=15]="DATA_LOSS";class Ga{constructor(){this.onExistenceFilterMismatchCallbacks=new Map}static get instance(){return Ha}static getOrCreateInstance(){return null===Ha&&(Ha=new Ga),Ha}onExistenceFilterMismatch(t){const e=Symbol();return this.onExistenceFilterMismatchCallbacks.set(e,t),()=>this.onExistenceFilterMismatchCallbacks.delete(e)}notifyOnExistenceFilterMismatch(t){this.onExistenceFilterMismatchCallbacks.forEach((e=>e(t)))}}let Ha=null;const Qa=new Mr([4294967295,4294967295],0);function Wa(t){const e=(new TextEncoder).encode(t),n=new Rr;return n.update(e),new Uint8Array(n.digest())}function Xa(t){const e=new DataView(t.buffer),n=e.getUint32(0,!0),s=e.getUint32(4,!0),r=e.getUint32(8,!0),i=e.getUint32(12,!0);return[new Mr([n,s],0),new Mr([r,i],0)]}class Ya{constructor(t,e,n){if(this.bitmap=t,this.padding=e,this.hashCount=n,e<0||e>=8)throw new Ja(`Invalid padding: ${e}`);if(n<0)throw new Ja(`Invalid hash count: ${n}`);if(t.length>0&&0===this.hashCount)throw new Ja(`Invalid hash count: ${n}`);if(0===t.length&&0!==e)throw new Ja(`Invalid padding when bitmap length is 0: ${e}`);this.It=8*t.length-e,this.Tt=Mr.fromNumber(this.It)}Et(t,e,n){let s=t.add(e.multiply(Mr.fromNumber(n)));return 1===s.compare(Qa)&&(s=new Mr([s.getBits(0),s.getBits(1)],0)),s.modulo(this.Tt).toNumber()}At(t){return 0!=(this.bitmap[Math.floor(t/8)]&1<<t%8)}vt(t){if(0===this.It)return!1;const e=Wa(t),[n,s]=Xa(e);for(let t=0;t<this.hashCount;t++){const e=this.Et(n,s,t);if(!this.At(e))return!1}return!0}static create(t,e,n){const s=t%8==0?0:8-t%8,r=new Uint8Array(Math.ceil(t/8)),i=new Ya(r,s,e);return n.forEach((t=>i.insert(t))),i}insert(t){if(0===this.It)return;const e=Wa(t),[n,s]=Xa(e);for(let t=0;t<this.hashCount;t++){const e=this.Et(n,s,t);this.Rt(e)}}Rt(t){const e=Math.floor(t/8),n=t%8;this.bitmap[e]|=1<<n}}class Ja extends Error{constructor(){super(...arguments),this.name="BloomFilterError"}}class Za{constructor(t,e,n,s,r){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=s,this.resolvedLimboDocuments=r}static createSynthesizedRemoteEventForCurrentChange(t,e,n){const s=new Map;return s.set(t,tc.createSynthesizedTargetChangeForCurrentChange(t,e,n)),new Za(ui.min(),s,new Di(oi),Yo(),oa())}}class tc{constructor(t,e,n,s,r){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=s,this.removedDocuments=r}static createSynthesizedTargetChangeForCurrentChange(t,e,n){return new tc(n,e,oa(),oa(),oa())}}class ec{constructor(t,e,n,s){this.Pt=t,this.removedTargetIds=e,this.key=n,this.bt=s}}class nc{constructor(t,e){this.targetId=t,this.Vt=e}}class sc{constructor(t,e,n=Pi.EMPTY_BYTE_STRING,s=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=s}}class rc{constructor(){this.St=0,this.Dt=ac(),this.Ct=Pi.EMPTY_BYTE_STRING,this.xt=!1,this.Nt=!0}get current(){return this.xt}get resumeToken(){return this.Ct}get kt(){return 0!==this.St}get Mt(){return this.Nt}$t(t){t.approximateByteSize()>0&&(this.Nt=!0,this.Ct=t)}Ot(){let t=oa(),e=oa(),n=oa();return this.Dt.forEach(((s,r)=>{switch(r){case 0:t=t.add(s);break;case 2:e=e.add(s);break;case 1:n=n.add(s);break;default:zr()}})),new tc(this.Ct,this.xt,t,e,n)}Ft(){this.Nt=!1,this.Dt=ac()}Bt(t,e){this.Nt=!0,this.Dt=this.Dt.insert(t,e)}Lt(t){this.Nt=!0,this.Dt=this.Dt.remove(t)}qt(){this.St+=1}Ut(){this.St-=1}Kt(){this.Nt=!0,this.xt=!0}}class ic{constructor(t){this.Gt=t,this.Qt=new Map,this.jt=Yo(),this.zt=oc(),this.Wt=new Di(oi)}Ht(t){for(const e of t.Pt)t.bt&&t.bt.isFoundDocument()?this.Jt(e,t.bt):this.Yt(e,t.key,t.bt);for(const e of t.removedTargetIds)this.Yt(e,t.key,t.bt)}Xt(t){this.forEachTarget(t,(e=>{const n=this.Zt(e);switch(t.state){case 0:this.te(e)&&n.$t(t.resumeToken);break;case 1:n.Ut(),n.kt||n.Ft(),n.$t(t.resumeToken);break;case 2:n.Ut(),n.kt||this.removeTarget(e);break;case 3:this.te(e)&&(n.Kt(),n.$t(t.resumeToken));break;case 4:this.te(e)&&(this.ee(e),n.$t(t.resumeToken));break;default:zr()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.Qt.forEach(((t,n)=>{this.te(n)&&e(n)}))}ne(t){var e;const n=t.targetId,s=t.Vt.count,r=this.se(n);if(r){const i=r.target;if(Po(i))if(0===s){const t=new gi(i.path);this.Yt(n,t,uo.newNoDocument(t,ui.min()))}else Kr(1===s);else{const r=this.ie(n);if(r!==s){const s=this.re(t,r);if(0!==s){this.ee(n);const t=2===s?"TargetPurposeExistenceFilterMismatchBloom":"TargetPurposeExistenceFilterMismatch";this.Wt=this.Wt.insert(n,t)}null===(e=Ga.instance)||void 0===e||e.notifyOnExistenceFilterMismatch(function(t,e,n){var s,r,i,o,a,c;const u={localCacheCount:e,existenceFilterCount:n.count},h=n.unchangedNames;return h&&(u.bloomFilter={applied:0===t,hashCount:null!==(s=null==h?void 0:h.hashCount)&&void 0!==s?s:0,bitmapLength:null!==(o=null===(i=null===(r=null==h?void 0:h.bits)||void 0===r?void 0:r.bitmap)||void 0===i?void 0:i.length)&&void 0!==o?o:0,padding:null!==(c=null===(a=null==h?void 0:h.bits)||void 0===a?void 0:a.padding)&&void 0!==c?c:0}),u}(s,r,t.Vt))}}}}re(t,e){const{unchangedNames:n,count:s}=t.Vt;if(!n||!n.bits)return 1;const{bits:{bitmap:r="",padding:i=0},hashCount:o=0}=n;let a,c;try{a=Bi(r).toUint8Array()}catch(t){if(t instanceof Oi)return qr("Decoding the base64 bloom filter in existence filter failed ("+t.message+"); ignoring the bloom filter and falling back to full re-query."),1;throw t}try{c=new Ya(a,i,o)}catch(t){return qr(t instanceof Ja?"BloomFilter error: ":"Applying bloom filter failed: ",t),1}return 0===c.It?1:s!==e-this.oe(t.targetId,c)?2:0}oe(t,e){const n=this.Gt.getRemoteKeysForTarget(t);let s=0;return n.forEach((n=>{const r=this.Gt.ue(),i=`projects/${r.projectId}/databases/${r.database}/documents/${n.path.canonicalString()}`;e.vt(i)||(this.Yt(t,n,null),s++)})),s}ce(t){const e=new Map;this.Qt.forEach(((n,s)=>{const r=this.se(s);if(r){if(n.current&&Po(r.target)){const e=new gi(r.target.path);null!==this.jt.get(e)||this.ae(s,e)||this.Yt(s,e,uo.newNoDocument(e,t))}n.Mt&&(e.set(s,n.Ot()),n.Ft())}}));let n=oa();this.zt.forEach(((t,e)=>{let s=!0;e.forEachWhile((t=>{const e=this.se(t);return!e||"TargetPurposeLimboResolution"===e.purpose||(s=!1,!1)})),s&&(n=n.add(t))})),this.jt.forEach(((e,n)=>n.setReadTime(t)));const s=new Za(t,e,this.Wt,this.jt,n);return this.jt=Yo(),this.zt=oc(),this.Wt=new Di(oi),s}Jt(t,e){if(!this.te(t))return;const n=this.ae(t,e.key)?2:0;this.Zt(t).Bt(e.key,n),this.jt=this.jt.insert(e.key,e),this.zt=this.zt.insert(e.key,this.he(e.key).add(t))}Yt(t,e,n){if(!this.te(t))return;const s=this.Zt(t);this.ae(t,e)?s.Bt(e,1):s.Lt(e),this.zt=this.zt.insert(e,this.he(e).delete(t)),n&&(this.jt=this.jt.insert(e,n))}removeTarget(t){this.Qt.delete(t)}ie(t){const e=this.Zt(t).Ot();return this.Gt.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}qt(t){this.Zt(t).qt()}Zt(t){let e=this.Qt.get(t);return e||(e=new rc,this.Qt.set(t,e)),e}he(t){let e=this.zt.get(t);return e||(e=new Li(oi),this.zt=this.zt.insert(t,e)),e}te(t){const e=null!==this.se(t);return e||Br("WatchChangeAggregator","Detected inactive target",t),e}se(t){const e=this.Qt.get(t);return e&&e.kt?null:this.Gt.le(t)}ee(t){this.Qt.set(t,new rc),this.Gt.getRemoteKeysForTarget(t).forEach((e=>{this.Yt(t,e,null)}))}ae(t,e){return this.Gt.getRemoteKeysForTarget(t).has(e)}}function oc(){return new Di(gi.comparator)}function ac(){return new Di(gi.comparator)}const cc={asc:"ASCENDING",desc:"DESCENDING"},uc={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},hc={and:"AND",or:"OR"};class lc{constructor(t,e){this.databaseId=t,this.useProto3Json=e}}function dc(t,e){return t.useProto3Json||Si(e)?e:{value:e}}function fc(t,e){return t.useProto3Json?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function gc(t,e){return t.useProto3Json?e.toBase64():e.toUint8Array()}function pc(t,e){return fc(t,e.toTimestamp())}function mc(t){return Kr(!!t),ui.fromTimestamp(function(t){const e=Vi(t);return new ci(e.seconds,e.nanos)}(t))}function yc(t,e){return function(t){return new li(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function vc(t){const e=li.fromString(t);return Kr(Pc(e)),e}function wc(t,e){return yc(t.databaseId,e.path)}function Ec(t,e){const n=vc(e);if(n.get(1)!==t.databaseId.projectId)throw new Qr(Hr.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new Qr(Hr.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new gi(Cc(n))}function bc(t,e){return yc(t.databaseId,e)}function Tc(t){return new li(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function Cc(t){return Kr(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function Sc(t,e,n){return{name:wc(t,e),fields:n.value.mapValue.fields}}function Ic(t,e){return{documents:[bc(t,e.path)]}}function Ac(t,e){const n={structuredQuery:{}},s=e.path;null!==e.collectionGroup?(n.parent=bc(t,s),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=bc(t,s.popLast()),n.structuredQuery.from=[{collectionId:s.lastSegment()}]);const r=function(t){if(0!==t.length)return Mc(vo.create(t,"and"))}(e.filters);r&&(n.structuredQuery.where=r);const i=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:Lc(t.field),direction:Dc(t.dir)}}(t)))}(e.orderBy);i&&(n.structuredQuery.orderBy=i);const o=dc(t,e.limit);var a;return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt={before:(a=e.startAt).inclusive,values:a.position}),e.endAt&&(n.structuredQuery.endAt=function(t){return{before:!t.inclusive,values:t.position}}(e.endAt)),n}function _c(t){let e=function(t){const e=vc(t);return 4===e.length?li.emptyPath():Cc(e)}(t.parent);const n=t.structuredQuery,s=n.from?n.from.length:0;let r=null;if(s>0){Kr(1===s);const t=n.from[0];t.allDescendants?r=t.collectionId:e=e.child(t.collectionId)}let i=[];n.where&&(i=function(t){const e=kc(t);return e instanceof vo&&Eo(e)?e.getFilters():[e]}(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new go(Rc(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,Si(e)?null:e}(n.limit));let c=null;n.startAt&&(c=function(t){const e=!!t.before,n=t.values||[];return new ho(n,e)}(n.startAt));let u=null;return n.endAt&&(u=function(t){const e=!t.before,n=t.values||[];return new ho(n,e)}(n.endAt)),function(t,e,n,s,r,i,o,a){return new Fo(t,e,n,s,r,i,o,a)}(e,r,o,i,a,"F",c,u)}function kc(t){return void 0!==t.unaryFilter?function(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Rc(t.unaryFilter.field);return yo.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Rc(t.unaryFilter.field);return yo.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const s=Rc(t.unaryFilter.field);return yo.create(s,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const r=Rc(t.unaryFilter.field);return yo.create(r,"!=",{nullValue:"NULL_VALUE"});default:return zr()}}(t):void 0!==t.fieldFilter?function(t){return yo.create(Rc(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return zr()}}(t.fieldFilter.op),t.fieldFilter.value)}(t):void 0!==t.compositeFilter?function(t){return vo.create(t.compositeFilter.filters.map((t=>kc(t))),function(t){switch(t){case"AND":return"and";case"OR":return"or";default:return zr()}}(t.compositeFilter.op))}(t):zr()}function Dc(t){return cc[t]}function Nc(t){return uc[t]}function xc(t){return hc[t]}function Lc(t){return{fieldPath:t.canonicalString()}}function Rc(t){return fi.fromServerFormat(t.fieldPath)}function Mc(t){return t instanceof yo?function(t){if("=="===t.op){if(so(t.value))return{unaryFilter:{field:Lc(t.field),op:"IS_NAN"}};if(no(t.value))return{unaryFilter:{field:Lc(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(so(t.value))return{unaryFilter:{field:Lc(t.field),op:"IS_NOT_NAN"}};if(no(t.value))return{unaryFilter:{field:Lc(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Lc(t.field),op:Nc(t.op),value:t.value}}}(t):t instanceof vo?function(t){const e=t.getFilters().map((t=>Mc(t)));return 1===e.length?e[0]:{compositeFilter:{op:xc(t.op),filters:e}}}(t):zr()}function Oc(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Pc(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}class Fc{constructor(t,e,n,s,r=ui.min(),i=ui.min(),o=Pi.EMPTY_BYTE_STRING,a=null){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=s,this.snapshotVersion=r,this.lastLimboFreeSnapshotVersion=i,this.resumeToken=o,this.expectedCount=a}withSequenceNumber(t){return new Fc(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,this.expectedCount)}withResumeToken(t,e){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t,null)}withExpectedCount(t){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,t)}withLastLimboFreeSnapshotVersion(t){return new Fc(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken,this.expectedCount)}}class Vc{constructor(t){this.fe=t}}function Uc(t){const e=_c({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?qo(e,e.limit,"L"):e}class Bc{constructor(){}_e(t,e){this.me(t,e),e.ge()}me(t,e){if("nullValue"in t)this.ye(e,5);else if("booleanValue"in t)this.ye(e,10),e.pe(t.booleanValue?1:0);else if("integerValue"in t)this.ye(e,15),e.pe(Ui(t.integerValue));else if("doubleValue"in t){const n=Ui(t.doubleValue);isNaN(n)?this.ye(e,13):(this.ye(e,15),Ii(n)?e.pe(0):e.pe(n))}else if("timestampValue"in t){const n=t.timestampValue;this.ye(e,20),"string"==typeof n?e.Ie(n):(e.Ie(`${n.seconds||""}`),e.pe(n.nanos||0))}else if("stringValue"in t)this.Te(t.stringValue,e),this.Ee(e);else if("bytesValue"in t)this.ye(e,30),e.Ae(Bi(t.bytesValue)),this.Ee(e);else if("referenceValue"in t)this.ve(t.referenceValue,e);else if("geoPointValue"in t){const n=t.geoPointValue;this.ye(e,45),e.pe(n.latitude||0),e.pe(n.longitude||0)}else"mapValue"in t?oo(t)?this.ye(e,Number.MAX_SAFE_INTEGER):(this.Re(t.mapValue,e),this.Ee(e)):"arrayValue"in t?(this.Pe(t.arrayValue,e),this.Ee(e)):zr()}Te(t,e){this.ye(e,25),this.be(t,e)}be(t,e){e.Ie(t)}Re(t,e){const n=t.fields||{};this.ye(e,55);for(const t of Object.keys(n))this.Te(t,e),this.me(n[t],e)}Pe(t,e){const n=t.values||[];this.ye(e,50);for(const t of n)this.me(t,e)}ve(t,e){this.ye(e,37),gi.fromName(t).path.forEach((t=>{this.ye(e,60),this.be(t,e)}))}ye(t,e){t.pe(e)}Ee(t){t.pe(2)}}Bc.Ve=new Bc;class jc{constructor(){this.rn=new qc}addToCollectionParentIndex(t,e){return this.rn.add(e),bi.resolve()}getCollectionParents(t,e){return bi.resolve(this.rn.getEntries(e))}addFieldIndex(t,e){return bi.resolve()}deleteFieldIndex(t,e){return bi.resolve()}getDocumentsMatchingTarget(t,e){return bi.resolve(null)}getIndexType(t,e){return bi.resolve(0)}getFieldIndexes(t,e){return bi.resolve([])}getNextCollectionGroupToUpdate(t){return bi.resolve(null)}getMinOffset(t,e){return bi.resolve(mi.min())}getMinOffsetFromCollectionGroup(t,e){return bi.resolve(mi.min())}updateCollectionGroup(t,e,n){return bi.resolve()}updateIndexEntries(t,e){return bi.resolve()}}class qc{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e]||new Li(li.comparator),r=!s.has(n);return this.index[e]=s.add(n),r}has(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e];return s&&s.has(n)}getEntries(t){return(this.index[t]||new Li(li.comparator)).toArray()}}new Uint8Array(0);class $c{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new $c(t,$c.DEFAULT_COLLECTION_PERCENTILE,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}$c.DEFAULT_COLLECTION_PERCENTILE=10,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,$c.DEFAULT=new $c(41943040,$c.DEFAULT_COLLECTION_PERCENTILE,$c.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),$c.DISABLED=new $c(-1,0,0);class zc{constructor(t){this.Nn=t}next(){return this.Nn+=2,this.Nn}static kn(){return new zc(0)}static Mn(){return new zc(-1)}}class Kc{constructor(){this.changes=new Wo((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}addEntry(t){this.assertNotApplied(),this.changes.set(t.key,t)}removeEntry(t,e){this.assertNotApplied(),this.changes.set(t,uo.newInvalidDocument(t).setReadTime(e))}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?bi.resolve(n):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class Gc{constructor(t,e){this.overlayedDocument=t,this.mutatedFields=e}}class Hc{constructor(t,e,n,s){this.remoteDocumentCache=t,this.mutationQueue=e,this.documentOverlayCache=n,this.indexManager=s}getDocument(t,e){let n=null;return this.documentOverlayCache.getOverlay(t,e).next((s=>(n=s,this.remoteDocumentCache.getEntry(t,e)))).next((t=>(null!==n&&Da(n.mutation,t,Mi.empty(),ci.now()),t)))}getDocuments(t,e){return this.remoteDocumentCache.getEntries(t,e).next((e=>this.getLocalViewOfDocuments(t,e,oa()).next((()=>e))))}getLocalViewOfDocuments(t,e,n=oa()){const s=ea();return this.populateOverlays(t,s,e).next((()=>this.computeViews(t,e,s,n).next((t=>{let e=Zo();return t.forEach(((t,n)=>{e=e.insert(t,n.overlayedDocument)})),e}))))}getOverlayedDocuments(t,e){const n=ea();return this.populateOverlays(t,n,e).next((()=>this.computeViews(t,e,n,oa())))}populateOverlays(t,e,n){const s=[];return n.forEach((t=>{e.has(t)||s.push(t)})),this.documentOverlayCache.getOverlays(t,s).next((t=>{t.forEach(((t,n)=>{e.set(t,n)}))}))}computeViews(t,e,n,s){let r=Yo();const i=sa(),o=sa();return e.forEach(((t,e)=>{const o=n.get(e.key);s.has(e.key)&&(void 0===o||o.mutation instanceof Ra)?r=r.insert(e.key,e):void 0!==o?(i.set(e.key,o.mutation.getFieldMask()),Da(o.mutation,e,o.mutation.getFieldMask(),ci.now())):i.set(e.key,Mi.empty())})),this.recalculateAndSaveOverlays(t,r).next((t=>(t.forEach(((t,e)=>i.set(t,e))),e.forEach(((t,e)=>{var n;return o.set(t,new Gc(e,null!==(n=i.get(t))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(t,e){const n=sa();let s=new Di(((t,e)=>t-e)),r=oa();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>{for(const r of t)r.keys().forEach((t=>{const i=e.get(t);if(null===i)return;let o=n.get(t)||Mi.empty();o=r.applyToLocalView(i,o),n.set(t,o);const a=(s.get(r.batchId)||oa()).add(t);s=s.insert(r.batchId,a)}))})).next((()=>{const i=[],o=s.getReverseIterator();for(;o.hasNext();){const s=o.getNext(),a=s.key,c=s.value,u=na();c.forEach((t=>{if(!r.has(t)){const s=_a(e.get(t),n.get(t));null!==s&&u.set(t,s),r=r.add(t)}})),i.push(this.documentOverlayCache.saveOverlays(t,a,u))}return bi.waitFor(i)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(t,e){return this.remoteDocumentCache.getEntries(t,e).next((e=>this.recalculateAndSaveOverlays(t,e)))}getDocumentsMatchingQuery(t,e,n){return function(t){return gi.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.getDocumentsMatchingDocumentQuery(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.getDocumentsMatchingCollectionGroupQuery(t,e,n):this.getDocumentsMatchingCollectionQuery(t,e,n)}getNextDocuments(t,e,n,s){return this.remoteDocumentCache.getAllFromCollectionGroup(t,e,n,s).next((r=>{const i=s-r.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(t,e,n.largestBatchId,s-r.size):bi.resolve(ea());let o=-1,a=r;return i.next((e=>bi.forEach(e,((e,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),r.get(e)?bi.resolve():this.remoteDocumentCache.getEntry(t,e).next((t=>{a=a.insert(e,t)}))))).next((()=>this.populateOverlays(t,e,r))).next((()=>this.computeViews(t,a,e,oa()))).next((t=>({batchId:o,changes:ta(t)})))))}))}getDocumentsMatchingDocumentQuery(t,e){return this.getDocument(t,new gi(e)).next((t=>{let e=Zo();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}getDocumentsMatchingCollectionGroupQuery(t,e,n){const s=e.collectionGroup;let r=Zo();return this.indexManager.getCollectionParents(t,s).next((i=>bi.forEach(i,(i=>{const o=function(t,e){return new Fo(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,i.child(s));return this.getDocumentsMatchingCollectionQuery(t,o,n).next((t=>{t.forEach(((t,e)=>{r=r.insert(t,e)}))}))})).next((()=>r))))}getDocumentsMatchingCollectionQuery(t,e,n){let s;return this.documentOverlayCache.getOverlaysForCollection(t,e.path,n.largestBatchId).next((r=>(s=r,this.remoteDocumentCache.getDocumentsMatchingQuery(t,e,n,s)))).next((t=>{s.forEach(((e,n)=>{const s=n.getKey();null===t.get(s)&&(t=t.insert(s,uo.newInvalidDocument(s)))}));let n=Zo();return t.forEach(((t,r)=>{const i=s.get(t);void 0!==i&&Da(i.mutation,r,Mi.empty(),ci.now()),Go(e,r)&&(n=n.insert(t,r))})),n}))}}class Qc{constructor(t){this.serializer=t,this.cs=new Map,this.hs=new Map}getBundleMetadata(t,e){return bi.resolve(this.cs.get(e))}saveBundleMetadata(t,e){var n;return this.cs.set(e.id,{id:(n=e).id,version:n.version,createTime:mc(n.createTime)}),bi.resolve()}getNamedQuery(t,e){return bi.resolve(this.hs.get(e))}saveNamedQuery(t,e){return this.hs.set(e.name,function(t){return{name:t.name,query:Uc(t.bundledQuery),readTime:mc(t.readTime)}}(e)),bi.resolve()}}class Wc{constructor(){this.overlays=new Di(gi.comparator),this.ls=new Map}getOverlay(t,e){return bi.resolve(this.overlays.get(e))}getOverlays(t,e){const n=ea();return bi.forEach(e,(e=>this.getOverlay(t,e).next((t=>{null!==t&&n.set(e,t)})))).next((()=>n))}saveOverlays(t,e,n){return n.forEach(((n,s)=>{this.we(t,e,s)})),bi.resolve()}removeOverlaysForBatchId(t,e,n){const s=this.ls.get(n);return void 0!==s&&(s.forEach((t=>this.overlays=this.overlays.remove(t))),this.ls.delete(n)),bi.resolve()}getOverlaysForCollection(t,e,n){const s=ea(),r=e.length+1,i=new gi(e.child("")),o=this.overlays.getIteratorFrom(i);for(;o.hasNext();){const t=o.getNext().value,i=t.getKey();if(!e.isPrefixOf(i.path))break;i.path.length===r&&t.largestBatchId>n&&s.set(t.getKey(),t)}return bi.resolve(s)}getOverlaysForCollectionGroup(t,e,n,s){let r=new Di(((t,e)=>t-e));const i=this.overlays.getIterator();for(;i.hasNext();){const t=i.getNext().value;if(t.getKey().getCollectionGroup()===e&&t.largestBatchId>n){let e=r.get(t.largestBatchId);null===e&&(e=ea(),r=r.insert(t.largestBatchId,e)),e.set(t.getKey(),t)}}const o=ea(),a=r.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((t,e)=>o.set(t,e))),!(o.size()>=s)););return bi.resolve(o)}we(t,e,n){const s=this.overlays.get(n.key);if(null!==s){const t=this.ls.get(s.largestBatchId).delete(n.key);this.ls.set(s.largestBatchId,t)}this.overlays=this.overlays.insert(n.key,new ja(e,n));let r=this.ls.get(e);void 0===r&&(r=oa(),this.ls.set(e,r)),this.ls.set(e,r.add(n.key))}}class Xc{constructor(){this.fs=new Li(Yc.ds),this.ws=new Li(Yc._s)}isEmpty(){return this.fs.isEmpty()}addReference(t,e){const n=new Yc(t,e);this.fs=this.fs.add(n),this.ws=this.ws.add(n)}gs(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.ys(new Yc(t,e))}ps(t,e){t.forEach((t=>this.removeReference(t,e)))}Is(t){const e=new gi(new li([])),n=new Yc(e,t),s=new Yc(e,t+1),r=[];return this.ws.forEachInRange([n,s],(t=>{this.ys(t),r.push(t.key)})),r}Ts(){this.fs.forEach((t=>this.ys(t)))}ys(t){this.fs=this.fs.delete(t),this.ws=this.ws.delete(t)}Es(t){const e=new gi(new li([])),n=new Yc(e,t),s=new Yc(e,t+1);let r=oa();return this.ws.forEachInRange([n,s],(t=>{r=r.add(t.key)})),r}containsKey(t){const e=new Yc(t,0),n=this.fs.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class Yc{constructor(t,e){this.key=t,this.As=e}static ds(t,e){return gi.comparator(t.key,e.key)||oi(t.As,e.As)}static _s(t,e){return oi(t.As,e.As)||gi.comparator(t.key,e.key)}}class Jc{constructor(t,e){this.indexManager=t,this.referenceDelegate=e,this.mutationQueue=[],this.vs=1,this.Rs=new Li(Yc.ds)}checkEmpty(t){return bi.resolve(0===this.mutationQueue.length)}addMutationBatch(t,e,n,s){const r=this.vs;this.vs++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const i=new Ua(r,e,n,s);this.mutationQueue.push(i);for(const e of s)this.Rs=this.Rs.add(new Yc(e.key,r)),this.indexManager.addToCollectionParentIndex(t,e.key.path.popLast());return bi.resolve(i)}lookupMutationBatch(t,e){return bi.resolve(this.Ps(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,s=this.bs(n),r=s<0?0:s;return bi.resolve(this.mutationQueue.length>r?this.mutationQueue[r]:null)}getHighestUnacknowledgedBatchId(){return bi.resolve(0===this.mutationQueue.length?-1:this.vs-1)}getAllMutationBatches(t){return bi.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new Yc(e,0),s=new Yc(e,Number.POSITIVE_INFINITY),r=[];return this.Rs.forEachInRange([n,s],(t=>{const e=this.Ps(t.As);r.push(e)})),bi.resolve(r)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new Li(oi);return e.forEach((t=>{const e=new Yc(t,0),s=new Yc(t,Number.POSITIVE_INFINITY);this.Rs.forEachInRange([e,s],(t=>{n=n.add(t.As)}))})),bi.resolve(this.Vs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,s=n.length+1;let r=n;gi.isDocumentKey(r)||(r=r.child(""));const i=new Yc(new gi(r),0);let o=new Li(oi);return this.Rs.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===s&&(o=o.add(t.As)),!0)}),i),bi.resolve(this.Vs(o))}Vs(t){const e=[];return t.forEach((t=>{const n=this.Ps(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){Kr(0===this.Ss(e.batchId,"removed")),this.mutationQueue.shift();let n=this.Rs;return bi.forEach(e.mutations,(s=>{const r=new Yc(s.key,e.batchId);return n=n.delete(r),this.referenceDelegate.markPotentiallyOrphaned(t,s.key)})).next((()=>{this.Rs=n}))}Cn(t){}containsKey(t,e){const n=new Yc(e,0),s=this.Rs.firstAfterOrEqual(n);return bi.resolve(e.isEqual(s&&s.key))}performConsistencyCheck(t){return this.mutationQueue.length,bi.resolve()}Ss(t,e){return this.bs(t)}bs(t){return 0===this.mutationQueue.length?0:t-this.mutationQueue[0].batchId}Ps(t){const e=this.bs(t);return e<0||e>=this.mutationQueue.length?null:this.mutationQueue[e]}}class Zc{constructor(t){this.Ds=t,this.docs=new Di(gi.comparator),this.size=0}setIndexManager(t){this.indexManager=t}addEntry(t,e){const n=e.key,s=this.docs.get(n),r=s?s.size:0,i=this.Ds(e);return this.docs=this.docs.insert(n,{document:e.mutableCopy(),size:i}),this.size+=i-r,this.indexManager.addToCollectionParentIndex(t,n.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return bi.resolve(n?n.document.mutableCopy():uo.newInvalidDocument(e))}getEntries(t,e){let n=Yo();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.mutableCopy():uo.newInvalidDocument(t))})),bi.resolve(n)}getDocumentsMatchingQuery(t,e,n,s){let r=Yo();const i=e.path,o=new gi(i.child("")),a=this.docs.getIteratorFrom(o);for(;a.hasNext();){const{key:t,value:{document:o}}=a.getNext();if(!i.isPrefixOf(t.path))break;t.path.length>i.length+1||yi(pi(o),n)<=0||(s.has(o.key)||Go(e,o))&&(r=r.insert(o.key,o.mutableCopy()))}return bi.resolve(r)}getAllFromCollectionGroup(t,e,n,s){zr()}Cs(t,e){return bi.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new tu(this)}getSize(t){return bi.resolve(this.size)}}class tu extends Kc{constructor(t){super(),this.os=t}applyChanges(t){const e=[];return this.changes.forEach(((n,s)=>{s.isValidDocument()?e.push(this.os.addEntry(t,s)):this.os.removeEntry(n)})),bi.waitFor(e)}getFromCache(t,e){return this.os.getEntry(t,e)}getAllFromCache(t,e){return this.os.getEntries(t,e)}}class eu{constructor(t){this.persistence=t,this.xs=new Wo((t=>Mo(t)),Oo),this.lastRemoteSnapshotVersion=ui.min(),this.highestTargetId=0,this.Ns=0,this.ks=new Xc,this.targetCount=0,this.Ms=zc.kn()}forEachTarget(t,e){return this.xs.forEach(((t,n)=>e(n))),bi.resolve()}getLastRemoteSnapshotVersion(t){return bi.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return bi.resolve(this.Ns)}allocateTargetId(t){return this.highestTargetId=this.Ms.next(),bi.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Ns&&(this.Ns=e),bi.resolve()}Fn(t){this.xs.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Ms=new zc(e),this.highestTargetId=e),t.sequenceNumber>this.Ns&&(this.Ns=t.sequenceNumber)}addTargetData(t,e){return this.Fn(e),this.targetCount+=1,bi.resolve()}updateTargetData(t,e){return this.Fn(e),bi.resolve()}removeTargetData(t,e){return this.xs.delete(e.target),this.ks.Is(e.targetId),this.targetCount-=1,bi.resolve()}removeTargets(t,e,n){let s=0;const r=[];return this.xs.forEach(((i,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.xs.delete(i),r.push(this.removeMatchingKeysForTargetId(t,o.targetId)),s++)})),bi.waitFor(r).next((()=>s))}getTargetCount(t){return bi.resolve(this.targetCount)}getTargetData(t,e){const n=this.xs.get(e)||null;return bi.resolve(n)}addMatchingKeys(t,e,n){return this.ks.gs(e,n),bi.resolve()}removeMatchingKeys(t,e,n){this.ks.ps(e,n);const s=this.persistence.referenceDelegate,r=[];return s&&e.forEach((e=>{r.push(s.markPotentiallyOrphaned(t,e))})),bi.waitFor(r)}removeMatchingKeysForTargetId(t,e){return this.ks.Is(e),bi.resolve()}getMatchingKeysForTargetId(t,e){const n=this.ks.Es(e);return bi.resolve(n)}containsKey(t,e){return bi.resolve(this.ks.containsKey(e))}}class nu{constructor(t,e){this.$s={},this.overlays={},this.Os=new Ci(0),this.Fs=!1,this.Fs=!0,this.referenceDelegate=t(this),this.Bs=new eu(this),this.indexManager=new jc,this.remoteDocumentCache=function(t){return new Zc(t)}((t=>this.referenceDelegate.Ls(t))),this.serializer=new Vc(e),this.qs=new Qc(this.serializer)}start(){return Promise.resolve()}shutdown(){return this.Fs=!1,Promise.resolve()}get started(){return this.Fs}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(t){return this.indexManager}getDocumentOverlayCache(t){let e=this.overlays[t.toKey()];return e||(e=new Wc,this.overlays[t.toKey()]=e),e}getMutationQueue(t,e){let n=this.$s[t.toKey()];return n||(n=new Jc(e,this.referenceDelegate),this.$s[t.toKey()]=n),n}getTargetCache(){return this.Bs}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.qs}runTransaction(t,e,n){Br("MemoryPersistence","Starting transaction:",t);const s=new su(this.Os.next());return this.referenceDelegate.Us(),n(s).next((t=>this.referenceDelegate.Ks(s).next((()=>t)))).toPromise().then((t=>(s.raiseOnCommittedEvent(),t)))}Gs(t,e){return bi.or(Object.values(this.$s).map((n=>()=>n.containsKey(t,e))))}}class su extends wi{constructor(t){super(),this.currentSequenceNumber=t}}class ru{constructor(t){this.persistence=t,this.Qs=new Xc,this.js=null}static zs(t){return new ru(t)}get Ws(){if(this.js)return this.js;throw zr()}addReference(t,e,n){return this.Qs.addReference(n,e),this.Ws.delete(n.toString()),bi.resolve()}removeReference(t,e,n){return this.Qs.removeReference(n,e),this.Ws.add(n.toString()),bi.resolve()}markPotentiallyOrphaned(t,e){return this.Ws.add(e.toString()),bi.resolve()}removeTarget(t,e){this.Qs.Is(e.targetId).forEach((t=>this.Ws.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.Ws.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}Us(){this.js=new Set}Ks(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return bi.forEach(this.Ws,(n=>{const s=gi.fromPath(n);return this.Hs(t,s).next((t=>{t||e.removeEntry(s,ui.min())}))})).next((()=>(this.js=null,e.apply(t))))}updateLimboDocument(t,e){return this.Hs(t,e).next((t=>{t?this.Ws.delete(e.toString()):this.Ws.add(e.toString())}))}Ls(t){return 0}Hs(t,e){return bi.or([()=>bi.resolve(this.Qs.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Gs(t,e)])}}class iu{constructor(t,e,n,s){this.targetId=t,this.fromCache=e,this.Fi=n,this.Bi=s}static Li(t,e){let n=oa(),s=oa();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:s=s.add(t.doc.key)}return new iu(t,e.fromCache,n,s)}}class ou{constructor(){this.qi=!1}initialize(t,e){this.Ui=t,this.indexManager=e,this.qi=!0}getDocumentsMatchingQuery(t,e,n,s){return this.Ki(t,e).next((r=>r||this.Gi(t,e,s,n))).next((n=>n||this.Qi(t,e)))}Ki(t,e){if(Uo(e))return bi.resolve(null);let n=jo(e);return this.indexManager.getIndexType(t,n).next((s=>0===s?null:(null!==e.limit&&1===s&&(e=qo(e,null,"F"),n=jo(e)),this.indexManager.getDocumentsMatchingTarget(t,n).next((s=>{const r=oa(...s);return this.Ui.getDocuments(t,r).next((s=>this.indexManager.getMinOffset(t,n).next((n=>{const i=this.ji(e,s);return this.zi(e,i,r,n.readTime)?this.Ki(t,qo(e,null,"F")):this.Wi(t,i,e,n)}))))})))))}Gi(t,e,n,s){return Uo(e)||s.isEqual(ui.min())?this.Qi(t,e):this.Ui.getDocuments(t,n).next((r=>{const i=this.ji(e,r);return this.zi(e,i,n,s)?this.Qi(t,e):(Ur()<=b.DEBUG&&Br("QueryEngine","Re-using previous result from %s to execute query: %s",s.toString(),Ko(e)),this.Wi(t,i,e,function(t,e){const n=t.toTimestamp().seconds,s=t.toTimestamp().nanoseconds+1,r=ui.fromTimestamp(1e9===s?new ci(n+1,0):new ci(n,s));return new mi(r,gi.empty(),e)}(s,-1)))}))}ji(t,e){let n=new Li(Ho(t));return e.forEach(((e,s)=>{Go(t,s)&&(n=n.add(s))})),n}zi(t,e,n,s){if(null===t.limit)return!1;if(n.size!==e.size)return!0;const r="F"===t.limitType?e.last():e.first();return!!r&&(r.hasPendingWrites||r.version.compareTo(s)>0)}Qi(t,e){return Ur()<=b.DEBUG&&Br("QueryEngine","Using full collection scan to execute query:",Ko(e)),this.Ui.getDocumentsMatchingQuery(t,e,mi.min())}Wi(t,e,n,s){return this.Ui.getDocumentsMatchingQuery(t,n,s).next((t=>(e.forEach((e=>{t=t.insert(e.key,e)})),t)))}}class au{constructor(t,e,n,s){this.persistence=t,this.Hi=e,this.serializer=s,this.Ji=new Di(oi),this.Yi=new Wo((t=>Mo(t)),Oo),this.Xi=new Map,this.Zi=t.getRemoteDocumentCache(),this.Bs=t.getTargetCache(),this.qs=t.getBundleCache(),this.tr(n)}tr(t){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(t),this.indexManager=this.persistence.getIndexManager(t),this.mutationQueue=this.persistence.getMutationQueue(t,this.indexManager),this.localDocuments=new Hc(this.Zi,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.Zi.setIndexManager(this.indexManager),this.Hi.initialize(this.localDocuments,this.indexManager)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Ji)))}}async function cu(t,e){const n=Gr(t);return await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.mutationQueue.getAllMutationBatches(t).next((r=>(s=r,n.tr(e),n.mutationQueue.getAllMutationBatches(t)))).next((e=>{const r=[],i=[];let o=oa();for(const t of s){r.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){i.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return n.localDocuments.getDocuments(t,o).next((t=>({er:t,removedBatchIds:r,addedBatchIds:i})))}))}))}function uu(t){const e=Gr(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.Bs.getLastRemoteSnapshotVersion(t)))}function hu(t,e){const n=Gr(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(t,e))))}async function lu(t,e,n){const s=Gr(t),r=s.Ji.get(e),i=n?"readwrite":"readwrite-primary";try{n||await s.persistence.runTransaction("Release target",i,(t=>s.persistence.referenceDelegate.removeTarget(t,r)))}catch(t){if(!Ti(t))throw t;Br("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}s.Ji=s.Ji.remove(e),s.Yi.delete(r.target)}function du(t,e,n){const s=Gr(t);let r=ui.min(),i=oa();return s.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const s=Gr(t),r=s.Yi.get(n);return void 0!==r?bi.resolve(s.Ji.get(r)):s.Bs.getTargetData(e,n)}(s,t,jo(e)).next((e=>{if(e)return r=e.lastLimboFreeSnapshotVersion,s.Bs.getMatchingKeysForTargetId(t,e.targetId).next((t=>{i=t}))})).next((()=>s.Hi.getDocumentsMatchingQuery(t,e,n?r:ui.min(),n?i:oa()))).next((t=>(function(t,e,n){let s=t.Xi.get(e)||ui.min();n.forEach(((t,e)=>{e.readTime.compareTo(s)>0&&(s=e.readTime)})),t.Xi.set(e,s)}(s,function(t){return t.collectionGroup||(t.path.length%2==1?t.path.lastSegment():t.path.get(t.path.length-2))}(e),t),{documents:t,ir:i})))))}class fu{constructor(){this.activeTargetIds=aa}lr(t){this.activeTargetIds=this.activeTargetIds.add(t)}dr(t){this.activeTargetIds=this.activeTargetIds.delete(t)}hr(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class gu{constructor(){this.Hr=new fu,this.Jr={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.Hr.lr(t),this.Jr[t]||"not-current"}updateQueryState(t,e,n){this.Jr[t]=e}removeLocalQueryTarget(t){this.Hr.dr(t)}isLocalQueryTarget(t){return this.Hr.activeTargetIds.has(t)}clearQueryState(t){delete this.Jr[t]}getAllActiveQueryTargets(){return this.Hr.activeTargetIds}isActiveQueryTarget(t){return this.Hr.activeTargetIds.has(t)}start(){return this.Hr=new fu,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(t){}}class pu{Yr(t){}shutdown(){}}class mu{constructor(){this.Xr=()=>this.Zr(),this.eo=()=>this.no(),this.so=[],this.io()}Yr(t){this.so.push(t)}shutdown(){window.removeEventListener("online",this.Xr),window.removeEventListener("offline",this.eo)}io(){window.addEventListener("online",this.Xr),window.addEventListener("offline",this.eo)}Zr(){Br("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.so)t(0)}no(){Br("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.so)t(1)}static D(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}let yu=null;function vu(){return null===yu?yu=268435456+Math.round(2147483648*Math.random()):yu++,"0x"+yu.toString(16)}const wu={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery",RunAggregationQuery:"runAggregationQuery"};class Eu{constructor(t){this.ro=t.ro,this.oo=t.oo}uo(t){this.co=t}ao(t){this.ho=t}onMessage(t){this.lo=t}close(){this.oo()}send(t){this.ro(t)}fo(){this.co()}wo(t){this.ho(t)}_o(t){this.lo(t)}}const bu="WebChannelConnection";class Tu extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.mo=e+"://"+t.host,this.yo="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}get po(){return!1}Io(t,e,n,s,r){const i=vu(),o=this.To(t,e);Br("RestConnection",`Sending RPC '${t}' ${i}:`,o,n);const a={};return this.Eo(a,s,r),this.Ao(t,o,a,n).then((e=>(Br("RestConnection",`Received RPC '${t}' ${i}: `,e),e)),(e=>{throw qr("RestConnection",`RPC '${t}' ${i} failed with error: `,e,"url: ",o,"request:",n),e}))}vo(t,e,n,s,r,i){return this.Io(t,e,n,s,r)}Eo(t,e,n){t["X-Goog-Api-Client"]="gl-js/ fire/"+Fr,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e&&e.headers.forEach(((e,n)=>t[n]=e)),n&&n.headers.forEach(((e,n)=>t[n]=e))}To(t,e){const n=wu[t];return`${this.mo}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams,this.longPollingOptions=t.longPollingOptions}Ao(t,e,n,s){const r=vu();return new Promise(((i,o)=>{const a=new Lr;a.setWithCredentials(!0),a.listenOnce(_r.COMPLETE,(()=>{try{switch(a.getLastErrorCode()){case Ar.NO_ERROR:const e=a.getResponseJson();Br(bu,`XHR for RPC '${t}' ${r} received:`,JSON.stringify(e)),i(e);break;case Ar.TIMEOUT:Br(bu,`RPC '${t}' ${r} timed out`),o(new Qr(Hr.DEADLINE_EXCEEDED,"Request time out"));break;case Ar.HTTP_ERROR:const n=a.getStatus();if(Br(bu,`RPC '${t}' ${r} failed with status:`,n,"response text:",a.getResponseText()),n>0){let t=a.getResponseJson();Array.isArray(t)&&(t=t[0]);const e=null==t?void 0:t.error;if(e&&e.status&&e.message){const t=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(Hr).indexOf(e)>=0?e:Hr.UNKNOWN}(e.status);o(new Qr(t,e.message))}else o(new Qr(Hr.UNKNOWN,"Server responded with status "+a.getStatus()))}else o(new Qr(Hr.UNAVAILABLE,"Connection failed."));break;default:zr()}}finally{Br(bu,`RPC '${t}' ${r} completed.`)}}));const c=JSON.stringify(s);Br(bu,`RPC '${t}' ${r} sending request:`,s),a.send(e,"POST",c,n,15)}))}Ro(t,e,n){const s=vu(),r=[this.mo,"/","google.firestore.v1.Firestore","/",t,"/channel"],i=Sr(),o=Ir(),a={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling},c=this.longPollingOptions.timeoutSeconds;void 0!==c&&(a.longPollingTimeout=Math.round(1e3*c)),this.useFetchStreams&&(a.xmlHttpFactory=new Nr({})),this.Eo(a.initMessageHeaders,e,n),a.encodeInitMessageHeaders=!0;const u=r.join("");Br(bu,`Creating RPC '${t}' stream ${s}: ${u}`,a);const h=i.createWebChannel(u,a);let l=!1,d=!1;const f=new Eu({ro:e=>{d?Br(bu,`Not sending because RPC '${t}' stream ${s} is closed:`,e):(l||(Br(bu,`Opening RPC '${t}' stream ${s} transport.`),h.open(),l=!0),Br(bu,`RPC '${t}' stream ${s} sending:`,e),h.send(e))},oo:()=>h.close()}),g=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return g(h,xr.EventType.OPEN,(()=>{d||Br(bu,`RPC '${t}' stream ${s} transport opened.`)})),g(h,xr.EventType.CLOSE,(()=>{d||(d=!0,Br(bu,`RPC '${t}' stream ${s} transport closed`),f.wo())})),g(h,xr.EventType.ERROR,(e=>{d||(d=!0,qr(bu,`RPC '${t}' stream ${s} transport errored:`,e),f.wo(new Qr(Hr.UNAVAILABLE,"The operation could not be completed")))})),g(h,xr.EventType.MESSAGE,(e=>{var n;if(!d){const r=e.data[0];Kr(!!r);const i=r,o=i.error||(null===(n=i[0])||void 0===n?void 0:n.error);if(o){Br(bu,`RPC '${t}' stream ${s} received error:`,o);const e=o.status;let n=function(t){const e=$a[t];if(void 0!==e)return Ka(e)}(e),r=o.message;void 0===n&&(n=Hr.INTERNAL,r="Unknown error status: "+e+" with message "+o.message),d=!0,f.wo(new Qr(n,r)),h.close()}else Br(bu,`RPC '${t}' stream ${s} received:`,r),f._o(r)}})),g(o,kr.STAT_EVENT,(e=>{e.stat===Dr.PROXY?Br(bu,`RPC '${t}' stream ${s} detected buffering proxy`):e.stat===Dr.NOPROXY&&Br(bu,`RPC '${t}' stream ${s} detected no buffering proxy`)})),setTimeout((()=>{f.fo()}),0),f}}function Cu(){return"undefined"!=typeof document?document:null}function Su(t){return new lc(t,!0)}class Iu{constructor(t,e,n=1e3,s=1.5,r=6e4){this.ii=t,this.timerId=e,this.Po=n,this.bo=s,this.Vo=r,this.So=0,this.Do=null,this.Co=Date.now(),this.reset()}reset(){this.So=0}xo(){this.So=this.Vo}No(t){this.cancel();const e=Math.floor(this.So+this.ko()),n=Math.max(0,Date.now()-this.Co),s=Math.max(0,e-n);s>0&&Br("ExponentialBackoff",`Backing off for ${s} ms (base delay: ${this.So} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Do=this.ii.enqueueAfterDelay(this.timerId,s,(()=>(this.Co=Date.now(),t()))),this.So*=this.bo,this.So<this.Po&&(this.So=this.Po),this.So>this.Vo&&(this.So=this.Vo)}Mo(){null!==this.Do&&(this.Do.skipDelay(),this.Do=null)}cancel(){null!==this.Do&&(this.Do.cancel(),this.Do=null)}ko(){return(Math.random()-.5)*this.So}}class Au{constructor(t,e,n,s,r,i,o,a){this.ii=t,this.$o=n,this.Oo=s,this.connection=r,this.authCredentialsProvider=i,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Fo=0,this.Bo=null,this.Lo=null,this.stream=null,this.qo=new Iu(t,e)}Uo(){return 1===this.state||5===this.state||this.Ko()}Ko(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.Go()}async stop(){this.Uo()&&await this.close(0)}Qo(){this.state=0,this.qo.reset()}jo(){this.Ko()&&null===this.Bo&&(this.Bo=this.ii.enqueueAfterDelay(this.$o,6e4,(()=>this.zo())))}Wo(t){this.Ho(),this.stream.send(t)}async zo(){if(this.Ko())return this.close(0)}Ho(){this.Bo&&(this.Bo.cancel(),this.Bo=null)}Jo(){this.Lo&&(this.Lo.cancel(),this.Lo=null)}async close(t,e){this.Ho(),this.Jo(),this.qo.cancel(),this.Fo++,4!==t?this.qo.reset():e&&e.code===Hr.RESOURCE_EXHAUSTED?(jr(e.toString()),jr("Using maximum backoff delay to prevent overloading the backend."),this.qo.xo()):e&&e.code===Hr.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Yo(),this.stream.close(),this.stream=null),this.state=t,await this.listener.ao(e)}Yo(){}auth(){this.state=1;const t=this.Xo(this.Fo),e=this.Fo;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([t,n])=>{this.Fo===e&&this.Zo(t,n)}),(e=>{t((()=>{const t=new Qr(Hr.UNKNOWN,"Fetching auth token failed: "+e.message);return this.tu(t)}))}))}Zo(t,e){const n=this.Xo(this.Fo);this.stream=this.eu(t,e),this.stream.uo((()=>{n((()=>(this.state=2,this.Lo=this.ii.enqueueAfterDelay(this.Oo,1e4,(()=>(this.Ko()&&(this.state=3),Promise.resolve()))),this.listener.uo())))})),this.stream.ao((t=>{n((()=>this.tu(t)))})),this.stream.onMessage((t=>{n((()=>this.onMessage(t)))}))}Go(){this.state=5,this.qo.No((async()=>{this.state=0,this.start()}))}tu(t){return Br("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(4,t)}Xo(t){return e=>{this.ii.enqueueAndForget((()=>this.Fo===t?e():(Br("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class _u extends Au{constructor(t,e,n,s,r,i){super(t,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",e,n,s,i),this.serializer=r}eu(t,e){return this.connection.Ro("Listen",t,e)}onMessage(t){this.qo.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const s=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:zr()}(e.targetChange.targetChangeType||"NO_CHANGE"),r=e.targetChange.targetIds||[],i=function(t,e){return t.useProto3Json?(Kr(void 0===e||"string"==typeof e),Pi.fromBase64String(e||"")):(Kr(void 0===e||e instanceof Uint8Array),Pi.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?Hr.UNKNOWN:Ka(t.code);return new Qr(e,t.message||"")}(o);n=new sc(s,r,i,a||null)}else if("documentChange"in e){e.documentChange;const s=e.documentChange;s.document,s.document.name,s.document.updateTime;const r=Ec(t,s.document.name),i=mc(s.document.updateTime),o=s.document.createTime?mc(s.document.createTime):ui.min(),a=new ao({mapValue:{fields:s.document.fields}}),c=uo.newFoundDocument(r,i,o,a),u=s.targetIds||[],h=s.removedTargetIds||[];n=new ec(u,h,c.key,c)}else if("documentDelete"in e){e.documentDelete;const s=e.documentDelete;s.document;const r=Ec(t,s.document),i=s.readTime?mc(s.readTime):ui.min(),o=uo.newNoDocument(r,i),a=s.removedTargetIds||[];n=new ec([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const s=e.documentRemove;s.document;const r=Ec(t,s.document),i=s.removedTargetIds||[];n=new ec([],i,r,null)}else{if(!("filter"in e))return zr();{e.filter;const t=e.filter;t.targetId;const{count:s=0,unchangedNames:r}=t,i=new qa(s,r),o=t.targetId;n=new nc(o,i)}}return n}(this.serializer,t),n=function(t){if(!("targetChange"in t))return ui.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?ui.min():e.readTime?mc(e.readTime):ui.min()}(t);return this.listener.nu(e,n)}su(t){const e={};e.database=Tc(this.serializer),e.addTarget=function(t,e){let n;const s=e.target;if(n=Po(s)?{documents:Ic(t,s)}:{query:Ac(t,s)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0){n.resumeToken=gc(t,e.resumeToken);const s=dc(t,e.expectedCount);null!==s&&(n.expectedCount=s)}else if(e.snapshotVersion.compareTo(ui.min())>0){n.readTime=fc(t,e.snapshotVersion.toTimestamp());const s=dc(t,e.expectedCount);null!==s&&(n.expectedCount=s)}return n}(this.serializer,t);const n=function(t,e){const n=function(t){switch(t){case"TargetPurposeListen":return null;case"TargetPurposeExistenceFilterMismatch":return"existence-filter-mismatch";case"TargetPurposeExistenceFilterMismatchBloom":return"existence-filter-mismatch-bloom";case"TargetPurposeLimboResolution":return"limbo-document";default:return zr()}}(e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.serializer,t);n&&(e.labels=n),this.Wo(e)}iu(t){const e={};e.database=Tc(this.serializer),e.removeTarget=t,this.Wo(e)}}class ku extends Au{constructor(t,e,n,s,r,i){super(t,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",e,n,s,i),this.serializer=r,this.ru=!1}get ou(){return this.ru}start(){this.ru=!1,this.lastStreamToken=void 0,super.start()}Yo(){this.ru&&this.uu([])}eu(t,e){return this.connection.Ro("Write",t,e)}onMessage(t){if(Kr(!!t.streamToken),this.lastStreamToken=t.streamToken,this.ru){this.qo.reset();const e=function(t,e){return t&&t.length>0?(Kr(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?mc(t.updateTime):mc(e);return n.isEqual(ui.min())&&(n=mc(e)),new Ca(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=mc(t.commitTime);return this.listener.cu(n,e)}return Kr(!t.writeResults||0===t.writeResults.length),this.ru=!0,this.listener.au()}hu(){const t={};t.database=Tc(this.serializer),this.Wo(t)}uu(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof La)n={update:Sc(t,e.key,e.value)};else if(e instanceof Fa)n={delete:wc(t,e.key)};else if(e instanceof Ra)n={update:Sc(t,e.key,e.data),updateMask:Oc(e.fieldMask)};else{if(!(e instanceof Va))return zr();n={verify:wc(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof pa)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof ma)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof va)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Ea)return{fieldPath:e.field.canonicalString(),increment:n.gt};throw zr()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:pc(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:zr()}(t,e.precondition)),n}(this.serializer,t)))};this.Wo(e)}}class Du extends class{}{constructor(t,e,n,s){super(),this.authCredentials=t,this.appCheckCredentials=e,this.connection=n,this.serializer=s,this.lu=!1}fu(){if(this.lu)throw new Qr(Hr.FAILED_PRECONDITION,"The client has already been terminated.")}Io(t,e,n){return this.fu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,r])=>this.connection.Io(t,e,n,s,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Hr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new Qr(Hr.UNKNOWN,t.toString())}))}vo(t,e,n,s){return this.fu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([r,i])=>this.connection.vo(t,e,n,r,i,s))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Hr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new Qr(Hr.UNKNOWN,t.toString())}))}terminate(){this.lu=!0}}class Nu{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.wu=0,this._u=null,this.mu=!0}gu(){0===this.wu&&(this.yu("Unknown"),this._u=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this._u=null,this.pu("Backend didn't respond within 10 seconds."),this.yu("Offline"),Promise.resolve()))))}Iu(t){"Online"===this.state?this.yu("Unknown"):(this.wu++,this.wu>=1&&(this.Tu(),this.pu(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.yu("Offline")))}set(t){this.Tu(),this.wu=0,"Online"===t&&(this.mu=!1),this.yu(t)}yu(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}pu(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.mu?(jr(e),this.mu=!1):Br("OnlineStateTracker",e)}Tu(){null!==this._u&&(this._u.cancel(),this._u=null)}}class xu{constructor(t,e,n,s,r){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Eu=[],this.Au=new Map,this.vu=new Set,this.Ru=[],this.Pu=r,this.Pu.Yr((t=>{n.enqueueAndForget((async()=>{Bu(this)&&(Br("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=Gr(t);e.vu.add(4),await Ru(e),e.bu.set("Unknown"),e.vu.delete(4),await Lu(e)}(this))}))})),this.bu=new Nu(n,s)}}async function Lu(t){if(Bu(t))for(const e of t.Ru)await e(!0)}async function Ru(t){for(const e of t.Ru)await e(!1)}function Mu(t,e){const n=Gr(t);n.Au.has(e.targetId)||(n.Au.set(e.targetId,e),Uu(n)?Vu(n):sh(n).Ko()&&Pu(n,e))}function Ou(t,e){const n=Gr(t),s=sh(n);n.Au.delete(e),s.Ko()&&Fu(n,e),0===n.Au.size&&(s.Ko()?s.jo():Bu(n)&&n.bu.set("Unknown"))}function Pu(t,e){if(t.Vu.qt(e.targetId),e.resumeToken.approximateByteSize()>0||e.snapshotVersion.compareTo(ui.min())>0){const n=t.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;e=e.withExpectedCount(n)}sh(t).su(e)}function Fu(t,e){t.Vu.qt(e),sh(t).iu(e)}function Vu(t){t.Vu=new ic({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),le:e=>t.Au.get(e)||null,ue:()=>t.datastore.serializer.databaseId}),sh(t).start(),t.bu.gu()}function Uu(t){return Bu(t)&&!sh(t).Uo()&&t.Au.size>0}function Bu(t){return 0===Gr(t).vu.size}function ju(t){t.Vu=void 0}async function qu(t){t.Au.forEach(((e,n)=>{Pu(t,e)}))}async function $u(t,e){ju(t),Uu(t)?(t.bu.Iu(e),Vu(t)):t.bu.set("Unknown")}async function zu(t,e,n){if(t.bu.set("Online"),e instanceof sc&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const s of e.targetIds)t.Au.has(s)&&(await t.remoteSyncer.rejectListen(s,n),t.Au.delete(s),t.Vu.removeTarget(s))}(t,e)}catch(n){Br("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await Ku(t,n)}else if(e instanceof ec?t.Vu.Ht(e):e instanceof nc?t.Vu.ne(e):t.Vu.Xt(e),!n.isEqual(ui.min()))try{const e=await uu(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Vu.ce(e);return n.targetChanges.forEach(((n,s)=>{if(n.resumeToken.approximateByteSize()>0){const r=t.Au.get(s);r&&t.Au.set(s,r.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach(((e,n)=>{const s=t.Au.get(e);if(!s)return;t.Au.set(e,s.withResumeToken(Pi.EMPTY_BYTE_STRING,s.snapshotVersion)),Fu(t,e);const r=new Fc(s.target,e,n,s.sequenceNumber);Pu(t,r)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){Br("RemoteStore","Failed to raise snapshot:",e),await Ku(t,e)}}async function Ku(t,e,n){if(!Ti(e))throw e;t.vu.add(1),await Ru(t),t.bu.set("Offline"),n||(n=()=>uu(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{Br("RemoteStore","Retrying IndexedDB access"),await n(),t.vu.delete(1),await Lu(t)}))}function Gu(t,e){return e().catch((n=>Ku(t,n,e)))}async function Hu(t){const e=Gr(t),n=rh(e);let s=e.Eu.length>0?e.Eu[e.Eu.length-1].batchId:-1;for(;Qu(e);)try{const t=await hu(e.localStore,s);if(null===t){0===e.Eu.length&&n.jo();break}s=t.batchId,Wu(e,t)}catch(t){await Ku(e,t)}Xu(e)&&Yu(e)}function Qu(t){return Bu(t)&&t.Eu.length<10}function Wu(t,e){t.Eu.push(e);const n=rh(t);n.Ko()&&n.ou&&n.uu(e.mutations)}function Xu(t){return Bu(t)&&!rh(t).Uo()&&t.Eu.length>0}function Yu(t){rh(t).start()}async function Ju(t){rh(t).hu()}async function Zu(t){const e=rh(t);for(const n of t.Eu)e.uu(n.mutations)}async function th(t,e,n){const s=t.Eu.shift(),r=Ba.from(s,e,n);await Gu(t,(()=>t.remoteSyncer.applySuccessfulWrite(r))),await Hu(t)}async function eh(t,e){e&&rh(t).ou&&await async function(t,e){if(function(t){switch(t){default:return zr();case Hr.CANCELLED:case Hr.UNKNOWN:case Hr.DEADLINE_EXCEEDED:case Hr.RESOURCE_EXHAUSTED:case Hr.INTERNAL:case Hr.UNAVAILABLE:case Hr.UNAUTHENTICATED:return!1;case Hr.INVALID_ARGUMENT:case Hr.NOT_FOUND:case Hr.ALREADY_EXISTS:case Hr.PERMISSION_DENIED:case Hr.FAILED_PRECONDITION:case Hr.ABORTED:case Hr.OUT_OF_RANGE:case Hr.UNIMPLEMENTED:case Hr.DATA_LOSS:return!0}}(n=e.code)&&n!==Hr.ABORTED){const n=t.Eu.shift();rh(t).Qo(),await Gu(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await Hu(t)}var n}(t,e),Xu(t)&&Yu(t)}async function nh(t,e){const n=Gr(t);n.asyncQueue.verifyOperationInProgress(),Br("RemoteStore","RemoteStore received new credentials");const s=Bu(n);n.vu.add(3),await Ru(n),s&&n.bu.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.vu.delete(3),await Lu(n)}function sh(t){return t.Su||(t.Su=function(t,e,n){const s=Gr(t);return s.fu(),new _u(e,s.connection,s.authCredentials,s.appCheckCredentials,s.serializer,n)}(t.datastore,t.asyncQueue,{uo:qu.bind(null,t),ao:$u.bind(null,t),nu:zu.bind(null,t)}),t.Ru.push((async e=>{e?(t.Su.Qo(),Uu(t)?Vu(t):t.bu.set("Unknown")):(await t.Su.stop(),ju(t))}))),t.Su}function rh(t){return t.Du||(t.Du=function(t,e,n){const s=Gr(t);return s.fu(),new ku(e,s.connection,s.authCredentials,s.appCheckCredentials,s.serializer,n)}(t.datastore,t.asyncQueue,{uo:Ju.bind(null,t),ao:eh.bind(null,t),au:Zu.bind(null,t),cu:th.bind(null,t)}),t.Ru.push((async e=>{e?(t.Du.Qo(),await Hu(t)):(await t.Du.stop(),t.Eu.length>0&&(Br("RemoteStore",`Stopping write stream with ${t.Eu.length} pending writes`),t.Eu=[]))}))),t.Du}class ih{constructor(t,e,n,s,r){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=s,this.removalCallback=r,this.deferred=new Wr,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,s,r){const i=Date.now()+n,o=new ih(t,e,i,s,r);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new Qr(Hr.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function oh(t,e){if(jr("AsyncQueue",`${e}: ${t}`),Ti(t))return new Qr(Hr.UNAVAILABLE,`${e}: ${t}`);throw t}class ah{constructor(t){this.comparator=t?(e,n)=>t(e,n)||gi.comparator(e.key,n.key):(t,e)=>gi.comparator(t.key,e.key),this.keyedMap=Zo(),this.sortedSet=new Di(this.comparator)}static emptySet(t){return new ah(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof ah))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(!t.isEqual(s))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new ah;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class ch{constructor(){this.Cu=new Di(gi.comparator)}track(t){const e=t.doc.key,n=this.Cu.get(e);n?0!==t.type&&3===n.type?this.Cu=this.Cu.insert(e,t):3===t.type&&1!==n.type?this.Cu=this.Cu.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Cu=this.Cu.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Cu=this.Cu.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Cu=this.Cu.remove(e):1===t.type&&2===n.type?this.Cu=this.Cu.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Cu=this.Cu.insert(e,{type:2,doc:t.doc}):zr():this.Cu=this.Cu.insert(e,t)}xu(){const t=[];return this.Cu.inorderTraversal(((e,n)=>{t.push(n)})),t}}class uh{constructor(t,e,n,s,r,i,o,a,c){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=s,this.mutatedKeys=r,this.fromCache=i,this.syncStateChanged=o,this.excludesMetadataChanges=a,this.hasCachedResults=c}static fromInitialDocuments(t,e,n,s,r){const i=[];return e.forEach((t=>{i.push({type:0,doc:t})})),new uh(t,e,ah.emptySet(e),i,n,s,!0,!1,r)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.hasCachedResults===t.hasCachedResults&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&$o(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class hh{constructor(){this.Nu=void 0,this.listeners=[]}}class lh{constructor(){this.queries=new Wo((t=>zo(t)),$o),this.onlineState="Unknown",this.ku=new Set}}async function dh(t,e){const n=Gr(t),s=e.query;let r=!1,i=n.queries.get(s);if(i||(r=!0,i=new hh),r)try{i.Nu=await n.onListen(s)}catch(t){const n=oh(t,`Initialization of query '${Ko(e.query)}' failed`);return void e.onError(n)}n.queries.set(s,i),i.listeners.push(e),e.Mu(n.onlineState),i.Nu&&e.$u(i.Nu)&&mh(n)}async function fh(t,e){const n=Gr(t),s=e.query;let r=!1;const i=n.queries.get(s);if(i){const t=i.listeners.indexOf(e);t>=0&&(i.listeners.splice(t,1),r=0===i.listeners.length)}if(r)return n.queries.delete(s),n.onUnlisten(s)}function gh(t,e){const n=Gr(t);let s=!1;for(const t of e){const e=t.query,r=n.queries.get(e);if(r){for(const e of r.listeners)e.$u(t)&&(s=!0);r.Nu=t}}s&&mh(n)}function ph(t,e,n){const s=Gr(t),r=s.queries.get(e);if(r)for(const t of r.listeners)t.onError(n);s.queries.delete(e)}function mh(t){t.ku.forEach((t=>{t.next()}))}class yh{constructor(t,e,n){this.query=t,this.Ou=e,this.Fu=!1,this.Bu=null,this.onlineState="Unknown",this.options=n||{}}$u(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new uh(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0,t.hasCachedResults)}let e=!1;return this.Fu?this.Lu(t)&&(this.Ou.next(t),e=!0):this.qu(t,this.onlineState)&&(this.Uu(t),e=!0),this.Bu=t,e}onError(t){this.Ou.error(t)}Mu(t){this.onlineState=t;let e=!1;return this.Bu&&!this.Fu&&this.qu(this.Bu,t)&&(this.Uu(this.Bu),e=!0),e}qu(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return(!this.options.Ku||!n)&&(!t.docs.isEmpty()||t.hasCachedResults||"Offline"===e)}Lu(t){if(t.docChanges.length>0)return!0;const e=this.Bu&&this.Bu.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}Uu(t){t=uh.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache,t.hasCachedResults),this.Fu=!0,this.Ou.next(t)}}class vh{constructor(t){this.key=t}}class wh{constructor(t){this.key=t}}class Eh{constructor(t,e){this.query=t,this.Yu=e,this.Xu=null,this.hasCachedResults=!1,this.current=!1,this.Zu=oa(),this.mutatedKeys=oa(),this.tc=Ho(t),this.ec=new ah(this.tc)}get nc(){return this.Yu}sc(t,e){const n=e?e.ic:new ch,s=e?e.ec:this.ec;let r=e?e.mutatedKeys:this.mutatedKeys,i=s,o=!1;const a="F"===this.query.limitType&&s.size===this.query.limit?s.last():null,c="L"===this.query.limitType&&s.size===this.query.limit?s.first():null;if(t.inorderTraversal(((t,e)=>{const u=s.get(t),h=Go(this.query,e)?e:null,l=!!u&&this.mutatedKeys.has(u.key),d=!!h&&(h.hasLocalMutations||this.mutatedKeys.has(h.key)&&h.hasCommittedMutations);let f=!1;u&&h?u.data.isEqual(h.data)?l!==d&&(n.track({type:3,doc:h}),f=!0):this.rc(u,h)||(n.track({type:2,doc:h}),f=!0,(a&&this.tc(h,a)>0||c&&this.tc(h,c)<0)&&(o=!0)):!u&&h?(n.track({type:0,doc:h}),f=!0):u&&!h&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(h?(i=i.add(h),r=d?r.add(t):r.delete(t)):(i=i.delete(t),r=r.delete(t)))})),null!==this.query.limit)for(;i.size>this.query.limit;){const t="F"===this.query.limitType?i.last():i.first();i=i.delete(t.key),r=r.delete(t.key),n.track({type:1,doc:t})}return{ec:i,ic:n,zi:o,mutatedKeys:r}}rc(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const s=this.ec;this.ec=t.ec,this.mutatedKeys=t.mutatedKeys;const r=t.ic.xu();r.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return zr()}};return n(t)-n(e)}(t.type,e.type)||this.tc(t.doc,e.doc))),this.oc(n);const i=e?this.uc():[],o=0===this.Zu.size&&this.current?1:0,a=o!==this.Xu;return this.Xu=o,0!==r.length||a?{snapshot:new uh(this.query,t.ec,s,r,t.mutatedKeys,0===o,a,!1,!!n&&n.resumeToken.approximateByteSize()>0),cc:i}:{cc:i}}Mu(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({ec:this.ec,ic:new ch,mutatedKeys:this.mutatedKeys,zi:!1},!1)):{cc:[]}}ac(t){return!this.Yu.has(t)&&!!this.ec.has(t)&&!this.ec.get(t).hasLocalMutations}oc(t){t&&(t.addedDocuments.forEach((t=>this.Yu=this.Yu.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this.Yu=this.Yu.delete(t))),this.current=t.current)}uc(){if(!this.current)return[];const t=this.Zu;this.Zu=oa(),this.ec.forEach((t=>{this.ac(t.key)&&(this.Zu=this.Zu.add(t.key))}));const e=[];return t.forEach((t=>{this.Zu.has(t)||e.push(new wh(t))})),this.Zu.forEach((n=>{t.has(n)||e.push(new vh(n))})),e}hc(t){this.Yu=t.ir,this.Zu=oa();const e=this.sc(t.documents);return this.applyChanges(e,!0)}lc(){return uh.fromInitialDocuments(this.query,this.ec,this.mutatedKeys,0===this.Xu,this.hasCachedResults)}}class bh{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Th{constructor(t){this.key=t,this.fc=!1}}class Ch{constructor(t,e,n,s,r,i){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=s,this.currentUser=r,this.maxConcurrentLimboResolutions=i,this.dc={},this.wc=new Wo((t=>zo(t)),$o),this._c=new Map,this.mc=new Set,this.gc=new Di(gi.comparator),this.yc=new Map,this.Ic=new Xc,this.Tc={},this.Ec=new Map,this.Ac=zc.Mn(),this.onlineState="Unknown",this.vc=void 0}get isPrimaryClient(){return!0===this.vc}}async function Sh(t,e){const n=function(t){const e=Gr(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Ah.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Bh.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=kh.bind(null,e),e.dc.nu=gh.bind(null,e.eventManager),e.dc.Pc=ph.bind(null,e.eventManager),e}(t);let s,r;const i=n.wc.get(e);if(i)s=i.targetId,n.sharedClientState.addLocalQueryTarget(s),r=i.view.lc();else{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let s;return n.Bs.getTargetData(t,e).next((r=>r?(s=r,bi.resolve(s)):n.Bs.allocateTargetId(t).next((r=>(s=new Fc(e,r,"TargetPurposeListen",t.currentSequenceNumber),n.Bs.addTargetData(t,s).next((()=>s)))))))})).then((t=>{const s=n.Ji.get(t.targetId);return(null===s||t.snapshotVersion.compareTo(s.snapshotVersion)>0)&&(n.Ji=n.Ji.insert(t.targetId,t),n.Yi.set(e,t.targetId)),t}))}(n.localStore,jo(e)),i=n.sharedClientState.addLocalQueryTarget(t.targetId);s=t.targetId,r=await async function(t,e,n,s,r){t.Rc=(e,n,s)=>async function(t,e,n,s){let r=e.view.sc(n);r.zi&&(r=await du(t.localStore,e.query,!1).then((({documents:t})=>e.view.sc(t,r))));const i=s&&s.targetChanges.get(e.targetId),o=e.view.applyChanges(r,t.isPrimaryClient,i);return Oh(t,e.targetId,o.cc),o.snapshot}(t,e,n,s);const i=await du(t.localStore,e,!0),o=new Eh(e,i.ir),a=o.sc(i.documents),c=tc.createSynthesizedTargetChangeForCurrentChange(n,s&&"Offline"!==t.onlineState,r),u=o.applyChanges(a,t.isPrimaryClient,c);Oh(t,n,u.cc);const h=new bh(e,n,o);return t.wc.set(e,h),t._c.has(n)?t._c.get(n).push(e):t._c.set(n,[e]),u.snapshot}(n,e,s,"current"===i,t.resumeToken),n.isPrimaryClient&&Mu(n.remoteStore,t)}return r}async function Ih(t,e){const n=Gr(t),s=n.wc.get(e),r=n._c.get(s.targetId);if(r.length>1)return n._c.set(s.targetId,r.filter((t=>!$o(t,e)))),void n.wc.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(s.targetId),n.sharedClientState.isActiveQueryTarget(s.targetId)||await lu(n.localStore,s.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(s.targetId),Ou(n.remoteStore,s.targetId),Rh(n,s.targetId)})).catch(Ei)):(Rh(n,s.targetId),await lu(n.localStore,s.targetId,!0))}async function Ah(t,e){const n=Gr(t);try{const t=await function(t,e){const n=Gr(t),s=e.snapshotVersion;let r=n.Ji;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const i=n.Zi.newChangeBuffer({trackRemovals:!0});r=n.Ji;const o=[];e.targetChanges.forEach(((i,a)=>{const c=r.get(a);if(!c)return;o.push(n.Bs.removeMatchingKeys(t,i.removedDocuments,a).next((()=>n.Bs.addMatchingKeys(t,i.addedDocuments,a))));let u=c.withSequenceNumber(t.currentSequenceNumber);null!==e.targetMismatches.get(a)?u=u.withResumeToken(Pi.EMPTY_BYTE_STRING,ui.min()).withLastLimboFreeSnapshotVersion(ui.min()):i.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(i.resumeToken,s)),r=r.insert(a,u),function(t,e,n){return 0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,u,i)&&o.push(n.Bs.updateTargetData(t,u))}));let a=Yo(),c=oa();if(e.documentUpdates.forEach((s=>{e.resolvedLimboDocuments.has(s)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,s))})),o.push(function(t,e,n){let s=oa(),r=oa();return n.forEach((t=>s=s.add(t))),e.getEntries(t,s).next((t=>{let s=Yo();return n.forEach(((n,i)=>{const o=t.get(n);i.isFoundDocument()!==o.isFoundDocument()&&(r=r.add(n)),i.isNoDocument()&&i.version.isEqual(ui.min())?(e.removeEntry(n,i.readTime),s=s.insert(n,i)):!o.isValidDocument()||i.version.compareTo(o.version)>0||0===i.version.compareTo(o.version)&&o.hasPendingWrites?(e.addEntry(i),s=s.insert(n,i)):Br("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",i.version)})),{nr:s,sr:r}}))}(t,i,e.documentUpdates).next((t=>{a=t.nr,c=t.sr}))),!s.isEqual(ui.min())){const e=n.Bs.getLastRemoteSnapshotVersion(t).next((e=>n.Bs.setTargetsMetadata(t,t.currentSequenceNumber,s)));o.push(e)}return bi.waitFor(o).next((()=>i.apply(t))).next((()=>n.localDocuments.getLocalViewOfDocuments(t,a,c))).next((()=>a))})).then((t=>(n.Ji=r,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const s=n.yc.get(e);s&&(Kr(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?s.fc=!0:t.modifiedDocuments.size>0?Kr(s.fc):t.removedDocuments.size>0&&(Kr(s.fc),s.fc=!1))})),await Vh(n,t,e)}catch(t){await Ei(t)}}function _h(t,e,n){const s=Gr(t);if(s.isPrimaryClient&&0===n||!s.isPrimaryClient&&1===n){const t=[];s.wc.forEach(((n,s)=>{const r=s.view.Mu(e);r.snapshot&&t.push(r.snapshot)})),function(t,e){const n=Gr(t);n.onlineState=e;let s=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.Mu(e)&&(s=!0)})),s&&mh(n)}(s.eventManager,e),t.length&&s.dc.nu(t),s.onlineState=e,s.isPrimaryClient&&s.sharedClientState.setOnlineState(e)}}async function kh(t,e,n){const s=Gr(t);s.sharedClientState.updateQueryState(e,"rejected",n);const r=s.yc.get(e),i=r&&r.key;if(i){let t=new Di(gi.comparator);t=t.insert(i,uo.newNoDocument(i,ui.min()));const n=oa().add(i),r=new Za(ui.min(),new Map,new Di(oi),t,n);await Ah(s,r),s.gc=s.gc.remove(i),s.yc.delete(e),Fh(s)}else await lu(s.localStore,e,!1).then((()=>Rh(s,e,n))).catch(Ei)}async function Dh(t,e){const n=Gr(t),s=e.batch.batchId;try{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const s=e.batch.keys(),r=n.Zi.newChangeBuffer({trackRemovals:!0});return function(t,e,n,s){const r=n.batch,i=r.keys();let o=bi.resolve();return i.forEach((t=>{o=o.next((()=>s.getEntry(e,t))).next((e=>{const i=n.docVersions.get(t);Kr(null!==i),e.version.compareTo(i)<0&&(r.applyToRemoteDocument(e,n),e.isValidDocument()&&(e.setReadTime(n.commitVersion),s.addEntry(e)))}))})),o.next((()=>t.mutationQueue.removeMutationBatch(e,r)))}(n,t,e,r).next((()=>r.apply(t))).next((()=>n.mutationQueue.performConsistencyCheck(t))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(t,s,e.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t,function(t){let e=oa();for(let n=0;n<t.mutationResults.length;++n)t.mutationResults[n].transformResults.length>0&&(e=e.add(t.batch.mutations[n].key));return e}(e)))).next((()=>n.localDocuments.getDocuments(t,s)))}))}(n.localStore,e);Lh(n,s,null),xh(n,s),n.sharedClientState.updateMutationState(s,"acknowledged"),await Vh(n,t)}catch(t){await Ei(t)}}async function Nh(t,e,n){const s=Gr(t);try{const t=await function(t,e){const n=Gr(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let s;return n.mutationQueue.lookupMutationBatch(t,e).next((e=>(Kr(null!==e),s=e.keys(),n.mutationQueue.removeMutationBatch(t,e)))).next((()=>n.mutationQueue.performConsistencyCheck(t))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(t,s,e))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t,s))).next((()=>n.localDocuments.getDocuments(t,s)))}))}(s.localStore,e);Lh(s,e,n),xh(s,e),s.sharedClientState.updateMutationState(e,"rejected",n),await Vh(s,t)}catch(n){await Ei(n)}}function xh(t,e){(t.Ec.get(e)||[]).forEach((t=>{t.resolve()})),t.Ec.delete(e)}function Lh(t,e,n){const s=Gr(t);let r=s.Tc[s.currentUser.toKey()];if(r){const t=r.get(e);t&&(n?t.reject(n):t.resolve(),r=r.remove(e)),s.Tc[s.currentUser.toKey()]=r}}function Rh(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const s of t._c.get(e))t.wc.delete(s),n&&t.dc.Pc(s,n);t._c.delete(e),t.isPrimaryClient&&t.Ic.Is(e).forEach((e=>{t.Ic.containsKey(e)||Mh(t,e)}))}function Mh(t,e){t.mc.delete(e.path.canonicalString());const n=t.gc.get(e);null!==n&&(Ou(t.remoteStore,n),t.gc=t.gc.remove(e),t.yc.delete(n),Fh(t))}function Oh(t,e,n){for(const s of n)s instanceof vh?(t.Ic.addReference(s.key,e),Ph(t,s)):s instanceof wh?(Br("SyncEngine","Document no longer in limbo: "+s.key),t.Ic.removeReference(s.key,e),t.Ic.containsKey(s.key)||Mh(t,s.key)):zr()}function Ph(t,e){const n=e.key,s=n.path.canonicalString();t.gc.get(n)||t.mc.has(s)||(Br("SyncEngine","New document in limbo: "+n),t.mc.add(s),Fh(t))}function Fh(t){for(;t.mc.size>0&&t.gc.size<t.maxConcurrentLimboResolutions;){const e=t.mc.values().next().value;t.mc.delete(e);const n=new gi(li.fromString(e)),s=t.Ac.next();t.yc.set(s,new Th(n)),t.gc=t.gc.insert(n,s),Mu(t.remoteStore,new Fc(jo(Vo(n.path)),s,"TargetPurposeLimboResolution",Ci.ct))}}async function Vh(t,e,n){const s=Gr(t),r=[],i=[],o=[];s.wc.isEmpty()||(s.wc.forEach(((t,a)=>{o.push(s.Rc(a,e,n).then((t=>{if((t||n)&&s.isPrimaryClient&&s.sharedClientState.updateQueryState(a.targetId,(null==t?void 0:t.fromCache)?"not-current":"current"),t){r.push(t);const e=iu.Li(a.targetId,t);i.push(e)}})))})),await Promise.all(o),s.dc.nu(r),await async function(t,e){const n=Gr(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>bi.forEach(e,(e=>bi.forEach(e.Fi,(s=>n.persistence.referenceDelegate.addReference(t,e.targetId,s))).next((()=>bi.forEach(e.Bi,(s=>n.persistence.referenceDelegate.removeReference(t,e.targetId,s)))))))))}catch(t){if(!Ti(t))throw t;Br("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Ji.get(e),s=t.snapshotVersion,r=t.withLastLimboFreeSnapshotVersion(s);n.Ji=n.Ji.insert(e,r)}}}(s.localStore,i))}async function Uh(t,e){const n=Gr(t);if(!n.currentUser.isEqual(e)){Br("SyncEngine","User change. New user:",e.toKey());const t=await cu(n.localStore,e);n.currentUser=e,function(t,e){t.Ec.forEach((t=>{t.forEach((t=>{t.reject(new Qr(Hr.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Ec.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Vh(n,t.er)}}function Bh(t,e){const n=Gr(t),s=n.yc.get(e);if(s&&s.fc)return oa().add(s.key);{let t=oa();const s=n._c.get(e);if(!s)return t;for(const e of s){const s=n.wc.get(e);t=t.unionWith(s.view.nc)}return t}}function jh(t){const e=Gr(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=Dh.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=Nh.bind(null,e),e}class qh{constructor(){this.synchronizeTabs=!1}async initialize(t){this.serializer=Su(t.databaseInfo.databaseId),this.sharedClientState=this.createSharedClientState(t),this.persistence=this.createPersistence(t),await this.persistence.start(),this.localStore=this.createLocalStore(t),this.gcScheduler=this.createGarbageCollectionScheduler(t,this.localStore),this.indexBackfillerScheduler=this.createIndexBackfillerScheduler(t,this.localStore)}createGarbageCollectionScheduler(t,e){return null}createIndexBackfillerScheduler(t,e){return null}createLocalStore(t){return function(t,e,n,s){return new au(t,e,n,s)}(this.persistence,new ou,t.initialUser,this.serializer)}createPersistence(t){return new nu(ru.zs,this.serializer)}createSharedClientState(t){return new gu}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class $h{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>_h(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Uh.bind(null,this.syncEngine),await async function(t,e){const n=Gr(t);e?(n.vu.delete(2),await Lu(n)):e||(n.vu.add(2),await Ru(n),n.bu.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new lh}createDatastore(t){const e=Su(t.databaseInfo.databaseId),n=(s=t.databaseInfo,new Tu(s));var s;return function(t,e,n,s){return new Du(t,e,n,s)}(t.authCredentials,t.appCheckCredentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,s=t.asyncQueue,r=t=>_h(this.syncEngine,t,0),i=mu.D()?new mu:new pu,new xu(e,n,s,r,i);var e,n,s,r,i}createSyncEngine(t,e){return function(t,e,n,s,r,i,o){const a=new Ch(t,e,n,s,r,i);return o&&(a.vc=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=Gr(t);Br("RemoteStore","RemoteStore shutting down."),e.vu.add(5),await Ru(e),e.Pu.shutdown(),e.bu.set("Unknown")}(this.remoteStore)}}class zh{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.Sc(this.observer.next,t)}error(t){this.observer.error?this.Sc(this.observer.error,t):jr("Uncaught Error in snapshot listener:",t.toString())}Dc(){this.muted=!0}Sc(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class Kh{constructor(t,e,n,s){this.authCredentials=t,this.appCheckCredentials=e,this.asyncQueue=n,this.databaseInfo=s,this.user=Pr.UNAUTHENTICATED,this.clientId=ii.A(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async t=>{Br("FirestoreClient","Received user=",t.uid),await this.authCredentialListener(t),this.user=t})),this.appCheckCredentials.start(n,(t=>(Br("FirestoreClient","Received new app check token=",t),this.appCheckCredentialListener(t,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.authCredentialListener=t}setAppCheckTokenChangeListener(t){this.appCheckCredentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new Qr(Hr.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new Wr;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this._onlineComponents&&await this._onlineComponents.terminate(),this._offlineComponents&&await this._offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),t.resolve()}catch(e){const n=oh(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function Gh(t,e){t.asyncQueue.verifyOperationInProgress(),Br("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let s=n.initialUser;t.setCredentialChangeListener((async t=>{s.isEqual(t)||(await cu(e.localStore,t),s=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t._offlineComponents=e}async function Hh(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){if(!t._offlineComponents)if(t._uninitializedComponentsProvider){Br("FirestoreClient","Using user provided OfflineComponentProvider");try{await Gh(t,t._uninitializedComponentsProvider._offline)}catch(e){const n=e;if(!function(t){return"FirebaseError"===t.name?t.code===Hr.FAILED_PRECONDITION||t.code===Hr.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(n))throw n;qr("Error using user provided cache. Falling back to memory cache: "+n),await Gh(t,new qh)}}else Br("FirestoreClient","Using default OfflineComponentProvider"),await Gh(t,new qh);return t._offlineComponents}(t);Br("FirestoreClient","Initializing OnlineComponentProvider");const s=await t.getConfiguration();await e.initialize(n,s),t.setCredentialChangeListener((t=>nh(e.remoteStore,t))),t.setAppCheckTokenChangeListener(((t,n)=>nh(e.remoteStore,n))),t._onlineComponents=e}async function Qh(t){return t._onlineComponents||(t._uninitializedComponentsProvider?(Br("FirestoreClient","Using user provided OnlineComponentProvider"),await Hh(t,t._uninitializedComponentsProvider._online)):(Br("FirestoreClient","Using default OnlineComponentProvider"),await Hh(t,new $h))),t._onlineComponents}async function Wh(t){const e=await Qh(t),n=e.eventManager;return n.onListen=Sh.bind(null,e.syncEngine),n.onUnlisten=Ih.bind(null,e.syncEngine),n}function Xh(t){const e={};return void 0!==t.timeoutSeconds&&(e.timeoutSeconds=t.timeoutSeconds),e}const Yh=new Map;function Jh(t,e,n){if(!n)throw new Qr(Hr.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function Zh(t){if(!gi.isDocumentKey(t))throw new Qr(Hr.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function tl(t){if(gi.isDocumentKey(t))throw new Qr(Hr.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function el(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){return t.constructor?t.constructor.name:null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":zr()}function nl(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new Qr(Hr.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=el(t);throw new Qr(Hr.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class sl{constructor(t){var e,n;if(void 0===t.host){if(void 0!==t.ssl)throw new Qr(Hr.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,this.cache=t.localCache,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Qr(Hr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}(function(t,e,n,s){if(!0===e&&!0===s)throw new Qr(Hr.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")})(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling),this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalForceLongPolling?this.experimentalAutoDetectLongPolling=!1:void 0===t.experimentalAutoDetectLongPolling?this.experimentalAutoDetectLongPolling=!0:this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.experimentalLongPollingOptions=Xh(null!==(n=t.experimentalLongPollingOptions)&&void 0!==n?n:{}),function(t){if(void 0!==t.timeoutSeconds){if(isNaN(t.timeoutSeconds))throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);if(t.timeoutSeconds<5)throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);if(t.timeoutSeconds>30)throw new Qr(Hr.INVALID_ARGUMENT,`invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`)}}(this.experimentalLongPollingOptions),this.useFetchStreams=!!t.useFetchStreams}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&(e=this.experimentalLongPollingOptions,n=t.experimentalLongPollingOptions,e.timeoutSeconds===n.timeoutSeconds)&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams;var e,n}}class rl{constructor(t,e,n,s){this._authCredentials=t,this._appCheckCredentials=e,this._databaseId=n,this._app=s,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new sl({}),this._settingsFrozen=!1}get app(){if(!this._app)throw new Qr(Hr.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new Qr(Hr.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new sl(t),void 0!==t.credentials&&(this._authCredentials=function(t){if(!t)return new Yr;switch(t.type){case"firstParty":return new ei(t.sessionIndex||"0",t.iamToken||null,t.authTokenFactory||null);case"provider":return t.client;default:throw new Qr(Hr.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=Yh.get(t);e&&(Br("ComponentProvider","Removing Datastore"),Yh.delete(t),e.terminate())}(this),Promise.resolve()}}class il{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new al(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new il(this.firestore,t,this._key)}}class ol{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new ol(this.firestore,t,this._query)}}class al extends ol{constructor(t,e,n){super(t,e,Vo(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new il(this.firestore,null,new gi(t))}withConverter(t){return new al(this.firestore,t,this._path)}}function cl(t,e,...n){if(t=p(t),Jh("collection","path",e),t instanceof rl){const s=li.fromString(e,...n);return tl(s),new al(t,null,s)}{if(!(t instanceof il||t instanceof al))throw new Qr(Hr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(li.fromString(e,...n));return tl(s),new al(t.firestore,null,s)}}function ul(t,e,...n){if(t=p(t),1===arguments.length&&(e=ii.A()),Jh("doc","path",e),t instanceof rl){const s=li.fromString(e,...n);return Zh(s),new il(t,null,new gi(s))}{if(!(t instanceof il||t instanceof al))throw new Qr(Hr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(li.fromString(e,...n));return Zh(s),new il(t.firestore,t instanceof al?t.converter:null,new gi(s))}}class hl{constructor(){this.Gc=Promise.resolve(),this.Qc=[],this.jc=!1,this.zc=[],this.Wc=null,this.Hc=!1,this.Jc=!1,this.Yc=[],this.qo=new Iu(this,"async_queue_retry"),this.Xc=()=>{const t=Cu();t&&Br("AsyncQueue","Visibility state changed to "+t.visibilityState),this.qo.Mo()};const t=Cu();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Xc)}get isShuttingDown(){return this.jc}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Zc(),this.ta(t)}enterRestrictedMode(t){if(!this.jc){this.jc=!0,this.Jc=t||!1;const e=Cu();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Xc)}}enqueue(t){if(this.Zc(),this.jc)return new Promise((()=>{}));const e=new Wr;return this.ta((()=>this.jc&&this.Jc?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.Qc.push(t),this.ea())))}async ea(){if(0!==this.Qc.length){try{await this.Qc[0](),this.Qc.shift(),this.qo.reset()}catch(t){if(!Ti(t))throw t;Br("AsyncQueue","Operation failed with retryable error: "+t)}this.Qc.length>0&&this.qo.No((()=>this.ea()))}}ta(t){const e=this.Gc.then((()=>(this.Hc=!0,t().catch((t=>{this.Wc=t,this.Hc=!1;const e=function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t);throw jr("INTERNAL UNHANDLED ERROR: ",e),t})).then((t=>(this.Hc=!1,t))))));return this.Gc=e,e}enqueueAfterDelay(t,e,n){this.Zc(),this.Yc.indexOf(t)>-1&&(e=0);const s=ih.createAndSchedule(this,t,e,n,(t=>this.na(t)));return this.zc.push(s),s}Zc(){this.Wc&&zr()}verifyOperationInProgress(){}async sa(){let t;do{t=this.Gc,await t}while(t!==this.Gc)}ia(t){for(const e of this.zc)if(e.timerId===t)return!0;return!1}ra(t){return this.sa().then((()=>{this.zc.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this.zc)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.sa()}))}oa(t){this.Yc.push(t)}na(t){const e=this.zc.indexOf(t);this.zc.splice(e,1)}}class ll extends rl{constructor(t,e,n,s){super(t,e,n,s),this.type="firestore",this._queue=new hl,this._persistenceKey=(null==s?void 0:s.name)||"[DEFAULT]"}_terminate(){return this._firestoreClient||fl(this),this._firestoreClient.terminate()}}function dl(t){return t._firestoreClient||fl(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function fl(t){var e,n,s;const r=t._freezeSettings(),i=function(t,e,n,s){return new zi(t,e,n,s.host,s.ssl,s.experimentalForceLongPolling,s.experimentalAutoDetectLongPolling,Xh(s.experimentalLongPollingOptions),s.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,r);t._firestoreClient=new Kh(t._authCredentials,t._appCheckCredentials,t._queue,i),(null===(n=r.cache)||void 0===n?void 0:n._offlineComponentProvider)&&(null===(s=r.cache)||void 0===s?void 0:s._onlineComponentProvider)&&(t._firestoreClient._uninitializedComponentsProvider={_offlineKind:r.cache.kind,_offline:r.cache._offlineComponentProvider,_online:r.cache._onlineComponentProvider})}class gl{constructor(t){this._byteString=t}static fromBase64String(t){try{return new gl(Pi.fromBase64String(t))}catch(t){throw new Qr(Hr.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new gl(Pi.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class pl{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new Qr(Hr.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new fi(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class ml{constructor(t){this._methodName=t}}class yl{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new Qr(Hr.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Qr(Hr.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return oi(this._lat,t._lat)||oi(this._long,t._long)}}const vl=/^__.*__$/;class wl{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new Ra(t,this.data,this.fieldMask,e,this.fieldTransforms):new La(t,this.data,e,this.fieldTransforms)}}function El(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw zr()}}class bl{constructor(t,e,n,s,r,i){this.settings=t,this.databaseId=e,this.serializer=n,this.ignoreUndefinedProperties=s,void 0===r&&this.ua(),this.fieldTransforms=r||[],this.fieldMask=i||[]}get path(){return this.settings.path}get ca(){return this.settings.ca}aa(t){return new bl(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}ha(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.aa({path:n,la:!1});return s.fa(t),s}da(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.aa({path:n,la:!1});return s.ua(),s}wa(t){return this.aa({path:void 0,la:!0})}_a(t){return Ll(t,this.settings.methodName,this.settings.ma||!1,this.path,this.settings.ga)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}ua(){if(this.path)for(let t=0;t<this.path.length;t++)this.fa(this.path.get(t))}fa(t){if(0===t.length)throw this._a("Document fields must not be empty");if(El(this.ca)&&vl.test(t))throw this._a('Document fields cannot begin and end with "__"')}}class Tl{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.serializer=n||Su(t)}ya(t,e,n,s=!1){return new bl({ca:t,methodName:e,ga:n,path:fi.emptyPath(),la:!1,ma:s},this.databaseId,this.serializer,this.ignoreUndefinedProperties)}}function Cl(t){const e=t._freezeSettings(),n=Su(t._databaseId);return new Tl(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Sl(t,e,n,s,r,i={}){const o=t.ya(i.merge||i.mergeFields?2:0,e,n,r);kl("Data must be an object, but it was:",o,s);const a=Al(s,o);let c,u;if(i.merge)c=new Mi(o.fieldMask),u=o.fieldTransforms;else if(i.mergeFields){const t=[];for(const s of i.mergeFields){const r=Dl(e,s,n);if(!o.contains(r))throw new Qr(Hr.INVALID_ARGUMENT,`Field '${r}' is specified in your field mask but missing from your input data.`);Rl(t,r)||t.push(r)}c=new Mi(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new wl(new ao(a),c,u)}function Il(t,e){if(_l(t=p(t)))return kl("Unsupported field value:",e,t),Al(t,e);if(t instanceof ml)return function(t,e){if(!El(e.ca))throw e._a(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e._a(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.la&&4!==e.ca)throw e._a("Nested arrays are not supported");return function(t,e){const n=[];let s=0;for(const r of t){let t=Il(r,e.wa(s));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),s++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=p(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return ha(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=ci.fromDate(t);return{timestampValue:fc(e.serializer,n)}}if(t instanceof ci){const n=new ci(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:fc(e.serializer,n)}}if(t instanceof yl)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof gl)return{bytesValue:gc(e.serializer,t._byteString)};if(t instanceof il){const n=e.databaseId,s=t.firestore._databaseId;if(!s.isEqual(n))throw e._a(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:yc(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e._a(`Unsupported field value: ${el(t)}`)}(t,e)}function Al(t,e){const n={};return ki(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):_i(t,((t,s)=>{const r=Il(s,e.ha(t));null!=r&&(n[t]=r)})),{mapValue:{fields:n}}}function _l(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof ci||t instanceof yl||t instanceof gl||t instanceof il||t instanceof ml)}function kl(t,e,n){if(!_l(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const s=el(n);throw"an object"===s?e._a(t+" a custom object"):e._a(t+" "+s)}}function Dl(t,e,n){if((e=p(e))instanceof pl)return e._internalPath;if("string"==typeof e)return xl(t,e);throw Ll("Field path arguments must be of type string or ",t,!1,void 0,n)}const Nl=new RegExp("[~\\*/\\[\\]]");function xl(t,e,n){if(e.search(Nl)>=0)throw Ll(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new pl(...e.split("."))._internalPath}catch(s){throw Ll(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function Ll(t,e,n,s,r){const i=s&&!s.isEmpty(),o=void 0!==r;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(i||o)&&(c+=" (found",i&&(c+=` in field ${s}`),o&&(c+=` in document ${r}`),c+=")"),new Qr(Hr.INVALID_ARGUMENT,a+t+c)}function Rl(t,e){return t.some((t=>t.isEqual(e)))}class Ml{constructor(t,e,n,s,r){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=s,this._converter=r}get id(){return this._key.path.lastSegment()}get ref(){return new il(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new Ol(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(Pl("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class Ol extends Ml{data(){return super.data()}}function Pl(t,e){return"string"==typeof e?xl(t,e):e instanceof pl?e._internalPath:e._delegate._internalPath}class Fl{convertValue(t,e="none"){switch(Hi(t)){case 0:return null;case 1:return t.booleanValue;case 2:return Ui(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes(Bi(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw zr()}}convertObject(t,e){return this.convertObjectMap(t.fields,e)}convertObjectMap(t,e="none"){const n={};return _i(t,((t,s)=>{n[t]=this.convertValue(s,e)})),n}convertGeoPoint(t){return new yl(Ui(t.latitude),Ui(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=qi(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp($i(t));default:return null}}convertTimestamp(t){const e=Vi(t);return new ci(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=li.fromString(t);Kr(Pc(n));const s=new Ki(n.get(1),n.get(3)),r=new gi(n.popFirst(5));return s.isEqual(e)||jr(`Document ${r} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),r}}class Vl{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class Ul extends Ml{constructor(t,e,n,s,r,i){super(t,e,n,s,i),this._firestore=t,this._firestoreImpl=t,this.metadata=r}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new Bl(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(Pl("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class Bl extends Ul{data(t={}){return super.data(t)}}class jl{constructor(t,e,n,s){this._firestore=t,this._userDataWriter=e,this._snapshot=s,this.metadata=new Vl(s.hasPendingWrites,s.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new Bl(this._firestore,this._userDataWriter,n.key,n,new Vl(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new Qr(Hr.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>{const s=new Bl(t._firestore,t._userDataWriter,n.doc.key,n.doc,new Vl(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter);return n.doc,{type:"added",doc:s,oldIndex:-1,newIndex:e++}}))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const s=new Bl(t._firestore,t._userDataWriter,e.doc.key,e.doc,new Vl(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let r=-1,i=-1;return 0!==e.type&&(r=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),i=n.indexOf(e.doc.key)),{type:ql(e.type),doc:s,oldIndex:r,newIndex:i}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function ql(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return zr()}}class $l extends Fl{constructor(t){super(),this.firestore=t}convertBytes(t){return new gl(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new il(this.firestore,null,e)}}function zl(t){t=nl(t,ol);const e=nl(t.firestore,ll),n=dl(e),s=new $l(e);return function(t){if("L"===t.limitType&&0===t.explicitOrderBy.length)throw new Qr(Hr.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(t._query),function(t,e,n={}){const s=new Wr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,s,r){const i=new zh({next:n=>{e.enqueueAndForget((()=>fh(t,o))),n.fromCache&&"server"===s.source?r.reject(new Qr(Hr.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):r.resolve(n)},error:t=>r.reject(t)}),o=new yh(n,i,{includeMetadataChanges:!0,Ku:!0});return dh(t,o)}(await Wh(t),t.asyncQueue,e,n,s))),s.promise}(n,t._query).then((n=>new jl(e,s,t,n)))}function Kl(t,e,n){t=nl(t,il);const s=nl(t.firestore,ll),r=function(t,e,n){let s;return s=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,s}(t.converter,e,n);return function(t,e){return function(t,e){const n=new Wr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const s=jh(t);try{const t=await function(t,e){const n=Gr(t),s=ci.now(),r=e.reduce(((t,e)=>t.add(e.key)),oa());let i,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>{let a=Yo(),c=oa();return n.Zi.getEntries(t,r).next((t=>{a=t,a.forEach(((t,e)=>{e.isValidDocument()||(c=c.add(t))}))})).next((()=>n.localDocuments.getOverlayedDocuments(t,a))).next((r=>{i=r;const o=[];for(const t of e){const e=Na(t,i.get(t.key).overlayedDocument);null!=e&&o.push(new Ra(t.key,e,co(e.value.mapValue),Sa.exists(!0)))}return n.mutationQueue.addMutationBatch(t,s,o,e)})).next((e=>{o=e;const s=e.applyToLocalDocumentSet(i,c);return n.documentOverlayCache.saveOverlays(t,e.batchId,s)}))})).then((()=>({batchId:o.batchId,changes:ta(i)})))}(s.localStore,e);s.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let s=t.Tc[t.currentUser.toKey()];s||(s=new Di(oi)),s=s.insert(e,n),t.Tc[t.currentUser.toKey()]=s}(s,t.batchId,n),await Vh(s,t.changes),await Hu(s.remoteStore)}catch(t){const e=oh(t,"Failed to persist write");n.reject(e)}}(await function(t){return Qh(t).then((t=>t.syncEngine))}(t),e,n))),n.promise}(dl(t),e)}(s,[Sl(Cl(s),"setDoc",t._key,r,null!==t.converter,n).toMutation(t._key,Sa.none())])}!function(t,e=!0){Fr="9.22.2",tt(new m("firestore",((t,{instanceIdentifier:n,options:s})=>{const r=t.getProvider("app").getImmediate(),i=new ll(new Zr(t.getProvider("auth-internal")),new si(t.getProvider("app-check-internal")),function(t,e){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Qr(Hr.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Ki(t.options.projectId,e)}(r,n),r);return s=Object.assign({useFetchStreams:e},s),i._setSettings(s),i}),"PUBLIC").setMultipleInstances(!0)),rt(Or,"3.12.2",t),rt(Or,"3.12.2","esm2017")}();const Gl=function(t,e){const n="string"==typeof t?t:"(default)",s=function(t,e){const n=t.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),t.container.getProvider(e)}("object"==typeof t?t:function(t=W){const e=Y.get(t);if(!e&&t===W&&c())return st();if(!e)throw et.create("no-app",{appName:t});return e}(),"firestore").getImmediate({identifier:n});if(!s._initialized){const t=(t=>{const e=(t=>{var e,n;return null===(n=null===(e=a())||void 0===e?void 0:e.emulatorHosts)||void 0===n?void 0:n[t]})(t);if(!e)return;const n=e.lastIndexOf(":");if(n<=0||n+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const s=parseInt(e.substring(n+1),10);return"["===e[0]?[e.substring(1,n-1),s]:[e.substring(0,n),s]})("firestore");t&&function(t,e,n,s={}){var r;const i=(t=nl(t,rl))._getSettings(),a=`${e}:${n}`;if("firestore.googleapis.com"!==i.host&&i.host!==a&&qr("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."),t._setSettings(Object.assign(Object.assign({},i),{host:a,ssl:!1})),s.mockUserToken){let e,n;if("string"==typeof s.mockUserToken)e=s.mockUserToken,n=Pr.MOCK_USER;else{e=function(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=e||"demo-project",s=t.iat||0,r=t.sub||t.user_id;if(!r)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const i=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:s,exp:s+3600,auth_time:s,sub:r,user_id:r,firebase:{sign_in_provider:"custom",identities:{}}},t);return[o(JSON.stringify({alg:"none",type:"JWT"})),o(JSON.stringify(i)),""].join(".")}(s.mockUserToken,null===(r=t._app)||void 0===r?void 0:r.options.projectId);const i=s.mockUserToken.sub||s.mockUserToken.user_id;if(!i)throw new Qr(Hr.INVALID_ARGUMENT,"mockUserToken must contain 'sub' or 'user_id' field!");n=new Pr(i)}t._authCredentials=new Jr(new Xr(e,n))}}(s,...t)}return s}(st({apiKey:"AIzaSyDtK7q2GcDLLV_tsTg05Q5EB1Qe-Qvsqmk",authDomain:"where-is-waldo-4eb8f.firebaseapp.com",projectId:"where-is-waldo-4eb8f",storageBucket:"where-is-waldo-4eb8f.appspot.com",messagingSenderId:"721147782545",appId:"1:721147782545:web:35d976dcd7877c8b742630"})),Hl=(()=>{const t=document.getElementById("backgroundImg"),e=e=>{const n=t.getBoundingClientRect(),s=e.clientX-n.left,r=e.clientY-n.top,i=window.innerWidth/1920;return{x:s,y:r,scaledX:s/i,scaledY:r/i}};return{characters:{bowser:{left:1430,top:3130,right:1730,bottom:3424},neo:{left:690,top:4700,right:900,bottom:4900},waldo:{left:1450,top:6550,right:1650,bottom:6750},meg:{left:256,top:484,right:456,bottom:684},pikachu:{left:982,top:1437,right:1182,bottom:1637},mike:{left:1121,top:1538,right:1321,bottom:1738},bravo:{left:649,top:868,right:849,bottom:1068},sonic:{left:1274,top:1716,right:1474,bottom:1916},clarke:{left:1115,top:1507,right:1315,bottom:1707}},getCoordinates:e,getCoordinateArea:t=>{const{scaledX:n,scaledY:s}=e(t),r={left:n-100,top:s-100,right:n+100,bottom:s+100};console.log(`Area: ${JSON.stringify(r)}`)}}})(),Ql=(()=>{const t=Hl.characters;return{storeCharacterLocations:()=>{try{Object.entries(t).forEach((([t,{left:e,top:n,right:s,bottom:r}])=>{Kl(ul(Gl,"characterLocations",t),{left:e,top:n,right:s,bottom:r}).then((()=>{console.log(`${t} location stored successfully.`)})).catch((e=>{console.error(`Error storing ${t} location:`,e)}))}))}catch(t){console.error("Error storing character locations:",t)}},getCharacterLocations:async()=>{try{(await zl(cl(Gl,"characterLocations"))).forEach((t=>{const e=t.id,{left:n,top:s,right:r,bottom:i}=t.data();console.log(`${e}: (${n}, ${s}, ${r}, ${i})`)}))}catch(t){console.error("Error retrieving character locations:",t)}},verifyClickedPosition:async(t,e,n)=>{try{const s=await zl(cl(Gl,"characterLocations"));let r=null;return s.forEach((s=>{const i=s.id,{left:o,top:a,right:c,bottom:u}=s.data();("cyberpunk"!==n||"bowser"!==i&&"neo"!==i&&"waldo"!==i)&&("robot"!==n||"meg"!==i&&"pikachu"!==i&&"mike"!==i)&&("universe"!==n||"bravo"!==i&&"sonic"!==i&&"clarke"!==i)||t>=o&&t<=c&&e>=a&&e<=u&&(r=i)})),r}catch(t){return console.error("Error verifying clicked position:",t),null}},checkUserExists:async(t,e)=>{try{const n=ul(Gl,`userTimes-${e}`,t);return(await function(t){t=nl(t,il);const e=nl(t.firestore,ll);return function(t,e,n={}){const s=new Wr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,s,r){const i=new zh({next:i=>{e.enqueueAndForget((()=>fh(t,o)));const a=i.docs.has(n);!a&&i.fromCache?r.reject(new Qr(Hr.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&i.fromCache&&s&&"server"===s.source?r.reject(new Qr(Hr.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):r.resolve(i)},error:t=>r.reject(t)}),o=new yh(Vo(n.path),i,{includeMetadataChanges:!0,Ku:!0});return dh(t,o)}(await Wh(t),t.asyncQueue,e,n,s))),s.promise}(dl(e),t._key).then((n=>function(t,e,n){const s=n.docs.get(e._key),r=new $l(t);return new Ul(t,r,e._key,s,new Vl(n.hasPendingWrites,n.fromCache),e.converter)}(e,t,n)))}(n)).exists()}catch(e){return console.error(`Error checking if user ${t} exists:`,e),!1}},storeUserTime:async(t,e,n)=>{try{await Kl(ul(Gl,`userTimes-${n}`,t),{time:e})}catch(e){console.error(`Error storing user time for ${t}:`,e)}},getTop10Times:async t=>{try{const e=await zl(cl(Gl,`userTimes-${t}`)),n=[];return e.forEach((t=>{const e=t.id,{time:s}=t.data();n.push({username:e,time:s})})),n.sort(((t,e)=>t.time.localeCompare(e.time))),n.slice(0,10)}catch(t){console.error("Error retrieving user times:",t)}}}})()},768:(t,e,n)=>{n.d(e,{Q:()=>h});const s=(t,e,n)=>{const s=t;s.style.left=`${e}px`,s.style.top=`${n}px`},r=(t,e)=>{const n=document.createElement("div");return n.className=t,e&&(n.textContent=e),n},i=(t,e)=>{const n=document.createElement("button");return n.textContent=t,n.type="button",n.dataset.character=e,n.addEventListener("click",h.handleCharacterButtonClick),n},o=t=>{t.parentNode&&t.parentNode.removeChild(t)},a=(()=>{const t=document.querySelector("#content"),e=[],n=[];return{createSlider:()=>{const t=document.getElementById("sliderContainer"),e=r("slider");[{imageSrc:"images/cyberpunk-slider.jpg",characters:[{name:"Bowser",difficulty:"easy",iconSrc:"images/bowser.png"},{name:"Neo",difficulty:"medium",iconSrc:"images/neo.png"},{name:"Waldo",difficulty:"hard",iconSrc:"images/waldo.png"}],startButtonDataChoice:"cyberpunk"},{imageSrc:"images/robot-slider.jpg",characters:[{name:"Meg",difficulty:"easy",iconSrc:"images/meg.png"},{name:"Pikachu",difficulty:"medium",iconSrc:"images/pikachu.png"},{name:"Mike",difficulty:"hard",iconSrc:"images/mike.png"}],startButtonDataChoice:"robot"},{imageSrc:"images/universe-slider.jpg",characters:[{name:"Bravo",difficulty:"easy",iconSrc:"images/bravo.png"},{name:"Sonic",difficulty:"medium",iconSrc:"images/sonic.png"},{name:"Clarke",difficulty:"hard",iconSrc:"images/clarke.png"}],startButtonDataChoice:"universe"}].forEach((t=>{const n=r("slide"),s=document.createElement("img");s.src=t.imageSrc,s.alt=t.imageSrc,n.appendChild(s);const i=r("sliderCharacters");t.characters.forEach((t=>{const e=r(`sliderCharacter ${t.difficulty}`),n=document.createElement("img");n.src=t.iconSrc,n.className="sliderIcon",n.alt=t.name,e.appendChild(n);const s=r("text"),o=document.createElement("h3");o.textContent=t.name,s.appendChild(o);const a=document.createElement("p");a.textContent=t.difficulty,s.appendChild(a),e.appendChild(s),i.appendChild(e)}));const o=document.createElement("button");o.className="startButton",o.dataset.choice=t.startButtonDataChoice,o.textContent="Start Game",i.appendChild(o),n.appendChild(i),e.appendChild(n),"cyberpunk"===t.startButtonDataChoice&&n.classList.add("active")})),t.appendChild(e)},createFeedbackMsg:(e,n,i,o="red")=>{const a=r("feedback",e);s(a,n-150,i-100),a.style.background=`rgba(${"green"===o?"0, 255, 0":"255, 0, 0"}, 0.7)`,t.appendChild(a),setTimeout((()=>{a.remove()}),5e3)},removeCircle:()=>{if(e.length>0){const t=e.pop();o(t)}},createCircle:(n,i)=>{const o=r("circle");s(o,n-50,i-50),t.appendChild(o),e.push(o)},removePopup:()=>{if(n.length>0){const t=n.pop();o(t)}},createPopup:(e,o,a)=>{const c=r("choice");e+60>window.innerWidth-150?s(c,e-160,o-70):s(c,e+60,o-70);const u=h.getGameChoice();let l;"cyberpunk"===u?l=[{text:"Bowser",character:"bowser"},{text:"Neo",character:"neo"},{text:"Waldo",character:"waldo"}]:"robot"===u?l=[{text:"Meg",character:"meg"},{text:"Pikachu",character:"pikachu"},{text:"Mike",character:"mike"}]:"universe"===u&&(l=[{text:"Bravo",character:"bravo"},{text:"Sonic",character:"sonic"},{text:"Clarke",character:"clarke"}]),l.forEach((t=>{const e=i(t.text,t.character);a.includes(t.character)&&(e.classList.add("found"),e.removeEventListener("click",h.handleCharacterButtonClick)),c.appendChild(e)})),t.appendChild(c),n.push(c)},createTable:t=>{const e=h.getGameChoice(),n=document.querySelector("#leaderboardHeading"),s=e.charAt(0).toUpperCase()+e.slice(1).toLowerCase();n.textContent=`Top 10 For ${s}:`;const r=document.querySelector("#timer");document.querySelector("#currentUserTime").textContent=`Your time: ${r.textContent}.`;const i=document.querySelector("#tableBody");i.textContent="",t.forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td");n.textContent=t.username;const s=document.createElement("td");s.textContent=t.time,e.appendChild(n),e.appendChild(s),i.appendChild(e)}))}}})();var c=n(954);const u=(()=>{const t=document.querySelector("#timer");let e,n=0;const s=()=>{clearInterval(e)},r=t=>{t.closest(".overlay").style.display="flex",t.style.display="flex"},i=t=>{t.closest(".overlay").style.display="none",t.style.display="none"};return{startTimer:()=>{const n=(new Date).getTime();e=setInterval((()=>{const e=(t=>{const e=Math.floor(t/36e5),n=Math.floor(t%36e5/6e4),s=Math.floor(t%6e4/1e3);return`${String(e).padStart(2,"0")}:${String(n).padStart(2,"0")}:${String(s).padStart(2,"0")}.${String(t%1e3).padStart(3,"0")}`})((new Date).getTime()-n);t.textContent=e}),1)},stopTimer:s,resetTimer:()=>{s(),t.textContent="00:00:00"},resetCount:()=>{document.querySelector("#count").textContent="0/3"},updateCount:()=>{const t=document.querySelector("#count"),e=document.querySelectorAll(".grayed-out").length;t.textContent=`${e}/3`},grayOutCharacterIcon:t=>{const e=document.querySelector(`#${t}`);e&&e.classList.add("grayed-out")},clearCharacterIcons:()=>{["bowser","neo","waldo","meg","pikachu","mike","bravo","sonic","clarke"].forEach((t=>{const e=document.querySelector(`#${t}`);e&&e.classList.remove("grayed-out")}))},showModal:r,hideModal:i,getLeaderboard:(e,n)=>{const s=document.querySelector(".endgame input"),o=document.querySelector("#usernameError");n.addEventListener("click",(async n=>{n.preventDefault();const u=s.value.trim();if(u){if(await c.k.checkUserExists(u,e))return void(o.textContent=`Username "${u}" is already taken!`);o.textContent="",c.k.storeUserTime(u,t.textContent,e);const n=await c.k.getTop10Times(e);a.createTable(n),r(document.querySelector(".modal.leaderboard")),i(document.querySelector(".modal.endgame"))}}))},updateActiveDot:()=>{document.querySelectorAll(".dot").forEach(((t,e)=>{e===n?t.classList.add("active"):t.classList.remove("active")}))},updateActiveSlide:t=>{const e=document.querySelectorAll(".slide"),s=e.length;e[n].classList.remove("active"),"left"===t?(n=(n-1+s)%s,e[n].style.transform="translateX(-100%)",e[n].style.opacity="0"):"right"===t&&(n=(n+1)%s,e[n].style.transform="translateX(100%)",e[n].style.opacity="0"),e[n].classList.add("active"),setTimeout((()=>{e[n].style.transform="translateX(0)",e[n].style.opacity="1"}),0)},setBackgroundImage:()=>{const t=document.querySelector("#backgroundImg");switch(h.getGameChoice()){case"cyberpunk":default:t.src="images/cyberpunk-city.jpg";break;case"robot":t.src="images/robot-city.jpg";break;case"universe":t.src="images/universe-113.jpg"}},setCharacterIcons:()=>{const t=document.querySelectorAll(".character > .icon"),e=document.querySelectorAll(".character > .text > h3"),n={cyberpunk:[{icon:"images/bowser.png",title:"Bowser"},{icon:"images/neo.png",title:"Neo"},{icon:"images/waldo.png",title:"Waldo"}],robot:[{icon:"images/meg.png",title:"Meg"},{icon:"images/pikachu.png",title:"Pikachu"},{icon:"images/mike.png",title:"Mike"}],universe:[{icon:"images/bravo.png",title:"Johnny Bravo"},{icon:"images/sonic.png",title:"Sonic"},{icon:"images/clarke.png",title:"Isaac Clarke"}]};(n[h.getGameChoice()]||n.default).forEach(((n,s)=>{t[s].src=n.icon,e[s].textContent=n.title}))},setCharacterId:()=>{document.querySelectorAll(".character").forEach((t=>{const e=t.querySelector("img");if(e){const n=e.src.split("/").pop().split(".")[0];t.id=n}}))}}})(),h=(()=>{const t=document.querySelector("#content"),e=document.querySelector("#dropdownButton"),n=document.querySelector("#dropdownMenu"),s=document.querySelector("#playAgainButton"),r=document.querySelector("#submitUsername"),i=document.querySelector(".modal.initial"),o=document.querySelector(".modal.endgame"),h=document.querySelector(".modal.leaderboard"),l=document.querySelector(".arrow.left"),d=document.querySelector(".arrow.right"),f=document.querySelector(".endgame input");let g=!1,p=!1,m=!1,y=null,v=null;const w=[],E=t=>{const e=t.target;return v=e.dataset.choice,g||(u.hideModal(i),u.startTimer(),g=!0,p=!0,m=!0,u.setBackgroundImage(),u.setCharacterIcons(),u.setCharacterId()),v},b=()=>{g=!1,p=!1,m=!1,y=null,w.length=0,f.value="",u.resetCount(),u.resetTimer(),u.clearCharacterIcons(),u.hideModal(h),u.hideModal(o),u.showModal(i)},T=async t=>{if(g&&!t.target.closest("header")&&!t.target.closest("footer")&&!t.target.closest(".overlay")){if(p){const{x:e,y:n,scaledX:s,scaledY:r}=c.j.getCoordinates(t);a.createCircle(e,n),a.createPopup(e,n,w);try{y=await c.k.verifyClickedPosition(s,r,v)}catch(t){console.error("Error verifying clicked position:",t)}}else a.removeCircle(),a.removePopup();p=!p,m=!m}},C=t=>{const{x:e,y:n}=c.j.getCoordinates(t);a.removePopup();const s=t.target.dataset.character;if(y===s){const t=y.charAt(0).toUpperCase()+y.slice(1).toLowerCase();a.createFeedbackMsg(`Found ${t}!`,e,n,"green"),u.grayOutCharacterIcon(s),u.updateCount(),w.push(s),a.removePopup(),a.createPopup(e,n,w),3===w.length&&(u.stopTimer(),u.getLeaderboard(v,r),u.showModal(o))}else a.createFeedbackMsg("Keep looking!",e,n);return!1};return{init:()=>{a.createSlider(),l.addEventListener("click",(()=>{u.updateActiveSlide("left"),u.updateActiveDot()})),d.addEventListener("click",(()=>{u.updateActiveSlide("right"),u.updateActiveDot()})),t.addEventListener("click",T),document.querySelectorAll(".choice button").forEach((t=>{t.addEventListener("click",C)})),e.addEventListener("click",(()=>{n.classList.toggle("show"),e.textContent=n.classList.contains("show")?"▲ Hide Characters ▲":"▼ Show Characters ▼"})),document.querySelectorAll(".startButton").forEach((t=>{t.addEventListener("click",E),console.log("clicked")})),s.addEventListener("click",b),u.hideModal(h),u.hideModal(o),u.showModal(i)},handleCharacterButtonClick:C,getGameChoice:()=>v}})();h.init()}},e={};function n(s){var r=e[s];if(void 0!==r)return r.exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n(954),n(768)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkosR0FBVUcsRUFBUUEsRUFBT0QsUUFBU0gsR0FHL0NJLEVBQU9ELE9BQ2YsQ0NyQkFILEVBQW9CeHJELEVBQUksQ0FBQzJyRCxFQUFTRyxLQUNqQyxJQUFJLElBQUkxK0QsS0FBTzArRCxFQUNYTixFQUFvQnpxRCxFQUFFK3FELEVBQVkxK0QsS0FBU28rRCxFQUFvQnpxRCxFQUFFNHFELEVBQVN2K0QsSUFDNUVkLE9BQU9tVixlQUFla3FELEVBQVN2K0QsRUFBSyxDQUFFMitELFlBQVksRUFBTXQ4RCxJQUFLcThELEVBQVcxK0QsSUFFMUUsRUNORG8rRCxFQUFvQnBoRSxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmK1UsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPblksTUFBUSxJQUFJbVosU0FBUyxjQUFiLEVBQ2hCLENBQUUsTUFBT3BWLEdBQ1IsR0FBc0IsaUJBQVhaLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEJxaEUsRUFBb0J6cUQsRUFBSSxDQUFDaXJELEVBQUt6MkQsSUFBVWpKLE9BQU9FLFVBQVUwVSxlQUFlMUssS0FBS3cxRCxFQUFLejJELEdDR2xGaTJELEVBQW9CLEtBQ01BLEVBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL3doZXJlX2lzX3dhbGRvLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL3dyYXAtaWRiLXZhbHVlLmpzIiwid2VicGFjazovL3doZXJlX2lzX3dhbGRvLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvZXNtL2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2ZpcmVzdG9yZS9kaXN0L2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9zcmMvZmlyZWJhc2UuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vLi9zcmMvYXBwLWxvZ2ljLmpzIiwid2VicGFjazovL3doZXJlX2lzX3dhbGRvLy4vc3JjL3JlbmRlci5qcyIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3doZXJlX2lzX3dhbGRvL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd2hlcmVfaXNfd2FsZG8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93aGVyZV9pc193YWxkby93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbmNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxuY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbmNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbmNvbnN0IGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkkMShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXHJcbiAqL1xyXG5jbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheSQxKHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nICh3aXRob3V0IFwiLlwiIHBhZGRpbmcgaW4gdGhlIGVuZCkuXHJcbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cclxuICovXHJcbmNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxyXG4gICAgcmV0dXJuIGJhc2U2NEVuY29kZShzdHIpLnJlcGxhY2UoL1xcLi9nLCAnJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbmNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcclxuICAgICAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcclxuICAgICAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCkgPT4gZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4vKipcclxuICogQXR0ZW1wdCB0byByZWFkIGRlZmF1bHRzIGZyb20gYSBKU09OIHN0cmluZyBwcm92aWRlZCB0b1xyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXHJcbiAqIFRoZSBkb3RzIGFyZSBpbiBwYXJlbnMgYmVjYXVzZSBjZXJ0YWluIGNvbXBpbGVycyAoVml0ZT8pIGNhbm5vdFxyXG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuICAgIGlmIChkZWZhdWx0c0pzb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWZhdWx0c0pzb25TdHJpbmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21Db29raWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQW5ndWxhciBVbml2ZXJzYWwgU1NSIGhhdmUgYVxyXG4gICAgICAgIC8vIGBkb2N1bWVudGAgb2JqZWN0IGJ1dCBlcnJvciBvbiBhY2Nlc3NpbmcgYGRvY3VtZW50LmNvb2tpZWAuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBKU09OLnBhcnNlKGRlY29kZWQpO1xyXG59O1xyXG4vKipcclxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XHJcbiAqICgxKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgYXMgYSBwcm9wZXJ0eSBvZiBgZ2xvYmFsVGhpc2BcclxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlRW52aXJvbm1lbnQ7XHJcbiAgICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnYnJvd3NlcicpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XHJcbn1cclxuZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCkge1xyXG4gICAgY29uc3QgcnVudGltZSA9IHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgPyBjaHJvbWUucnVudGltZVxyXG4gICAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgID8gYnJvd3Nlci5ydW50aW1lXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufVxyXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc0VsZWN0cm9uKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cclxuZnVuY3Rpb24gaXNJRSgpIHtcclxuICAgIGNvbnN0IHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzVVdQKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc05vZGVTZGsoKSB7XHJcbiAgICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xyXG59XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xyXG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcclxuICAgIHJldHVybiAoIWlzTm9kZSgpICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcclxuICAgICAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJykpO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0JztcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XHJcbiAqIHByaXZhdGUgYnJvd3NpbmcpXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcHJlRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBEQl9DSEVDS19OQU1FID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3QuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB8fCAnJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3Mgd2hldGhlciBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqL1xyXG5mdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTdGFuZGFyZGl6ZWQgRmlyZWJhc2UgRXJyb3IuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiAgIC8vIFR5cGVzY3JpcHQgc3RyaW5nIGxpdGVyYWxzIGZvciB0eXBlLXNhZmUgY29kZXNcclxuICogICB0eXBlIEVyciA9XHJcbiAqICAgICAndW5rbm93bicgfFxyXG4gKiAgICAgJ29iamVjdC1ub3QtZm91bmQnXHJcbiAqICAgICA7XHJcbiAqXHJcbiAqICAgLy8gQ2xvc3VyZSBlbnVtIGZvciB0eXBlLXNhZmUgZXJyb3IgY29kZXNcclxuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XHJcbiAqICAgdmFyIEVyciA9IHtcclxuICogICAgIFVOS05PV046ICd1bmtub3duJyxcclxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcclxuICogICB9XHJcbiAqXHJcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcclxuICogICAgICdnZW5lcmljLWVycm9yJzogXCJVbmtub3duIGVycm9yXCIsXHJcbiAqICAgICAnZmlsZS1ub3QtZm91bmQnOiBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IHskZmlsZX1cIixcclxuICogICB9O1xyXG4gKlxyXG4gKiAgIC8vIFR5cGUtc2FmZSBmdW5jdGlvbiAtIG11c3QgcGFzcyBhIHZhbGlkIGVycm9yIGNvZGUgYXMgcGFyYW0uXHJcbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xyXG4gKlxyXG4gKiAgIC4uLlxyXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5GSUxFX05PVF9GT1VORCwgeydmaWxlJzogZmlsZU5hbWV9KTtcclxuICogICAuLi5cclxuICogICAvLyBTZXJ2aWNlOiBDb3VsZCBub3QgZmlsZSBmaWxlOiBmb28udHh0IChzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kKS5cclxuICpcclxuICogICBjYXRjaCAoZSkge1xyXG4gKiAgICAgYXNzZXJ0KGUubWVzc2FnZSA9PT0gXCJDb3VsZCBub3QgZmluZCBmaWxlOiBmb28udHh0LlwiKTtcclxuICogICAgIGlmICgoZSBhcyBGaXJlYmFzZUVycm9yKT8uY29kZSA9PT0gJ3NlcnZpY2UvZmlsZS1ub3QtZm91bmQnKSB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHJlYWQgZmlsZTogXCIgKyBlWydmaWxlJ10pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICovXHJcbmNvbnN0IEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXHJcbmNsYXNzIEZpcmViYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKiBUaGUgZXJyb3IgY29kZSBmb3IgdGhpcyBlcnJvci4gKi9cclxuICAgIGNvZGUsIG1lc3NhZ2UsIFxyXG4gICAgLyoqIEN1c3RvbSBkYXRhIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcclxuICAgICAgICAvKiogVGhlIGN1c3RvbSBuYW1lIGZvciBhbGwgRmlyZWJhc2VFcnJvcnMuICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gRVJST1JfTkFNRTtcclxuICAgICAgICAvLyBGaXggRm9yIEVTNVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93bi5cclxuICAgICAgICAvLyBPbmx5IGF2YWlsYWJsZSBvbiBWOC5cclxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jbGFzcyBFcnJvckZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZSwgc2VydmljZU5hbWUsIGVycm9ycykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlTmFtZSA9IHNlcnZpY2VOYW1lO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKGNvZGUsIC4uLmRhdGEpIHtcclxuICAgICAgICBjb25zdCBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICBjb25zdCBmdWxsQ29kZSA9IGAke3RoaXMuc2VydmljZX0vJHtjb2RlfWA7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmVycm9yc1tjb2RlXTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcclxuICAgICAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcclxuICAgIH0pO1xyXG59XHJcbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZyBjb250YWluaW5nIEpTT04uXHJcbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxyXG4gKi9cclxuZnVuY3Rpb24ganNvbkV2YWwoc3RyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSBKYXZhc2NyaXB0IG9iamVjdCB0byBiZSBzdHJpbmdpZmllZC5cclxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgSlNPTiBjb250ZW50cyBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGxldCBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKTtcclxuICAgICAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKTtcclxuICAgICAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcclxuICAgICAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XHJcbiAgICAgICAgZGVsZXRlIGNsYWltc1snZCddO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgc2lnbmF0dXJlXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcclxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XHJcbiAgICBsZXQgdmFsaWRTaW5jZSA9IDAsIHZhbGlkVW50aWwgPSAwO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCEhbm93ICYmXHJcbiAgICAgICAgISF2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgISF2YWxpZFVudGlsICYmXHJcbiAgICAgICAgbm93ID49IHZhbGlkU2luY2UgJiZcclxuICAgICAgICBub3cgPD0gdmFsaWRVbnRpbCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNzdWVkQXRUaW1lID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLCBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcclxuICAgIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xyXG59O1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhZmVHZXQob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG1hcChvYmosIGZuLCBjb250ZXh0T2JqKSB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gZm4uY2FsbChjb250ZXh0T2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyoqXHJcbiAqIERlZXAgZXF1YWwgdHdvIG9iamVjdHMuIFN1cHBvcnQgQXJyYXlzIGFuZCBPYmplY3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgIGZvciAoY29uc3QgayBvZiBhS2V5cykge1xyXG4gICAgICAgIGlmICghYktleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhUHJvcCA9IGFba107XHJcbiAgICAgICAgY29uc3QgYlByb3AgPSBiW2tdO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XHJcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGFQcm9wLCBiUHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhUHJvcCAhPT0gYlByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xyXG4gICAgICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVqZWN0cyBpZiB0aGUgZ2l2ZW4gcHJvbWlzZSBkb2Vzbid0IHJlc29sdmUgaW4gdGltZUluTVMgbWlsbGlzZWNvbmRzLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dChwcm9taXNlLCB0aW1lSW5NUyA9IDIwMDApIHtcclxuICAgIGNvbnN0IGRlZmVycmVkUHJvbWlzZSA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBkZWZlcnJlZFByb21pc2UucmVqZWN0KCd0aW1lb3V0IScpLCB0aW1lSW5NUyk7XHJcbiAgICBwcm9taXNlLnRoZW4oZGVmZXJyZWRQcm9taXNlLnJlc29sdmUsIGRlZmVycmVkUHJvbWlzZS5yZWplY3QpO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkUHJvbWlzZS5wcm9taXNlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGFycmF5VmFsID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcclxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZykge1xyXG4gICAgY29uc3Qgb2JqID0ge307XHJcbiAgICBjb25zdCB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG4vKipcclxuICogRXh0cmFjdCB0aGUgcXVlcnkgc3RyaW5nIHBhcnQgb2YgYSBVUkwsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBxdWVzdGlvbiBtYXJrIChpZiBwcmVzZW50KS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeXN0cmluZyh1cmwpIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RhcnQgPSB1cmwuaW5kZXhPZignPycpO1xyXG4gICAgaWYgKCFxdWVyeVN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhZ21lbnRTdGFydCA9IHVybC5pbmRleE9mKCcjJywgcXVlcnlTdGFydCk7XHJcbiAgICByZXR1cm4gdXJsLnN1YnN0cmluZyhxdWVyeVN0YXJ0LCBmcmFnbWVudFN0YXJ0ID4gMCA/IGZyYWdtZW50U3RhcnQgOiB1bmRlZmluZWQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cclxuICogVmFyaWFibGUgbmFtZXMgZm9sbG93IHRoZSBub3RhdGlvbiBpbiBGSVBTIFBVQiAxODAtMzpcclxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcclxuICogICBzaGExLnVwZGF0ZShieXRlcyk7XHJcbiAqICAgdmFyIGhhc2ggPSBzaGExLmRpZ2VzdCgpO1xyXG4gKlxyXG4gKiBQZXJmb3JtYW5jZTpcclxuICogICBDaHJvbWUgMjM6ICAgfjQwMCBNYml0L3NcclxuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBwcm9wZXJ0aWVzIGRlY2xhcmVkIGhlcmUgYXJlIGRpc2N1c3NlZCBpbiB0aGUgYWJvdmUgYWxnb3JpdGhtIGRvY3VtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbmNsYXNzIFNoYTEge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29tcHJlc3NfKGJ1Ziwgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVyA9IHRoaXMuV187XHJcbiAgICAgICAgLy8gZ2V0IDE2IGJpZyBlbmRpYW4gd29yZHNcclxuICAgICAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHVzZXIpOiBbYnVnIDgxNDAxMjJdIFJlY2VudCB2ZXJzaW9ucyBvZiBTYWZhcmkgZm9yIE1hYyBPUyBhbmQgaU9TXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3RuZXNzIGFuZCB3aGljaCBpcyBhZmZlY3RlZCBieSB0aGlzIGJ1Zywgc28gSSd2ZSByZW1vdmVkIGFsbCB1c2VzXHJcbiAgICAgICAgICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXHJcbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwOTAzNikgaGFzIGJlZW4gZml4ZWQgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0KSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMyk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXQgKyAxXSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29mZnNldCArIDNdO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXhwYW5kIHRvIDgwIHdvcmRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIGxldCBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoYnl0ZXMsIGxlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuYnVmXztcclxuICAgICAgICBsZXQgaW5idWYgPSB0aGlzLmluYnVmXztcclxuICAgICAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxyXG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnl0ZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5idWZfID0gaW5idWY7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIGxldCB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xyXG4gICAgcmV0dXJuIHByb3h5LnN1YnNjcmliZS5iaW5kKHByb3h5KTtcclxufVxyXG4vKipcclxuICogSW1wbGVtZW50IGZhbi1vdXQgZm9yIGFueSBudW1iZXIgb2YgT2JzZXJ2ZXJzIGF0dGFjaGVkIHZpYSBhIHN1YnNjcmliZVxyXG4gKiBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyUHJveHkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICAgICAqICAgICBhcyBhIHByb3h5LlxyXG4gICAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBleGVjdXRvcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZXh0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgc3Vic2NyaWJlKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICBsZXQgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5uZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHRoaXMuZmluYWxFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIHVuc3ViO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICB1bnN1YnNjcmliZU9uZShpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3JFYWNoT2JzZXJ2ZXIoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2FsbCB0aGUgT2JzZXJ2ZXIgdmlhIG9uZSBvZiBpdCdzIGNhbGxiYWNrIGZ1bmN0aW9uLiBXZSBhcmUgY2FyZWZ1bCB0b1xyXG4gICAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcclxuICAgIC8vIGZ1bmN0aW9uIGhhZCBiZWVuIHF1ZXVlZC5cclxuICAgIHNlbmRPbmUoaSwgZm4pIHtcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4odGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZShlcnIpIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmZ1bmN0aW9uIGFzeW5jKGZuLCBvbkVycm9yKSB7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBmbiguLi5hcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBub29wKCkge1xyXG4gICAgLy8gZG8gbm90aGluZ1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVBcmdDb3VudCA9IGZ1bmN0aW9uIChmbk5hbWUsIG1pbkNvdW50LCBtYXhDb3VudCwgYXJnQ291bnQpIHtcclxuICAgIGxldCBhcmdFcnJvcjtcclxuICAgIGlmIChhcmdDb3VudCA8IG1pbkNvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSAnYXQgbGVhc3QgJyArIG1pbkNvdW50O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXJnQ291bnQgPiBtYXhDb3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gbWF4Q291bnQgPT09IDAgPyAnbm9uZScgOiAnbm8gbW9yZSB0aGFuICcgKyBtYXhDb3VudDtcclxuICAgIH1cclxuICAgIGlmIChhcmdFcnJvcikge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBhcmd1bWVudFxyXG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWUsIGFyZ05hbWUpIHtcclxuICAgIHJldHVybiBgJHtmbk5hbWV9IGZhaWxlZDogJHthcmdOYW1lfSBhcmd1bWVudCBgO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gZm5OYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlclxyXG4gKiBAcGFyYW0gbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBvcHRpb25hbFxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoZm5OYW1lLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsICduYW1lc3BhY2UnKSArICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE5hbWUsIFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5jYWxsYmFjaywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROYW1lLCBjb250ZXh0LCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgY29udGV4dCBvYmplY3QuJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XHJcbi8vIGF1dG9tYXRpY2FsbHkgcmVwbGFjZWQgJ1xcclxcbicgd2l0aCAnXFxuJywgYW5kIHRoZXkgZGlkbid0IGhhbmRsZSBzdXJyb2dhdGUgcGFpcnMsXHJcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cclxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXHJcbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xyXG4vLyB1c2UgMiBjaGFyYWN0ZXJzIGluIEphdmFzY3JpcHQuICBBbGwgNC1ieXRlIFVURi04IGNoYXJhY3RlcnMgYmVnaW4gd2l0aCBhIGZpcnN0XHJcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxyXG4vLyBwYWlyKS5cclxuLy8gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xLjNcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XHJcbiAgICAgICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICBjb25zdCBsb3cgPSBzdHIuY2hhckNvZGVBdChpKSAtIDB4ZGMwMDsgLy8gdGhlIGxvdyAxMCBiaXRzLlxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgNjU1MzYpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdMZW5ndGggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuICogR2VuZXJhdGVzIGEgbmV3IHV1aWQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGMgPT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gZXhwb25lbnRpYWxseSBpbmNyZWFzZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfSU5URVJWQUxfTUlMTElTID0gMTAwMDtcclxuLyoqXHJcbiAqIFRoZSBmYWN0b3IgdG8gYmFja29mZiBieS5cclxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XHJcbi8qKlxyXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbmNvbnN0IE1BWF9WQUxVRV9NSUxMSVMgPSA0ICogNjAgKiA2MCAqIDEwMDA7IC8vIEZvdXIgaG91cnMsIGxpa2UgaU9TIGFuZCBBbmRyb2lkLlxyXG4vKipcclxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cclxuICogU2VlXHJcbiAqIGh0dHA6Ly9nby9zYWZlLWNsaWVudC1iZWhhdmlvciNzdGVwLTEtZGV0ZXJtaW5lLXRoZS1hcHByb3ByaWF0ZS1yZXRyeS1pbnRlcnZhbC10by1oYW5kbGUtc3Bpa2UtdHJhZmZpY1xyXG4gKiBmb3IgY29udGV4dC5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgUkFORE9NX0ZBQ1RPUiA9IDAuNTtcclxuLyoqXHJcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2V4cG9uZW50aWFsYmFja29mZi5qcy5cclxuICogRXh0cmFjdGVkIGhlcmUgc28gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIG1ldGFkYXRhIGFuZCBhIHN0YXRlZnVsIEV4cG9uZW50aWFsQmFja29mZiBvYmplY3QgYXJvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIGludGVydmFsTWlsbGlzID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMsIGJhY2tvZmZGYWN0b3IgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SKSB7XHJcbiAgICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cclxuICAgIC8vIERldmlhdGlvbjogY2FsY3VsYXRlcyB2YWx1ZSBmcm9tIGNvdW50IGFuZCBhIGNvbnN0YW50IGludGVydmFsLCBzbyB3ZSBvbmx5IG5lZWQgdG8gc2F2ZSB2YWx1ZVxyXG4gICAgLy8gYW5kIGNvdW50IHRvIHJlc3RvcmUgc3RhdGUuXHJcbiAgICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xyXG4gICAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cclxuICAgIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxyXG4gICAgY29uc3QgcmFuZG9tV2FpdCA9IE1hdGgucm91bmQoXHJcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cclxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxyXG4gICAgUkFORE9NX0ZBQ1RPUiAqXHJcbiAgICAgICAgY3VyckJhc2VWYWx1ZSAqXHJcbiAgICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXHJcbiAgICAgICAgLy8gaWYgd2UgYWRkIG9yIHN1YnRyYWN0LlxyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXHJcbiAgICAgICAgMik7XHJcbiAgICAvLyBMaW1pdHMgYmFja29mZiB0byBtYXggdG8gYXZvaWQgZWZmZWN0aXZlbHkgcGVybWFuZW50IGJhY2tvZmYuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBvcmRpbmFsKGkpIHtcclxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2l9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xyXG59XHJcbmZ1bmN0aW9uIGluZGljYXRvcihpKSB7XHJcbiAgICBpID0gTWF0aC5hYnMoaSk7XHJcbiAgICBjb25zdCBjZW50ID0gaSAlIDEwMDtcclxuICAgIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcclxuICAgICAgICByZXR1cm4gJ3RoJztcclxuICAgIH1cclxuICAgIGNvbnN0IGRlYyA9IGkgJSAxMDtcclxuICAgIGlmIChkZWMgPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gJ3N0JztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDIpIHtcclxuICAgICAgICByZXR1cm4gJ25kJztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gJ3JkJztcclxuICAgIH1cclxuICAgIHJldHVybiAndGgnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE1vZHVsYXJJbnN0YW5jZShzZXJ2aWNlKSB7XHJcbiAgICBpZiAoc2VydmljZSAmJiBzZXJ2aWNlLl9kZWxlZ2F0ZSkge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlLl9kZWxlZ2F0ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENPTlNUQU5UUywgRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IsIERlZmVycmVkLCBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IsIE1BWF9WQUxVRV9NSUxMSVMsIFJBTkRPTV9GQUNUT1IsIFNoYTEsIGFyZUNvb2tpZXNFbmFibGVkLCBhc3NlcnQsIGFzc2VydGlvbkVycm9yLCBhc3luYywgYmFzZTY0LCBiYXNlNjREZWNvZGUsIGJhc2U2NEVuY29kZSwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMsIGNvbnRhaW5zLCBjcmVhdGVNb2NrVXNlclRva2VuLCBjcmVhdGVTdWJzY3JpYmUsIGRlY29kZSwgZGVlcENvcHksIGRlZXBFcXVhbCwgZGVlcEV4dGVuZCwgZXJyb3JQcmVmaXgsIGV4dHJhY3RRdWVyeXN0cmluZywgZ2V0RGVmYXVsdEFwcENvbmZpZywgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCwgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0LCBnZXREZWZhdWx0cywgZ2V0RXhwZXJpbWVudGFsU2V0dGluZywgZ2V0R2xvYmFsLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBwcm9taXNlV2l0aFRpbWVvdXQsIHF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSwgc2FmZUdldCwgc3RyaW5nTGVuZ3RoLCBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB1dWlkdjQsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIHZhbGlkYXRlQ29udGV4dE9iamVjdCwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgdmFsaWRhdGVOYW1lc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXHJcbiAqIENvbXBvbmVudCBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gYGF1dGhgLCBgYXV0aC1pbnRlcm5hbGBcclxuICovXHJcbmNsYXNzIENvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgcHVibGljIHNlcnZpY2UgbmFtZSwgZS5nLiBhcHAsIGF1dGgsIGZpcmVzdG9yZSwgZGF0YWJhc2VcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZUZhY3RvcnkgU2VydmljZSBmYWN0b3J5IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgcHVibGljIGludGVyZmFjZVxyXG4gICAgICogQHBhcmFtIHR5cGUgd2hldGhlciB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGlzIHB1YmxpYyBvciBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGluc3RhbmNlRmFjdG9yeSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZUZhY3RvcnkgPSBpbnN0YW5jZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBcIkxBWllcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5MQVpZICovO1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFudGlhdGlvbk1vZGUobW9kZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0TXVsdGlwbGVJbnN0YW5jZXMobXVsdGlwbGVJbnN0YW5jZXMpIHtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gbXVsdGlwbGVJbnN0YW5jZXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRTZXJ2aWNlUHJvcHMocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm9uSW5zdGFuY2VDcmVhdGVkID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9uSW5pdENhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXHJcbiAgICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBnZXQoaWRlbnRpZmllcikge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuaGFzKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZGVmZXJyZWQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgZ2V0KCksIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IHJldHVybiB0aGUgdW5yZXNvbHZlZCBwcm9taXNlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpLnByb21pc2U7XHJcbiAgICB9XHJcbiAgICBnZXRJbW1lZGlhdGUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbmFsID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wdGlvbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNtYXRjaGluZyBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZm9yIFByb3ZpZGVyICR7dGhpcy5uYW1lfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgZm9yICR7dGhpcy5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIC8vIHJldHVybiBlYXJseSB3aXRob3V0IGF0dGVtcHRpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgcmVxdWlyZXMgZXhwbGljaXQgaW5pdGlhbGl6YXRpb24gKGNhbGxpbmcgYFByb3ZpZGVyLmluaXRpYWxpemUoKWApXHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBlYWdlciwgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllcjogREVGQVVMVF9FTlRSWV9OQU1FIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IGZvciBhbiBlYWdlciBDb21wb25lbnQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgdGhlIGVhZ2VyXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXphdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZSBhIGZhdGFsIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciBpbiB0aGlzIGNhc2U/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2VzIGZvciB0aGUgcGVuZGluZyBwcm9taXNlcyBhbmQgcmVzb2x2ZSB0aGVtXHJcbiAgICAgICAgLy8gTk9URTogaWYgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyBpcyBmYWxzZSwgb25seSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWRcclxuICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgZm9yIChjb25zdCBbaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZURlZmVycmVkXSBvZiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBgZ2V0T3JJbml0aWFsaXplU2VydmljZSgpYCBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbGlkIGluc3RhbmNlIHNpbmNlIGEgY29tcG9uZW50IGlzIGd1YXJhbnRlZWQuIHVzZSAhIHRvIG1ha2UgdHlwZXNjcmlwdCBoYXBweS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCBsZWF2ZSB0aGUgcHJvbWlzZSB1bnJlc29sdmVkLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICB9XHJcbiAgICAvLyBhcHAuZGVsZXRlKCkgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIG9uIGV2ZXJ5IHByb3ZpZGVyIHRvIGRlbGV0ZSB0aGUgc2VydmljZXNcclxuICAgIC8vIFRPRE86IHNob3VsZCB3ZSBtYXJrIHRoZSBwcm92aWRlciBhcyBkZWxldGVkP1xyXG4gICAgYXN5bmMgZGVsZXRlKCkge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdJTlRFUk5BTCcgaW4gc2VydmljZSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuSU5URVJOQUwuZGVsZXRlKCkpLFxyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdfZGVsZXRlJyBpbiBzZXJ2aWNlKSAvLyBtb2R1bGFyaXplZCBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIC5tYXAoc2VydmljZSA9PiBzZXJ2aWNlLl9kZWxldGUoKSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGlzQ29tcG9uZW50U2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaXNJbml0aWFsaXplZChpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmhhcyhpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIGdldE9wdGlvbnMoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc09wdGlvbnMuZ2V0KGlkZW50aWZpZXIpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZShvcHRzID0ge30pIHtcclxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgPSB7fSB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLm5hbWV9KCR7bm9ybWFsaXplZElkZW50aWZpZXJ9KSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgJHt0aGlzLm5hbWV9IGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHlldGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXIsXHJcbiAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyByZXNvbHZlIGFueSBwZW5kaW5nIHByb21pc2Ugd2FpdGluZyBmb3IgdGhlIHNlcnZpY2UgaW5zdGFuY2VcclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZElkZW50aWZpZXIgPT09IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCAgYWZ0ZXIgdGhlIHByb3ZpZGVyIGhhcyBiZWVuIGluaXRpYWxpemVkIGJ5IGNhbGxpbmcgcHJvdmlkZXIuaW5pdGlhbGl6ZSgpLlxyXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQW4gb3B0aW9uYWwgaW5zdGFuY2UgaWRlbnRpZmllclxyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBvbkluaXQoY2FsbGJhY2ssIGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0NhbGxiYWNrcyA9IChfYSA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChub3JtYWxpemVkSWRlbnRpZmllcikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBTZXQoKTtcclxuICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2Ugb25Jbml0IGNhbGxiYWNrcyBzeW5jaHJvbm91c2x5XHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgdGhlIHNlcnZpY2UgaW5zdGFuY2VgXHJcbiAgICAgKi9cclxuICAgIGludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaWRlbnRpZmllcikge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluaXQgY2FsbGJhY2tcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoeyBpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMgPSB7fSB9KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXMuZ2V0KGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSAmJiB0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpbnN0YW5jZUlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbnZva2Ugb25Jbml0IGxpc3RlbmVycy5cclxuICAgICAgICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxyXG4gICAgICAgICAgICAgKiB3aGlsZSBvbkluaXQgbGlzdGVuZXJzIGFyZSByZWdpc3RlcmVkIGJ5IGNvbnN1bWVycyBvZiB0aGUgcHJvdmlkZXIuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE9yZGVyIGlzIGltcG9ydGFudFxyXG4gICAgICAgICAgICAgKiBvbkluc3RhbmNlQ3JlYXRlZCgpIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpOyB3aGljaFxyXG4gICAgICAgICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCh0aGlzLmNvbnRhaW5lciwgaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluc3RhbmNlQ3JlYXRlZENhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4gKCEhdGhpcy5jb21wb25lbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IFwiRVhQTElDSVRcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVCAqLyk7XHJcbiAgICB9XHJcbn1cclxuLy8gdW5kZWZpbmVkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikge1xyXG4gICAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpIHtcclxuICAgIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IFwiRUFHRVJcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FQUdFUiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIHdpdGggJHt0aGlzLm5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgdGhlIGV4aXN0aW5nIHByb3ZpZGVyIGZyb20gdGhlIGNvbnRhaW5lciwgc28gd2UgY2FuIHJlZ2lzdGVyIHRoZSBuZXcgY29tcG9uZW50XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmRlbGV0ZShjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldFByb3ZpZGVyKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm92aWRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIFByb3ZpZGVyIGZvciBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlXHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQcm92aWRlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2VzXHJcbiAqL1xyXG5jb25zdCBpbnN0YW5jZXMgPSBbXTtcclxuLyoqXHJcbiAqIFRoZSBKUyBTREsgc3VwcG9ydHMgNSBsb2cgbGV2ZWxzIGFuZCBhbHNvIGFsbG93cyBhIHVzZXIgdGhlIGFiaWxpdHkgdG9cclxuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGUgb3JkZXIgaXMgYSBmb2xsb3dzOlxyXG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCB3aWxsIGJlIGNhcHR1cmVkIChpLmUuIGlmXHJcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXHJcbiAqIGBWRVJCT1NFYCBsb2dzIHdpbGwgbm90KVxyXG4gKi9cclxudmFyIExvZ0xldmVsO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJTkZPXCJdID0gMl0gPSBcIklORk9cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV0FSTlwiXSA9IDNdID0gXCJXQVJOXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlNJTEVOVFwiXSA9IDVdID0gXCJTSUxFTlRcIjtcclxufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcclxuY29uc3QgbGV2ZWxTdHJpbmdUb0VudW0gPSB7XHJcbiAgICAnZGVidWcnOiBMb2dMZXZlbC5ERUJVRyxcclxuICAgICd2ZXJib3NlJzogTG9nTGV2ZWwuVkVSQk9TRSxcclxuICAgICdpbmZvJzogTG9nTGV2ZWwuSU5GTyxcclxuICAgICd3YXJuJzogTG9nTGV2ZWwuV0FSTixcclxuICAgICdlcnJvcic6IExvZ0xldmVsLkVSUk9SLFxyXG4gICAgJ3NpbGVudCc6IExvZ0xldmVsLlNJTEVOVFxyXG59O1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGxldmVsXHJcbiAqL1xyXG5jb25zdCBkZWZhdWx0TG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPO1xyXG4vKipcclxuICogQnkgZGVmYXVsdCwgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGRldmVsb3BlciBjb25zb2xlIChpblxyXG4gKiBjaHJvbWUpLiBUbyBhdm9pZCBmb3JjaW5nIHVzZXJzIHRvIGhhdmUgdG8gb3B0LWluIHRvIHRoZXNlIGxvZ3MgdHdpY2VcclxuICogKGkuZS4gb25jZSBmb3IgZmlyZWJhc2UsIGFuZCBvbmNlIGluIHRoZSBjb25zb2xlKSwgd2UgYXJlIHNlbmRpbmcgYERFQlVHYFxyXG4gKiBsb2dzIHRvIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uLlxyXG4gKi9cclxuY29uc3QgQ29uc29sZU1ldGhvZCA9IHtcclxuICAgIFtMb2dMZXZlbC5ERUJVR106ICdsb2cnLFxyXG4gICAgW0xvZ0xldmVsLlZFUkJPU0VdOiAnbG9nJyxcclxuICAgIFtMb2dMZXZlbC5JTkZPXTogJ2luZm8nLFxyXG4gICAgW0xvZ0xldmVsLldBUk5dOiAnd2FybicsXHJcbiAgICBbTG9nTGV2ZWwuRVJST1JdOiAnZXJyb3InXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgaGFuZGxlciB3aWxsIGZvcndhcmQgREVCVUcsIFZFUkJPU0UsIElORk8sIFdBUk4sIGFuZCBFUlJPUlxyXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxyXG4gKiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgbG9nIGxldmVsKVxyXG4gKi9cclxuY29uc3QgZGVmYXVsdExvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxvZ1R5cGUsIC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChsb2dUeXBlIDwgaW5zdGFuY2UubG9nTGV2ZWwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICBjb25zdCBtZXRob2QgPSBDb25zb2xlTWV0aG9kW2xvZ1R5cGVdO1xyXG4gICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICAgIGNvbnNvbGVbbWV0aG9kXShgWyR7bm93fV0gICR7aW5zdGFuY2UubmFtZX06YCwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBsb2cgYSBtZXNzYWdlIHdpdGggYW4gaW52YWxpZCBsb2dUeXBlICh2YWx1ZTogJHtsb2dUeXBlfSlgKTtcclxuICAgIH1cclxufTtcclxuY2xhc3MgTG9nZ2VyIHtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXHJcbiAgICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZ2l2ZW4gTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gZGVmYXVsdExvZ0xldmVsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYWluIChpbnRlcm5hbCkgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQ2FuIGJlIHNldCB0byBhIG5ldyBmdW5jdGlvbiBpbiBpbnRlcm5hbCBwYWNrYWdlIGNvZGUgYnV0IG5vdCBieSB1c2VyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSBkZWZhdWx0TG9nSGFuZGxlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3B0aW9uYWwsIGFkZGl0aW9uYWwsIHVzZXItZGVmaW5lZCBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zdGFuY2VzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICBnZXQgbG9nTGV2ZWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0xldmVsO1xyXG4gICAgfVxyXG4gICAgc2V0IGxvZ0xldmVsKHZhbCkge1xyXG4gICAgICAgIGlmICghKHZhbCBpbiBMb2dMZXZlbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBcIiR7dmFsfVwiIGFzc2lnbmVkIHRvIFxcYGxvZ0xldmVsXFxgYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdmFsO1xyXG4gICAgfVxyXG4gICAgLy8gV29ya2Fyb3VuZCBmb3Igc2V0dGVyL2dldHRlciBoYXZpbmcgdG8gYmUgdGhlIHNhbWUgdHlwZS5cclxuICAgIHNldExvZ0xldmVsKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxvZ0hhbmRsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0hhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBzZXQgbG9nSGFuZGxlcih2YWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBhc3NpZ25lZCB0byBgbG9nSGFuZGxlcmAgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgdXNlckxvZ0hhbmRsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJMb2dIYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgc2V0IHVzZXJMb2dIYW5kbGVyKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gdmFsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcclxuICAgICAqL1xyXG4gICAgZGVidWcoLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGxvZyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiZcclxuICAgICAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGluZm8oLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuSU5GTywgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICB3YXJuKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLldBUk4sIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xyXG4gICAgaW5zdGFuY2VzLmZvckVhY2goaW5zdCA9PiB7XHJcbiAgICAgICAgaW5zdC5zZXRMb2dMZXZlbChsZXZlbCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcclxuICAgICAgICBsZXQgY3VzdG9tTG9nTGV2ZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gKGluc3RhbmNlLCBsZXZlbCwgLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGFyZ3NcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGFyZyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGlnbm9yZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGFyZyA9PiBhcmcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAoY3VzdG9tTG9nTGV2ZWwgIT09IG51bGwgJiYgY3VzdG9tTG9nTGV2ZWwgIT09IHZvaWQgMCA/IGN1c3RvbUxvZ0xldmVsIDogaW5zdGFuY2UubG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogTG9nTGV2ZWxbbGV2ZWxdLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGluc3RhbmNlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTG9nTGV2ZWwsIExvZ2dlciwgc2V0TG9nTGV2ZWwsIHNldFVzZXJMb2dIYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiY29uc3QgaW5zdGFuY2VPZkFueSA9IChvYmplY3QsIGNvbnN0cnVjdG9ycykgPT4gY29uc3RydWN0b3JzLnNvbWUoKGMpID0+IG9iamVjdCBpbnN0YW5jZW9mIGMpO1xuXG5sZXQgaWRiUHJveHlhYmxlVHlwZXM7XG5sZXQgY3Vyc29yQWR2YW5jZU1ldGhvZHM7XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldElkYlByb3h5YWJsZVR5cGVzKCkge1xuICAgIHJldHVybiAoaWRiUHJveHlhYmxlVHlwZXMgfHxcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xuICAgICAgICAgICAgSURCRGF0YWJhc2UsXG4gICAgICAgICAgICBJREJPYmplY3RTdG9yZSxcbiAgICAgICAgICAgIElEQkluZGV4LFxuICAgICAgICAgICAgSURCQ3Vyc29yLFxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24sXG4gICAgICAgIF0pKTtcbn1cbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIChjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fFxuICAgICAgICAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXG4gICAgICAgIF0pKTtcbn1cbmNvbnN0IGN1cnNvclJlcXVlc3RNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXAocmVxdWVzdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gICAgcHJvbWlzZVxuICAgICAgICAudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgLy8gU2luY2UgY3Vyc29yaW5nIHJldXNlcyB0aGUgSURCUmVxdWVzdCAoKnNpZ2gqKSwgd2UgY2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xuICAgICAgICAgICAgY3Vyc29yUmVxdWVzdE1hcC5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb2JqZWN0U3RvcmVOYW1lcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBvYmplY3RTdG9yZU5hbWVzIChib29vKSwgc28gd2UgcG9seWZpbGwgaXQgaGVyZS5cbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXG4gICAgICAgICEoJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZU5hbWVzLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLnNldCh0eCwgc3RvcmVOYW1lcy5zb3J0ID8gc3RvcmVOYW1lcy5zb3J0KCkgOiBbc3RvcmVOYW1lc10pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodHgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBhcyBhLCBpbnN0YW5jZU9mQW55IGFzIGksIHJlcGxhY2VUcmFwcyBhcyByLCB1bndyYXAgYXMgdSwgd3JhcCBhcyB3IH07XG4iLCJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSwgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKSB7XG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCd2ZXJzaW9uY2hhbmdlJywgKGV2ZW50KSA9PiBibG9ja2luZyhldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgcmV0dXJuIG9wZW5Qcm9taXNlO1xufVxuLyoqXG4gKiBEZWxldGUgYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlREIobmFtZSwgeyBibG9ja2VkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiB9O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2dlciwgc2V0VXNlckxvZ0hhbmRsZXIsIHNldExvZ0xldmVsIGFzIHNldExvZ0xldmVsJDEgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgZ2V0RGVmYXVsdEFwcENvbmZpZywgZGVlcEVxdWFsLCBGaXJlYmFzZUVycm9yLCBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZywgaXNJbmRleGVkREJBdmFpbGFibGUsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5leHBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgb3BlbkRCIH0gZnJvbSAnaWRiJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8vIEluIGluaXRpYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgaW5zdGFsbGF0aW9ucyBvblxyXG4gICAgLy8gYXV0aCB0b2tlbiByZWZyZXNoLCBhbmQgaW5zdGFsbGF0aW9ucyB3aWxsIHNlbmQgdGhpcyBzdHJpbmcuXHJcbiAgICBnZXRQbGF0Zm9ybUluZm9TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCk7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHByb3ZpZGVycyBhbmQgZ2V0IGxpYnJhcnkvdmVyc2lvbiBwYWlycyBmcm9tIGFueSB0aGF0IGFyZVxyXG4gICAgICAgIC8vIHZlcnNpb24gY29tcG9uZW50cy5cclxuICAgICAgICByZXR1cm4gcHJvdmlkZXJzXHJcbiAgICAgICAgICAgIC5tYXAocHJvdmlkZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHByb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3NlcnZpY2UubGlicmFyeX0vJHtzZXJ2aWNlLnZlcnNpb259YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihsb2dTdHJpbmcgPT4gbG9nU3RyaW5nKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgY2hlY2sgaWYgdGhpcyBwcm92aWRlciBwcm92aWRlcyBhIFZlcnNpb25TZXJ2aWNlXHJcbiAqXHJcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxyXG4gKiBwcm92aWRlcyBWZXJzaW9uU2VydmljZS4gVGhlIHByb3ZpZGVyIGlzIG5vdCBuZWNlc3NhcmlseSBhICdhcHAtdmVyc2lvbidcclxuICogcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHByb3ZpZGVyLmdldENvbXBvbmVudCgpO1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQgPT09IG51bGwgfHwgY29tcG9uZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wb25lbnQudHlwZSkgPT09IFwiVkVSU0lPTlwiIC8qIENvbXBvbmVudFR5cGUuVkVSU0lPTiAqLztcclxufVxuXG5jb25zdCBuYW1lJG8gPSBcIkBmaXJlYmFzZS9hcHBcIjtcbmNvbnN0IHZlcnNpb24kMSA9IFwiMC45LjEyXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hcHAnKTtcblxuY29uc3QgbmFtZSRuID0gXCJAZmlyZWJhc2UvYXBwLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJG0gPSBcIkBmaXJlYmFzZS9hbmFseXRpY3MtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkbCA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuXG5jb25zdCBuYW1lJGsgPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2stY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkaiA9IFwiQGZpcmViYXNlL2FwcC1jaGVja1wiO1xuXG5jb25zdCBuYW1lJGkgPSBcIkBmaXJlYmFzZS9hdXRoXCI7XG5cbmNvbnN0IG5hbWUkaCA9IFwiQGZpcmViYXNlL2F1dGgtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkZyA9IFwiQGZpcmViYXNlL2RhdGFiYXNlXCI7XG5cbmNvbnN0IG5hbWUkZiA9IFwiQGZpcmViYXNlL2RhdGFiYXNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGUgPSBcIkBmaXJlYmFzZS9mdW5jdGlvbnNcIjtcblxuY29uc3QgbmFtZSRkID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGMgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5cbmNvbnN0IG5hbWUkYiA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnMtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkYSA9IFwiQGZpcmViYXNlL21lc3NhZ2luZ1wiO1xuXG5jb25zdCBuYW1lJDkgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkOCA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlXCI7XG5cbmNvbnN0IG5hbWUkNyA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDYgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnXCI7XG5cbmNvbnN0IG5hbWUkNSA9IFwiQGZpcmViYXNlL3JlbW90ZS1jb25maWctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkNCA9IFwiQGZpcmViYXNlL3N0b3JhZ2VcIjtcblxuY29uc3QgbmFtZSQzID0gXCJAZmlyZWJhc2Uvc3RvcmFnZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQyID0gXCJAZmlyZWJhc2UvZmlyZXN0b3JlXCI7XG5cbmNvbnN0IG5hbWUkMSA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbmNvbnN0IHZlcnNpb24gPSBcIjkuMjIuMlwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgYXBwIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcclxuY29uc3QgUExBVEZPUk1fTE9HX1NUUklORyA9IHtcclxuICAgIFtuYW1lJG9dOiAnZmlyZS1jb3JlJyxcclxuICAgIFtuYW1lJG5dOiAnZmlyZS1jb3JlLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRsXTogJ2ZpcmUtYW5hbHl0aWNzJyxcclxuICAgIFtuYW1lJG1dOiAnZmlyZS1hbmFseXRpY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJGpdOiAnZmlyZS1hcHAtY2hlY2snLFxyXG4gICAgW25hbWUka106ICdmaXJlLWFwcC1jaGVjay1jb21wYXQnLFxyXG4gICAgW25hbWUkaV06ICdmaXJlLWF1dGgnLFxyXG4gICAgW25hbWUkaF06ICdmaXJlLWF1dGgtY29tcGF0JyxcclxuICAgIFtuYW1lJGddOiAnZmlyZS1ydGRiJyxcclxuICAgIFtuYW1lJGZdOiAnZmlyZS1ydGRiLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRlXTogJ2ZpcmUtZm4nLFxyXG4gICAgW25hbWUkZF06ICdmaXJlLWZuLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRjXTogJ2ZpcmUtaWlkJyxcclxuICAgIFtuYW1lJGJdOiAnZmlyZS1paWQtY29tcGF0JyxcclxuICAgIFtuYW1lJGFdOiAnZmlyZS1mY20nLFxyXG4gICAgW25hbWUkOV06ICdmaXJlLWZjbS1jb21wYXQnLFxyXG4gICAgW25hbWUkOF06ICdmaXJlLXBlcmYnLFxyXG4gICAgW25hbWUkN106ICdmaXJlLXBlcmYtY29tcGF0JyxcclxuICAgIFtuYW1lJDZdOiAnZmlyZS1yYycsXHJcbiAgICBbbmFtZSQ1XTogJ2ZpcmUtcmMtY29tcGF0JyxcclxuICAgIFtuYW1lJDRdOiAnZmlyZS1nY3MnLFxyXG4gICAgW25hbWUkM106ICdmaXJlLWdjcy1jb21wYXQnLFxyXG4gICAgW25hbWUkMl06ICdmaXJlLWZzdCcsXHJcbiAgICBbbmFtZSQxXTogJ2ZpcmUtZnN0LWNvbXBhdCcsXHJcbiAgICAnZmlyZS1qcyc6ICdmaXJlLWpzJyxcclxuICAgIFtuYW1lXTogJ2ZpcmUtanMtYWxsJ1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBfYXBwcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIFJlZ2lzdGVyZWQgY29tcG9uZW50cy5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBfY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IGJlaW5nIGFkZGVkIHRvIHRoaXMgYXBwJ3MgY29udGFpbmVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhcHAuY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBGaXJlYmFzZUFwcCAke2FwcC5uYW1lfWAsIGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgYXBwLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCB0byByZWdpc3RlclxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5uYW1lO1xyXG4gICAgaWYgKF9jb21wb25lbnRzLmhhcyhjb21wb25lbnROYW1lKSkge1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgJHtjb21wb25lbnROYW1lfS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBfY29tcG9uZW50cy5zZXQoY29tcG9uZW50TmFtZSwgY29tcG9uZW50KTtcclxuICAgIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcclxuICAgIGZvciAoY29uc3QgYXBwIG9mIF9hcHBzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqXHJcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpIHtcclxuICAgIGNvbnN0IGhlYXJ0YmVhdENvbnRyb2xsZXIgPSBhcHAuY29udGFpbmVyXHJcbiAgICAgICAgLmdldFByb3ZpZGVyKCdoZWFydGJlYXQnKVxyXG4gICAgICAgIC5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICAgIGlmIChoZWFydGJlYXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdm9pZCBoZWFydGJlYXRDb250cm9sbGVyLnRyaWdnZXJIZWFydGJlYXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcHAuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gRmlyZWJhc2VBcHAgaW5zdGFuY2VcclxuICogQHBhcmFtIG5hbWUgLSBzZXJ2aWNlIG5hbWVcclxuICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciAtIHNlcnZpY2UgaW5zdGFuY2UgaWRlbnRpZmllciBpbiBjYXNlIHRoZSBzZXJ2aWNlIHN1cHBvcnRzIG11bHRpcGxlIGluc3RhbmNlc1xyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UoYXBwLCBuYW1lLCBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxufVxyXG4vKipcclxuICogVGVzdCBvbmx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2NsZWFyQ29tcG9uZW50cygpIHtcclxuICAgIF9jb21wb25lbnRzLmNsZWFyKCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRVJST1JTID0ge1xyXG4gICAgW1wibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovXTogXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgaW5pdGlhbGl6ZUFwcCgpIGZpcnN0JyxcclxuICAgIFtcImJhZC1hcHAtbmFtZVwiIC8qIEFwcEVycm9yLkJBRF9BUFBfTkFNRSAqL106IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skYXBwTmFtZX1cIixcclxuICAgIFtcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZXhpc3RzIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgb3IgY29uZmlnXCIsXHJcbiAgICBbXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZGVsZXRlZFwiLFxyXG4gICAgW1wibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi9dOiAnTmVlZCB0byBwcm92aWRlIG9wdGlvbnMsIHdoZW4gbm90IGJlaW5nIGRlcGxveWVkIHRvIGhvc3RpbmcgdmlhIHNvdXJjZS4nLFxyXG4gICAgW1wiaW52YWxpZC1hcHAtYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVCAqL106ICdmaXJlYmFzZS57JGFwcE5hbWV9KCkgdGFrZXMgZWl0aGVyIG5vIGFyZ3VtZW50IG9yIGEgJyArXHJcbiAgICAgICAgJ0ZpcmViYXNlIEFwcCBpbnN0YW5jZS4nLFxyXG4gICAgW1wiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqL106ICdGaXJzdCBhcmd1bWVudCB0byBgb25Mb2dgIG11c3QgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLicsXHJcbiAgICBbXCJpZGItb3BlblwiIC8qIEFwcEVycm9yLklEQl9PUEVOICovXTogJ0Vycm9yIHRocm93biB3aGVuIG9wZW5pbmcgSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovXTogJ0Vycm9yIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLXNldFwiIC8qIEFwcEVycm9yLklEQl9XUklURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiB3cml0aW5nIHRvIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItZGVsZXRlXCIgLyogQXBwRXJyb3IuSURCX0RFTEVURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiBkZWxldGluZyBmcm9tIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LidcclxufTtcclxuY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIEVSUk9SUyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEZpcmViYXNlQXBwSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXBwJywgKCkgPT4gdGhpcywgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgIH1cclxuICAgIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICAgIH1cclxuICAgIGdldCBjb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNEZWxldGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RlbGV0ZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgaXNEZWxldGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBjaGVja0Rlc3Ryb3llZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovLCB7IGFwcE5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBTREsgdmVyc2lvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgU0RLX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQXBwKF9vcHRpb25zLCByYXdDb25maWcgPSB7fSkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSByYXdDb25maWc7XHJcbiAgICAgICAgcmF3Q29uZmlnID0geyBuYW1lIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgbmFtZTogREVGQVVMVF9FTlRSWV9OQU1FLCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGZhbHNlIH0sIHJhd0NvbmZpZyk7XHJcbiAgICBjb25zdCBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0gZ2V0RGVmYXVsdEFwcENvbmZpZygpKTtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgZXhpc3RpbmdBcHAub3B0aW9ucykgJiZcclxuICAgICAgICAgICAgZGVlcEVxdWFsKGNvbmZpZywgZXhpc3RpbmdBcHAuY29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcclxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIF9jb21wb25lbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3QXBwID0gbmV3IEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcik7XHJcbiAgICBfYXBwcy5zZXQobmFtZSwgbmV3QXBwKTtcclxuICAgIHJldHVybiBuZXdBcHA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogV2hlbiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC4gV2hlbiBhbiBhcHAgbmFtZVxyXG4gKiBpcyBwcm92aWRlZCwgdGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cclxuICpcclxuICogQW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiB0aGUgYXBwIGJlaW5nIHJldHJpZXZlZCBoYXMgbm90IHlldCBiZWVuXHJcbiAqIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiB0aGUgZGVmYXVsdCBhcHBcclxuICogY29uc3QgYXBwID0gZ2V0QXBwKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiBhIG5hbWVkIGFwcFxyXG4gKiBjb25zdCBvdGhlckFwcCA9IGdldEFwcChcIm90aGVyQXBwXCIpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIG5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBhcHAgdG8gcmV0dXJuLiBJZiBubyBuYW1lIGlzXHJcbiAqICAgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cclxuICpcclxuICogQHJldHVybnMgVGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZCBhcHAgbmFtZS5cclxuICogICBJZiBubyBhcHAgbmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHAobmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgY29uc3QgYXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKCFhcHAgJiYgbmFtZSA9PT0gREVGQVVMVF9FTlRSWV9OQU1FICYmIGdldERlZmF1bHRBcHBDb25maWcoKSkge1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsaXplQXBwKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwO1xyXG59XHJcbi8qKlxyXG4gKiBBIChyZWFkLW9ubHkpIGFycmF5IG9mIGFsbCBpbml0aWFsaXplZCBhcHBzLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHBzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oX2FwcHMudmFsdWVzKCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZW5kZXJzIHRoaXMgYXBwIHVudXNhYmxlIGFuZCBmcmVlcyB0aGUgcmVzb3VyY2VzIG9mIGFsbCBhc3NvY2lhdGVkXHJcbiAqIHNlcnZpY2VzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGRlbGV0ZUFwcChhcHApXHJcbiAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkFwcCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWxldGluZyBhcHA6XCIsIGVycm9yKTtcclxuICogICB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFwcChhcHApIHtcclxuICAgIGNvbnN0IG5hbWUgPSBhcHAubmFtZTtcclxuICAgIGlmIChfYXBwcy5oYXMobmFtZSkpIHtcclxuICAgICAgICBfYXBwcy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYXBwLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXJzKClcclxuICAgICAgICAgICAgLm1hcChwcm92aWRlciA9PiBwcm92aWRlci5kZWxldGUoKSkpO1xyXG4gICAgICAgIGFwcC5pc0RlbGV0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYSBsaWJyYXJ5J3MgbmFtZSBhbmQgdmVyc2lvbiBmb3IgcGxhdGZvcm0gbG9nZ2luZyBwdXJwb3Nlcy5cclxuICogQHBhcmFtIGxpYnJhcnkgLSBOYW1lIG9mIDFwIG9yIDNwIGxpYnJhcnkgKGUuZy4gZmlyZXN0b3JlLCBhbmd1bGFyZmlyZSlcclxuICogQHBhcmFtIHZlcnNpb24gLSBDdXJyZW50IHZlcnNpb24gb2YgdGhhdCBsaWJyYXJ5LlxyXG4gKiBAcGFyYW0gdmFyaWFudCAtIEJ1bmRsZSB2YXJpYW50LCBlLmcuLCBub2RlLCBybiwgZXRjLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclZlcnNpb24obGlicmFyeUtleU9yTmFtZSwgdmVyc2lvbiwgdmFyaWFudCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXHJcbiAgICAvLyBhIGdvb2Qgd2hpdGVsaXN0IHN5c3RlbS5cclxuICAgIGxldCBsaWJyYXJ5ID0gKF9hID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbGlicmFyeUtleU9yTmFtZTtcclxuICAgIGlmICh2YXJpYW50KSB7XHJcbiAgICAgICAgbGlicmFyeSArPSBgLSR7dmFyaWFudH1gO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgY29uc3QgdmVyc2lvbk1pc21hdGNoID0gdmVyc2lvbi5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgaWYgKGxpYnJhcnlNaXNtYXRjaCB8fCB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICBjb25zdCB3YXJuaW5nID0gW1xyXG4gICAgICAgICAgICBgVW5hYmxlIHRvIHJlZ2lzdGVyIGxpYnJhcnkgXCIke2xpYnJhcnl9XCIgd2l0aCB2ZXJzaW9uIFwiJHt2ZXJzaW9ufVwiOmBcclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKGBsaWJyYXJ5IG5hbWUgXCIke2xpYnJhcnl9XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoICYmIHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goJ2FuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaChgdmVyc2lvbiBuYW1lIFwiJHt2ZXJzaW9ufVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nZ2VyLndhcm4od2FybmluZy5qb2luKCcgJykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGAke2xpYnJhcnl9LXZlcnNpb25gLCAoKSA9PiAoeyBsaWJyYXJ5LCB2ZXJzaW9uIH0pLCBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi8pKTtcclxufVxyXG4vKipcclxuICogU2V0cyBsb2cgaGFuZGxlciBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqIEBwYXJhbSBsb2dDYWxsYmFjayAtIEFuIG9wdGlvbmFsIGN1c3RvbSBsb2cgaGFuZGxlciB0aGF0IGV4ZWN1dGVzIHVzZXIgY29kZSB3aGVuZXZlclxyXG4gKiB0aGUgRmlyZWJhc2UgU0RLIG1ha2VzIGEgbG9nZ2luZyBjYWxsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkxvZyhsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqLyk7XHJcbiAgICB9XHJcbiAgICBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGxldmVsIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIGFyZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYGluZm9gLCBlcnJvcnMgYXJlIGxvZ2dlZCwgYnV0IGBkZWJ1Z2AgYW5kXHJcbiAqIGB2ZXJib3NlYCBsb2dzIGFyZSBub3QpLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xyXG4gICAgc2V0TG9nTGV2ZWwkMShsb2dMZXZlbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREJfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtZGF0YWJhc2UnO1xyXG5jb25zdCBEQl9WRVJTSU9OID0gMTtcclxuY29uc3QgU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLW9wZW5cIiAvKiBBcHBFcnJvci5JREJfT1BFTiAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYlByb21pc2U7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gcmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCKGFwcCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiXHJcbiAgICAgICAgICAgIC50cmFuc2FjdGlvbihTVE9SRV9OQU1FKVxyXG4gICAgICAgICAgICAub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLmdldChjb21wdXRlS2V5KGFwcCkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihlLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaWRiR2V0RXJyb3IgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5hc3luYyBmdW5jdGlvbiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQihhcHAsIGhlYXJ0YmVhdE9iamVjdCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KGhlYXJ0YmVhdE9iamVjdCwgY29tcHV0ZUtleShhcHApKTtcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItc2V0XCIgLyogQXBwRXJyb3IuSURCX1dSSVRFICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlS2V5KGFwcCkge1xyXG4gICAgcmV0dXJuIGAke2FwcC5uYW1lfSEke2FwcC5vcHRpb25zLmFwcElkfWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgTUFYX0hFQURFUl9CWVRFUyA9IDEwMjQ7XHJcbi8vIDMwIGRheXNcclxuY29uc3QgU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUyA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuY2xhc3MgSGVhcnRiZWF0U2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW4tbWVtb3J5IGNhY2hlIGZvciBoZWFydGJlYXRzLCB1c2VkIGJ5IGdldEhlYXJ0YmVhdHNIZWFkZXIoKSB0byBnZW5lcmF0ZVxyXG4gICAgICAgICAqIHRoZSBoZWFkZXIgc3RyaW5nLlxyXG4gICAgICAgICAqIFN0b3JlcyBvbmUgcmVjb3JkIHBlciBkYXRlLiBUaGlzIHdpbGwgYmUgY29uc29saWRhdGVkIGludG8gdGhlIHN0YW5kYXJkXHJcbiAgICAgICAgICogZm9ybWF0IG9mIG9uZSByZWNvcmQgcGVyIHVzZXIgYWdlbnQgc3RyaW5nIGJlZm9yZSBiZWluZyBzZW50IGFzIGEgaGVhZGVyLlxyXG4gICAgICAgICAqIFBvcHVsYXRlZCBmcm9tIGluZGV4ZWREQiB3aGVuIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkXHJcbiAgICAgICAgICogYmUga2VwdCBpbiBzeW5jIHdpdGggaW5kZXhlZERCLlxyXG4gICAgICAgICAqIExlYXZlIHB1YmxpYyBmb3IgZWFzaWVyIHRlc3RpbmcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBIZWFydGJlYXRTdG9yYWdlSW1wbChhcHApO1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UgPSB0aGlzLl9zdG9yYWdlLnJlYWQoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIHJlcG9ydCBhIGhlYXJ0YmVhdC4gVGhlIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGVcclxuICAgICAqIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IG9iamVjdCwgdXBkYXRlIGhlYXJ0YmVhdHNDYWNoZSwgYW5kIHBlcnNpc3QgaXRcclxuICAgICAqIHRvIEluZGV4ZWREQi5cclxuICAgICAqIE5vdGUgdGhhdCB3ZSBvbmx5IHN0b3JlIG9uZSBoZWFydGJlYXQgcGVyIGRheS4gU28gaWYgYSBoZWFydGJlYXQgZm9yIHRvZGF5IGlzXHJcbiAgICAgKiBhbHJlYWR5IGxvZ2dlZCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGluIHRoZSBzYW1lIGRheSB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRyaWdnZXJIZWFydGJlYXQoKSB7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1Mb2dnZXIgPSB0aGlzLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBcIkZpcmViYXNlIHVzZXIgYWdlbnRcIiBzdHJpbmcgZnJvbSB0aGUgcGxhdGZvcm0gbG9nZ2VyXHJcbiAgICAgICAgLy8gc2VydmljZSwgbm90IHRoZSBicm93c2VyIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgYWdlbnQgPSBwbGF0Zm9ybUxvZ2dlci5nZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90IHN0b3JlIGEgaGVhcnRiZWF0IGlmIG9uZSBpcyBhbHJlYWR5IHN0b3JlZCBmb3IgdGhpcyBkYXlcclxuICAgICAgICAvLyBvciBpZiBhIGhlYWRlciBoYXMgYWxyZWFkeSBiZWVuIHNlbnQgdG9kYXkuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPT09IGRhdGUgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuc29tZShzaW5nbGVEYXRlSGVhcnRiZWF0ID0+IHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSA9PT0gZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgZGF0ZS4gQ3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMucHVzaCh7IGRhdGUsIGFnZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgZW50cmllcyBvbGRlciB0aGFuIDMwIGRheXMuXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5maWx0ZXIoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhiVGltZXN0YW1wID0gbmV3IERhdGUoc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBub3cgLSBoYlRpbWVzdGFtcCA8PSBTVE9SRURfSEVBUlRCRUFUX1JFVEVOVElPTl9NQVhfTUlMTElTO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHdoaWNoIGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgaGVhcnRiZWF0LXNwZWNpZmljIGhlYWRlciBkaXJlY3RseS5cclxuICAgICAqIEl0IGFsc28gY2xlYXJzIGFsbCBoZWFydGJlYXRzIGZyb20gbWVtb3J5IGFzIHdlbGwgYXMgaW4gSW5kZXhlZERCLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IENvbnN1bWluZyBwcm9kdWN0IFNES3Mgc2hvdWxkIG5vdCBzZW5kIHRoZSBoZWFkZXIgaWYgdGhpcyBtZXRob2RcclxuICAgICAqIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRIZWFydGJlYXRzSGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBudWxsIG9yIHRoZSBhcnJheSBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gZGF0YSB0byBzZW5kLlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICAvLyBFeHRyYWN0IGFzIG1hbnkgaGVhcnRiZWF0cyBmcm9tIHRoZSBjYWNoZSBhcyB3aWxsIGZpdCB1bmRlciB0aGUgc2l6ZSBsaW1pdC5cclxuICAgICAgICBjb25zdCB7IGhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgfSA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJTdHJpbmcgPSBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNUb1NlbmQgfSkpO1xyXG4gICAgICAgIC8vIFN0b3JlIGxhc3Qgc2VudCBkYXRlIHRvIHByZXZlbnQgYW5vdGhlciBiZWluZyBsb2dnZWQvc2VudCBmb3IgdGhlIHNhbWUgZGF5LlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPSBkYXRlO1xyXG4gICAgICAgIGlmICh1bnNlbnRFbnRyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gU3RvcmUgYW55IHVuc2VudCBlbnRyaWVzIGlmIHRoZXkgZXhpc3QuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdW5zZW50RW50cmllcztcclxuICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyBtb3JlIGxpa2VseSB0aGFuIGVtcHR5aW5nIHRoZSBhcnJheSAoYmVsb3cpIHRvIGxlYWQgdG8gc29tZSBvZGQgc3RhdGVcclxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGNhY2hlIGlzbid0IGVtcHR5IGFuZCB0aGlzIHdpbGwgYmUgY2FsbGVkIGFnYWluIG9uIHRoZSBuZXh0IHJlcXVlc3QsXHJcbiAgICAgICAgICAgIC8vIGFuZCBpcyBwcm9iYWJseSBzYWZlc3QgaWYgd2UgYXdhaXQgaXQuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBEbyBub3Qgd2FpdCBmb3IgdGhpcywgdG8gcmVkdWNlIGxhdGVuY3kuXHJcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlclN0cmluZztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRVVENEYXRlU3RyaW5nKCkge1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gUmV0dXJucyBkYXRlIGZvcm1hdCAnWVlZWS1NTS1ERCdcclxuICAgIHJldHVybiB0b2RheS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoaGVhcnRiZWF0c0NhY2hlLCBtYXhTaXplID0gTUFYX0hFQURFUl9CWVRFUykge1xyXG4gICAgLy8gSGVhcnRiZWF0cyBncm91cGVkIGJ5IHVzZXIgYWdlbnQgaW4gdGhlIHN0YW5kYXJkIGZvcm1hdCB0byBiZSBzZW50IGluXHJcbiAgICAvLyB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0c1RvU2VuZCA9IFtdO1xyXG4gICAgLy8gU2luZ2xlIGRhdGUgZm9ybWF0IGhlYXJ0YmVhdHMgdGhhdCBhcmUgbm90IHNlbnQuXHJcbiAgICBsZXQgdW5zZW50RW50cmllcyA9IGhlYXJ0YmVhdHNDYWNoZS5zbGljZSgpO1xyXG4gICAgZm9yIChjb25zdCBzaW5nbGVEYXRlSGVhcnRiZWF0IG9mIGhlYXJ0YmVhdHNDYWNoZSkge1xyXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IHdpdGggdGhlIHNhbWUgdXNlciBhZ2VudC5cclxuICAgICAgICBjb25zdCBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChoYiA9PiBoYi5hZ2VudCA9PT0gc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCk7XHJcbiAgICAgICAgaWYgKCFoZWFydGJlYXRFbnRyeSkge1xyXG4gICAgICAgICAgICAvLyBJZiBubyBlbnRyeSBmb3IgdGhpcyB1c2VyIGFnZW50IGV4aXN0cywgY3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGFnZW50OiBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0ZXM6IFtzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGVdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY291bnRCeXRlcyhoZWFydGJlYXRzVG9TZW5kKSA+IG1heFNpemUpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGhlYXJ0YmVhdFxyXG4gICAgICAgICAgICAgICAgLy8gZW50cnkgYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzVG9TZW5kLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnB1c2goc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGhlYWRlciB3b3VsZCBleGNlZWQgbWF4IHNpemUsIHJlbW92ZSB0aGUgYWRkZWQgZGF0ZVxyXG4gICAgICAgICAgICAvLyBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBvcCB1bnNlbnQgZW50cnkgZnJvbSBxdWV1ZS4gKFNraXBwZWQgaWYgYWRkaW5nIHRoZSBlbnRyeSBleGNlZWRlZFxyXG4gICAgICAgIC8vIHF1b3RhIGFuZCB0aGUgbG9vcCBicmVha3MgZWFybHkuKVxyXG4gICAgICAgIHVuc2VudEVudHJpZXMgPSB1bnNlbnRFbnRyaWVzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFydGJlYXRzVG9TZW5kLFxyXG4gICAgICAgIHVuc2VudEVudHJpZXNcclxuICAgIH07XHJcbn1cclxuY2xhc3MgSGVhcnRiZWF0U3RvcmFnZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZSA9IHRoaXMucnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpIHtcclxuICAgICAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFsbCBoZWFydGJlYXRzLlxyXG4gICAgICovXHJcbiAgICBhc3luYyByZWFkKCkge1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkhlYXJ0YmVhdE9iamVjdCA9IGF3YWl0IHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQih0aGlzLmFwcCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGJIZWFydGJlYXRPYmplY3QgfHwgeyBoZWFydGJlYXRzOiBbXSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG92ZXJ3cml0ZSB0aGUgc3RvcmFnZSB3aXRoIHRoZSBwcm92aWRlZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBvdmVyd3JpdGUoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gYWRkIGhlYXJ0YmVhdHNcclxuICAgIGFzeW5jIGFkZChoZWFydGJlYXRzT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0ID0gYXdhaXQgdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xyXG4gICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAuLi5oZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYnl0ZXMgb2YgYSBIZWFydGJlYXRzQnlVc2VyQWdlbnQgYXJyYXkgYWZ0ZXIgYmVpbmcgd3JhcHBlZFxyXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxyXG4gKiB0byBiYXNlIDY0LlxyXG4gKi9cclxuZnVuY3Rpb24gY291bnRCeXRlcyhoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cclxuICAgIHJldHVybiBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhcclxuICAgIC8vIGhlYXJ0YmVhdHNDYWNoZSB3cmFwcGVyIHByb3BlcnRpZXNcclxuICAgIEpTT04uc3RyaW5naWZ5KHsgdmVyc2lvbjogMiwgaGVhcnRiZWF0czogaGVhcnRiZWF0c0NhY2hlIH0pKS5sZW5ndGg7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyh2YXJpYW50KSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgY29udGFpbmVyID0+IG5ldyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2hlYXJ0YmVhdCcsIGNvbnRhaW5lciA9PiBuZXcgSGVhcnRiZWF0U2VydmljZUltcGwoY29udGFpbmVyKSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkbywgdmVyc2lvbiQxLCB2YXJpYW50KTtcclxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSRvLCB2ZXJzaW9uJDEsICdlc20yMDE3Jyk7XHJcbiAgICAvLyBSZWdpc3RlciBwbGF0Zm9ybSBTREsgaWRlbnRpZmllciAobm8gdmVyc2lvbikuXHJcbiAgICByZWdpc3RlclZlcnNpb24oJ2ZpcmUtanMnLCAnJyk7XHJcbn1cblxuLyoqXHJcbiAqIEZpcmViYXNlIEFwcFxyXG4gKlxyXG4gKiBAcmVtYXJrcyBUaGlzIHBhY2thZ2UgY29vcmRpbmF0ZXMgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZGlmZmVyZW50IEZpcmViYXNlIGNvbXBvbmVudHNcclxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXHJcbiAqL1xyXG5yZWdpc3RlckNvcmVDb21wb25lbnRzKCcnKTtcblxuZXhwb3J0IHsgU0RLX1ZFUlNJT04sIERFRkFVTFRfRU5UUllfTkFNRSBhcyBfREVGQVVMVF9FTlRSWV9OQU1FLCBfYWRkQ29tcG9uZW50LCBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQsIF9hcHBzLCBfY2xlYXJDb21wb25lbnRzLCBfY29tcG9uZW50cywgX2dldFByb3ZpZGVyLCBfcmVnaXN0ZXJDb21wb25lbnQsIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UsIGRlbGV0ZUFwcCwgZ2V0QXBwLCBnZXRBcHBzLCBpbml0aWFsaXplQXBwLCBvbkxvZywgcmVnaXN0ZXJWZXJzaW9uLCBzZXRMb2dMZXZlbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjkuMjIuMlwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwidmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBlc20gPSB7fTtcblxuLypcblxuIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG5cbnZhciBrLGdvb2c9Z29vZ3x8e30sbD1jb21tb25qc0dsb2JhbHx8c2VsZjtmdW5jdGlvbiBhYShhKXt2YXIgYj10eXBlb2YgYTtiPVwib2JqZWN0XCIhPWI/YjphP0FycmF5LmlzQXJyYXkoYSk/XCJhcnJheVwiOmI6XCJudWxsXCI7cmV0dXJuIFwiYXJyYXlcIj09Ynx8XCJvYmplY3RcIj09YiYmXCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RofWZ1bmN0aW9uIHAoYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuIFwib2JqZWN0XCI9PWImJm51bGwhPWF8fFwiZnVuY3Rpb25cIj09Yn1mdW5jdGlvbiBiYShhKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsY2EpJiZhW2NhXXx8KGFbY2FdPSsrZGEpfXZhciBjYT1cImNsb3N1cmVfdWlkX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApLGRhPTA7ZnVuY3Rpb24gZWEoYSxiLGMpe3JldHVybiBhLmNhbGwuYXBwbHkoYS5iaW5kLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBmYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGUsZCk7cmV0dXJuIGEuYXBwbHkoYixlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBxKGEsYixjKXtGdW5jdGlvbi5wcm90b3R5cGUuYmluZCYmLTEhPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpP3E9ZWE6cT1mYTtyZXR1cm4gcS5hcHBseShudWxsLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBoYShhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1jLnNsaWNlKCk7ZC5wdXNoLmFwcGx5KGQsYXJndW1lbnRzKTtyZXR1cm4gYS5hcHBseSh0aGlzLGQpfX1mdW5jdGlvbiByKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLiQ9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLmFjPWZ1bmN0aW9uKGQsZSxmKXtmb3IodmFyIGg9QXJyYXkoYXJndW1lbnRzLmxlbmd0aC0yKSxuPTI7bjxhcmd1bWVudHMubGVuZ3RoO24rKyloW24tMl09YXJndW1lbnRzW25dO3JldHVybiBiLnByb3RvdHlwZVtlXS5hcHBseShkLGgpfTt9ZnVuY3Rpb24gdigpe3RoaXMucz10aGlzLnM7dGhpcy5vPXRoaXMubzt9dmFyIGlhPTA7di5wcm90b3R5cGUucz0hMTt2LnByb3RvdHlwZS5zYT1mdW5jdGlvbigpe2lmKCF0aGlzLnMmJih0aGlzLnM9ITAsdGhpcy5OKCksMCE9aWEpKXtiYSh0aGlzKTt9fTt2LnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7aWYodGhpcy5vKWZvcig7dGhpcy5vLmxlbmd0aDspdGhpcy5vLnNoaWZ0KCkoKTt9O2NvbnN0IGthPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBcInN0cmluZ1wiIT09dHlwZW9mIGJ8fDEhPWIubGVuZ3RoPy0xOmEuaW5kZXhPZihiLDApO2ZvcihsZXQgYz0wO2M8YS5sZW5ndGg7YysrKWlmKGMgaW4gYSYmYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuIC0xfTtmdW5jdGlvbiBtYShhKXtjb25zdCBiPWEubGVuZ3RoO2lmKDA8Yil7Y29uc3QgYz1BcnJheShiKTtmb3IobGV0IGQ9MDtkPGI7ZCsrKWNbZF09YVtkXTtyZXR1cm4gY31yZXR1cm4gW119XG5mdW5jdGlvbiBuYShhLGIpe2ZvcihsZXQgYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe2NvbnN0IGQ9YXJndW1lbnRzW2NdO2lmKGFhKGQpKXtjb25zdCBlPWEubGVuZ3RofHwwLGY9ZC5sZW5ndGh8fDA7YS5sZW5ndGg9ZStmO2ZvcihsZXQgaD0wO2g8ZjtoKyspYVtlK2hdPWRbaF07fWVsc2UgYS5wdXNoKGQpO319ZnVuY3Rpb24gdyhhLGIpe3RoaXMudHlwZT1hO3RoaXMuZz10aGlzLnRhcmdldD1iO3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMTt9dy5wcm90b3R5cGUuaD1mdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt9O3ZhciBvYT1mdW5jdGlvbigpe2lmKCFsLmFkZEV2ZW50TGlzdGVuZXJ8fCFPYmplY3QuZGVmaW5lUHJvcGVydHkpcmV0dXJuICExO3ZhciBhPSExLGI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXthPSEwO319KTt0cnl7bC5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCgpPT57fSxiKSxsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsKCk9Pnt9LGIpO31jYXRjaChjKXt9cmV0dXJuIGF9KCk7ZnVuY3Rpb24geChhKXtyZXR1cm4gL15bXFxzXFx4YTBdKiQvLnRlc3QoYSl9ZnVuY3Rpb24gcGEoKXt2YXIgYT1sLm5hdmlnYXRvcjtyZXR1cm4gYSYmKGE9YS51c2VyQWdlbnQpP2E6XCJcIn1mdW5jdGlvbiB5KGEpe3JldHVybiAtMSE9cGEoKS5pbmRleE9mKGEpfWZ1bmN0aW9uIHFhKGEpe3FhW1wiIFwiXShhKTtyZXR1cm4gYX1xYVtcIiBcIl09ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIHJhKGEsYil7dmFyIGM9c2E7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLGEpP2NbYV06Y1thXT1iKGEpfXZhciB0YT15KFwiT3BlcmFcIiksej15KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIiksdWE9eShcIkVkZ2VcIiksdmE9dWF8fHosd2E9eShcIkdlY2tvXCIpJiYhKC0xIT1wYSgpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKSYmIXkoXCJFZGdlXCIpKSYmISh5KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIikpJiYheShcIkVkZ2VcIikseGE9LTEhPXBhKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2Via2l0XCIpJiYheShcIkVkZ2VcIik7ZnVuY3Rpb24geWEoKXt2YXIgYT1sLmRvY3VtZW50O3JldHVybiBhP2EuZG9jdW1lbnRNb2RlOnZvaWQgMH12YXIgemE7XG5hOnt2YXIgQWE9XCJcIixCYT1mdW5jdGlvbigpe3ZhciBhPXBhKCk7aWYod2EpcmV0dXJuIC9ydjooW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTtpZih1YSlyZXR1cm4gL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZih6KXJldHVybiAvXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoeGEpcmV0dXJuIC9XZWJLaXRcXC8oXFxTKykvLmV4ZWMoYSk7aWYodGEpcmV0dXJuIC8oPzpWZXJzaW9uKVsgXFwvXT8oXFxTKykvLmV4ZWMoYSl9KCk7QmEmJihBYT1CYT9CYVsxXTpcIlwiKTtpZih6KXt2YXIgQ2E9eWEoKTtpZihudWxsIT1DYSYmQ2E+cGFyc2VGbG9hdChBYSkpe3phPVN0cmluZyhDYSk7YnJlYWsgYX19emE9QWE7fXZhciBEYTtpZihsLmRvY3VtZW50JiZ6KXt2YXIgRWE9eWEoKTtEYT1FYT9FYTpwYXJzZUludCh6YSwxMCl8fHZvaWQgMDt9ZWxzZSBEYT12b2lkIDA7dmFyIEZhPURhO2Z1bmN0aW9uIEEoYSxiKXt3LmNhbGwodGhpcyxhP2EudHlwZTpcIlwiKTt0aGlzLnJlbGF0ZWRUYXJnZXQ9dGhpcy5nPXRoaXMudGFyZ2V0PW51bGw7dGhpcy5idXR0b249dGhpcy5zY3JlZW5ZPXRoaXMuc2NyZWVuWD10aGlzLmNsaWVudFk9dGhpcy5jbGllbnRYPTA7dGhpcy5rZXk9XCJcIjt0aGlzLm1ldGFLZXk9dGhpcy5zaGlmdEtleT10aGlzLmFsdEtleT10aGlzLmN0cmxLZXk9ITE7dGhpcy5zdGF0ZT1udWxsO3RoaXMucG9pbnRlcklkPTA7dGhpcy5wb2ludGVyVHlwZT1cIlwiO3RoaXMuaT1udWxsO2lmKGEpe3ZhciBjPXRoaXMudHlwZT1hLnR5cGUsZD1hLmNoYW5nZWRUb3VjaGVzJiZhLmNoYW5nZWRUb3VjaGVzLmxlbmd0aD9hLmNoYW5nZWRUb3VjaGVzWzBdOm51bGw7dGhpcy50YXJnZXQ9YS50YXJnZXR8fGEuc3JjRWxlbWVudDt0aGlzLmc9YjtpZihiPWEucmVsYXRlZFRhcmdldCl7aWYod2Epe2E6e3RyeXtxYShiLm5vZGVOYW1lKTt2YXIgZT0hMDticmVhayBhfWNhdGNoKGYpe31lPVxuITE7fWV8fChiPW51bGwpO319ZWxzZSBcIm1vdXNlb3ZlclwiPT1jP2I9YS5mcm9tRWxlbWVudDpcIm1vdXNlb3V0XCI9PWMmJihiPWEudG9FbGVtZW50KTt0aGlzLnJlbGF0ZWRUYXJnZXQ9YjtkPyh0aGlzLmNsaWVudFg9dm9pZCAwIT09ZC5jbGllbnRYP2QuY2xpZW50WDpkLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1kLmNsaWVudFk/ZC5jbGllbnRZOmQucGFnZVksdGhpcy5zY3JlZW5YPWQuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9ZC5zY3JlZW5ZfHwwKToodGhpcy5jbGllbnRYPXZvaWQgMCE9PWEuY2xpZW50WD9hLmNsaWVudFg6YS5wYWdlWCx0aGlzLmNsaWVudFk9dm9pZCAwIT09YS5jbGllbnRZP2EuY2xpZW50WTphLnBhZ2VZLHRoaXMuc2NyZWVuWD1hLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWEuc2NyZWVuWXx8MCk7dGhpcy5idXR0b249YS5idXR0b247dGhpcy5rZXk9YS5rZXl8fFwiXCI7dGhpcy5jdHJsS2V5PWEuY3RybEtleTt0aGlzLmFsdEtleT1hLmFsdEtleTt0aGlzLnNoaWZ0S2V5PVxuYS5zaGlmdEtleTt0aGlzLm1ldGFLZXk9YS5tZXRhS2V5O3RoaXMucG9pbnRlcklkPWEucG9pbnRlcklkfHwwO3RoaXMucG9pbnRlclR5cGU9XCJzdHJpbmdcIj09PXR5cGVvZiBhLnBvaW50ZXJUeXBlP2EucG9pbnRlclR5cGU6R2FbYS5wb2ludGVyVHlwZV18fFwiXCI7dGhpcy5zdGF0ZT1hLnN0YXRlO3RoaXMuaT1hO2EuZGVmYXVsdFByZXZlbnRlZCYmQS4kLmguY2FsbCh0aGlzKTt9fXIoQSx3KTt2YXIgR2E9ezI6XCJ0b3VjaFwiLDM6XCJwZW5cIiw0OlwibW91c2VcIn07QS5wcm90b3R5cGUuaD1mdW5jdGlvbigpe0EuJC5oLmNhbGwodGhpcyk7dmFyIGE9dGhpcy5pO2EucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITE7fTt2YXIgSGE9XCJjbG9zdXJlX2xpc3RlbmFibGVfXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApO3ZhciBJYT0wO2Z1bmN0aW9uIEphKGEsYixjLGQsZSl7dGhpcy5saXN0ZW5lcj1hO3RoaXMucHJveHk9bnVsbDt0aGlzLnNyYz1iO3RoaXMudHlwZT1jO3RoaXMuY2FwdHVyZT0hIWQ7dGhpcy5sYT1lO3RoaXMua2V5PSsrSWE7dGhpcy5mYT10aGlzLmlhPSExO31mdW5jdGlvbiBLYShhKXthLmZhPSEwO2EubGlzdGVuZXI9bnVsbDthLnByb3h5PW51bGw7YS5zcmM9bnVsbDthLmxhPW51bGw7fWZ1bmN0aW9uIE5hKGEsYixjKXtmb3IoY29uc3QgZCBpbiBhKWIuY2FsbChjLGFbZF0sZCxhKTt9ZnVuY3Rpb24gT2EoYSxiKXtmb3IoY29uc3QgYyBpbiBhKWIuY2FsbCh2b2lkIDAsYVtjXSxjLGEpO31mdW5jdGlvbiBQYShhKXtjb25zdCBiPXt9O2Zvcihjb25zdCBjIGluIGEpYltjXT1hW2NdO3JldHVybiBifWNvbnN0IFFhPVwiY29uc3RydWN0b3IgaGFzT3duUHJvcGVydHkgaXNQcm90b3R5cGVPZiBwcm9wZXJ0eUlzRW51bWVyYWJsZSB0b0xvY2FsZVN0cmluZyB0b1N0cmluZyB2YWx1ZU9mXCIuc3BsaXQoXCIgXCIpO2Z1bmN0aW9uIFJhKGEsYil7bGV0IGMsZDtmb3IobGV0IGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXtkPWFyZ3VtZW50c1tlXTtmb3IoYyBpbiBkKWFbY109ZFtjXTtmb3IobGV0IGY9MDtmPFFhLmxlbmd0aDtmKyspYz1RYVtmXSxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxjKSYmKGFbY109ZFtjXSk7fX1mdW5jdGlvbiBTYShhKXt0aGlzLnNyYz1hO3RoaXMuZz17fTt0aGlzLmg9MDt9U2EucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEudG9TdHJpbmcoKTthPXRoaXMuZ1tmXTthfHwoYT10aGlzLmdbZl09W10sdGhpcy5oKyspO3ZhciBoPVRhKGEsYixkLGUpOy0xPGg/KGI9YVtoXSxjfHwoYi5pYT0hMSkpOihiPW5ldyBKYShiLHRoaXMuc3JjLGYsISFkLGUpLGIuaWE9YyxhLnB1c2goYikpO3JldHVybiBifTtmdW5jdGlvbiBVYShhLGIpe3ZhciBjPWIudHlwZTtpZihjIGluIGEuZyl7dmFyIGQ9YS5nW2NdLGU9a2EoZCxiKSxmOyhmPTA8PWUpJiZBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZCxlLDEpO2YmJihLYShiKSwwPT1hLmdbY10ubGVuZ3RoJiYoZGVsZXRlIGEuZ1tjXSxhLmgtLSkpO319XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtmb3IodmFyIGU9MDtlPGEubGVuZ3RoOysrZSl7dmFyIGY9YVtlXTtpZighZi5mYSYmZi5saXN0ZW5lcj09YiYmZi5jYXB0dXJlPT0hIWMmJmYubGE9PWQpcmV0dXJuIGV9cmV0dXJuIC0xfXZhciBWYT1cImNsb3N1cmVfbG1fXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApLFdhPXt9O2Z1bmN0aW9uIFlhKGEsYixjLGQsZSl7aWYoZCYmZC5vbmNlKXJldHVybiBaYShhLGIsYyxkLGUpO2lmKEFycmF5LmlzQXJyYXkoYikpe2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKVlhKGEsYltmXSxjLGQsZSk7cmV0dXJuIG51bGx9Yz0kYShjKTtyZXR1cm4gYSYmYVtIYV0/YS5PKGIsYyxwKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTphYihhLGIsYywhMSxkLGUpfVxuZnVuY3Rpb24gYWIoYSxiLGMsZCxlLGYpe2lmKCFiKXRocm93IEVycm9yKFwiSW52YWxpZCBldmVudCB0eXBlXCIpO3ZhciBoPXAoZSk/ISFlLmNhcHR1cmU6ISFlLG49YmIoYSk7bnx8KGFbVmFdPW49bmV3IFNhKGEpKTtjPW4uYWRkKGIsYyxkLGgsZik7aWYoYy5wcm94eSlyZXR1cm4gYztkPWNiKCk7Yy5wcm94eT1kO2Quc3JjPWE7ZC5saXN0ZW5lcj1jO2lmKGEuYWRkRXZlbnRMaXN0ZW5lcilvYXx8KGU9aCksdm9pZCAwPT09ZSYmKGU9ITEpLGEuYWRkRXZlbnRMaXN0ZW5lcihiLnRvU3RyaW5nKCksZCxlKTtlbHNlIGlmKGEuYXR0YWNoRXZlbnQpYS5hdHRhY2hFdmVudChkYihiLnRvU3RyaW5nKCkpLGQpO2Vsc2UgaWYoYS5hZGRMaXN0ZW5lciYmYS5yZW1vdmVMaXN0ZW5lcilhLmFkZExpc3RlbmVyKGQpO2Vsc2UgdGhyb3cgRXJyb3IoXCJhZGRFdmVudExpc3RlbmVyIGFuZCBhdHRhY2hFdmVudCBhcmUgdW5hdmFpbGFibGUuXCIpO3JldHVybiBjfVxuZnVuY3Rpb24gY2IoKXtmdW5jdGlvbiBhKGMpe3JldHVybiBiLmNhbGwoYS5zcmMsYS5saXN0ZW5lcixjKX1jb25zdCBiPWViO3JldHVybiBhfWZ1bmN0aW9uIFphKGEsYixjLGQsZSl7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspWmEoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPSRhKGMpO3JldHVybiBhJiZhW0hhXT9hLlAoYixjLHAoZCk/ISFkLmNhcHR1cmU6ISFkLGUpOmFiKGEsYixjLCEwLGQsZSl9XG5mdW5jdGlvbiBmYihhLGIsYyxkLGUpe2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspZmIoYSxiW2ZdLGMsZCxlKTtlbHNlIChkPXAoZCk/ISFkLmNhcHR1cmU6ISFkLGM9JGEoYyksYSYmYVtIYV0pPyhhPWEuaSxiPVN0cmluZyhiKS50b1N0cmluZygpLGIgaW4gYS5nJiYoZj1hLmdbYl0sYz1UYShmLGMsZCxlKSwtMTxjJiYoS2EoZltjXSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsYywxKSwwPT1mLmxlbmd0aCYmKGRlbGV0ZSBhLmdbYl0sYS5oLS0pKSkpOmEmJihhPWJiKGEpKSYmKGI9YS5nW2IudG9TdHJpbmcoKV0sYT0tMSxiJiYoYT1UYShiLGMsZCxlKSksKGM9LTE8YT9iW2FdOm51bGwpJiZnYihjKSk7fVxuZnVuY3Rpb24gZ2IoYSl7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBhJiZhJiYhYS5mYSl7dmFyIGI9YS5zcmM7aWYoYiYmYltIYV0pVWEoYi5pLGEpO2Vsc2Uge3ZhciBjPWEudHlwZSxkPWEucHJveHk7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLGQsYS5jYXB0dXJlKTpiLmRldGFjaEV2ZW50P2IuZGV0YWNoRXZlbnQoZGIoYyksZCk6Yi5hZGRMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lcihkKTsoYz1iYihiKSk/KFVhKGMsYSksMD09Yy5oJiYoYy5zcmM9bnVsbCxiW1ZhXT1udWxsKSk6S2EoYSk7fX19ZnVuY3Rpb24gZGIoYSl7cmV0dXJuIGEgaW4gV2E/V2FbYV06V2FbYV09XCJvblwiK2F9ZnVuY3Rpb24gZWIoYSxiKXtpZihhLmZhKWE9ITA7ZWxzZSB7Yj1uZXcgQShiLHRoaXMpO3ZhciBjPWEubGlzdGVuZXIsZD1hLmxhfHxhLnNyYzthLmlhJiZnYihhKTthPWMuY2FsbChkLGIpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIGJiKGEpe2E9YVtWYV07cmV0dXJuIGEgaW5zdGFuY2VvZiBTYT9hOm51bGx9dmFyIGhiPVwiX19jbG9zdXJlX2V2ZW50c19mbl9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKTtmdW5jdGlvbiAkYShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYTthW2hiXXx8KGFbaGJdPWZ1bmN0aW9uKGIpe3JldHVybiBhLmhhbmRsZUV2ZW50KGIpfSk7cmV0dXJuIGFbaGJdfWZ1bmN0aW9uIEIoKXt2LmNhbGwodGhpcyk7dGhpcy5pPW5ldyBTYSh0aGlzKTt0aGlzLlM9dGhpczt0aGlzLko9bnVsbDt9cihCLHYpO0IucHJvdG90eXBlW0hhXT0hMDtCLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2ZiKHRoaXMsYSxiLGMsZCk7fTtcbmZ1bmN0aW9uIEMoYSxiKXt2YXIgYyxkPWEuSjtpZihkKWZvcihjPVtdO2Q7ZD1kLkopYy5wdXNoKGQpO2E9YS5TO2Q9Yi50eXBlfHxiO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiliPW5ldyB3KGIsYSk7ZWxzZSBpZihiIGluc3RhbmNlb2YgdyliLnRhcmdldD1iLnRhcmdldHx8YTtlbHNlIHt2YXIgZT1iO2I9bmV3IHcoZCxhKTtSYShiLGUpO31lPSEwO2lmKGMpZm9yKHZhciBmPWMubGVuZ3RoLTE7MDw9ZjtmLS0pe3ZhciBoPWIuZz1jW2ZdO2U9aWIoaCxkLCEwLGIpJiZlO31oPWIuZz1hO2U9aWIoaCxkLCEwLGIpJiZlO2U9aWIoaCxkLCExLGIpJiZlO2lmKGMpZm9yKGY9MDtmPGMubGVuZ3RoO2YrKyloPWIuZz1jW2ZdLGU9aWIoaCxkLCExLGIpJiZlO31cbkIucHJvdG90eXBlLk49ZnVuY3Rpb24oKXtCLiQuTi5jYWxsKHRoaXMpO2lmKHRoaXMuaSl7dmFyIGE9dGhpcy5pLGM7Zm9yKGMgaW4gYS5nKXtmb3IodmFyIGQ9YS5nW2NdLGU9MDtlPGQubGVuZ3RoO2UrKylLYShkW2VdKTtkZWxldGUgYS5nW2NdO2EuaC0tO319dGhpcy5KPW51bGw7fTtCLnByb3RvdHlwZS5PPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmkuYWRkKFN0cmluZyhhKSxiLCExLGMsZCl9O0IucHJvdG90eXBlLlA9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuaS5hZGQoU3RyaW5nKGEpLGIsITAsYyxkKX07XG5mdW5jdGlvbiBpYihhLGIsYyxkKXtiPWEuaS5nW1N0cmluZyhiKV07aWYoIWIpcmV0dXJuICEwO2I9Yi5jb25jYXQoKTtmb3IodmFyIGU9ITAsZj0wO2Y8Yi5sZW5ndGg7KytmKXt2YXIgaD1iW2ZdO2lmKGgmJiFoLmZhJiZoLmNhcHR1cmU9PWMpe3ZhciBuPWgubGlzdGVuZXIsdD1oLmxhfHxoLnNyYztoLmlhJiZVYShhLmksaCk7ZT0hMSE9PW4uY2FsbCh0LGQpJiZlO319cmV0dXJuIGUmJiFkLmRlZmF1bHRQcmV2ZW50ZWR9dmFyIGpiPWwuSlNPTi5zdHJpbmdpZnk7Y2xhc3Mga2J7Y29uc3RydWN0b3IoYSxiKXt0aGlzLmk9YTt0aGlzLmo9Yjt0aGlzLmg9MDt0aGlzLmc9bnVsbDt9Z2V0KCl7bGV0IGE7MDx0aGlzLmg/KHRoaXMuaC0tLGE9dGhpcy5nLHRoaXMuZz1hLm5leHQsYS5uZXh0PW51bGwpOmE9dGhpcy5pKCk7cmV0dXJuIGF9fWZ1bmN0aW9uIGxiKCl7dmFyIGE9bWI7bGV0IGI9bnVsbDthLmcmJihiPWEuZyxhLmc9YS5nLm5leHQsYS5nfHwoYS5oPW51bGwpLGIubmV4dD1udWxsKTtyZXR1cm4gYn1jbGFzcyBuYntjb25zdHJ1Y3Rvcigpe3RoaXMuaD10aGlzLmc9bnVsbDt9YWRkKGEsYil7Y29uc3QgYz1vYi5nZXQoKTtjLnNldChhLGIpO3RoaXMuaD90aGlzLmgubmV4dD1jOnRoaXMuZz1jO3RoaXMuaD1jO319dmFyIG9iPW5ldyBrYigoKT0+bmV3IHBiLGE9PmEucmVzZXQoKSk7Y2xhc3MgcGJ7Y29uc3RydWN0b3IoKXt0aGlzLm5leHQ9dGhpcy5nPXRoaXMuaD1udWxsO31zZXQoYSxiKXt0aGlzLmg9YTt0aGlzLmc9Yjt0aGlzLm5leHQ9bnVsbDt9cmVzZXQoKXt0aGlzLm5leHQ9dGhpcy5nPXRoaXMuaD1udWxsO319ZnVuY3Rpb24gcWIoYSl7dmFyIGI9MTthPWEuc3BsaXQoXCI6XCIpO2NvbnN0IGM9W107Zm9yKDswPGImJmEubGVuZ3RoOyljLnB1c2goYS5zaGlmdCgpKSxiLS07YS5sZW5ndGgmJmMucHVzaChhLmpvaW4oXCI6XCIpKTtyZXR1cm4gY31mdW5jdGlvbiByYihhKXtsLnNldFRpbWVvdXQoKCk9Pnt0aHJvdyBhO30sMCk7fWxldCBzYix0Yj0hMSxtYj1uZXcgbmIsdmI9KCk9Pntjb25zdCBhPWwuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7c2I9KCk9PnthLnRoZW4odWIpO307fTt2YXIgdWI9KCk9Pntmb3IodmFyIGE7YT1sYigpOyl7dHJ5e2EuaC5jYWxsKGEuZyk7fWNhdGNoKGMpe3JiKGMpO312YXIgYj1vYjtiLmooYSk7MTAwPmIuaCYmKGIuaCsrLGEubmV4dD1iLmcsYi5nPWEpO310Yj0hMTt9O2Z1bmN0aW9uIHdiKGEsYil7Qi5jYWxsKHRoaXMpO3RoaXMuaD1hfHwxO3RoaXMuZz1ifHxsO3RoaXMuaj1xKHRoaXMucWIsdGhpcyk7dGhpcy5sPURhdGUubm93KCk7fXIod2IsQik7az13Yi5wcm90b3R5cGU7ay5nYT0hMTtrLlQ9bnVsbDtrLnFiPWZ1bmN0aW9uKCl7aWYodGhpcy5nYSl7dmFyIGE9RGF0ZS5ub3coKS10aGlzLmw7MDxhJiZhPC44KnRoaXMuaD90aGlzLlQ9dGhpcy5nLnNldFRpbWVvdXQodGhpcy5qLHRoaXMuaC1hKToodGhpcy5UJiYodGhpcy5nLmNsZWFyVGltZW91dCh0aGlzLlQpLHRoaXMuVD1udWxsKSxDKHRoaXMsXCJ0aWNrXCIpLHRoaXMuZ2EmJih4Yih0aGlzKSx0aGlzLnN0YXJ0KCkpKTt9fTtrLnN0YXJ0PWZ1bmN0aW9uKCl7dGhpcy5nYT0hMDt0aGlzLlR8fCh0aGlzLlQ9dGhpcy5nLnNldFRpbWVvdXQodGhpcy5qLHRoaXMuaCksdGhpcy5sPURhdGUubm93KCkpO307XG5mdW5jdGlvbiB4YihhKXthLmdhPSExO2EuVCYmKGEuZy5jbGVhclRpbWVvdXQoYS5UKSxhLlQ9bnVsbCk7fWsuTj1mdW5jdGlvbigpe3diLiQuTi5jYWxsKHRoaXMpO3hiKHRoaXMpO2RlbGV0ZSB0aGlzLmc7fTtmdW5jdGlvbiB5YihhLGIsYyl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYyYmKGE9cShhLGMpKTtlbHNlIGlmKGEmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaGFuZGxlRXZlbnQpYT1xKGEuaGFuZGxlRXZlbnQsYSk7ZWxzZSB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7cmV0dXJuIDIxNDc0ODM2NDc8TnVtYmVyKGIpPy0xOmwuc2V0VGltZW91dChhLGJ8fDApfWZ1bmN0aW9uIHpiKGEpe2EuZz15YigoKT0+e2EuZz1udWxsO2EuaSYmKGEuaT0hMSx6YihhKSk7fSxhLmopO2NvbnN0IGI9YS5oO2EuaD1udWxsO2EubS5hcHBseShudWxsLGIpO31jbGFzcyBBYiBleHRlbmRzIHZ7Y29uc3RydWN0b3IoYSxiKXtzdXBlcigpO3RoaXMubT1hO3RoaXMuaj1iO3RoaXMuaD1udWxsO3RoaXMuaT0hMTt0aGlzLmc9bnVsbDt9bChhKXt0aGlzLmg9YXJndW1lbnRzO3RoaXMuZz90aGlzLmk9ITA6emIodGhpcyk7fU4oKXtzdXBlci5OKCk7dGhpcy5nJiYobC5jbGVhclRpbWVvdXQodGhpcy5nKSx0aGlzLmc9bnVsbCx0aGlzLmk9ITEsdGhpcy5oPW51bGwpO319ZnVuY3Rpb24gQmIoYSl7di5jYWxsKHRoaXMpO3RoaXMuaD1hO3RoaXMuZz17fTt9cihCYix2KTt2YXIgQ2I9W107ZnVuY3Rpb24gRGIoYSxiLGMsZCl7QXJyYXkuaXNBcnJheShjKXx8KGMmJihDYlswXT1jLnRvU3RyaW5nKCkpLGM9Q2IpO2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1ZYShiLGNbZV0sZHx8YS5oYW5kbGVFdmVudCwhMSxhLmh8fGEpO2lmKCFmKWJyZWFrO2EuZ1tmLmtleV09Zjt9fWZ1bmN0aW9uIEZiKGEpe05hKGEuZyxmdW5jdGlvbihiLGMpe3RoaXMuZy5oYXNPd25Qcm9wZXJ0eShjKSYmZ2IoYik7fSxhKTthLmc9e307fUJiLnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7QmIuJC5OLmNhbGwodGhpcyk7RmIodGhpcyk7fTtCYi5wcm90b3R5cGUuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcIkV2ZW50SGFuZGxlci5oYW5kbGVFdmVudCBub3QgaW1wbGVtZW50ZWRcIik7fTtmdW5jdGlvbiBHYigpe3RoaXMuZz0hMDt9R2IucHJvdG90eXBlLkVhPWZ1bmN0aW9uKCl7dGhpcy5nPSExO307ZnVuY3Rpb24gSGIoYSxiLGMsZCxlLGYpe2EuaW5mbyhmdW5jdGlvbigpe2lmKGEuZylpZihmKXt2YXIgaD1cIlwiO2Zvcih2YXIgbj1mLnNwbGl0KFwiJlwiKSx0PTA7dDxuLmxlbmd0aDt0Kyspe3ZhciBtPW5bdF0uc3BsaXQoXCI9XCIpO2lmKDE8bS5sZW5ndGgpe3ZhciB1PW1bMF07bT1tWzFdO3ZhciBMPXUuc3BsaXQoXCJfXCIpO2g9Mjw9TC5sZW5ndGgmJlwidHlwZVwiPT1MWzFdP2grKHUrXCI9XCIrbStcIiZcIik6aCsodStcIj1yZWRhY3RlZCZcIik7fX19ZWxzZSBoPW51bGw7ZWxzZSBoPWY7cmV0dXJuIFwiWE1MSFRUUCBSRVEgKFwiK2QrXCIpIFthdHRlbXB0IFwiK2UrXCJdOiBcIitiK1wiXFxuXCIrYytcIlxcblwiK2h9KTt9XG5mdW5jdGlvbiBJYihhLGIsYyxkLGUsZixoKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJYTUxIVFRQIFJFU1AgKFwiK2QrXCIpIFsgYXR0ZW1wdCBcIitlK1wiXTogXCIrYitcIlxcblwiK2MrXCJcXG5cIitmK1wiIFwiK2h9KTt9ZnVuY3Rpb24gRChhLGIsYyxkKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJYTUxIVFRQIFRFWFQgKFwiK2IrXCIpOiBcIitKYihhLGMpKyhkP1wiIFwiK2Q6XCJcIil9KTt9ZnVuY3Rpb24gS2IoYSxiKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm4gXCJUSU1FT1VUOiBcIitifSk7fUdiLnByb3RvdHlwZS5pbmZvPWZ1bmN0aW9uKCl7fTtcbmZ1bmN0aW9uIEpiKGEsYil7aWYoIWEuZylyZXR1cm4gYjtpZighYilyZXR1cm4gbnVsbDt0cnl7dmFyIGM9SlNPTi5wYXJzZShiKTtpZihjKWZvcihhPTA7YTxjLmxlbmd0aDthKyspaWYoQXJyYXkuaXNBcnJheShjW2FdKSl7dmFyIGQ9Y1thXTtpZighKDI+ZC5sZW5ndGgpKXt2YXIgZT1kWzFdO2lmKEFycmF5LmlzQXJyYXkoZSkmJiEoMT5lLmxlbmd0aCkpe3ZhciBmPWVbMF07aWYoXCJub29wXCIhPWYmJlwic3RvcFwiIT1mJiZcImNsb3NlXCIhPWYpZm9yKHZhciBoPTE7aDxlLmxlbmd0aDtoKyspZVtoXT1cIlwiO319fXJldHVybiBqYihjKX1jYXRjaChuKXtyZXR1cm4gYn19dmFyIEU9e30sTGI9bnVsbDtmdW5jdGlvbiBNYigpe3JldHVybiBMYj1MYnx8bmV3IEJ9RS5UYT1cInNlcnZlcnJlYWNoYWJpbGl0eVwiO2Z1bmN0aW9uIE5iKGEpe3cuY2FsbCh0aGlzLEUuVGEsYSk7fXIoTmIsdyk7ZnVuY3Rpb24gT2IoYSl7Y29uc3QgYj1NYigpO0MoYixuZXcgTmIoYikpO31FLlNUQVRfRVZFTlQ9XCJzdGF0ZXZlbnRcIjtmdW5jdGlvbiBQYihhLGIpe3cuY2FsbCh0aGlzLEUuU1RBVF9FVkVOVCxhKTt0aGlzLnN0YXQ9Yjt9cihQYix3KTtmdW5jdGlvbiBGKGEpe2NvbnN0IGI9TWIoKTtDKGIsbmV3IFBiKGIsYSkpO31FLlVhPVwidGltaW5nZXZlbnRcIjtmdW5jdGlvbiBRYihhLGIpe3cuY2FsbCh0aGlzLEUuVWEsYSk7dGhpcy5zaXplPWI7fXIoUWIsdyk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKFwiRm4gbXVzdCBub3QgYmUgbnVsbCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3JldHVybiBsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXthKCk7fSxiKX12YXIgU2I9e05PX0VSUk9SOjAscmI6MSxFYjoyLERiOjMseWI6NCxDYjo1LEZiOjYsUWE6NyxUSU1FT1VUOjgsSWI6OX07dmFyIFRiPXt3YjpcImNvbXBsZXRlXCIsU2I6XCJzdWNjZXNzXCIsUmE6XCJlcnJvclwiLFFhOlwiYWJvcnRcIixLYjpcInJlYWR5XCIsTGI6XCJyZWFkeXN0YXRlY2hhbmdlXCIsVElNRU9VVDpcInRpbWVvdXRcIixHYjpcImluY3JlbWVudGFsZGF0YVwiLEpiOlwicHJvZ3Jlc3NcIix6YjpcImRvd25sb2FkcHJvZ3Jlc3NcIiwkYjpcInVwbG9hZHByb2dyZXNzXCJ9O2Z1bmN0aW9uIFViKCl7fVViLnByb3RvdHlwZS5oPW51bGw7ZnVuY3Rpb24gVmIoYSl7cmV0dXJuIGEuaHx8KGEuaD1hLmkoKSl9ZnVuY3Rpb24gV2IoKXt9dmFyIFhiPXtPUEVOOlwiYVwiLHZiOlwiYlwiLFJhOlwiY1wiLEhiOlwiZFwifTtmdW5jdGlvbiBZYigpe3cuY2FsbCh0aGlzLFwiZFwiKTt9cihZYix3KTtmdW5jdGlvbiBaYigpe3cuY2FsbCh0aGlzLFwiY1wiKTt9cihaYix3KTt2YXIgJGI7ZnVuY3Rpb24gYWMoKXt9cihhYyxVYik7YWMucHJvdG90eXBlLmc9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0fTthYy5wcm90b3R5cGUuaT1mdW5jdGlvbigpe3JldHVybiB7fX07JGI9bmV3IGFjO2Z1bmN0aW9uIGJjKGEsYixjLGQpe3RoaXMubD1hO3RoaXMuaj1iO3RoaXMubT1jO3RoaXMuVz1kfHwxO3RoaXMuVT1uZXcgQmIodGhpcyk7dGhpcy5QPWNjO2E9dmE/MTI1OnZvaWQgMDt0aGlzLlY9bmV3IHdiKGEpO3RoaXMuST1udWxsO3RoaXMuaT0hMTt0aGlzLnM9dGhpcy5BPXRoaXMudj10aGlzLkw9dGhpcy5HPXRoaXMuWT10aGlzLkI9bnVsbDt0aGlzLkY9W107dGhpcy5nPW51bGw7dGhpcy5DPTA7dGhpcy5vPXRoaXMudT1udWxsO3RoaXMuY2E9LTE7dGhpcy5KPSExO3RoaXMuTz0wO3RoaXMuTT1udWxsO3RoaXMuYmE9dGhpcy5LPXRoaXMuYWE9dGhpcy5TPSExO3RoaXMuaD1uZXcgZGM7fWZ1bmN0aW9uIGRjKCl7dGhpcy5pPW51bGw7dGhpcy5nPVwiXCI7dGhpcy5oPSExO312YXIgY2M9NDVFMyxlYz17fSxmYz17fTtrPWJjLnByb3RvdHlwZTtrLnNldFRpbWVvdXQ9ZnVuY3Rpb24oYSl7dGhpcy5QPWE7fTtcbmZ1bmN0aW9uIGdjKGEsYixjKXthLkw9MTthLnY9aGMoRyhiKSk7YS5zPWM7YS5TPSEwO2ljKGEsbnVsbCk7fWZ1bmN0aW9uIGljKGEsYil7YS5HPURhdGUubm93KCk7amMoYSk7YS5BPUcoYS52KTt2YXIgYz1hLkEsZD1hLlc7QXJyYXkuaXNBcnJheShkKXx8KGQ9W1N0cmluZyhkKV0pO2tjKGMuaSxcInRcIixkKTthLkM9MDtjPWEubC5KO2EuaD1uZXcgZGM7YS5nPWxjKGEubCxjP2I6bnVsbCwhYS5zKTswPGEuTyYmKGEuTT1uZXcgQWIocShhLlBhLGEsYS5nKSxhLk8pKTtEYihhLlUsYS5nLFwicmVhZHlzdGF0ZWNoYW5nZVwiLGEubmIpO2I9YS5JP1BhKGEuSSk6e307YS5zPyhhLnV8fChhLnU9XCJQT1NUXCIpLGJbXCJDb250ZW50LVR5cGVcIl09XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixhLmcuaGEoYS5BLGEudSxhLnMsYikpOihhLnU9XCJHRVRcIixhLmcuaGEoYS5BLGEudSxudWxsLGIpKTtPYigpO0hiKGEuaixhLnUsYS5BLGEubSxhLlcsYS5zKTt9XG5rLm5iPWZ1bmN0aW9uKGEpe2E9YS50YXJnZXQ7Y29uc3QgYj10aGlzLk07YiYmMz09SChhKT9iLmwoKTp0aGlzLlBhKGEpO307XG5rLlBhPWZ1bmN0aW9uKGEpe3RyeXtpZihhPT10aGlzLmcpYTp7Y29uc3QgdT1IKHRoaXMuZyk7dmFyIGI9dGhpcy5nLklhKCk7Y29uc3QgTD10aGlzLmcuZGEoKTtpZighKDM+dSkmJigzIT11fHx2YXx8dGhpcy5nJiYodGhpcy5oLmh8fHRoaXMuZy5qYSgpfHxtYyh0aGlzLmcpKSkpe3RoaXMuSnx8NCE9dXx8Nz09Ynx8KDg9PWJ8fDA+PUw/T2IoMyk6T2IoMikpO25jKHRoaXMpO3ZhciBjPXRoaXMuZy5kYSgpO3RoaXMuY2E9YztiOmlmKG9jKHRoaXMpKXt2YXIgZD1tYyh0aGlzLmcpO2E9XCJcIjt2YXIgZT1kLmxlbmd0aCxmPTQ9PUgodGhpcy5nKTtpZighdGhpcy5oLmkpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgVGV4dERlY29kZXIpe0kodGhpcyk7cGModGhpcyk7dmFyIGg9XCJcIjticmVhayBifXRoaXMuaC5pPW5ldyBsLlRleHREZWNvZGVyO31mb3IoYj0wO2I8ZTtiKyspdGhpcy5oLmg9ITAsYSs9dGhpcy5oLmkuZGVjb2RlKGRbYl0se3N0cmVhbTpmJiZiPT1lLTF9KTtkLnNwbGljZSgwLFxuZSk7dGhpcy5oLmcrPWE7dGhpcy5DPTA7aD10aGlzLmguZzt9ZWxzZSBoPXRoaXMuZy5qYSgpO3RoaXMuaT0yMDA9PWM7SWIodGhpcy5qLHRoaXMudSx0aGlzLkEsdGhpcy5tLHRoaXMuVyx1LGMpO2lmKHRoaXMuaSl7aWYodGhpcy5hYSYmIXRoaXMuSyl7Yjp7aWYodGhpcy5nKXt2YXIgbix0PXRoaXMuZztpZigobj10Lmc/dC5nLmdldFJlc3BvbnNlSGVhZGVyKFwiWC1IVFRQLUluaXRpYWwtUmVzcG9uc2VcIik6bnVsbCkmJiF4KG4pKXt2YXIgbT1uO2JyZWFrIGJ9fW09bnVsbDt9aWYoYz1tKUQodGhpcy5qLHRoaXMubSxjLFwiSW5pdGlhbCBoYW5kc2hha2UgcmVzcG9uc2UgdmlhIFgtSFRUUC1Jbml0aWFsLVJlc3BvbnNlXCIpLHRoaXMuSz0hMCxxYyh0aGlzLGMpO2Vsc2Uge3RoaXMuaT0hMTt0aGlzLm89MztGKDEyKTtJKHRoaXMpO3BjKHRoaXMpO2JyZWFrIGF9fXRoaXMuUz8ocmModGhpcyx1LGgpLHZhJiZ0aGlzLmkmJjM9PXUmJihEYih0aGlzLlUsdGhpcy5WLFwidGlja1wiLHRoaXMubWIpLFxudGhpcy5WLnN0YXJ0KCkpKTooRCh0aGlzLmosdGhpcy5tLGgsbnVsbCkscWModGhpcyxoKSk7ND09dSYmSSh0aGlzKTt0aGlzLmkmJiF0aGlzLkomJig0PT11P3NjKHRoaXMubCx0aGlzKToodGhpcy5pPSExLGpjKHRoaXMpKSk7fWVsc2UgdGModGhpcy5nKSw0MDA9PWMmJjA8aC5pbmRleE9mKFwiVW5rbm93biBTSURcIik/KHRoaXMubz0zLEYoMTIpKToodGhpcy5vPTAsRigxMykpLEkodGhpcykscGModGhpcyk7fX19Y2F0Y2godSl7fWZpbmFsbHl7fX07ZnVuY3Rpb24gb2MoYSl7cmV0dXJuIGEuZz9cIkdFVFwiPT1hLnUmJjIhPWEuTCYmYS5sLkhhOiExfVxuZnVuY3Rpb24gcmMoYSxiLGMpe2xldCBkPSEwLGU7Zm9yKDshYS5KJiZhLkM8Yy5sZW5ndGg7KWlmKGU9dWMoYSxjKSxlPT1mYyl7ND09YiYmKGEubz00LEYoMTQpLGQ9ITEpO0QoYS5qLGEubSxudWxsLFwiW0luY29tcGxldGUgUmVzcG9uc2VdXCIpO2JyZWFrfWVsc2UgaWYoZT09ZWMpe2Eubz00O0YoMTUpO0QoYS5qLGEubSxjLFwiW0ludmFsaWQgQ2h1bmtdXCIpO2Q9ITE7YnJlYWt9ZWxzZSBEKGEuaixhLm0sZSxudWxsKSxxYyhhLGUpO29jKGEpJiZlIT1mYyYmZSE9ZWMmJihhLmguZz1cIlwiLGEuQz0wKTs0IT1ifHwwIT1jLmxlbmd0aHx8YS5oLmh8fChhLm89MSxGKDE2KSxkPSExKTthLmk9YS5pJiZkO2Q/MDxjLmxlbmd0aCYmIWEuYmEmJihhLmJhPSEwLGI9YS5sLGIuZz09YSYmYi5jYSYmIWIuTSYmKGIubC5pbmZvKFwiR3JlYXQsIG5vIGJ1ZmZlcmluZyBwcm94eSBkZXRlY3RlZC4gQnl0ZXMgcmVjZWl2ZWQ6IFwiK2MubGVuZ3RoKSx2YyhiKSxiLk09ITAsRigxMSkpKTooRChhLmosYS5tLFxuYyxcIltJbnZhbGlkIENodW5rZWQgUmVzcG9uc2VdXCIpLEkoYSkscGMoYSkpO31rLm1iPWZ1bmN0aW9uKCl7aWYodGhpcy5nKXt2YXIgYT1IKHRoaXMuZyksYj10aGlzLmcuamEoKTt0aGlzLkM8Yi5sZW5ndGgmJihuYyh0aGlzKSxyYyh0aGlzLGEsYiksdGhpcy5pJiY0IT1hJiZqYyh0aGlzKSk7fX07ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLkMsZD1iLmluZGV4T2YoXCJcXG5cIixjKTtpZigtMT09ZClyZXR1cm4gZmM7Yz1OdW1iZXIoYi5zdWJzdHJpbmcoYyxkKSk7aWYoaXNOYU4oYykpcmV0dXJuIGVjO2QrPTE7aWYoZCtjPmIubGVuZ3RoKXJldHVybiBmYztiPWIuc2xpY2UoZCxkK2MpO2EuQz1kK2M7cmV0dXJuIGJ9ay5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLko9ITA7SSh0aGlzKTt9O2Z1bmN0aW9uIGpjKGEpe2EuWT1EYXRlLm5vdygpK2EuUDt3YyhhLGEuUCk7fVxuZnVuY3Rpb24gd2MoYSxiKXtpZihudWxsIT1hLkIpdGhyb3cgRXJyb3IoXCJXYXRjaERvZyB0aW1lciBub3QgbnVsbFwiKTthLkI9UmIocShhLmxiLGEpLGIpO31mdW5jdGlvbiBuYyhhKXthLkImJihsLmNsZWFyVGltZW91dChhLkIpLGEuQj1udWxsKTt9ay5sYj1mdW5jdGlvbigpe3RoaXMuQj1udWxsO2NvbnN0IGE9RGF0ZS5ub3coKTswPD1hLXRoaXMuWT8oS2IodGhpcy5qLHRoaXMuQSksMiE9dGhpcy5MJiYoT2IoKSxGKDE3KSksSSh0aGlzKSx0aGlzLm89MixwYyh0aGlzKSk6d2ModGhpcyx0aGlzLlktYSk7fTtmdW5jdGlvbiBwYyhhKXswPT1hLmwuSHx8YS5KfHxzYyhhLmwsYSk7fWZ1bmN0aW9uIEkoYSl7bmMoYSk7dmFyIGI9YS5NO2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGIuc2EmJmIuc2EoKTthLk09bnVsbDt4YihhLlYpO0ZiKGEuVSk7YS5nJiYoYj1hLmcsYS5nPW51bGwsYi5hYm9ydCgpLGIuc2EoKSk7fVxuZnVuY3Rpb24gcWMoYSxiKXt0cnl7dmFyIGM9YS5sO2lmKDAhPWMuSCYmKGMuZz09YXx8eGMoYy5pLGEpKSlpZighYS5LJiZ4YyhjLmksYSkmJjM9PWMuSCl7dHJ5e3ZhciBkPWMuSmEuZy5wYXJzZShiKTt9Y2F0Y2gobSl7ZD1udWxsO31pZihBcnJheS5pc0FycmF5KGQpJiYzPT1kLmxlbmd0aCl7dmFyIGU9ZDtpZigwPT1lWzBdKWE6e2lmKCFjLnUpe2lmKGMuZylpZihjLmcuRyszRTM8YS5HKXljKGMpLHpjKGMpO2Vsc2UgYnJlYWsgYTtBYyhjKTtGKDE4KTt9fWVsc2UgYy5GYT1lWzFdLDA8Yy5GYS1jLlYmJjM3NTAwPmVbMl0mJmMuRyYmMD09Yy5BJiYhYy52JiYoYy52PVJiKHEoYy5pYixjKSw2RTMpKTtpZigxPj1CYyhjLmkpJiZjLm9hKXt0cnl7Yy5vYSgpO31jYXRjaChtKXt9Yy5vYT12b2lkIDA7fX1lbHNlIEooYywxMSk7fWVsc2UgaWYoKGEuS3x8Yy5nPT1hKSYmeWMoYyksIXgoYikpZm9yKGU9Yy5KYS5nLnBhcnNlKGIpLGI9MDtiPGUubGVuZ3RoO2IrKyl7bGV0IG09ZVtiXTtjLlY9XG5tWzBdO209bVsxXTtpZigyPT1jLkgpaWYoXCJjXCI9PW1bMF0pe2MuSz1tWzFdO2MucGE9bVsyXTtjb25zdCB1PW1bM107bnVsbCE9dSYmKGMucmE9dSxjLmwuaW5mbyhcIlZFUj1cIitjLnJhKSk7Y29uc3QgTD1tWzRdO251bGwhPUwmJihjLkdhPUwsYy5sLmluZm8oXCJTVkVSPVwiK2MuR2EpKTtjb25zdCBMYT1tWzVdO251bGwhPUxhJiZcIm51bWJlclwiPT09dHlwZW9mIExhJiYwPExhJiYoZD0xLjUqTGEsYy5MPWQsYy5sLmluZm8oXCJiYWNrQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfPVwiK2QpKTtkPWM7Y29uc3QgbGE9YS5nO2lmKGxhKXtjb25zdCBNYT1sYS5nP2xhLmcuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLUNsaWVudC1XaXJlLVByb3RvY29sXCIpOm51bGw7aWYoTWEpe3ZhciBmPWQuaTtmLmd8fC0xPT1NYS5pbmRleE9mKFwic3BkeVwiKSYmLTE9PU1hLmluZGV4T2YoXCJxdWljXCIpJiYtMT09TWEuaW5kZXhPZihcImgyXCIpfHwoZi5qPWYubCxmLmc9bmV3IFNldCxmLmgmJihDYyhmLGYuaCksZi5oPW51bGwpKTt9aWYoZC5GKXtjb25zdCBFYj1cbmxhLmc/bGEuZy5nZXRSZXNwb25zZUhlYWRlcihcIlgtSFRUUC1TZXNzaW9uLUlkXCIpOm51bGw7RWImJihkLkRhPUViLEsoZC5JLGQuRixFYikpO319Yy5IPTM7Yy5oJiZjLmguQmEoKTtjLmNhJiYoYy5TPURhdGUubm93KCktYS5HLGMubC5pbmZvKFwiSGFuZHNoYWtlIFJUVDogXCIrYy5TK1wibXNcIikpO2Q9Yzt2YXIgaD1hO2Qud2E9RGMoZCxkLko/ZC5wYTpudWxsLGQuWSk7aWYoaC5LKXtFYyhkLmksaCk7dmFyIG49aCx0PWQuTDt0JiZuLnNldFRpbWVvdXQodCk7bi5CJiYobmMobiksamMobikpO2QuZz1oO31lbHNlIEZjKGQpOzA8Yy5qLmxlbmd0aCYmR2MoYyk7fWVsc2UgXCJzdG9wXCIhPW1bMF0mJlwiY2xvc2VcIiE9bVswXXx8SihjLDcpO2Vsc2UgMz09Yy5IJiYoXCJzdG9wXCI9PW1bMF18fFwiY2xvc2VcIj09bVswXT9cInN0b3BcIj09bVswXT9KKGMsNyk6SGMoYyk6XCJub29wXCIhPW1bMF0mJmMuaCYmYy5oLkFhKG0pLGMuQT0wKTt9T2IoNCk7fWNhdGNoKG0pe319ZnVuY3Rpb24gSWMoYSl7aWYoYS5aJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlopcmV0dXJuIGEuWigpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWFwJiZhIGluc3RhbmNlb2YgTWFwfHxcInVuZGVmaW5lZFwiIT09dHlwZW9mIFNldCYmYSBpbnN0YW5jZW9mIFNldClyZXR1cm4gQXJyYXkuZnJvbShhLnZhbHVlcygpKTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGEuc3BsaXQoXCJcIik7aWYoYWEoYSkpe2Zvcih2YXIgYj1bXSxjPWEubGVuZ3RoLGQ9MDtkPGM7ZCsrKWIucHVzaChhW2RdKTtyZXR1cm4gYn1iPVtdO2M9MDtmb3IoZCBpbiBhKWJbYysrXT1hW2RdO3JldHVybiBifVxuZnVuY3Rpb24gSmMoYSl7aWYoYS50YSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS50YSlyZXR1cm4gYS50YSgpO2lmKCFhLlp8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEuWil7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNYXAmJmEgaW5zdGFuY2VvZiBNYXApcmV0dXJuIEFycmF5LmZyb20oYS5rZXlzKCkpO2lmKCEoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBTZXQmJmEgaW5zdGFuY2VvZiBTZXQpKXtpZihhYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYj1bXTthPWEubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGMpO3JldHVybiBifWI9W107Yz0wO2Zvcihjb25zdCBkIGluIGEpYltjKytdPWQ7cmV0dXJuIGJ9fX1cbmZ1bmN0aW9uIEtjKGEsYil7aWYoYS5mb3JFYWNoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmZvckVhY2gpYS5mb3JFYWNoKGIsdm9pZCAwKTtlbHNlIGlmKGFhKGEpfHxcInN0cmluZ1wiPT09dHlwZW9mIGEpQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsdm9pZCAwKTtlbHNlIGZvcih2YXIgYz1KYyhhKSxkPUljKGEpLGU9ZC5sZW5ndGgsZj0wO2Y8ZTtmKyspYi5jYWxsKHZvaWQgMCxkW2ZdLGMmJmNbZl0sYSk7fXZhciBMYz1SZWdFeHAoXCJeKD86KFteOi8/Iy5dKyk6KT8oPzovLyg/OihbXlxcXFxcXFxcLz8jXSopQCk/KFteXFxcXFxcXFwvPyNdKj8pKD86OihbMC05XSspKT8oPz1bXFxcXFxcXFwvPyNdfCQpKT8oW14/I10rKT8oPzpcXFxcPyhbXiNdKikpPyg/OiMoW1xcXFxzXFxcXFNdKikpPyRcIik7ZnVuY3Rpb24gTWMoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKTt9ZWxzZSBmPWFbY107YihmLGU/ZGVjb2RlVVJJQ29tcG9uZW50KGUucmVwbGFjZSgvXFwrL2csXCIgXCIpKTpcIlwiKTt9fX1mdW5jdGlvbiBNKGEpe3RoaXMuZz10aGlzLnM9dGhpcy5qPVwiXCI7dGhpcy5tPW51bGw7dGhpcy5vPXRoaXMubD1cIlwiO3RoaXMuaD0hMTtpZihhIGluc3RhbmNlb2YgTSl7dGhpcy5oPWEuaDtOYyh0aGlzLGEuaik7dGhpcy5zPWEuczt0aGlzLmc9YS5nO09jKHRoaXMsYS5tKTt0aGlzLmw9YS5sO3ZhciBiPWEuaTt2YXIgYz1uZXcgUGM7Yy5pPWIuaTtiLmcmJihjLmc9bmV3IE1hcChiLmcpLGMuaD1iLmgpO1FjKHRoaXMsYyk7dGhpcy5vPWEubzt9ZWxzZSBhJiYoYj1TdHJpbmcoYSkubWF0Y2goTGMpKT8odGhpcy5oPSExLE5jKHRoaXMsYlsxXXx8XCJcIiwhMCksdGhpcy5zPVJjKGJbMl18fFwiXCIpLHRoaXMuZz1SYyhiWzNdfHxcIlwiLCEwKSxPYyh0aGlzLGJbNF0pLHRoaXMubD1SYyhiWzVdfHxcIlwiLCEwKSxRYyh0aGlzLGJbNl18fFwiXCIsITApLHRoaXMubz1SYyhiWzddfHxcIlwiKSk6KHRoaXMuaD0hMSx0aGlzLmk9bmV3IFBjKG51bGwsdGhpcy5oKSk7fVxuTS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuajtiJiZhLnB1c2goU2MoYixUYywhMCksXCI6XCIpO3ZhciBjPXRoaXMuZztpZihjfHxcImZpbGVcIj09YilhLnB1c2goXCIvL1wiKSwoYj10aGlzLnMpJiZhLnB1c2goU2MoYixUYywhMCksXCJAXCIpLGEucHVzaChlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLGM9dGhpcy5tLG51bGwhPWMmJmEucHVzaChcIjpcIixTdHJpbmcoYykpO2lmKGM9dGhpcy5sKXRoaXMuZyYmXCIvXCIhPWMuY2hhckF0KDApJiZhLnB1c2goXCIvXCIpLGEucHVzaChTYyhjLFwiL1wiPT1jLmNoYXJBdCgwKT9VYzpWYywhMCkpOyhjPXRoaXMuaS50b1N0cmluZygpKSYmYS5wdXNoKFwiP1wiLGMpOyhjPXRoaXMubykmJmEucHVzaChcIiNcIixTYyhjLFdjKSk7cmV0dXJuIGEuam9pbihcIlwiKX07ZnVuY3Rpb24gRyhhKXtyZXR1cm4gbmV3IE0oYSl9XG5mdW5jdGlvbiBOYyhhLGIsYyl7YS5qPWM/UmMoYiwhMCk6YjthLmomJihhLmo9YS5qLnJlcGxhY2UoLzokLyxcIlwiKSk7fWZ1bmN0aW9uIE9jKGEsYil7aWYoYil7Yj1OdW1iZXIoYik7aWYoaXNOYU4oYil8fDA+Yil0aHJvdyBFcnJvcihcIkJhZCBwb3J0IG51bWJlciBcIitiKTthLm09Yjt9ZWxzZSBhLm09bnVsbDt9ZnVuY3Rpb24gUWMoYSxiLGMpe2IgaW5zdGFuY2VvZiBQYz8oYS5pPWIsWGMoYS5pLGEuaCkpOihjfHwoYj1TYyhiLFljKSksYS5pPW5ldyBQYyhiLGEuaCkpO31mdW5jdGlvbiBLKGEsYixjKXthLmkuc2V0KGIsYyk7fWZ1bmN0aW9uIGhjKGEpe0soYSxcInp4XCIsTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KStNYXRoLmFicyhNYXRoLmZsb29yKDIxNDc0ODM2NDgqTWF0aC5yYW5kb20oKSleRGF0ZS5ub3coKSkudG9TdHJpbmcoMzYpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJjKGEsYil7cmV0dXJuIGE/Yj9kZWNvZGVVUkkoYS5yZXBsYWNlKC8lMjUvZyxcIiUyNTI1XCIpKTpkZWNvZGVVUklDb21wb25lbnQoYSk6XCJcIn1mdW5jdGlvbiBTYyhhLGIsYyl7cmV0dXJuIFwic3RyaW5nXCI9PT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLFpjKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBaYyhhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm4gXCIlXCIrKGE+PjQmMTUpLnRvU3RyaW5nKDE2KSsoYSYxNSkudG9TdHJpbmcoMTYpfXZhciBUYz0vWyNcXC9cXD9AXS9nLFZjPS9bI1xcPzpdL2csVWM9L1sjXFw/XS9nLFljPS9bI1xcP0BdL2csV2M9LyMvZztmdW5jdGlvbiBQYyhhLGIpe3RoaXMuaD10aGlzLmc9bnVsbDt0aGlzLmk9YXx8bnVsbDt0aGlzLmo9ISFiO31cbmZ1bmN0aW9uIE4oYSl7YS5nfHwoYS5nPW5ldyBNYXAsYS5oPTAsYS5pJiZNYyhhLmksZnVuY3Rpb24oYixjKXthLmFkZChkZWNvZGVVUklDb21wb25lbnQoYi5yZXBsYWNlKC9cXCsvZyxcIiBcIikpLGMpO30pKTt9az1QYy5wcm90b3R5cGU7ay5hZGQ9ZnVuY3Rpb24oYSxiKXtOKHRoaXMpO3RoaXMuaT1udWxsO2E9Tyh0aGlzLGEpO3ZhciBjPXRoaXMuZy5nZXQoYSk7Y3x8dGhpcy5nLnNldChhLGM9W10pO2MucHVzaChiKTt0aGlzLmgrPTE7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uICRjKGEsYil7TihhKTtiPU8oYSxiKTthLmcuaGFzKGIpJiYoYS5pPW51bGwsYS5oLT1hLmcuZ2V0KGIpLmxlbmd0aCxhLmcuZGVsZXRlKGIpKTt9ZnVuY3Rpb24gYWQoYSxiKXtOKGEpO2I9TyhhLGIpO3JldHVybiBhLmcuaGFzKGIpfVxuay5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7Tih0aGlzKTt0aGlzLmcuZm9yRWFjaChmdW5jdGlvbihjLGQpe2MuZm9yRWFjaChmdW5jdGlvbihlKXthLmNhbGwoYixlLGQsdGhpcyk7fSx0aGlzKTt9LHRoaXMpO307ay50YT1mdW5jdGlvbigpe04odGhpcyk7Y29uc3QgYT1BcnJheS5mcm9tKHRoaXMuZy52YWx1ZXMoKSksYj1BcnJheS5mcm9tKHRoaXMuZy5rZXlzKCkpLGM9W107Zm9yKGxldCBkPTA7ZDxiLmxlbmd0aDtkKyspe2NvbnN0IGU9YVtkXTtmb3IobGV0IGY9MDtmPGUubGVuZ3RoO2YrKyljLnB1c2goYltkXSk7fXJldHVybiBjfTtrLlo9ZnVuY3Rpb24oYSl7Tih0aGlzKTtsZXQgYj1bXTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpYWQodGhpcyxhKSYmKGI9Yi5jb25jYXQodGhpcy5nLmdldChPKHRoaXMsYSkpKSk7ZWxzZSB7YT1BcnJheS5mcm9tKHRoaXMuZy52YWx1ZXMoKSk7Zm9yKGxldCBjPTA7YzxhLmxlbmd0aDtjKyspYj1iLmNvbmNhdChhW2NdKTt9cmV0dXJuIGJ9O1xuay5zZXQ9ZnVuY3Rpb24oYSxiKXtOKHRoaXMpO3RoaXMuaT1udWxsO2E9Tyh0aGlzLGEpO2FkKHRoaXMsYSkmJih0aGlzLmgtPXRoaXMuZy5nZXQoYSkubGVuZ3RoKTt0aGlzLmcuc2V0KGEsW2JdKTt0aGlzLmgrPTE7cmV0dXJuIHRoaXN9O2suZ2V0PWZ1bmN0aW9uKGEsYil7aWYoIWEpcmV0dXJuIGI7YT10aGlzLlooYSk7cmV0dXJuIDA8YS5sZW5ndGg/U3RyaW5nKGFbMF0pOmJ9O2Z1bmN0aW9uIGtjKGEsYixjKXskYyhhLGIpOzA8Yy5sZW5ndGgmJihhLmk9bnVsbCxhLmcuc2V0KE8oYSxiKSxtYShjKSksYS5oKz1jLmxlbmd0aCk7fVxuay50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuaSlyZXR1cm4gdGhpcy5pO2lmKCF0aGlzLmcpcmV0dXJuIFwiXCI7Y29uc3QgYT1bXSxiPUFycmF5LmZyb20odGhpcy5nLmtleXMoKSk7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPWJbY107Y29uc3QgZj1lbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKSxoPXRoaXMuWihkKTtmb3IoZD0wO2Q8aC5sZW5ndGg7ZCsrKXt2YXIgZT1mO1wiXCIhPT1oW2RdJiYoZSs9XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhoW2RdKSkpO2EucHVzaChlKTt9fXJldHVybiB0aGlzLmk9YS5qb2luKFwiJlwiKX07ZnVuY3Rpb24gTyhhLGIpe2I9U3RyaW5nKGIpO2EuaiYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFhjKGEsYil7YiYmIWEuaiYmKE4oYSksYS5pPW51bGwsYS5nLmZvckVhY2goZnVuY3Rpb24oYyxkKXt2YXIgZT1kLnRvTG93ZXJDYXNlKCk7ZCE9ZSYmKCRjKHRoaXMsZCksa2ModGhpcyxlLGMpKTt9LGEpKTthLmo9Yjt9dmFyIGJkPWNsYXNze2NvbnN0cnVjdG9yKGEsYil7dGhpcy5nPWE7dGhpcy5tYXA9Yjt9fTtmdW5jdGlvbiBjZChhKXt0aGlzLmw9YXx8ZGQ7bC5QZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmc/KGE9bC5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKFwibmF2aWdhdGlvblwiKSxhPTA8YS5sZW5ndGgmJihcImhxXCI9PWFbMF0ubmV4dEhvcFByb3RvY29sfHxcImgyXCI9PWFbMF0ubmV4dEhvcFByb3RvY29sKSk6YT0hIShsLmcmJmwuZy5LYSYmbC5nLkthKCkmJmwuZy5LYSgpLmVjKTt0aGlzLmo9YT90aGlzLmw6MTt0aGlzLmc9bnVsbDsxPHRoaXMuaiYmKHRoaXMuZz1uZXcgU2V0KTt0aGlzLmg9bnVsbDt0aGlzLmk9W107fXZhciBkZD0xMDtmdW5jdGlvbiBlZChhKXtyZXR1cm4gYS5oPyEwOmEuZz9hLmcuc2l6ZT49YS5qOiExfWZ1bmN0aW9uIEJjKGEpe3JldHVybiBhLmg/MTphLmc/YS5nLnNpemU6MH1mdW5jdGlvbiB4YyhhLGIpe3JldHVybiBhLmg/YS5oPT1iOmEuZz9hLmcuaGFzKGIpOiExfWZ1bmN0aW9uIENjKGEsYil7YS5nP2EuZy5hZGQoYik6YS5oPWI7fVxuZnVuY3Rpb24gRWMoYSxiKXthLmgmJmEuaD09Yj9hLmg9bnVsbDphLmcmJmEuZy5oYXMoYikmJmEuZy5kZWxldGUoYik7fWNkLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLmk9ZmQodGhpcyk7aWYodGhpcy5oKXRoaXMuaC5jYW5jZWwoKSx0aGlzLmg9bnVsbDtlbHNlIGlmKHRoaXMuZyYmMCE9PXRoaXMuZy5zaXplKXtmb3IoY29uc3QgYSBvZiB0aGlzLmcudmFsdWVzKCkpYS5jYW5jZWwoKTt0aGlzLmcuY2xlYXIoKTt9fTtmdW5jdGlvbiBmZChhKXtpZihudWxsIT1hLmgpcmV0dXJuIGEuaS5jb25jYXQoYS5oLkYpO2lmKG51bGwhPWEuZyYmMCE9PWEuZy5zaXplKXtsZXQgYj1hLmk7Zm9yKGNvbnN0IGMgb2YgYS5nLnZhbHVlcygpKWI9Yi5jb25jYXQoYy5GKTtyZXR1cm4gYn1yZXR1cm4gbWEoYS5pKX12YXIgZ2Q9Y2xhc3N7c3RyaW5naWZ5KGEpe3JldHVybiBsLkpTT04uc3RyaW5naWZ5KGEsdm9pZCAwKX1wYXJzZShhKXtyZXR1cm4gbC5KU09OLnBhcnNlKGEsdm9pZCAwKX19O2Z1bmN0aW9uIGhkKCl7dGhpcy5nPW5ldyBnZDt9ZnVuY3Rpb24gaWQoYSxiLGMpe2NvbnN0IGQ9Y3x8XCJcIjt0cnl7S2MoYSxmdW5jdGlvbihlLGYpe2xldCBoPWU7cChlKSYmKGg9amIoZSkpO2IucHVzaChkK2YrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGgpKTt9KTt9Y2F0Y2goZSl7dGhyb3cgYi5wdXNoKGQrXCJ0eXBlPVwiK2VuY29kZVVSSUNvbXBvbmVudChcIl9iYWRtYXBcIikpLGU7fX1mdW5jdGlvbiBqZChhLGIpe2NvbnN0IGM9bmV3IEdiO2lmKGwuSW1hZ2Upe2NvbnN0IGQ9bmV3IEltYWdlO2Qub25sb2FkPWhhKGtkLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IGxvYWRlZFwiLCEwLGIpO2Qub25lcnJvcj1oYShrZCxjLGQsXCJUZXN0TG9hZEltYWdlOiBlcnJvclwiLCExLGIpO2Qub25hYm9ydD1oYShrZCxjLGQsXCJUZXN0TG9hZEltYWdlOiBhYm9ydFwiLCExLGIpO2Qub250aW1lb3V0PWhhKGtkLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IHRpbWVvdXRcIiwhMSxiKTtsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihkLm9udGltZW91dClkLm9udGltZW91dCgpO30sMUU0KTtkLnNyYz1hO31lbHNlIGIoITEpO31mdW5jdGlvbiBrZChhLGIsYyxkLGUpe3RyeXtiLm9ubG9hZD1udWxsLGIub25lcnJvcj1udWxsLGIub25hYm9ydD1udWxsLGIub250aW1lb3V0PW51bGwsZShkKTt9Y2F0Y2goZil7fX1mdW5jdGlvbiBsZChhKXt0aGlzLmw9YS5mY3x8bnVsbDt0aGlzLmo9YS5vYnx8ITE7fXIobGQsVWIpO2xkLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBtZCh0aGlzLmwsdGhpcy5qKX07bGQucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSh7fSk7ZnVuY3Rpb24gbWQoYSxiKXtCLmNhbGwodGhpcyk7dGhpcy5GPWE7dGhpcy51PWI7dGhpcy5tPXZvaWQgMDt0aGlzLnJlYWR5U3RhdGU9bmQ7dGhpcy5zdGF0dXM9MDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPXRoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7dGhpcy52PW5ldyBIZWFkZXJzO3RoaXMuaD1udWxsO3RoaXMuQz1cIkdFVFwiO3RoaXMuQj1cIlwiO3RoaXMuZz0hMTt0aGlzLkE9dGhpcy5qPXRoaXMubD1udWxsO31yKG1kLEIpO3ZhciBuZD0wO2s9bWQucHJvdG90eXBlO1xuay5vcGVuPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5yZWFkeVN0YXRlIT1uZCl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJFcnJvciByZW9wZW5pbmcgYSBjb25uZWN0aW9uXCIpO3RoaXMuQz1hO3RoaXMuQj1iO3RoaXMucmVhZHlTdGF0ZT0xO29kKHRoaXMpO307ay5zZW5kPWZ1bmN0aW9uKGEpe2lmKDEhPXRoaXMucmVhZHlTdGF0ZSl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJuZWVkIHRvIGNhbGwgb3BlbigpIGZpcnN0LiBcIik7dGhpcy5nPSEwO2NvbnN0IGI9e2hlYWRlcnM6dGhpcy52LG1ldGhvZDp0aGlzLkMsY3JlZGVudGlhbHM6dGhpcy5tLGNhY2hlOnZvaWQgMH07YSYmKGIuYm9keT1hKTsodGhpcy5GfHxsKS5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLkIsYikpLnRoZW4odGhpcy4kYS5iaW5kKHRoaXMpLHRoaXMua2EuYmluZCh0aGlzKSk7fTtcbmsuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7dGhpcy52PW5ldyBIZWFkZXJzO3RoaXMuc3RhdHVzPTA7dGhpcy5qJiZ0aGlzLmouY2FuY2VsKFwiUmVxdWVzdCB3YXMgYWJvcnRlZC5cIikuY2F0Y2goKCk9Pnt9KTsxPD10aGlzLnJlYWR5U3RhdGUmJnRoaXMuZyYmNCE9dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5nPSExLHBkKHRoaXMpKTt0aGlzLnJlYWR5U3RhdGU9bmQ7fTtcbmsuJGE9ZnVuY3Rpb24oYSl7aWYodGhpcy5nJiYodGhpcy5sPWEsdGhpcy5ofHwodGhpcy5zdGF0dXM9dGhpcy5sLnN0YXR1cyx0aGlzLnN0YXR1c1RleHQ9dGhpcy5sLnN0YXR1c1RleHQsdGhpcy5oPWEuaGVhZGVycyx0aGlzLnJlYWR5U3RhdGU9MixvZCh0aGlzKSksdGhpcy5nJiYodGhpcy5yZWFkeVN0YXRlPTMsb2QodGhpcyksdGhpcy5nKSkpaWYoXCJhcnJheWJ1ZmZlclwiPT09dGhpcy5yZXNwb25zZVR5cGUpYS5hcnJheUJ1ZmZlcigpLnRoZW4odGhpcy5ZYS5iaW5kKHRoaXMpLHRoaXMua2EuYmluZCh0aGlzKSk7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuUmVhZGFibGVTdHJlYW0mJlwiYm9keVwiaW4gYSl7dGhpcy5qPWEuYm9keS5nZXRSZWFkZXIoKTtpZih0aGlzLnUpe2lmKHRoaXMucmVzcG9uc2VUeXBlKXRocm93IEVycm9yKCdyZXNwb25zZVR5cGUgbXVzdCBiZSBlbXB0eSBmb3IgXCJzdHJlYW1CaW5hcnlDaHVua3NcIiBtb2RlIHJlc3BvbnNlcy4nKTt0aGlzLnJlc3BvbnNlPVxuW107fWVsc2UgdGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dD1cIlwiLHRoaXMuQT1uZXcgVGV4dERlY29kZXI7cWQodGhpcyk7fWVsc2UgYS50ZXh0KCkudGhlbih0aGlzLlphLmJpbmQodGhpcyksdGhpcy5rYS5iaW5kKHRoaXMpKTt9O2Z1bmN0aW9uIHFkKGEpe2Euai5yZWFkKCkudGhlbihhLlhhLmJpbmQoYSkpLmNhdGNoKGEua2EuYmluZChhKSk7fWsuWGE9ZnVuY3Rpb24oYSl7aWYodGhpcy5nKXtpZih0aGlzLnUmJmEudmFsdWUpdGhpcy5yZXNwb25zZS5wdXNoKGEudmFsdWUpO2Vsc2UgaWYoIXRoaXMudSl7dmFyIGI9YS52YWx1ZT9hLnZhbHVlOm5ldyBVaW50OEFycmF5KDApO2lmKGI9dGhpcy5BLmRlY29kZShiLHtzdHJlYW06IWEuZG9uZX0pKXRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQrPWI7fWEuZG9uZT9wZCh0aGlzKTpvZCh0aGlzKTszPT10aGlzLnJlYWR5U3RhdGUmJnFkKHRoaXMpO319O1xuay5aYT1mdW5jdGlvbihhKXt0aGlzLmcmJih0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PWEscGQodGhpcykpO307ay5ZYT1mdW5jdGlvbihhKXt0aGlzLmcmJih0aGlzLnJlc3BvbnNlPWEscGQodGhpcykpO307ay5rYT1mdW5jdGlvbigpe3RoaXMuZyYmcGQodGhpcyk7fTtmdW5jdGlvbiBwZChhKXthLnJlYWR5U3RhdGU9NDthLmw9bnVsbDthLmo9bnVsbDthLkE9bnVsbDtvZChhKTt9ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGEsYil7dGhpcy52LmFwcGVuZChhLGIpO307ay5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5oP3RoaXMuaC5nZXQoYS50b0xvd2VyQ2FzZSgpKXx8XCJcIjpcIlwifTtcbmsuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaClyZXR1cm4gXCJcIjtjb25zdCBhPVtdLGI9dGhpcy5oLmVudHJpZXMoKTtmb3IodmFyIGM9Yi5uZXh0KCk7IWMuZG9uZTspYz1jLnZhbHVlLGEucHVzaChjWzBdK1wiOiBcIitjWzFdKSxjPWIubmV4dCgpO3JldHVybiBhLmpvaW4oXCJcXHJcXG5cIil9O2Z1bmN0aW9uIG9kKGEpe2Eub25yZWFkeXN0YXRlY2hhbmdlJiZhLm9ucmVhZHlzdGF0ZWNoYW5nZS5jYWxsKGEpO31PYmplY3QuZGVmaW5lUHJvcGVydHkobWQucHJvdG90eXBlLFwid2l0aENyZWRlbnRpYWxzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBcImluY2x1ZGVcIj09PXRoaXMubX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMubT1hP1wiaW5jbHVkZVwiOlwic2FtZS1vcmlnaW5cIjt9fSk7dmFyIHJkPWwuSlNPTi5wYXJzZTtmdW5jdGlvbiBQKGEpe0IuY2FsbCh0aGlzKTt0aGlzLmhlYWRlcnM9bmV3IE1hcDt0aGlzLnU9YXx8bnVsbDt0aGlzLmg9ITE7dGhpcy5DPXRoaXMuZz1udWxsO3RoaXMuST1cIlwiO3RoaXMubT0wO3RoaXMuaj1cIlwiO3RoaXMubD10aGlzLkc9dGhpcy52PXRoaXMuRj0hMTt0aGlzLkI9MDt0aGlzLkE9bnVsbDt0aGlzLks9c2Q7dGhpcy5MPXRoaXMuTT0hMTt9cihQLEIpO3ZhciBzZD1cIlwiLHRkPS9eaHR0cHM/JC9pLHVkPVtcIlBPU1RcIixcIlBVVFwiXTtrPVAucHJvdG90eXBlO2suT2E9ZnVuY3Rpb24oYSl7dGhpcy5NPWE7fTtcbmsuaGE9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodGhpcy5nKXRocm93IEVycm9yKFwiW2dvb2cubmV0LlhocklvXSBPYmplY3QgaXMgYWN0aXZlIHdpdGggYW5vdGhlciByZXF1ZXN0PVwiK3RoaXMuSStcIjsgbmV3VXJpPVwiK2EpO2I9Yj9iLnRvVXBwZXJDYXNlKCk6XCJHRVRcIjt0aGlzLkk9YTt0aGlzLmo9XCJcIjt0aGlzLm09MDt0aGlzLkY9ITE7dGhpcy5oPSEwO3RoaXMuZz10aGlzLnU/dGhpcy51LmcoKTokYi5nKCk7dGhpcy5DPXRoaXMudT9WYih0aGlzLnUpOlZiKCRiKTt0aGlzLmcub25yZWFkeXN0YXRlY2hhbmdlPXEodGhpcy5MYSx0aGlzKTt0cnl7dGhpcy5HPSEwLHRoaXMuZy5vcGVuKGIsU3RyaW5nKGEpLCEwKSx0aGlzLkc9ITE7fWNhdGNoKGYpe3ZkKHRoaXMsZik7cmV0dXJufWE9Y3x8XCJcIjtjPW5ldyBNYXAodGhpcy5oZWFkZXJzKTtpZihkKWlmKE9iamVjdC5nZXRQcm90b3R5cGVPZihkKT09PU9iamVjdC5wcm90b3R5cGUpZm9yKHZhciBlIGluIGQpYy5zZXQoZSxkW2VdKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGQua2V5cyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0KWZvcihjb25zdCBmIG9mIGQua2V5cygpKWMuc2V0KGYsZC5nZXQoZikpO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIGlucHV0IHR5cGUgZm9yIG9wdF9oZWFkZXJzOiBcIitTdHJpbmcoZCkpO2Q9QXJyYXkuZnJvbShjLmtleXMoKSkuZmluZChmPT5cImNvbnRlbnQtdHlwZVwiPT1mLnRvTG93ZXJDYXNlKCkpO2U9bC5Gb3JtRGF0YSYmYSBpbnN0YW5jZW9mIGwuRm9ybURhdGE7ISgwPD1rYSh1ZCxiKSl8fGR8fGV8fGMuc2V0KFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtmb3IoY29uc3QgW2YsaF1vZiBjKXRoaXMuZy5zZXRSZXF1ZXN0SGVhZGVyKGYsaCk7dGhpcy5LJiYodGhpcy5nLnJlc3BvbnNlVHlwZT10aGlzLkspO1wid2l0aENyZWRlbnRpYWxzXCJpbiB0aGlzLmcmJnRoaXMuZy53aXRoQ3JlZGVudGlhbHMhPT10aGlzLk0mJih0aGlzLmcud2l0aENyZWRlbnRpYWxzPVxudGhpcy5NKTt0cnl7d2QodGhpcyksMDx0aGlzLkImJigodGhpcy5MPXhkKHRoaXMuZykpPyh0aGlzLmcudGltZW91dD10aGlzLkIsdGhpcy5nLm9udGltZW91dD1xKHRoaXMudWEsdGhpcykpOnRoaXMuQT15Yih0aGlzLnVhLHRoaXMuQix0aGlzKSksdGhpcy52PSEwLHRoaXMuZy5zZW5kKGEpLHRoaXMudj0hMTt9Y2F0Y2goZil7dmQodGhpcyxmKTt9fTtmdW5jdGlvbiB4ZChhKXtyZXR1cm4geiYmXCJudW1iZXJcIj09PXR5cGVvZiBhLnRpbWVvdXQmJnZvaWQgMCE9PWEub250aW1lb3V0fWsudWE9ZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ29vZyYmdGhpcy5nJiYodGhpcy5qPVwiVGltZWQgb3V0IGFmdGVyIFwiK3RoaXMuQitcIm1zLCBhYm9ydGluZ1wiLHRoaXMubT04LEModGhpcyxcInRpbWVvdXRcIiksdGhpcy5hYm9ydCg4KSk7fTtmdW5jdGlvbiB2ZChhLGIpe2EuaD0hMTthLmcmJihhLmw9ITAsYS5nLmFib3J0KCksYS5sPSExKTthLmo9YjthLm09NTt5ZChhKTt6ZChhKTt9XG5mdW5jdGlvbiB5ZChhKXthLkZ8fChhLkY9ITAsQyhhLFwiY29tcGxldGVcIiksQyhhLFwiZXJyb3JcIikpO31rLmFib3J0PWZ1bmN0aW9uKGEpe3RoaXMuZyYmdGhpcy5oJiYodGhpcy5oPSExLHRoaXMubD0hMCx0aGlzLmcuYWJvcnQoKSx0aGlzLmw9ITEsdGhpcy5tPWF8fDcsQyh0aGlzLFwiY29tcGxldGVcIiksQyh0aGlzLFwiYWJvcnRcIiksemQodGhpcykpO307ay5OPWZ1bmN0aW9uKCl7dGhpcy5nJiYodGhpcy5oJiYodGhpcy5oPSExLHRoaXMubD0hMCx0aGlzLmcuYWJvcnQoKSx0aGlzLmw9ITEpLHpkKHRoaXMsITApKTtQLiQuTi5jYWxsKHRoaXMpO307ay5MYT1mdW5jdGlvbigpe3RoaXMuc3x8KHRoaXMuR3x8dGhpcy52fHx0aGlzLmw/QWQodGhpcyk6dGhpcy5rYigpKTt9O2sua2I9ZnVuY3Rpb24oKXtBZCh0aGlzKTt9O1xuZnVuY3Rpb24gQWQoYSl7aWYoYS5oJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZ29vZyYmKCFhLkNbMV18fDQhPUgoYSl8fDIhPWEuZGEoKSkpaWYoYS52JiY0PT1IKGEpKXliKGEuTGEsMCxhKTtlbHNlIGlmKEMoYSxcInJlYWR5c3RhdGVjaGFuZ2VcIiksND09SChhKSl7YS5oPSExO3RyeXtjb25zdCBoPWEuZGEoKTthOnN3aXRjaChoKXtjYXNlIDIwMDpjYXNlIDIwMTpjYXNlIDIwMjpjYXNlIDIwNDpjYXNlIDIwNjpjYXNlIDMwNDpjYXNlIDEyMjM6dmFyIGI9ITA7YnJlYWsgYTtkZWZhdWx0OmI9ITE7fXZhciBjO2lmKCEoYz1iKSl7dmFyIGQ7aWYoZD0wPT09aCl7dmFyIGU9U3RyaW5nKGEuSSkubWF0Y2goTGMpWzFdfHxudWxsOyFlJiZsLnNlbGYmJmwuc2VsZi5sb2NhdGlvbiYmKGU9bC5zZWxmLmxvY2F0aW9uLnByb3RvY29sLnNsaWNlKDAsLTEpKTtkPSF0ZC50ZXN0KGU/ZS50b0xvd2VyQ2FzZSgpOlwiXCIpO31jPWQ7fWlmKGMpQyhhLFwiY29tcGxldGVcIiksQyhhLFwic3VjY2Vzc1wiKTtlbHNlIHthLm09XG42O3RyeXt2YXIgZj0yPEgoYSk/YS5nLnN0YXR1c1RleHQ6XCJcIjt9Y2F0Y2gobil7Zj1cIlwiO31hLmo9ZitcIiBbXCIrYS5kYSgpK1wiXVwiO3lkKGEpO319ZmluYWxseXt6ZChhKTt9fX1mdW5jdGlvbiB6ZChhLGIpe2lmKGEuZyl7d2QoYSk7Y29uc3QgYz1hLmcsZD1hLkNbMF0/KCk9Pnt9Om51bGw7YS5nPW51bGw7YS5DPW51bGw7Ynx8QyhhLFwicmVhZHlcIik7dHJ5e2Mub25yZWFkeXN0YXRlY2hhbmdlPWQ7fWNhdGNoKGUpe319fWZ1bmN0aW9uIHdkKGEpe2EuZyYmYS5MJiYoYS5nLm9udGltZW91dD1udWxsKTthLkEmJihsLmNsZWFyVGltZW91dChhLkEpLGEuQT1udWxsKTt9ay5pc0FjdGl2ZT1mdW5jdGlvbigpe3JldHVybiAhIXRoaXMuZ307ZnVuY3Rpb24gSChhKXtyZXR1cm4gYS5nP2EuZy5yZWFkeVN0YXRlOjB9ay5kYT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gMjxIKHRoaXMpP3RoaXMuZy5zdGF0dXM6LTF9Y2F0Y2goYSl7cmV0dXJuIC0xfX07XG5rLmphPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLmc/dGhpcy5nLnJlc3BvbnNlVGV4dDpcIlwifWNhdGNoKGEpe3JldHVybiBcIlwifX07ay5XYT1mdW5jdGlvbihhKXtpZih0aGlzLmcpe3ZhciBiPXRoaXMuZy5yZXNwb25zZVRleHQ7YSYmMD09Yi5pbmRleE9mKGEpJiYoYj1iLnN1YnN0cmluZyhhLmxlbmd0aCkpO3JldHVybiByZChiKX19O2Z1bmN0aW9uIG1jKGEpe3RyeXtpZighYS5nKXJldHVybiBudWxsO2lmKFwicmVzcG9uc2VcImluIGEuZylyZXR1cm4gYS5nLnJlc3BvbnNlO3N3aXRjaChhLkspe2Nhc2Ugc2Q6Y2FzZSBcInRleHRcIjpyZXR1cm4gYS5nLnJlc3BvbnNlVGV4dDtjYXNlIFwiYXJyYXlidWZmZXJcIjppZihcIm1velJlc3BvbnNlQXJyYXlCdWZmZXJcImluIGEuZylyZXR1cm4gYS5nLm1velJlc3BvbnNlQXJyYXlCdWZmZXJ9cmV0dXJuIG51bGx9Y2F0Y2goYil7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdGMoYSl7Y29uc3QgYj17fTthPShhLmcmJjI8PUgoYSk/YS5nLmdldEFsbFJlc3BvbnNlSGVhZGVycygpfHxcIlwiOlwiXCIpLnNwbGl0KFwiXFxyXFxuXCIpO2ZvcihsZXQgZD0wO2Q8YS5sZW5ndGg7ZCsrKXtpZih4KGFbZF0pKWNvbnRpbnVlO3ZhciBjPXFiKGFbZF0pO2NvbnN0IGU9Y1swXTtjPWNbMV07aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBjKWNvbnRpbnVlO2M9Yy50cmltKCk7Y29uc3QgZj1iW2VdfHxbXTtiW2VdPWY7Zi5wdXNoKGMpO31PYShiLGZ1bmN0aW9uKGQpe3JldHVybiBkLmpvaW4oXCIsIFwiKX0pO31rLklhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubX07ay5TYT1mdW5jdGlvbigpe3JldHVybiBcInN0cmluZ1wiPT09dHlwZW9mIHRoaXMuaj90aGlzLmo6U3RyaW5nKHRoaXMuail9O2Z1bmN0aW9uIEJkKGEpe2xldCBiPVwiXCI7TmEoYSxmdW5jdGlvbihjLGQpe2IrPWQ7Yis9XCI6XCI7Yis9YztiKz1cIlxcclxcblwiO30pO3JldHVybiBifWZ1bmN0aW9uIENkKGEsYixjKXthOntmb3IoZCBpbiBjKXt2YXIgZD0hMTticmVhayBhfWQ9ITA7fWR8fChjPUJkKGMpLFwic3RyaW5nXCI9PT10eXBlb2YgYT8obnVsbCE9YyYmZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkpOksoYSxiLGMpKTt9ZnVuY3Rpb24gRGQoYSxiLGMpe3JldHVybiBjJiZjLmludGVybmFsQ2hhbm5lbFBhcmFtcz9jLmludGVybmFsQ2hhbm5lbFBhcmFtc1thXXx8YjpifVxuZnVuY3Rpb24gRWQoYSl7dGhpcy5HYT0wO3RoaXMuaj1bXTt0aGlzLmw9bmV3IEdiO3RoaXMucGE9dGhpcy53YT10aGlzLkk9dGhpcy5ZPXRoaXMuZz10aGlzLkRhPXRoaXMuRj10aGlzLm5hPXRoaXMubz10aGlzLlU9dGhpcy5zPW51bGw7dGhpcy5mYj10aGlzLlc9MDt0aGlzLmNiPURkKFwiZmFpbEZhc3RcIiwhMSxhKTt0aGlzLkc9dGhpcy52PXRoaXMudT10aGlzLm09dGhpcy5oPW51bGw7dGhpcy5hYT0hMDt0aGlzLkZhPXRoaXMuVj0tMTt0aGlzLmJhPXRoaXMuQT10aGlzLkM9MDt0aGlzLmFiPURkKFwiYmFzZVJldHJ5RGVsYXlNc1wiLDVFMyxhKTt0aGlzLmhiPURkKFwicmV0cnlEZWxheVNlZWRNc1wiLDFFNCxhKTt0aGlzLmViPURkKFwiZm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzXCIsMixhKTt0aGlzLnhhPURkKFwiZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zXCIsMkU0LGEpO3RoaXMudmE9YSYmYS54bWxIdHRwRmFjdG9yeXx8dm9pZCAwO3RoaXMuSGE9YSYmYS5kY3x8ITE7dGhpcy5MPVxudm9pZCAwO3RoaXMuSj1hJiZhLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJ8fCExO3RoaXMuSz1cIlwiO3RoaXMuaT1uZXcgY2QoYSYmYS5jb25jdXJyZW50UmVxdWVzdExpbWl0KTt0aGlzLkphPW5ldyBoZDt0aGlzLlA9YSYmYS5mYXN0SGFuZHNoYWtlfHwhMTt0aGlzLk89YSYmYS5lbmNvZGVJbml0TWVzc2FnZUhlYWRlcnN8fCExO3RoaXMuUCYmdGhpcy5PJiYodGhpcy5PPSExKTt0aGlzLmJiPWEmJmEuYmN8fCExO2EmJmEuRWEmJnRoaXMubC5FYSgpO2EmJmEuZm9yY2VMb25nUG9sbGluZyYmKHRoaXMuYWE9ITEpO3RoaXMuY2E9IXRoaXMuUCYmdGhpcy5hYSYmYSYmYS5kZXRlY3RCdWZmZXJpbmdQcm94eXx8ITE7dGhpcy5xYT12b2lkIDA7YSYmYS5sb25nUG9sbGluZ1RpbWVvdXQmJjA8YS5sb25nUG9sbGluZ1RpbWVvdXQmJih0aGlzLnFhPWEubG9uZ1BvbGxpbmdUaW1lb3V0KTt0aGlzLm9hPXZvaWQgMDt0aGlzLlM9MDt0aGlzLk09ITE7dGhpcy5tYT10aGlzLkI9bnVsbDt9az1FZC5wcm90b3R5cGU7XG5rLnJhPTg7ay5IPTE7ZnVuY3Rpb24gSGMoYSl7RmQoYSk7aWYoMz09YS5IKXt2YXIgYj1hLlcrKyxjPUcoYS5JKTtLKGMsXCJTSURcIixhLkspO0soYyxcIlJJRFwiLGIpO0soYyxcIlRZUEVcIixcInRlcm1pbmF0ZVwiKTtHZChhLGMpO2I9bmV3IGJjKGEsYS5sLGIpO2IuTD0yO2Iudj1oYyhHKGMpKTtjPSExO2lmKGwubmF2aWdhdG9yJiZsLm5hdmlnYXRvci5zZW5kQmVhY29uKXRyeXtjPWwubmF2aWdhdG9yLnNlbmRCZWFjb24oYi52LnRvU3RyaW5nKCksXCJcIik7fWNhdGNoKGQpe30hYyYmbC5JbWFnZSYmKChuZXcgSW1hZ2UpLnNyYz1iLnYsYz0hMCk7Y3x8KGIuZz1sYyhiLmwsbnVsbCksYi5nLmhhKGIudikpO2IuRz1EYXRlLm5vdygpO2pjKGIpO31IZChhKTt9ZnVuY3Rpb24gemMoYSl7YS5nJiYodmMoYSksYS5nLmNhbmNlbCgpLGEuZz1udWxsKTt9XG5mdW5jdGlvbiBGZChhKXt6YyhhKTthLnUmJihsLmNsZWFyVGltZW91dChhLnUpLGEudT1udWxsKTt5YyhhKTthLmkuY2FuY2VsKCk7YS5tJiYoXCJudW1iZXJcIj09PXR5cGVvZiBhLm0mJmwuY2xlYXJUaW1lb3V0KGEubSksYS5tPW51bGwpO31mdW5jdGlvbiBHYyhhKXtpZighZWQoYS5pKSYmIWEubSl7YS5tPSEwO3ZhciBiPWEuTmE7c2J8fHZiKCk7dGJ8fChzYigpLHRiPSEwKTttYi5hZGQoYixhKTthLkM9MDt9fWZ1bmN0aW9uIElkKGEsYil7aWYoQmMoYS5pKT49YS5pLmotKGEubT8xOjApKXJldHVybiAhMTtpZihhLm0pcmV0dXJuIGEuaj1iLkYuY29uY2F0KGEuaiksITA7aWYoMT09YS5IfHwyPT1hLkh8fGEuQz49KGEuY2I/MDphLmViKSlyZXR1cm4gITE7YS5tPVJiKHEoYS5OYSxhLGIpLEpkKGEsYS5DKSk7YS5DKys7cmV0dXJuICEwfVxuay5OYT1mdW5jdGlvbihhKXtpZih0aGlzLm0paWYodGhpcy5tPW51bGwsMT09dGhpcy5IKXtpZighYSl7dGhpcy5XPU1hdGguZmxvb3IoMUU1Kk1hdGgucmFuZG9tKCkpO2E9dGhpcy5XKys7Y29uc3QgZT1uZXcgYmModGhpcyx0aGlzLmwsYSk7bGV0IGY9dGhpcy5zO3RoaXMuVSYmKGY/KGY9UGEoZiksUmEoZix0aGlzLlUpKTpmPXRoaXMuVSk7bnVsbCE9PXRoaXMub3x8dGhpcy5PfHwoZS5JPWYsZj1udWxsKTtpZih0aGlzLlApYTp7dmFyIGI9MDtmb3IodmFyIGM9MDtjPHRoaXMuai5sZW5ndGg7YysrKXtiOnt2YXIgZD10aGlzLmpbY107aWYoXCJfX2RhdGFfX1wiaW4gZC5tYXAmJihkPWQubWFwLl9fZGF0YV9fLFwic3RyaW5nXCI9PT10eXBlb2YgZCkpe2Q9ZC5sZW5ndGg7YnJlYWsgYn1kPXZvaWQgMDt9aWYodm9pZCAwPT09ZClicmVhaztiKz1kO2lmKDQwOTY8Yil7Yj1jO2JyZWFrIGF9aWYoNDA5Nj09PWJ8fGM9PT10aGlzLmoubGVuZ3RoLTEpe2I9YysxO2JyZWFrIGF9fWI9MUUzO31lbHNlIGI9XG4xRTM7Yj1LZCh0aGlzLGUsYik7Yz1HKHRoaXMuSSk7SyhjLFwiUklEXCIsYSk7SyhjLFwiQ1ZFUlwiLDIyKTt0aGlzLkYmJksoYyxcIlgtSFRUUC1TZXNzaW9uLUlkXCIsdGhpcy5GKTtHZCh0aGlzLGMpO2YmJih0aGlzLk8/Yj1cImhlYWRlcnM9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhCZChmKSkpK1wiJlwiK2I6dGhpcy5vJiZDZChjLHRoaXMubyxmKSk7Q2ModGhpcy5pLGUpO3RoaXMuYmImJksoYyxcIlRZUEVcIixcImluaXRcIik7dGhpcy5QPyhLKGMsXCIkcmVxXCIsYiksSyhjLFwiU0lEXCIsXCJudWxsXCIpLGUuYWE9ITAsZ2MoZSxjLG51bGwpKTpnYyhlLGMsYik7dGhpcy5IPTI7fX1lbHNlIDM9PXRoaXMuSCYmKGE/TGQodGhpcyxhKTowPT10aGlzLmoubGVuZ3RofHxlZCh0aGlzLmkpfHxMZCh0aGlzKSk7fTtcbmZ1bmN0aW9uIExkKGEsYil7dmFyIGM7Yj9jPWIubTpjPWEuVysrO2NvbnN0IGQ9RyhhLkkpO0soZCxcIlNJRFwiLGEuSyk7SyhkLFwiUklEXCIsYyk7SyhkLFwiQUlEXCIsYS5WKTtHZChhLGQpO2EubyYmYS5zJiZDZChkLGEubyxhLnMpO2M9bmV3IGJjKGEsYS5sLGMsYS5DKzEpO251bGw9PT1hLm8mJihjLkk9YS5zKTtiJiYoYS5qPWIuRi5jb25jYXQoYS5qKSk7Yj1LZChhLGMsMUUzKTtjLnNldFRpbWVvdXQoTWF0aC5yb3VuZCguNSphLnhhKStNYXRoLnJvdW5kKC41KmEueGEqTWF0aC5yYW5kb20oKSkpO0NjKGEuaSxjKTtnYyhjLGQsYik7fWZ1bmN0aW9uIEdkKGEsYil7YS5uYSYmTmEoYS5uYSxmdW5jdGlvbihjLGQpe0soYixkLGMpO30pO2EuaCYmS2Moe30sZnVuY3Rpb24oYyxkKXtLKGIsZCxjKTt9KTt9XG5mdW5jdGlvbiBLZChhLGIsYyl7Yz1NYXRoLm1pbihhLmoubGVuZ3RoLGMpO3ZhciBkPWEuaD9xKGEuaC5WYSxhLmgsYSk6bnVsbDthOnt2YXIgZT1hLmo7bGV0IGY9LTE7Zm9yKDs7KXtjb25zdCBoPVtcImNvdW50PVwiK2NdOy0xPT1mPzA8Yz8oZj1lWzBdLmcsaC5wdXNoKFwib2ZzPVwiK2YpKTpmPTA6aC5wdXNoKFwib2ZzPVwiK2YpO2xldCBuPSEwO2ZvcihsZXQgdD0wO3Q8Yzt0Kyspe2xldCBtPWVbdF0uZztjb25zdCB1PWVbdF0ubWFwO20tPWY7aWYoMD5tKWY9TWF0aC5tYXgoMCxlW3RdLmctMTAwKSxuPSExO2Vsc2UgdHJ5e2lkKHUsaCxcInJlcVwiK20rXCJfXCIpO31jYXRjaChMKXtkJiZkKHUpO319aWYobil7ZD1oLmpvaW4oXCImXCIpO2JyZWFrIGF9fX1hPWEuai5zcGxpY2UoMCxjKTtiLkY9YTtyZXR1cm4gZH1mdW5jdGlvbiBGYyhhKXtpZighYS5nJiYhYS51KXthLmJhPTE7dmFyIGI9YS5NYTtzYnx8dmIoKTt0Ynx8KHNiKCksdGI9ITApO21iLmFkZChiLGEpO2EuQT0wO319XG5mdW5jdGlvbiBBYyhhKXtpZihhLmd8fGEudXx8Mzw9YS5BKXJldHVybiAhMTthLmJhKys7YS51PVJiKHEoYS5NYSxhKSxKZChhLGEuQSkpO2EuQSsrO3JldHVybiAhMH1rLk1hPWZ1bmN0aW9uKCl7dGhpcy51PW51bGw7TWQodGhpcyk7aWYodGhpcy5jYSYmISh0aGlzLk18fG51bGw9PXRoaXMuZ3x8MD49dGhpcy5TKSl7dmFyIGE9Mip0aGlzLlM7dGhpcy5sLmluZm8oXCJCUCBkZXRlY3Rpb24gdGltZXIgZW5hYmxlZDogXCIrYSk7dGhpcy5CPVJiKHEodGhpcy5qYix0aGlzKSxhKTt9fTtrLmpiPWZ1bmN0aW9uKCl7dGhpcy5CJiYodGhpcy5CPW51bGwsdGhpcy5sLmluZm8oXCJCUCBkZXRlY3Rpb24gdGltZW91dCByZWFjaGVkLlwiKSx0aGlzLmwuaW5mbyhcIkJ1ZmZlcmluZyBwcm94eSBkZXRlY3RlZCBhbmQgc3dpdGNoIHRvIGxvbmctcG9sbGluZyFcIiksdGhpcy5HPSExLHRoaXMuTT0hMCxGKDEwKSx6Yyh0aGlzKSxNZCh0aGlzKSk7fTtcbmZ1bmN0aW9uIHZjKGEpe251bGwhPWEuQiYmKGwuY2xlYXJUaW1lb3V0KGEuQiksYS5CPW51bGwpO31mdW5jdGlvbiBNZChhKXthLmc9bmV3IGJjKGEsYS5sLFwicnBjXCIsYS5iYSk7bnVsbD09PWEubyYmKGEuZy5JPWEucyk7YS5nLk89MDt2YXIgYj1HKGEud2EpO0soYixcIlJJRFwiLFwicnBjXCIpO0soYixcIlNJRFwiLGEuSyk7SyhiLFwiQUlEXCIsYS5WKTtLKGIsXCJDSVwiLGEuRz9cIjBcIjpcIjFcIik7IWEuRyYmYS5xYSYmSyhiLFwiVE9cIixhLnFhKTtLKGIsXCJUWVBFXCIsXCJ4bWxodHRwXCIpO0dkKGEsYik7YS5vJiZhLnMmJkNkKGIsYS5vLGEucyk7YS5MJiZhLmcuc2V0VGltZW91dChhLkwpO3ZhciBjPWEuZzthPWEucGE7Yy5MPTE7Yy52PWhjKEcoYikpO2Mucz1udWxsO2MuUz0hMDtpYyhjLGEpO31rLmliPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy52JiYodGhpcy52PW51bGwsemModGhpcyksQWModGhpcyksRigxOSkpO307XG5mdW5jdGlvbiB5YyhhKXtudWxsIT1hLnYmJihsLmNsZWFyVGltZW91dChhLnYpLGEudj1udWxsKTt9ZnVuY3Rpb24gc2MoYSxiKXt2YXIgYz1udWxsO2lmKGEuZz09Yil7eWMoYSk7dmMoYSk7YS5nPW51bGw7dmFyIGQ9Mjt9ZWxzZSBpZih4YyhhLmksYikpYz1iLkYsRWMoYS5pLGIpLGQ9MTtlbHNlIHJldHVybjtpZigwIT1hLkgpaWYoYi5pKWlmKDE9PWQpe2M9Yi5zP2Iucy5sZW5ndGg6MDtiPURhdGUubm93KCktYi5HO3ZhciBlPWEuQztkPU1iKCk7QyhkLG5ldyBRYihkLGMpKTtHYyhhKTt9ZWxzZSBGYyhhKTtlbHNlIGlmKGU9Yi5vLDM9PWV8fDA9PWUmJjA8Yi5jYXx8ISgxPT1kJiZJZChhLGIpfHwyPT1kJiZBYyhhKSkpc3dpdGNoKGMmJjA8Yy5sZW5ndGgmJihiPWEuaSxiLmk9Yi5pLmNvbmNhdChjKSksZSl7Y2FzZSAxOkooYSw1KTticmVhaztjYXNlIDQ6SihhLDEwKTticmVhaztjYXNlIDM6SihhLDYpO2JyZWFrO2RlZmF1bHQ6SihhLDIpO319XG5mdW5jdGlvbiBKZChhLGIpe2xldCBjPWEuYWIrTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmEuaGIpO2EuaXNBY3RpdmUoKXx8KGMqPTIpO3JldHVybiBjKmJ9ZnVuY3Rpb24gSihhLGIpe2EubC5pbmZvKFwiRXJyb3IgY29kZSBcIitiKTtpZigyPT1iKXt2YXIgYz1udWxsO2EuaCYmKGM9bnVsbCk7dmFyIGQ9cShhLnBiLGEpO2N8fChjPW5ldyBNKFwiLy93d3cuZ29vZ2xlLmNvbS9pbWFnZXMvY2xlYXJkb3QuZ2lmXCIpLGwubG9jYXRpb24mJlwiaHR0cFwiPT1sLmxvY2F0aW9uLnByb3RvY29sfHxOYyhjLFwiaHR0cHNcIiksaGMoYykpO2pkKGMudG9TdHJpbmcoKSxkKTt9ZWxzZSBGKDIpO2EuSD0wO2EuaCYmYS5oLnphKGIpO0hkKGEpO0ZkKGEpO31rLnBiPWZ1bmN0aW9uKGEpe2E/KHRoaXMubC5pbmZvKFwiU3VjY2Vzc2Z1bGx5IHBpbmdlZCBnb29nbGUuY29tXCIpLEYoMikpOih0aGlzLmwuaW5mbyhcIkZhaWxlZCB0byBwaW5nIGdvb2dsZS5jb21cIiksRigxKSk7fTtcbmZ1bmN0aW9uIEhkKGEpe2EuSD0wO2EubWE9W107aWYoYS5oKXtjb25zdCBiPWZkKGEuaSk7aWYoMCE9Yi5sZW5ndGh8fDAhPWEuai5sZW5ndGgpbmEoYS5tYSxiKSxuYShhLm1hLGEuaiksYS5pLmkubGVuZ3RoPTAsbWEoYS5qKSxhLmoubGVuZ3RoPTA7YS5oLnlhKCk7fX1mdW5jdGlvbiBEYyhhLGIsYyl7dmFyIGQ9YyBpbnN0YW5jZW9mIE0/RyhjKTpuZXcgTShjKTtpZihcIlwiIT1kLmcpYiYmKGQuZz1iK1wiLlwiK2QuZyksT2MoZCxkLm0pO2Vsc2Uge3ZhciBlPWwubG9jYXRpb247ZD1lLnByb3RvY29sO2I9Yj9iK1wiLlwiK2UuaG9zdG5hbWU6ZS5ob3N0bmFtZTtlPStlLnBvcnQ7dmFyIGY9bmV3IE0obnVsbCk7ZCYmTmMoZixkKTtiJiYoZi5nPWIpO2UmJk9jKGYsZSk7YyYmKGYubD1jKTtkPWY7fWM9YS5GO2I9YS5EYTtjJiZiJiZLKGQsYyxiKTtLKGQsXCJWRVJcIixhLnJhKTtHZChhLGQpO3JldHVybiBkfVxuZnVuY3Rpb24gbGMoYSxiLGMpe2lmKGImJiFhLkopdGhyb3cgRXJyb3IoXCJDYW4ndCBjcmVhdGUgc2Vjb25kYXJ5IGRvbWFpbiBjYXBhYmxlIFhocklvIG9iamVjdC5cIik7Yj1jJiZhLkhhJiYhYS52YT9uZXcgUChuZXcgbGQoe29iOiEwfSkpOm5ldyBQKGEudmEpO2IuT2EoYS5KKTtyZXR1cm4gYn1rLmlzQWN0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuICEhdGhpcy5oJiZ0aGlzLmguaXNBY3RpdmUodGhpcyl9O2Z1bmN0aW9uIE5kKCl7fWs9TmQucHJvdG90eXBlO2suQmE9ZnVuY3Rpb24oKXt9O2suQWE9ZnVuY3Rpb24oKXt9O2suemE9ZnVuY3Rpb24oKXt9O2sueWE9ZnVuY3Rpb24oKXt9O2suaXNBY3RpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gITB9O2suVmE9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIE9kKCl7aWYoeiYmISgxMDw9TnVtYmVyKEZhKSkpdGhyb3cgRXJyb3IoXCJFbnZpcm9ubWVudGFsIGVycm9yOiBubyBhdmFpbGFibGUgdHJhbnNwb3J0LlwiKTt9T2QucHJvdG90eXBlLmc9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IFEoYSxiKX07XG5mdW5jdGlvbiBRKGEsYil7Qi5jYWxsKHRoaXMpO3RoaXMuZz1uZXcgRWQoYik7dGhpcy5sPWE7dGhpcy5oPWImJmIubWVzc2FnZVVybFBhcmFtc3x8bnVsbDthPWImJmIubWVzc2FnZUhlYWRlcnN8fG51bGw7YiYmYi5jbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkJiYoYT9hW1wiWC1DbGllbnQtUHJvdG9jb2xcIl09XCJ3ZWJjaGFubmVsXCI6YT17XCJYLUNsaWVudC1Qcm90b2NvbFwiOlwid2ViY2hhbm5lbFwifSk7dGhpcy5nLnM9YTthPWImJmIuaW5pdE1lc3NhZ2VIZWFkZXJzfHxudWxsO2ImJmIubWVzc2FnZUNvbnRlbnRUeXBlJiYoYT9hW1wiWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZVwiXT1iLm1lc3NhZ2VDb250ZW50VHlwZTphPXtcIlgtV2ViQ2hhbm5lbC1Db250ZW50LVR5cGVcIjpiLm1lc3NhZ2VDb250ZW50VHlwZX0pO2ImJmIuQ2EmJihhP2FbXCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGVcIl09Yi5DYTphPXtcIlgtV2ViQ2hhbm5lbC1DbGllbnQtUHJvZmlsZVwiOmIuQ2F9KTt0aGlzLmcuVT1cbmE7KGE9YiYmYi5jYykmJiF4KGEpJiYodGhpcy5nLm89YSk7dGhpcy5BPWImJmIuc3VwcG9ydHNDcm9zc0RvbWFpblhocnx8ITE7dGhpcy52PWImJmIuc2VuZFJhd0pzb258fCExOyhiPWImJmIuaHR0cFNlc3Npb25JZFBhcmFtKSYmIXgoYikmJih0aGlzLmcuRj1iLGE9dGhpcy5oLG51bGwhPT1hJiZiIGluIGEmJihhPXRoaXMuaCxiIGluIGEmJmRlbGV0ZSBhW2JdKSk7dGhpcy5qPW5ldyBSKHRoaXMpO31yKFEsQik7US5wcm90b3R5cGUubT1mdW5jdGlvbigpe3RoaXMuZy5oPXRoaXMuajt0aGlzLkEmJih0aGlzLmcuSj0hMCk7dmFyIGE9dGhpcy5nLGI9dGhpcy5sLGM9dGhpcy5ofHx2b2lkIDA7RigwKTthLlk9YjthLm5hPWN8fHt9O2EuRz1hLmFhO2EuST1EYyhhLG51bGwsYS5ZKTtHYyhhKTt9O1EucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7SGModGhpcy5nKTt9O1xuUS5wcm90b3R5cGUudT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmc7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYz17fTtjLl9fZGF0YV9fPWE7YT1jO31lbHNlIHRoaXMudiYmKGM9e30sYy5fX2RhdGFfXz1qYihhKSxhPWMpO2Iuai5wdXNoKG5ldyBiZChiLmZiKyssYSkpOzM9PWIuSCYmR2MoYik7fTtRLnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7dGhpcy5nLmg9bnVsbDtkZWxldGUgdGhpcy5qO0hjKHRoaXMuZyk7ZGVsZXRlIHRoaXMuZztRLiQuTi5jYWxsKHRoaXMpO307XG5mdW5jdGlvbiBQZChhKXtZYi5jYWxsKHRoaXMpO2EuX19oZWFkZXJzX18mJih0aGlzLmhlYWRlcnM9YS5fX2hlYWRlcnNfXyx0aGlzLnN0YXR1c0NvZGU9YS5fX3N0YXR1c19fLGRlbGV0ZSBhLl9faGVhZGVyc19fLGRlbGV0ZSBhLl9fc3RhdHVzX18pO3ZhciBiPWEuX19zbV9fO2lmKGIpe2E6e2Zvcihjb25zdCBjIGluIGIpe2E9YzticmVhayBhfWE9dm9pZCAwO31pZih0aGlzLmk9YSlhPXRoaXMuaSxiPW51bGwhPT1iJiZhIGluIGI/YlthXTp2b2lkIDA7dGhpcy5kYXRhPWI7fWVsc2UgdGhpcy5kYXRhPWE7fXIoUGQsWWIpO2Z1bmN0aW9uIFFkKCl7WmIuY2FsbCh0aGlzKTt0aGlzLnN0YXR1cz0xO31yKFFkLFpiKTtmdW5jdGlvbiBSKGEpe3RoaXMuZz1hO31yKFIsTmQpO1IucHJvdG90eXBlLkJhPWZ1bmN0aW9uKCl7Qyh0aGlzLmcsXCJhXCIpO307Ui5wcm90b3R5cGUuQWE9ZnVuY3Rpb24oYSl7Qyh0aGlzLmcsbmV3IFBkKGEpKTt9O1xuUi5wcm90b3R5cGUuemE9ZnVuY3Rpb24oYSl7Qyh0aGlzLmcsbmV3IFFkKCkpO307Ui5wcm90b3R5cGUueWE9ZnVuY3Rpb24oKXtDKHRoaXMuZyxcImJcIik7fTtmdW5jdGlvbiBSZCgpe3RoaXMuYmxvY2tTaXplPS0xO31mdW5jdGlvbiBTKCl7dGhpcy5ibG9ja1NpemU9LTE7dGhpcy5ibG9ja1NpemU9NjQ7dGhpcy5nPUFycmF5KDQpO3RoaXMubT1BcnJheSh0aGlzLmJsb2NrU2l6ZSk7dGhpcy5pPXRoaXMuaD0wO3RoaXMucmVzZXQoKTt9cihTLFJkKTtTLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuZ1swXT0xNzMyNTg0MTkzO3RoaXMuZ1sxXT00MDIzMjMzNDE3O3RoaXMuZ1syXT0yNTYyMzgzMTAyO3RoaXMuZ1szXT0yNzE3MzM4Nzg7dGhpcy5pPXRoaXMuaD0wO307XG5mdW5jdGlvbiBTZChhLGIsYyl7Y3x8KGM9MCk7dmFyIGQ9QXJyYXkoMTYpO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilmb3IodmFyIGU9MDsxNj5lOysrZSlkW2VdPWIuY2hhckNvZGVBdChjKyspfGIuY2hhckNvZGVBdChjKyspPDw4fGIuY2hhckNvZGVBdChjKyspPDwxNnxiLmNoYXJDb2RlQXQoYysrKTw8MjQ7ZWxzZSBmb3IoZT0wOzE2PmU7KytlKWRbZV09YltjKytdfGJbYysrXTw8OHxiW2MrK108PDE2fGJbYysrXTw8MjQ7Yj1hLmdbMF07Yz1hLmdbMV07ZT1hLmdbMl07dmFyIGY9YS5nWzNdO3ZhciBoPWIrKGZeYyYoZV5mKSkrZFswXSszNjE0MDkwMzYwJjQyOTQ5NjcyOTU7Yj1jKyhoPDw3JjQyOTQ5NjcyOTV8aD4+PjI1KTtoPWYrKGVeYiYoY15lKSkrZFsxXSszOTA1NDAyNzEwJjQyOTQ5NjcyOTU7Zj1iKyhoPDwxMiY0Mjk0OTY3Mjk1fGg+Pj4yMCk7aD1lKyhjXmYmKGJeYykpK2RbMl0rNjA2MTA1ODE5JjQyOTQ5NjcyOTU7ZT1mKyhoPDwxNyY0Mjk0OTY3Mjk1fGg+Pj4xNSk7XG5oPWMrKGJeZSYoZl5iKSkrZFszXSszMjUwNDQxOTY2JjQyOTQ5NjcyOTU7Yz1lKyhoPDwyMiY0Mjk0OTY3Mjk1fGg+Pj4xMCk7aD1iKyhmXmMmKGVeZikpK2RbNF0rNDExODU0ODM5OSY0Mjk0OTY3Mjk1O2I9YysoaDw8NyY0Mjk0OTY3Mjk1fGg+Pj4yNSk7aD1mKyhlXmImKGNeZSkpK2RbNV0rMTIwMDA4MDQyNiY0Mjk0OTY3Mjk1O2Y9YisoaDw8MTImNDI5NDk2NzI5NXxoPj4+MjApO2g9ZSsoY15mJihiXmMpKStkWzZdKzI4MjE3MzU5NTUmNDI5NDk2NzI5NTtlPWYrKGg8PDE3JjQyOTQ5NjcyOTV8aD4+PjE1KTtoPWMrKGJeZSYoZl5iKSkrZFs3XSs0MjQ5MjYxMzEzJjQyOTQ5NjcyOTU7Yz1lKyhoPDwyMiY0Mjk0OTY3Mjk1fGg+Pj4xMCk7aD1iKyhmXmMmKGVeZikpK2RbOF0rMTc3MDAzNTQxNiY0Mjk0OTY3Mjk1O2I9YysoaDw8NyY0Mjk0OTY3Mjk1fGg+Pj4yNSk7aD1mKyhlXmImKGNeZSkpK2RbOV0rMjMzNjU1Mjg3OSY0Mjk0OTY3Mjk1O2Y9YisoaDw8MTImNDI5NDk2NzI5NXxcbmg+Pj4yMCk7aD1lKyhjXmYmKGJeYykpK2RbMTBdKzQyOTQ5MjUyMzMmNDI5NDk2NzI5NTtlPWYrKGg8PDE3JjQyOTQ5NjcyOTV8aD4+PjE1KTtoPWMrKGJeZSYoZl5iKSkrZFsxMV0rMjMwNDU2MzEzNCY0Mjk0OTY3Mjk1O2M9ZSsoaDw8MjImNDI5NDk2NzI5NXxoPj4+MTApO2g9YisoZl5jJihlXmYpKStkWzEyXSsxODA0NjAzNjgyJjQyOTQ5NjcyOTU7Yj1jKyhoPDw3JjQyOTQ5NjcyOTV8aD4+PjI1KTtoPWYrKGVeYiYoY15lKSkrZFsxM10rNDI1NDYyNjE5NSY0Mjk0OTY3Mjk1O2Y9YisoaDw8MTImNDI5NDk2NzI5NXxoPj4+MjApO2g9ZSsoY15mJihiXmMpKStkWzE0XSsyNzkyOTY1MDA2JjQyOTQ5NjcyOTU7ZT1mKyhoPDwxNyY0Mjk0OTY3Mjk1fGg+Pj4xNSk7aD1jKyhiXmUmKGZeYikpK2RbMTVdKzEyMzY1MzUzMjkmNDI5NDk2NzI5NTtjPWUrKGg8PDIyJjQyOTQ5NjcyOTV8aD4+PjEwKTtoPWIrKGVeZiYoY15lKSkrZFsxXSs0MTI5MTcwNzg2JjQyOTQ5NjcyOTU7Yj1jKyhoPDxcbjUmNDI5NDk2NzI5NXxoPj4+MjcpO2g9ZisoY15lJihiXmMpKStkWzZdKzMyMjU0NjU2NjQmNDI5NDk2NzI5NTtmPWIrKGg8PDkmNDI5NDk2NzI5NXxoPj4+MjMpO2g9ZSsoYl5jJihmXmIpKStkWzExXSs2NDM3MTc3MTMmNDI5NDk2NzI5NTtlPWYrKGg8PDE0JjQyOTQ5NjcyOTV8aD4+PjE4KTtoPWMrKGZeYiYoZV5mKSkrZFswXSszOTIxMDY5OTk0JjQyOTQ5NjcyOTU7Yz1lKyhoPDwyMCY0Mjk0OTY3Mjk1fGg+Pj4xMik7aD1iKyhlXmYmKGNeZSkpK2RbNV0rMzU5MzQwODYwNSY0Mjk0OTY3Mjk1O2I9YysoaDw8NSY0Mjk0OTY3Mjk1fGg+Pj4yNyk7aD1mKyhjXmUmKGJeYykpK2RbMTBdKzM4MDE2MDgzJjQyOTQ5NjcyOTU7Zj1iKyhoPDw5JjQyOTQ5NjcyOTV8aD4+PjIzKTtoPWUrKGJeYyYoZl5iKSkrZFsxNV0rMzYzNDQ4ODk2MSY0Mjk0OTY3Mjk1O2U9ZisoaDw8MTQmNDI5NDk2NzI5NXxoPj4+MTgpO2g9YysoZl5iJihlXmYpKStkWzRdKzM4ODk0Mjk0NDgmNDI5NDk2NzI5NTtjPVxuZSsoaDw8MjAmNDI5NDk2NzI5NXxoPj4+MTIpO2g9YisoZV5mJihjXmUpKStkWzldKzU2ODQ0NjQzOCY0Mjk0OTY3Mjk1O2I9YysoaDw8NSY0Mjk0OTY3Mjk1fGg+Pj4yNyk7aD1mKyhjXmUmKGJeYykpK2RbMTRdKzMyNzUxNjM2MDYmNDI5NDk2NzI5NTtmPWIrKGg8PDkmNDI5NDk2NzI5NXxoPj4+MjMpO2g9ZSsoYl5jJihmXmIpKStkWzNdKzQxMDc2MDMzMzUmNDI5NDk2NzI5NTtlPWYrKGg8PDE0JjQyOTQ5NjcyOTV8aD4+PjE4KTtoPWMrKGZeYiYoZV5mKSkrZFs4XSsxMTYzNTMxNTAxJjQyOTQ5NjcyOTU7Yz1lKyhoPDwyMCY0Mjk0OTY3Mjk1fGg+Pj4xMik7aD1iKyhlXmYmKGNeZSkpK2RbMTNdKzI4NTAyODU4MjkmNDI5NDk2NzI5NTtiPWMrKGg8PDUmNDI5NDk2NzI5NXxoPj4+MjcpO2g9ZisoY15lJihiXmMpKStkWzJdKzQyNDM1NjM1MTImNDI5NDk2NzI5NTtmPWIrKGg8PDkmNDI5NDk2NzI5NXxoPj4+MjMpO2g9ZSsoYl5jJihmXmIpKStkWzddKzE3MzUzMjg0NzMmNDI5NDk2NzI5NTtcbmU9ZisoaDw8MTQmNDI5NDk2NzI5NXxoPj4+MTgpO2g9YysoZl5iJihlXmYpKStkWzEyXSsyMzY4MzU5NTYyJjQyOTQ5NjcyOTU7Yz1lKyhoPDwyMCY0Mjk0OTY3Mjk1fGg+Pj4xMik7aD1iKyhjXmVeZikrZFs1XSs0Mjk0NTg4NzM4JjQyOTQ5NjcyOTU7Yj1jKyhoPDw0JjQyOTQ5NjcyOTV8aD4+PjI4KTtoPWYrKGJeY15lKStkWzhdKzIyNzIzOTI4MzMmNDI5NDk2NzI5NTtmPWIrKGg8PDExJjQyOTQ5NjcyOTV8aD4+PjIxKTtoPWUrKGZeYl5jKStkWzExXSsxODM5MDMwNTYyJjQyOTQ5NjcyOTU7ZT1mKyhoPDwxNiY0Mjk0OTY3Mjk1fGg+Pj4xNik7aD1jKyhlXmZeYikrZFsxNF0rNDI1OTY1Nzc0MCY0Mjk0OTY3Mjk1O2M9ZSsoaDw8MjMmNDI5NDk2NzI5NXxoPj4+OSk7aD1iKyhjXmVeZikrZFsxXSsyNzYzOTc1MjM2JjQyOTQ5NjcyOTU7Yj1jKyhoPDw0JjQyOTQ5NjcyOTV8aD4+PjI4KTtoPWYrKGJeY15lKStkWzRdKzEyNzI4OTMzNTMmNDI5NDk2NzI5NTtmPWIrKGg8PDExJjQyOTQ5NjcyOTV8XG5oPj4+MjEpO2g9ZSsoZl5iXmMpK2RbN10rNDEzOTQ2OTY2NCY0Mjk0OTY3Mjk1O2U9ZisoaDw8MTYmNDI5NDk2NzI5NXxoPj4+MTYpO2g9YysoZV5mXmIpK2RbMTBdKzMyMDAyMzY2NTYmNDI5NDk2NzI5NTtjPWUrKGg8PDIzJjQyOTQ5NjcyOTV8aD4+PjkpO2g9YisoY15lXmYpK2RbMTNdKzY4MTI3OTE3NCY0Mjk0OTY3Mjk1O2I9YysoaDw8NCY0Mjk0OTY3Mjk1fGg+Pj4yOCk7aD1mKyhiXmNeZSkrZFswXSszOTM2NDMwMDc0JjQyOTQ5NjcyOTU7Zj1iKyhoPDwxMSY0Mjk0OTY3Mjk1fGg+Pj4yMSk7aD1lKyhmXmJeYykrZFszXSszNTcyNDQ1MzE3JjQyOTQ5NjcyOTU7ZT1mKyhoPDwxNiY0Mjk0OTY3Mjk1fGg+Pj4xNik7aD1jKyhlXmZeYikrZFs2XSs3NjAyOTE4OSY0Mjk0OTY3Mjk1O2M9ZSsoaDw8MjMmNDI5NDk2NzI5NXxoPj4+OSk7aD1iKyhjXmVeZikrZFs5XSszNjU0NjAyODA5JjQyOTQ5NjcyOTU7Yj1jKyhoPDw0JjQyOTQ5NjcyOTV8aD4+PjI4KTtoPWYrKGJeY15lKStkWzEyXStcbjM4NzMxNTE0NjEmNDI5NDk2NzI5NTtmPWIrKGg8PDExJjQyOTQ5NjcyOTV8aD4+PjIxKTtoPWUrKGZeYl5jKStkWzE1XSs1MzA3NDI1MjAmNDI5NDk2NzI5NTtlPWYrKGg8PDE2JjQyOTQ5NjcyOTV8aD4+PjE2KTtoPWMrKGVeZl5iKStkWzJdKzMyOTk2Mjg2NDUmNDI5NDk2NzI5NTtjPWUrKGg8PDIzJjQyOTQ5NjcyOTV8aD4+PjkpO2g9YisoZV4oY3x+ZikpK2RbMF0rNDA5NjMzNjQ1MiY0Mjk0OTY3Mjk1O2I9YysoaDw8NiY0Mjk0OTY3Mjk1fGg+Pj4yNik7aD1mKyhjXihifH5lKSkrZFs3XSsxMTI2ODkxNDE1JjQyOTQ5NjcyOTU7Zj1iKyhoPDwxMCY0Mjk0OTY3Mjk1fGg+Pj4yMik7aD1lKyhiXihmfH5jKSkrZFsxNF0rMjg3ODYxMjM5MSY0Mjk0OTY3Mjk1O2U9ZisoaDw8MTUmNDI5NDk2NzI5NXxoPj4+MTcpO2g9YysoZl4oZXx+YikpK2RbNV0rNDIzNzUzMzI0MSY0Mjk0OTY3Mjk1O2M9ZSsoaDw8MjEmNDI5NDk2NzI5NXxoPj4+MTEpO2g9YisoZV4oY3x+ZikpK2RbMTJdKzE3MDA0ODU1NzEmXG40Mjk0OTY3Mjk1O2I9YysoaDw8NiY0Mjk0OTY3Mjk1fGg+Pj4yNik7aD1mKyhjXihifH5lKSkrZFszXSsyMzk5OTgwNjkwJjQyOTQ5NjcyOTU7Zj1iKyhoPDwxMCY0Mjk0OTY3Mjk1fGg+Pj4yMik7aD1lKyhiXihmfH5jKSkrZFsxMF0rNDI5MzkxNTc3MyY0Mjk0OTY3Mjk1O2U9ZisoaDw8MTUmNDI5NDk2NzI5NXxoPj4+MTcpO2g9YysoZl4oZXx+YikpK2RbMV0rMjI0MDA0NDQ5NyY0Mjk0OTY3Mjk1O2M9ZSsoaDw8MjEmNDI5NDk2NzI5NXxoPj4+MTEpO2g9YisoZV4oY3x+ZikpK2RbOF0rMTg3MzMxMzM1OSY0Mjk0OTY3Mjk1O2I9YysoaDw8NiY0Mjk0OTY3Mjk1fGg+Pj4yNik7aD1mKyhjXihifH5lKSkrZFsxNV0rNDI2NDM1NTU1MiY0Mjk0OTY3Mjk1O2Y9YisoaDw8MTAmNDI5NDk2NzI5NXxoPj4+MjIpO2g9ZSsoYl4oZnx+YykpK2RbNl0rMjczNDc2ODkxNiY0Mjk0OTY3Mjk1O2U9ZisoaDw8MTUmNDI5NDk2NzI5NXxoPj4+MTcpO2g9YysoZl4oZXx+YikpK2RbMTNdKzEzMDkxNTE2NDkmXG40Mjk0OTY3Mjk1O2M9ZSsoaDw8MjEmNDI5NDk2NzI5NXxoPj4+MTEpO2g9YisoZV4oY3x+ZikpK2RbNF0rNDE0OTQ0NDIyNiY0Mjk0OTY3Mjk1O2I9YysoaDw8NiY0Mjk0OTY3Mjk1fGg+Pj4yNik7aD1mKyhjXihifH5lKSkrZFsxMV0rMzE3NDc1NjkxNyY0Mjk0OTY3Mjk1O2Y9YisoaDw8MTAmNDI5NDk2NzI5NXxoPj4+MjIpO2g9ZSsoYl4oZnx+YykpK2RbMl0rNzE4Nzg3MjU5JjQyOTQ5NjcyOTU7ZT1mKyhoPDwxNSY0Mjk0OTY3Mjk1fGg+Pj4xNyk7aD1jKyhmXihlfH5iKSkrZFs5XSszOTUxNDgxNzQ1JjQyOTQ5NjcyOTU7YS5nWzBdPWEuZ1swXStiJjQyOTQ5NjcyOTU7YS5nWzFdPWEuZ1sxXSsoZSsoaDw8MjEmNDI5NDk2NzI5NXxoPj4+MTEpKSY0Mjk0OTY3Mjk1O2EuZ1syXT1hLmdbMl0rZSY0Mjk0OTY3Mjk1O2EuZ1szXT1hLmdbM10rZiY0Mjk0OTY3Mjk1O31cblMucHJvdG90eXBlLmo9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1hLmxlbmd0aCk7Zm9yKHZhciBjPWItdGhpcy5ibG9ja1NpemUsZD10aGlzLm0sZT10aGlzLmgsZj0wO2Y8Yjspe2lmKDA9PWUpZm9yKDtmPD1jOylTZCh0aGlzLGEsZiksZis9dGhpcy5ibG9ja1NpemU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWZvcig7ZjxiOyl7aWYoZFtlKytdPWEuY2hhckNvZGVBdChmKyspLGU9PXRoaXMuYmxvY2tTaXplKXtTZCh0aGlzLGQpO2U9MDticmVha319ZWxzZSBmb3IoO2Y8YjspaWYoZFtlKytdPWFbZisrXSxlPT10aGlzLmJsb2NrU2l6ZSl7U2QodGhpcyxkKTtlPTA7YnJlYWt9fXRoaXMuaD1lO3RoaXMuaSs9Yjt9O1xuUy5wcm90b3R5cGUubD1mdW5jdGlvbigpe3ZhciBhPUFycmF5KCg1Nj50aGlzLmg/dGhpcy5ibG9ja1NpemU6Mip0aGlzLmJsb2NrU2l6ZSktdGhpcy5oKTthWzBdPTEyODtmb3IodmFyIGI9MTtiPGEubGVuZ3RoLTg7KytiKWFbYl09MDt2YXIgYz04KnRoaXMuaTtmb3IoYj1hLmxlbmd0aC04O2I8YS5sZW5ndGg7KytiKWFbYl09YyYyNTUsYy89MjU2O3RoaXMuaihhKTthPUFycmF5KDE2KTtmb3IoYj1jPTA7ND5iOysrYilmb3IodmFyIGQ9MDszMj5kO2QrPTgpYVtjKytdPXRoaXMuZ1tiXT4+PmQmMjU1O3JldHVybiBhfTtmdW5jdGlvbiBUKGEsYil7dGhpcy5oPWI7Zm9yKHZhciBjPVtdLGQ9ITAsZT1hLmxlbmd0aC0xOzA8PWU7ZS0tKXt2YXIgZj1hW2VdfDA7ZCYmZj09Ynx8KGNbZV09ZixkPSExKTt9dGhpcy5nPWM7fXZhciBzYT17fTtmdW5jdGlvbiBUZChhKXtyZXR1cm4gLTEyODw9YSYmMTI4PmE/cmEoYSxmdW5jdGlvbihiKXtyZXR1cm4gbmV3IFQoW2J8MF0sMD5iPy0xOjApfSk6bmV3IFQoW2F8MF0sMD5hPy0xOjApfWZ1bmN0aW9uIFUoYSl7aWYoaXNOYU4oYSl8fCFpc0Zpbml0ZShhKSlyZXR1cm4gVjtpZigwPmEpcmV0dXJuIFcoVSgtYSkpO2Zvcih2YXIgYj1bXSxjPTEsZD0wO2E+PWM7ZCsrKWJbZF09YS9jfDAsYyo9VWQ7cmV0dXJuIG5ldyBUKGIsMCl9XG5mdW5jdGlvbiBWZChhLGIpe2lmKDA9PWEubGVuZ3RoKXRocm93IEVycm9yKFwibnVtYmVyIGZvcm1hdCBlcnJvcjogZW1wdHkgc3RyaW5nXCIpO2I9Ynx8MTA7aWYoMj5ifHwzNjxiKXRocm93IEVycm9yKFwicmFkaXggb3V0IG9mIHJhbmdlOiBcIitiKTtpZihcIi1cIj09YS5jaGFyQXQoMCkpcmV0dXJuIFcoVmQoYS5zdWJzdHJpbmcoMSksYikpO2lmKDA8PWEuaW5kZXhPZihcIi1cIikpdGhyb3cgRXJyb3IoJ251bWJlciBmb3JtYXQgZXJyb3I6IGludGVyaW9yIFwiLVwiIGNoYXJhY3RlcicpO2Zvcih2YXIgYz1VKE1hdGgucG93KGIsOCkpLGQ9VixlPTA7ZTxhLmxlbmd0aDtlKz04KXt2YXIgZj1NYXRoLm1pbig4LGEubGVuZ3RoLWUpLGg9cGFyc2VJbnQoYS5zdWJzdHJpbmcoZSxlK2YpLGIpOzg+Zj8oZj1VKE1hdGgucG93KGIsZikpLGQ9ZC5SKGYpLmFkZChVKGgpKSk6KGQ9ZC5SKGMpLGQ9ZC5hZGQoVShoKSkpO31yZXR1cm4gZH1cbnZhciBVZD00Mjk0OTY3Mjk2LFY9VGQoMCksV2Q9VGQoMSksWGQ9VGQoMTY3NzcyMTYpO2s9VC5wcm90b3R5cGU7ay5lYT1mdW5jdGlvbigpe2lmKFgodGhpcykpcmV0dXJuIC1XKHRoaXMpLmVhKCk7Zm9yKHZhciBhPTAsYj0xLGM9MDtjPHRoaXMuZy5sZW5ndGg7YysrKXt2YXIgZD10aGlzLkQoYyk7YSs9KDA8PWQ/ZDpVZCtkKSpiO2IqPVVkO31yZXR1cm4gYX07XG5rLnRvU3RyaW5nPWZ1bmN0aW9uKGEpe2E9YXx8MTA7aWYoMj5hfHwzNjxhKXRocm93IEVycm9yKFwicmFkaXggb3V0IG9mIHJhbmdlOiBcIithKTtpZihZKHRoaXMpKXJldHVybiBcIjBcIjtpZihYKHRoaXMpKXJldHVybiBcIi1cIitXKHRoaXMpLnRvU3RyaW5nKGEpO2Zvcih2YXIgYj1VKE1hdGgucG93KGEsNikpLGM9dGhpcyxkPVwiXCI7Oyl7dmFyIGU9WWQoYyxiKS5nO2M9WmQoYyxlLlIoYikpO3ZhciBmPSgoMDxjLmcubGVuZ3RoP2MuZ1swXTpjLmgpPj4+MCkudG9TdHJpbmcoYSk7Yz1lO2lmKFkoYykpcmV0dXJuIGYrZDtmb3IoOzY+Zi5sZW5ndGg7KWY9XCIwXCIrZjtkPWYrZDt9fTtrLkQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDA+YT8wOmE8dGhpcy5nLmxlbmd0aD90aGlzLmdbYV06dGhpcy5ofTtmdW5jdGlvbiBZKGEpe2lmKDAhPWEuaClyZXR1cm4gITE7Zm9yKHZhciBiPTA7YjxhLmcubGVuZ3RoO2IrKylpZigwIT1hLmdbYl0pcmV0dXJuICExO3JldHVybiAhMH1cbmZ1bmN0aW9uIFgoYSl7cmV0dXJuIC0xPT1hLmh9ay5YPWZ1bmN0aW9uKGEpe2E9WmQodGhpcyxhKTtyZXR1cm4gWChhKT8tMTpZKGEpPzA6MX07ZnVuY3Rpb24gVyhhKXtmb3IodmFyIGI9YS5nLmxlbmd0aCxjPVtdLGQ9MDtkPGI7ZCsrKWNbZF09fmEuZ1tkXTtyZXR1cm4gKG5ldyBUKGMsfmEuaCkpLmFkZChXZCl9ay5hYnM9ZnVuY3Rpb24oKXtyZXR1cm4gWCh0aGlzKT9XKHRoaXMpOnRoaXN9O2suYWRkPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1NYXRoLm1heCh0aGlzLmcubGVuZ3RoLGEuZy5sZW5ndGgpLGM9W10sZD0wLGU9MDtlPD1iO2UrKyl7dmFyIGY9ZCsodGhpcy5EKGUpJjY1NTM1KSsoYS5EKGUpJjY1NTM1KSxoPShmPj4+MTYpKyh0aGlzLkQoZSk+Pj4xNikrKGEuRChlKT4+PjE2KTtkPWg+Pj4xNjtmJj02NTUzNTtoJj02NTUzNTtjW2VdPWg8PDE2fGY7fXJldHVybiBuZXcgVChjLGNbYy5sZW5ndGgtMV0mLTIxNDc0ODM2NDg/LTE6MCl9O1xuZnVuY3Rpb24gWmQoYSxiKXtyZXR1cm4gYS5hZGQoVyhiKSl9XG5rLlI9ZnVuY3Rpb24oYSl7aWYoWSh0aGlzKXx8WShhKSlyZXR1cm4gVjtpZihYKHRoaXMpKXJldHVybiBYKGEpP1codGhpcykuUihXKGEpKTpXKFcodGhpcykuUihhKSk7aWYoWChhKSlyZXR1cm4gVyh0aGlzLlIoVyhhKSkpO2lmKDA+dGhpcy5YKFhkKSYmMD5hLlgoWGQpKXJldHVybiBVKHRoaXMuZWEoKSphLmVhKCkpO2Zvcih2YXIgYj10aGlzLmcubGVuZ3RoK2EuZy5sZW5ndGgsYz1bXSxkPTA7ZDwyKmI7ZCsrKWNbZF09MDtmb3IoZD0wO2Q8dGhpcy5nLmxlbmd0aDtkKyspZm9yKHZhciBlPTA7ZTxhLmcubGVuZ3RoO2UrKyl7dmFyIGY9dGhpcy5EKGQpPj4+MTYsaD10aGlzLkQoZCkmNjU1MzUsbj1hLkQoZSk+Pj4xNix0PWEuRChlKSY2NTUzNTtjWzIqZCsyKmVdKz1oKnQ7JGQoYywyKmQrMiplKTtjWzIqZCsyKmUrMV0rPWYqdDskZChjLDIqZCsyKmUrMSk7Y1syKmQrMiplKzFdKz1oKm47JGQoYywyKmQrMiplKzEpO2NbMipkKzIqZSsyXSs9ZipuOyRkKGMsMipkKzIqZSsyKTt9Zm9yKGQ9XG4wO2Q8YjtkKyspY1tkXT1jWzIqZCsxXTw8MTZ8Y1syKmRdO2ZvcihkPWI7ZDwyKmI7ZCsrKWNbZF09MDtyZXR1cm4gbmV3IFQoYywwKX07ZnVuY3Rpb24gJGQoYSxiKXtmb3IoOyhhW2JdJjY1NTM1KSE9YVtiXTspYVtiKzFdKz1hW2JdPj4+MTYsYVtiXSY9NjU1MzUsYisrO31mdW5jdGlvbiBhZShhLGIpe3RoaXMuZz1hO3RoaXMuaD1iO31cbmZ1bmN0aW9uIFlkKGEsYil7aWYoWShiKSl0aHJvdyBFcnJvcihcImRpdmlzaW9uIGJ5IHplcm9cIik7aWYoWShhKSlyZXR1cm4gbmV3IGFlKFYsVik7aWYoWChhKSlyZXR1cm4gYj1ZZChXKGEpLGIpLG5ldyBhZShXKGIuZyksVyhiLmgpKTtpZihYKGIpKXJldHVybiBiPVlkKGEsVyhiKSksbmV3IGFlKFcoYi5nKSxiLmgpO2lmKDMwPGEuZy5sZW5ndGgpe2lmKFgoYSl8fFgoYikpdGhyb3cgRXJyb3IoXCJzbG93RGl2aWRlXyBvbmx5IHdvcmtzIHdpdGggcG9zaXRpdmUgaW50ZWdlcnMuXCIpO2Zvcih2YXIgYz1XZCxkPWI7MD49ZC5YKGEpOyljPWJlKGMpLGQ9YmUoZCk7dmFyIGU9WihjLDEpLGY9WihkLDEpO2Q9WihkLDIpO2ZvcihjPVooYywyKTshWShkKTspe3ZhciBoPWYuYWRkKGQpOzA+PWguWChhKSYmKGU9ZS5hZGQoYyksZj1oKTtkPVooZCwxKTtjPVooYywxKTt9Yj1aZChhLGUuUihiKSk7cmV0dXJuIG5ldyBhZShlLGIpfWZvcihlPVY7MDw9YS5YKGIpOyl7Yz1NYXRoLm1heCgxLE1hdGguZmxvb3IoYS5lYSgpL1xuYi5lYSgpKSk7ZD1NYXRoLmNlaWwoTWF0aC5sb2coYykvTWF0aC5MTjIpO2Q9NDg+PWQ/MTpNYXRoLnBvdygyLGQtNDgpO2Y9VShjKTtmb3IoaD1mLlIoYik7WChoKXx8MDxoLlgoYSk7KWMtPWQsZj1VKGMpLGg9Zi5SKGIpO1koZikmJihmPVdkKTtlPWUuYWRkKGYpO2E9WmQoYSxoKTt9cmV0dXJuIG5ldyBhZShlLGEpfWsuZ2I9ZnVuY3Rpb24oYSl7cmV0dXJuIFlkKHRoaXMsYSkuaH07ay5hbmQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPU1hdGgubWF4KHRoaXMuZy5sZW5ndGgsYS5nLmxlbmd0aCksYz1bXSxkPTA7ZDxiO2QrKyljW2RdPXRoaXMuRChkKSZhLkQoZCk7cmV0dXJuIG5ldyBUKGMsdGhpcy5oJmEuaCl9O2sub3I9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPU1hdGgubWF4KHRoaXMuZy5sZW5ndGgsYS5nLmxlbmd0aCksYz1bXSxkPTA7ZDxiO2QrKyljW2RdPXRoaXMuRChkKXxhLkQoZCk7cmV0dXJuIG5ldyBUKGMsdGhpcy5ofGEuaCl9O1xuay54b3I9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPU1hdGgubWF4KHRoaXMuZy5sZW5ndGgsYS5nLmxlbmd0aCksYz1bXSxkPTA7ZDxiO2QrKyljW2RdPXRoaXMuRChkKV5hLkQoZCk7cmV0dXJuIG5ldyBUKGMsdGhpcy5oXmEuaCl9O2Z1bmN0aW9uIGJlKGEpe2Zvcih2YXIgYj1hLmcubGVuZ3RoKzEsYz1bXSxkPTA7ZDxiO2QrKyljW2RdPWEuRChkKTw8MXxhLkQoZC0xKT4+PjMxO3JldHVybiBuZXcgVChjLGEuaCl9ZnVuY3Rpb24gWihhLGIpe3ZhciBjPWI+PjU7YiU9MzI7Zm9yKHZhciBkPWEuZy5sZW5ndGgtYyxlPVtdLGY9MDtmPGQ7ZisrKWVbZl09MDxiP2EuRChmK2MpPj4+YnxhLkQoZitjKzEpPDwzMi1iOmEuRChmK2MpO3JldHVybiBuZXcgVChlLGEuaCl9T2QucHJvdG90eXBlLmNyZWF0ZVdlYkNoYW5uZWw9T2QucHJvdG90eXBlLmc7US5wcm90b3R5cGUuc2VuZD1RLnByb3RvdHlwZS51O1EucHJvdG90eXBlLm9wZW49US5wcm90b3R5cGUubTtRLnByb3RvdHlwZS5jbG9zZT1RLnByb3RvdHlwZS5jbG9zZTtTYi5OT19FUlJPUj0wO1NiLlRJTUVPVVQ9ODtTYi5IVFRQX0VSUk9SPTY7VGIuQ09NUExFVEU9XCJjb21wbGV0ZVwiO1diLkV2ZW50VHlwZT1YYjtYYi5PUEVOPVwiYVwiO1hiLkNMT1NFPVwiYlwiO1hiLkVSUk9SPVwiY1wiO1hiLk1FU1NBR0U9XCJkXCI7Qi5wcm90b3R5cGUubGlzdGVuPUIucHJvdG90eXBlLk87UC5wcm90b3R5cGUubGlzdGVuT25jZT1QLnByb3RvdHlwZS5QO1AucHJvdG90eXBlLmdldExhc3RFcnJvcj1QLnByb3RvdHlwZS5TYTtQLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlPVAucHJvdG90eXBlLklhO1AucHJvdG90eXBlLmdldFN0YXR1cz1QLnByb3RvdHlwZS5kYTtQLnByb3RvdHlwZS5nZXRSZXNwb25zZUpzb249UC5wcm90b3R5cGUuV2E7XG5QLnByb3RvdHlwZS5nZXRSZXNwb25zZVRleHQ9UC5wcm90b3R5cGUuamE7UC5wcm90b3R5cGUuc2VuZD1QLnByb3RvdHlwZS5oYTtQLnByb3RvdHlwZS5zZXRXaXRoQ3JlZGVudGlhbHM9UC5wcm90b3R5cGUuT2E7Uy5wcm90b3R5cGUuZGlnZXN0PVMucHJvdG90eXBlLmw7Uy5wcm90b3R5cGUucmVzZXQ9Uy5wcm90b3R5cGUucmVzZXQ7Uy5wcm90b3R5cGUudXBkYXRlPVMucHJvdG90eXBlLmo7VC5wcm90b3R5cGUuYWRkPVQucHJvdG90eXBlLmFkZDtULnByb3RvdHlwZS5tdWx0aXBseT1ULnByb3RvdHlwZS5SO1QucHJvdG90eXBlLm1vZHVsbz1ULnByb3RvdHlwZS5nYjtULnByb3RvdHlwZS5jb21wYXJlPVQucHJvdG90eXBlLlg7VC5wcm90b3R5cGUudG9OdW1iZXI9VC5wcm90b3R5cGUuZWE7VC5wcm90b3R5cGUudG9TdHJpbmc9VC5wcm90b3R5cGUudG9TdHJpbmc7VC5wcm90b3R5cGUuZ2V0Qml0cz1ULnByb3RvdHlwZS5EO1QuZnJvbU51bWJlcj1VO1QuZnJvbVN0cmluZz1WZDtcbnZhciBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0ID0gZXNtLmNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE9kfTt2YXIgZ2V0U3RhdEV2ZW50VGFyZ2V0ID0gZXNtLmdldFN0YXRFdmVudFRhcmdldD1mdW5jdGlvbigpe3JldHVybiBNYigpfTt2YXIgRXJyb3JDb2RlID0gZXNtLkVycm9yQ29kZT1TYjt2YXIgRXZlbnRUeXBlID0gZXNtLkV2ZW50VHlwZT1UYjt2YXIgRXZlbnQgPSBlc20uRXZlbnQ9RTt2YXIgU3RhdCA9IGVzbS5TdGF0PXt4YjowLEFiOjEsQmI6MixVYjozLFpiOjQsV2I6NSxYYjo2LFZiOjcsVGI6OCxZYjo5LFBST1hZOjEwLE5PUFJPWFk6MTEsUmI6MTIsTmI6MTMsT2I6MTQsTWI6MTUsUGI6MTYsUWI6MTcsdGI6MTgsc2I6MTksdWI6MjB9O3ZhciBGZXRjaFhtbEh0dHBGYWN0b3J5ID0gZXNtLkZldGNoWG1sSHR0cEZhY3Rvcnk9bGQ7dmFyIFdlYkNoYW5uZWwgPSBlc20uV2ViQ2hhbm5lbD1XYjt2YXIgWGhySW8gPSBlc20uWGhySW89UDt2YXIgTWQ1ID0gZXNtLk1kNT1TO3ZhciBJbnRlZ2VyID0gZXNtLkludGVnZXI9VDtcblxuZXhwb3J0IHsgRXJyb3JDb2RlLCBFdmVudCwgRXZlbnRUeXBlLCBGZXRjaFhtbEh0dHBGYWN0b3J5LCBJbnRlZ2VyLCBNZDUsIFN0YXQsIFdlYkNoYW5uZWwsIFhocklvLCBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0LCBlc20gYXMgZGVmYXVsdCwgZ2V0U3RhdEV2ZW50VGFyZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiaW1wb3J0IHsgX3JlZ2lzdGVyQ29tcG9uZW50LCByZWdpc3RlclZlcnNpb24sIF9nZXRQcm92aWRlciwgZ2V0QXBwLCBfcmVtb3ZlU2VydmljZUluc3RhbmNlLCBTREtfVkVSU0lPTiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yLCBjcmVhdGVNb2NrVXNlclRva2VuLCBnZXRNb2R1bGFySW5zdGFuY2UsIGRlZXBFcXVhbCwgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0LCBnZXRVQSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzU2FmYXJpIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgSW50ZWdlciwgWGhySW8sIEV2ZW50VHlwZSwgRXJyb3JDb2RlLCBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0LCBnZXRTdGF0RXZlbnRUYXJnZXQsIEZldGNoWG1sSHR0cEZhY3RvcnksIFdlYkNoYW5uZWwsIEV2ZW50LCBTdGF0LCBNZDUgfSBmcm9tICdAZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyJztcblxuY29uc3QgYiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTaW1wbGUgd3JhcHBlciBhcm91bmQgYSBudWxsYWJsZSBVSUQuIE1vc3RseSBleGlzdHMgdG8gbWFrZSBjb2RlIG1vcmVcbiAqIHJlYWRhYmxlLlxuICovXG5jbGFzcyBWIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudWlkID0gdDtcbiAgICB9XG4gICAgaXNBdXRoZW50aWNhdGVkKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPSB0aGlzLnVpZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGtleSByZXByZXNlbnRpbmcgdGhpcyB1c2VyLCBzdWl0YWJsZSBmb3IgaW5jbHVzaW9uIGluIGFcbiAgICAgKiBkaWN0aW9uYXJ5LlxuICAgICAqLyAgICB0b0tleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBdXRoZW50aWNhdGVkKCkgPyBcInVpZDpcIiArIHRoaXMudWlkIDogXCJhbm9ueW1vdXMtdXNlclwiO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHQudWlkID09PSB0aGlzLnVpZDtcbiAgICB9XG59XG5cbi8qKiBBIHVzZXIgd2l0aCBhIG51bGwgVUlELiAqLyBWLlVOQVVUSEVOVElDQVRFRCA9IG5ldyBWKG51bGwpLCBcbi8vIFRPRE8obWlrZWxlaGVuKTogTG9vayBpbnRvIGdldHRpbmcgYSBwcm9wZXIgdWlkLWVxdWl2YWxlbnQgZm9yXG4vLyBub24tRmlyZWJhc2VBdXRoIHByb3ZpZGVycy5cblYuR09PR0xFX0NSRURFTlRJQUxTID0gbmV3IFYoXCJnb29nbGUtY3JlZGVudGlhbHMtdWlkXCIpLCBWLkZJUlNUX1BBUlRZID0gbmV3IFYoXCJmaXJzdC1wYXJ0eS11aWRcIiksIFxuVi5NT0NLX1VTRVIgPSBuZXcgVihcIm1vY2stdXNlclwiKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmxldCBTID0gXCI5LjIyLjJcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IEQgPSBuZXcgTG9nZ2VyKFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiKTtcblxuLy8gSGVscGVyIG1ldGhvZHMgYXJlIG5lZWRlZCBiZWNhdXNlIHZhcmlhYmxlcyBjYW4ndCBiZSBleHBvcnRlZCBhcyByZWFkL3dyaXRlXG5mdW5jdGlvbiBDKCkge1xuICAgIHJldHVybiBELmxvZ0xldmVsO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHZlcmJvc2l0eSBvZiBDbG91ZCBGaXJlc3RvcmUgbG9ncyAoZGVidWcsIGVycm9yLCBvciBzaWxlbnQpLlxuICpcbiAqIEBwYXJhbSBsb2dMZXZlbCAtIFRoZSB2ZXJib3NpdHkgeW91IHNldCBmb3IgYWN0aXZpdHkgYW5kIGVycm9yIGxvZ2dpbmcuIENhblxuICogICBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gKlxuICogICA8dWw+XG4gKiAgICAgPGxpPmBkZWJ1Z2AgZm9yIHRoZSBtb3N0IHZlcmJvc2UgbG9nZ2luZyBsZXZlbCwgcHJpbWFyaWx5IGZvclxuICogICAgIGRlYnVnZ2luZy48L2xpPlxuICogICAgIDxsaT5gZXJyb3JgIHRvIGxvZyBlcnJvcnMgb25seS48L2xpPlxuICogICAgIDxsaT48Y29kZT5gc2lsZW50YCB0byB0dXJuIG9mZiBsb2dnaW5nLjwvbGk+XG4gKiAgIDwvdWw+XG4gKi8gZnVuY3Rpb24geCh0KSB7XG4gICAgRC5zZXRMb2dMZXZlbCh0KTtcbn1cblxuZnVuY3Rpb24gTih0LCAuLi5lKSB7XG4gICAgaWYgKEQubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgY29uc3QgbiA9IGUubWFwKCQpO1xuICAgICAgICBELmRlYnVnKGBGaXJlc3RvcmUgKCR7U30pOiAke3R9YCwgLi4ubik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBrKHQsIC4uLmUpIHtcbiAgICBpZiAoRC5sb2dMZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgICBjb25zdCBuID0gZS5tYXAoJCk7XG4gICAgICAgIEQuZXJyb3IoYEZpcmVzdG9yZSAoJHtTfSk6ICR7dH1gLCAuLi5uKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gTSh0LCAuLi5lKSB7XG4gICAgaWYgKEQubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuV0FSTikge1xuICAgICAgICBjb25zdCBuID0gZS5tYXAoJCk7XG4gICAgICAgIEQud2FybihgRmlyZXN0b3JlICgke1N9KTogJHt0fWAsIC4uLm4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhZGRpdGlvbmFsIGxvZyBwYXJhbWV0ZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gJCh0KSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0O1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBlID0gdCwgSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIEpTT04gZmFpbGVkLCBqdXN0IGxvZyB0aGUgb2JqZWN0IGRpcmVjdGx5XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKiBGb3JtYXRzIGFuIG9iamVjdCBhcyBhIEpTT04gc3RyaW5nLCBzdWl0YWJsZSBmb3IgbG9nZ2luZy4gKi9cbiAgICB2YXIgZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICogTWVzc2FnZXMgYXJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICpcbiAqIFJldHVybnMgYG5ldmVyYCBhbmQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnM6XG4gKiBAZXhhbXBsZVxuICogbGV0IGZ1dHVyZVZhciA9IGZhaWwoJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAqLyBmdW5jdGlvbiBPKHQgPSBcIlVuZXhwZWN0ZWQgc3RhdGVcIikge1xuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICAgIGNvbnN0IGUgPSBgRklSRVNUT1JFICgke1N9KSBJTlRFUk5BTCBBU1NFUlRJT04gRkFJTEVEOiBgICsgdDtcbiAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgRmlyZXN0b3JlRXJyb3IgaGVyZSBiZWNhdXNlIHRoZXNlIGFyZSBpbnRlcm5hbCBmYWlsdXJlc1xuICAgIC8vIHRoYXQgY2Fubm90IGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuIChBbHNvIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyXG4gICAgLy8gZGVwZW5kZW5jeSBiZXR3ZWVuIHRoZSBlcnJvciBhbmQgYXNzZXJ0IG1vZHVsZXMgd2hpY2ggZG9lc24ndCB3b3JrLilcbiAgICB0aHJvdyBrKGUpLCBuZXcgRXJyb3IoZSk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBNZXNzYWdlcyBhcmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMuXG4gKi8gZnVuY3Rpb24gRih0LCBlKSB7XG4gICAgdCB8fCBPKCk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBUaGUgY29kZSBvZiBjYWxsc2l0ZXMgaW52b2tpbmcgdGhpcyBmdW5jdGlvbiBhcmUgc3RyaXBwZWQgb3V0IGluIHByb2R1Y3Rpb25cbiAqIGJ1aWxkcy4gQW55IHNpZGUtZWZmZWN0cyBvZiBjb2RlIHdpdGhpbiB0aGUgZGVidWdBc3NlcnQoKSBpbnZvY2F0aW9uIHdpbGwgbm90XG4gKiBoYXBwZW4gaW4gdGhpcyBjYXNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIEIodCwgZSkge1xuICAgIHQgfHwgTygpO1xufVxuXG4vKipcbiAqIENhc3RzIGBvYmpgIHRvIGBUYC4gSW4gbm9uLXByb2R1Y3Rpb24gYnVpbGRzLCB2ZXJpZmllcyB0aGF0IGBvYmpgIGlzIGFuXG4gKiBpbnN0YW5jZSBvZiBgVGAgYmVmb3JlIGNhc3RpbmcuXG4gKi8gZnVuY3Rpb24gTCh0LCBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5lKSB7XG4gICAgcmV0dXJuIHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IHEgPSB7XG4gICAgLy8gQ2F1c2VzIGFyZSBjb3BpZWQgZnJvbTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvYmNlZWM5NGVhNGZjNWYwMDg1ZDgxMjM1ZDhlMWMwNjc5OGRjMzQxYS9pbmNsdWRlL2dycGMlMkIlMkIvaW1wbC9jb2RlZ2VuL3N0YXR1c19jb2RlX2VudW0uaFxuICAgIC8qKiBOb3QgYW4gZXJyb3I7IHJldHVybmVkIG9uIHN1Y2Nlc3MuICovXG4gICAgT0s6IFwib2tcIixcbiAgICAvKiogVGhlIG9wZXJhdGlvbiB3YXMgY2FuY2VsbGVkICh0eXBpY2FsbHkgYnkgdGhlIGNhbGxlcikuICovXG4gICAgQ0FOQ0VMTEVEOiBcImNhbmNlbGxlZFwiLFxuICAgIC8qKiBVbmtub3duIGVycm9yIG9yIGFuIGVycm9yIGZyb20gYSBkaWZmZXJlbnQgZXJyb3IgZG9tYWluLiAqL1xuICAgIFVOS05PV046IFwidW5rbm93blwiLFxuICAgIC8qKlxuICAgICAqIENsaWVudCBzcGVjaWZpZWQgYW4gaW52YWxpZCBhcmd1bWVudC4gTm90ZSB0aGF0IHRoaXMgZGlmZmVycyBmcm9tXG4gICAgICogRkFJTEVEX1BSRUNPTkRJVElPTi4gSU5WQUxJRF9BUkdVTUVOVCBpbmRpY2F0ZXMgYXJndW1lbnRzIHRoYXQgYXJlXG4gICAgICogcHJvYmxlbWF0aWMgcmVnYXJkbGVzcyBvZiB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbSAoZS5nLiwgYSBtYWxmb3JtZWQgZmlsZVxuICAgICAqIG5hbWUpLlxuICAgICAqL1xuICAgIElOVkFMSURfQVJHVU1FTlQ6IFwiaW52YWxpZC1hcmd1bWVudFwiLFxuICAgIC8qKlxuICAgICAqIERlYWRsaW5lIGV4cGlyZWQgYmVmb3JlIG9wZXJhdGlvbiBjb3VsZCBjb21wbGV0ZS4gRm9yIG9wZXJhdGlvbnMgdGhhdFxuICAgICAqIGNoYW5nZSB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbSwgdGhpcyBlcnJvciBtYXkgYmUgcmV0dXJuZWQgZXZlbiBpZiB0aGVcbiAgICAgKiBvcGVyYXRpb24gaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuIEZvciBleGFtcGxlLCBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcbiAgICAgKiBmcm9tIGEgc2VydmVyIGNvdWxkIGhhdmUgYmVlbiBkZWxheWVkIGxvbmcgZW5vdWdoIGZvciB0aGUgZGVhZGxpbmUgdG9cbiAgICAgKiBleHBpcmUuXG4gICAgICovXG4gICAgREVBRExJTkVfRVhDRUVERUQ6IFwiZGVhZGxpbmUtZXhjZWVkZWRcIixcbiAgICAvKiogU29tZSByZXF1ZXN0ZWQgZW50aXR5IChlLmcuLCBmaWxlIG9yIGRpcmVjdG9yeSkgd2FzIG5vdCBmb3VuZC4gKi9cbiAgICBOT1RfRk9VTkQ6IFwibm90LWZvdW5kXCIsXG4gICAgLyoqXG4gICAgICogU29tZSBlbnRpdHkgdGhhdCB3ZSBhdHRlbXB0ZWQgdG8gY3JlYXRlIChlLmcuLCBmaWxlIG9yIGRpcmVjdG9yeSkgYWxyZWFkeVxuICAgICAqIGV4aXN0cy5cbiAgICAgKi9cbiAgICBBTFJFQURZX0VYSVNUUzogXCJhbHJlYWR5LWV4aXN0c1wiLFxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGV4ZWN1dGUgdGhlIHNwZWNpZmllZCBvcGVyYXRpb24uXG4gICAgICogUEVSTUlTU0lPTl9ERU5JRUQgbXVzdCBub3QgYmUgdXNlZCBmb3IgcmVqZWN0aW9ucyBjYXVzZWQgYnkgZXhoYXVzdGluZ1xuICAgICAqIHNvbWUgcmVzb3VyY2UgKHVzZSBSRVNPVVJDRV9FWEhBVVNURUQgaW5zdGVhZCBmb3IgdGhvc2UgZXJyb3JzKS5cbiAgICAgKiBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZSB1c2VkIGlmIHRoZSBjYWxsZXIgY2FuIG5vdCBiZSBpZGVudGlmaWVkXG4gICAgICogKHVzZSBVTkFVVEhFTlRJQ0FURUQgaW5zdGVhZCBmb3IgdGhvc2UgZXJyb3JzKS5cbiAgICAgKi9cbiAgICBQRVJNSVNTSU9OX0RFTklFRDogXCJwZXJtaXNzaW9uLWRlbmllZFwiLFxuICAgIC8qKlxuICAgICAqIFRoZSByZXF1ZXN0IGRvZXMgbm90IGhhdmUgdmFsaWQgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZm9yIHRoZVxuICAgICAqIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBVTkFVVEhFTlRJQ0FURUQ6IFwidW5hdXRoZW50aWNhdGVkXCIsXG4gICAgLyoqXG4gICAgICogU29tZSByZXNvdXJjZSBoYXMgYmVlbiBleGhhdXN0ZWQsIHBlcmhhcHMgYSBwZXItdXNlciBxdW90YSwgb3IgcGVyaGFwcyB0aGVcbiAgICAgKiBlbnRpcmUgZmlsZSBzeXN0ZW0gaXMgb3V0IG9mIHNwYWNlLlxuICAgICAqL1xuICAgIFJFU09VUkNFX0VYSEFVU1RFRDogXCJyZXNvdXJjZS1leGhhdXN0ZWRcIixcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gd2FzIHJlamVjdGVkIGJlY2F1c2UgdGhlIHN5c3RlbSBpcyBub3QgaW4gYSBzdGF0ZSByZXF1aXJlZCBmb3JcbiAgICAgKiB0aGUgb3BlcmF0aW9uJ3MgZXhlY3V0aW9uLiBGb3IgZXhhbXBsZSwgZGlyZWN0b3J5IHRvIGJlIGRlbGV0ZWQgbWF5IGJlXG4gICAgICogbm9uLWVtcHR5LCBhbiBybWRpciBvcGVyYXRpb24gaXMgYXBwbGllZCB0byBhIG5vbi1kaXJlY3RvcnksIGV0Yy5cbiAgICAgKlxuICAgICAqIEEgbGl0bXVzIHRlc3QgdGhhdCBtYXkgaGVscCBhIHNlcnZpY2UgaW1wbGVtZW50b3IgaW4gZGVjaWRpbmdcbiAgICAgKiBiZXR3ZWVuIEZBSUxFRF9QUkVDT05ESVRJT04sIEFCT1JURUQsIGFuZCBVTkFWQUlMQUJMRTpcbiAgICAgKiAgKGEpIFVzZSBVTkFWQUlMQUJMRSBpZiB0aGUgY2xpZW50IGNhbiByZXRyeSBqdXN0IHRoZSBmYWlsaW5nIGNhbGwuXG4gICAgICogIChiKSBVc2UgQUJPUlRFRCBpZiB0aGUgY2xpZW50IHNob3VsZCByZXRyeSBhdCBhIGhpZ2hlci1sZXZlbFxuICAgICAqICAgICAgKGUuZy4sIHJlc3RhcnRpbmcgYSByZWFkLW1vZGlmeS13cml0ZSBzZXF1ZW5jZSkuXG4gICAgICogIChjKSBVc2UgRkFJTEVEX1BSRUNPTkRJVElPTiBpZiB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW50aWxcbiAgICAgKiAgICAgIHRoZSBzeXN0ZW0gc3RhdGUgaGFzIGJlZW4gZXhwbGljaXRseSBmaXhlZC4gRS5nLiwgaWYgYW4gXCJybWRpclwiXG4gICAgICogICAgICBmYWlscyBiZWNhdXNlIHRoZSBkaXJlY3RvcnkgaXMgbm9uLWVtcHR5LCBGQUlMRURfUFJFQ09ORElUSU9OXG4gICAgICogICAgICBzaG91bGQgYmUgcmV0dXJuZWQgc2luY2UgdGhlIGNsaWVudCBzaG91bGQgbm90IHJldHJ5IHVubGVzc1xuICAgICAqICAgICAgdGhleSBoYXZlIGZpcnN0IGZpeGVkIHVwIHRoZSBkaXJlY3RvcnkgYnkgZGVsZXRpbmcgZmlsZXMgZnJvbSBpdC5cbiAgICAgKiAgKGQpIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgcGVyZm9ybXMgY29uZGl0aW9uYWxcbiAgICAgKiAgICAgIFJFU1QgR2V0L1VwZGF0ZS9EZWxldGUgb24gYSByZXNvdXJjZSBhbmQgdGhlIHJlc291cmNlIG9uIHRoZVxuICAgICAqICAgICAgc2VydmVyIGRvZXMgbm90IG1hdGNoIHRoZSBjb25kaXRpb24uIEUuZy4sIGNvbmZsaWN0aW5nXG4gICAgICogICAgICByZWFkLW1vZGlmeS13cml0ZSBvbiB0aGUgc2FtZSByZXNvdXJjZS5cbiAgICAgKi9cbiAgICBGQUlMRURfUFJFQ09ORElUSU9OOiBcImZhaWxlZC1wcmVjb25kaXRpb25cIixcbiAgICAvKipcbiAgICAgKiBUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLCB0eXBpY2FsbHkgZHVlIHRvIGEgY29uY3VycmVuY3kgaXNzdWUgbGlrZVxuICAgICAqIHNlcXVlbmNlciBjaGVjayBmYWlsdXJlcywgdHJhbnNhY3Rpb24gYWJvcnRzLCBldGMuXG4gICAgICpcbiAgICAgKiBTZWUgbGl0bXVzIHRlc3QgYWJvdmUgZm9yIGRlY2lkaW5nIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCxcbiAgICAgKiBhbmQgVU5BVkFJTEFCTEUuXG4gICAgICovXG4gICAgQUJPUlRFRDogXCJhYm9ydGVkXCIsXG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9uIHdhcyBhdHRlbXB0ZWQgcGFzdCB0aGUgdmFsaWQgcmFuZ2UuIEUuZy4sIHNlZWtpbmcgb3IgcmVhZGluZ1xuICAgICAqIHBhc3QgZW5kIG9mIGZpbGUuXG4gICAgICpcbiAgICAgKiBVbmxpa2UgSU5WQUxJRF9BUkdVTUVOVCwgdGhpcyBlcnJvciBpbmRpY2F0ZXMgYSBwcm9ibGVtIHRoYXQgbWF5IGJlIGZpeGVkXG4gICAgICogaWYgdGhlIHN5c3RlbSBzdGF0ZSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSAzMi1iaXQgZmlsZSBzeXN0ZW0gd2lsbFxuICAgICAqIGdlbmVyYXRlIElOVkFMSURfQVJHVU1FTlQgaWYgYXNrZWQgdG8gcmVhZCBhdCBhbiBvZmZzZXQgdGhhdCBpcyBub3QgaW4gdGhlXG4gICAgICogcmFuZ2UgWzAsMl4zMi0xXSwgYnV0IGl0IHdpbGwgZ2VuZXJhdGUgT1VUX09GX1JBTkdFIGlmIGFza2VkIHRvIHJlYWQgZnJvbVxuICAgICAqIGFuIG9mZnNldCBwYXN0IHRoZSBjdXJyZW50IGZpbGUgc2l6ZS5cbiAgICAgKlxuICAgICAqIFRoZXJlIGlzIGEgZmFpciBiaXQgb2Ygb3ZlcmxhcCBiZXR3ZWVuIEZBSUxFRF9QUkVDT05ESVRJT04gYW5kXG4gICAgICogT1VUX09GX1JBTkdFLiBXZSByZWNvbW1lbmQgdXNpbmcgT1VUX09GX1JBTkdFICh0aGUgbW9yZSBzcGVjaWZpYyBlcnJvcilcbiAgICAgKiB3aGVuIGl0IGFwcGxpZXMgc28gdGhhdCBjYWxsZXJzIHdobyBhcmUgaXRlcmF0aW5nIHRocm91Z2ggYSBzcGFjZSBjYW5cbiAgICAgKiBlYXNpbHkgbG9vayBmb3IgYW4gT1VUX09GX1JBTkdFIGVycm9yIHRvIGRldGVjdCB3aGVuIHRoZXkgYXJlIGRvbmUuXG4gICAgICovXG4gICAgT1VUX09GX1JBTkdFOiBcIm91dC1vZi1yYW5nZVwiLFxuICAgIC8qKiBPcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIG9yIG5vdCBzdXBwb3J0ZWQvZW5hYmxlZCBpbiB0aGlzIHNlcnZpY2UuICovXG4gICAgVU5JTVBMRU1FTlRFRDogXCJ1bmltcGxlbWVudGVkXCIsXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZXJyb3JzLiBNZWFucyBzb21lIGludmFyaWFudHMgZXhwZWN0ZWQgYnkgdW5kZXJseWluZyBTeXN0ZW0gaGFzXG4gICAgICogYmVlbiBicm9rZW4uIElmIHlvdSBzZWUgb25lIG9mIHRoZXNlIGVycm9ycywgU29tZXRoaW5nIGlzIHZlcnkgYnJva2VuLlxuICAgICAqL1xuICAgIElOVEVSTkFMOiBcImludGVybmFsXCIsXG4gICAgLyoqXG4gICAgICogVGhlIHNlcnZpY2UgaXMgY3VycmVudGx5IHVuYXZhaWxhYmxlLiBUaGlzIGlzIGEgbW9zdCBsaWtlbHkgYSB0cmFuc2llbnRcbiAgICAgKiBjb25kaXRpb24gYW5kIG1heSBiZSBjb3JyZWN0ZWQgYnkgcmV0cnlpbmcgd2l0aCBhIGJhY2tvZmYuXG4gICAgICpcbiAgICAgKiBTZWUgbGl0bXVzIHRlc3QgYWJvdmUgZm9yIGRlY2lkaW5nIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCxcbiAgICAgKiBhbmQgVU5BVkFJTEFCTEUuXG4gICAgICovXG4gICAgVU5BVkFJTEFCTEU6IFwidW5hdmFpbGFibGVcIixcbiAgICAvKiogVW5yZWNvdmVyYWJsZSBkYXRhIGxvc3Mgb3IgY29ycnVwdGlvbi4gKi9cbiAgICBEQVRBX0xPU1M6IFwiZGF0YS1sb3NzXCJcbn07XG5cbi8qKiBBbiBlcnJvciByZXR1cm5lZCBieSBhIEZpcmVzdG9yZSBvcGVyYXRpb24uICovIGNsYXNzIFUgZXh0ZW5kcyBGaXJlYmFzZUVycm9yIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBiYWNrZW5kIGVycm9yIGNvZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXJyb3IuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gZXJyb3IgZGVzY3JpcHRpb24uXG4gICAgICovXG4gICAgZSkge1xuICAgICAgICBzdXBlcih0LCBlKSwgdGhpcy5jb2RlID0gdCwgdGhpcy5tZXNzYWdlID0gZSwgXG4gICAgICAgIC8vIEhBQ0s6IFdlIHdyaXRlIGEgdG9TdHJpbmcgcHJvcGVydHkgZGlyZWN0bHkgYmVjYXVzZSBFcnJvciBpcyBub3QgYSByZWFsXG4gICAgICAgIC8vIGNsYXNzIGFuZCBzbyBpbmhlcml0YW5jZSBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseS4gV2UgY291bGQgYWx0ZXJuYXRpdmVseVxuICAgICAgICAvLyBkbyB0aGUgc2FtZSBcImJhY2stZG9vciBpbmhlcml0YW5jZVwiIHRyaWNrIHRoYXQgRmlyZWJhc2VFcnJvciBkb2VzLlxuICAgICAgICB0aGlzLnRvU3RyaW5nID0gKCkgPT4gYCR7dGhpcy5uYW1lfTogW2NvZGU9JHt0aGlzLmNvZGV9XTogJHt0aGlzLm1lc3NhZ2V9YDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIEsge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHQsIHRoaXMucmVqZWN0ID0gZTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgRyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnVzZXIgPSBlLCB0aGlzLnR5cGUgPSBcIk9BdXRoXCIsIHRoaXMuaGVhZGVycyA9IG5ldyBNYXAsIHRoaXMuaGVhZGVycy5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHt0fWApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgeWllbGRzIGFuIGVtcHR5IHRva2VuLlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgUSB7XG4gICAgZ2V0VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG4gICAgc3RhcnQodCwgZSkge1xuICAgICAgICAvLyBGaXJlIHdpdGggaW5pdGlhbCB1c2VyLlxuICAgICAgICB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IGUoVi5VTkFVVEhFTlRJQ0FURUQpKSk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge31cbn1cblxuLyoqXG4gKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgcmV0dXJucyBhIGNvbnN0YW50IHRva2VuLiBVc2VkIGZvclxuICogZW11bGF0b3IgdG9rZW4gbW9ja2luZy5cbiAqLyBjbGFzcyBqIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0aGUgbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIHNldENoYW5nZUxpc3RlbmVyKClcbiAgICAgICAgICogVGhpcyBpc24ndCBhY3R1YWxseSBuZWNlc3Nhcnkgc2luY2UgdGhlIFVJRCBuZXZlciBjaGFuZ2VzLCBidXQgd2UgdXNlIHRoaXNcbiAgICAgICAgICogdG8gdmVyaWZ5IHRoZSBsaXN0ZW4gY29udHJhY3QgaXMgYWRoZXJlZCB0byBpbiB0ZXN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnRva2VuKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRva2VuKCkge31cbiAgICBzdGFydCh0LCBlKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBlLCBcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdXNlci5cbiAgICAgICAgdC5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiBlKHRoaXMudG9rZW4udXNlcikpKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgeiB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnQgPSB0LCBcbiAgICAgICAgLyoqIFRyYWNrcyB0aGUgY3VycmVudCBVc2VyLiAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gVi5VTkFVVEhFTlRJQ0FURUQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ291bnRlciB1c2VkIHRvIGRldGVjdCBpZiB0aGUgdG9rZW4gY2hhbmdlZCB3aGlsZSBhIGdldFRva2VuIHJlcXVlc3Qgd2FzXG4gICAgICAgICAqIG91dHN0YW5kaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pID0gMCwgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hdXRoID0gbnVsbDtcbiAgICB9XG4gICAgc3RhcnQodCwgZSkge1xuICAgICAgICBsZXQgbiA9IHRoaXMuaTtcbiAgICAgICAgLy8gQSBjaGFuZ2UgbGlzdGVuZXIgdGhhdCBwcmV2ZW50cyBkb3VibGUtZmlyaW5nIGZvciB0aGUgc2FtZSB0b2tlbiBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHQgPT4gdGhpcy5pICE9PSBuID8gKG4gPSB0aGlzLmksIGUodCkpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8vIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSB3YWl0ZWQgb24gdG8gYmxvY2sgb24gdGhlIG5leHQgdG9rZW4gY2hhbmdlLlxuICAgICAgICAvLyBUaGlzIHByb21pc2UgaXMgcmUtY3JlYXRlZCBhZnRlciBlYWNoIGNoYW5nZS5cbiAgICAgICAgICAgICAgICBsZXQgaSA9IG5ldyBLO1xuICAgICAgICB0aGlzLm8gPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmkrKywgdGhpcy5jdXJyZW50VXNlciA9IHRoaXMudSgpLCBpLnJlc29sdmUoKSwgaSA9IG5ldyBLLCB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IHModGhpcy5jdXJyZW50VXNlcikpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBpO1xuICAgICAgICAgICAgdC5lbnF1ZXVlUmV0cnlhYmxlKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZS5wcm9taXNlLCBhd2FpdCBzKHRoaXMuY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCBvID0gdCA9PiB7XG4gICAgICAgICAgICBOKFwiRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcIkF1dGggZGV0ZWN0ZWRcIiksIHRoaXMuYXV0aCA9IHQsIHRoaXMuYXV0aC5hZGRBdXRoVG9rZW5MaXN0ZW5lcih0aGlzLm8pLCBcbiAgICAgICAgICAgIHIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50Lm9uSW5pdCgodCA9PiBvKHQpKSksIFxuICAgICAgICAvLyBPdXIgdXNlcnMgY2FuIGluaXRpYWxpemUgQXV0aCByaWdodCBhZnRlciBGaXJlc3RvcmUsIHNvIHdlIGdpdmUgaXRcbiAgICAgICAgLy8gYSBjaGFuY2UgdG8gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGNvbXBvbmVudCBmcmFtZXdvcmsgYmVmb3JlIHdlXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRvIHN0YXJ0IHVwIGluIHVuYXV0aGVudGljYXRlZCBtb2RlLlxuICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdCA/IG8odCkgOiAoXG4gICAgICAgICAgICAgICAgLy8gSWYgYXV0aCBpcyBzdGlsbCBub3QgYXZhaWxhYmxlLCBwcm9jZWVkIHdpdGggYG51bGxgIHVzZXJcbiAgICAgICAgICAgICAgICBOKFwiRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcIkF1dGggbm90IHlldCBkZXRlY3RlZFwiKSwgaS5yZXNvbHZlKCksIGkgPSBuZXcgSyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCAwKSwgcigpO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgLy8gVGFrZSBub3RlIG9mIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB0b2tlbkNvdW50ZXIgc28gdGhhdCB0aGlzIG1ldGhvZFxuICAgICAgICAvLyBjYW4gZmFpbCAod2l0aCBhbiBBQk9SVEVEIGVycm9yKSBpZiB0aGVyZSBpcyBhIHRva2VuIGNoYW5nZSB3aGlsZSB0aGVcbiAgICAgICAgLy8gcmVxdWVzdCBpcyBvdXRzdGFuZGluZy5cbiAgICAgICAgY29uc3QgdCA9IHRoaXMuaSwgZSA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hdXRoID8gdGhpcy5hdXRoLmdldFRva2VuKGUpLnRoZW4oKGUgPT4gXG4gICAgICAgIC8vIENhbmNlbCB0aGUgcmVxdWVzdCBzaW5jZSB0aGUgdG9rZW4gY2hhbmdlZCB3aGlsZSB0aGUgcmVxdWVzdCB3YXNcbiAgICAgICAgLy8gb3V0c3RhbmRpbmcgc28gdGhlIHJlc3BvbnNlIGlzIHBvdGVudGlhbGx5IGZvciBhIHByZXZpb3VzIHVzZXIgKHdoaWNoXG4gICAgICAgIC8vIHVzZXIsIHdlIGNhbid0IGJlIHN1cmUpLlxuICAgICAgICB0aGlzLmkgIT09IHQgPyAoTihcIkZpcmViYXNlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXJcIiwgXCJnZXRUb2tlbiBhYm9ydGVkIGR1ZSB0byB0b2tlbiBjaGFuZ2UuXCIpLCBcbiAgICAgICAgdGhpcy5nZXRUb2tlbigpKSA6IGUgPyAoRihcInN0cmluZ1wiID09IHR5cGVvZiBlLmFjY2Vzc1Rva2VuKSwgbmV3IEcoZS5hY2Nlc3NUb2tlbiwgdGhpcy5jdXJyZW50VXNlcikpIDogbnVsbCkpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gITA7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLmF1dGggJiYgdGhpcy5hdXRoLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKHRoaXMubyk7XG4gICAgfVxuICAgIC8vIEF1dGguZ2V0VWlkKCkgY2FuIHJldHVybiBudWxsIGV2ZW4gd2l0aCBhIHVzZXIgbG9nZ2VkIGluLiBJdCBpcyBiZWNhdXNlXG4gICAgLy8gZ2V0VWlkKCkgaXMgc3luY2hyb25vdXMsIGJ1dCB0aGUgYXV0aCBjb2RlIHBvcHVsYXRpbmcgVWlkIGlzIGFzeW5jaHJvbm91cy5cbiAgICAvLyBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgaW4gdGhlIEF1dGhUb2tlbkxpc3RlbmVyIGNhbGxiYWNrXG4gICAgLy8gdG8gZ3VhcmFudGVlIHRvIGdldCB0aGUgYWN0dWFsIHVzZXIuXG4gICAgdSgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuYXV0aCAmJiB0aGlzLmF1dGguZ2V0VWlkKCk7XG4gICAgICAgIHJldHVybiBGKG51bGwgPT09IHQgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCksIG5ldyBWKHQpO1xuICAgIH1cbn1cblxuLypcbiAqIEZpcnN0UGFydHlUb2tlbiBwcm92aWRlcyBhIGZyZXNoIHRva2VuIGVhY2ggdGltZSBpdHMgdmFsdWVcbiAqIGlzIHJlcXVlc3RlZCwgYmVjYXVzZSBpZiB0aGUgdG9rZW4gaXMgdG9vIG9sZCwgcmVxdWVzdHMgd2lsbCBiZSByZWplY3RlZC5cbiAqIFRlY2huaWNhbGx5IHRoaXMgbWF5IG5vIGxvbmdlciBiZSBuZWNlc3Nhcnkgc2luY2UgdGhlIFNESyBzaG91bGQgZ3JhY2VmdWxseVxuICogcmVjb3ZlciBmcm9tIHVuYXV0aGVudGljYXRlZCBlcnJvcnMgKHNlZSBiLzMzMTQ3ODE4IGZvciBjb250ZXh0KSwgYnV0IGl0J3NcbiAqIHNhZmVyIHRvIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIGFzLWlzLlxuICovIGNsYXNzIFcge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5oID0gdCwgdGhpcy5sID0gZSwgdGhpcy5tID0gbiwgdGhpcy50eXBlID0gXCJGaXJzdFBhcnR5XCIsIHRoaXMudXNlciA9IFYuRklSU1RfUEFSVFksIFxuICAgICAgICB0aGlzLmcgPSBuZXcgTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGF1dGhvcml6YXRpb24gdG9rZW4sIHVzaW5nIGEgcHJvdmlkZWQgZmFjdG9yeSBmdW5jdGlvbiwgb3IgcmV0dXJuXG4gICAgICogbnVsbC5cbiAgICAgKi8gICAgcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubSA/IHRoaXMubSgpIDogbnVsbDtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcnMoKSB7XG4gICAgICAgIHRoaXMuZy5zZXQoXCJYLUdvb2ctQXV0aFVzZXJcIiwgdGhpcy5oKTtcbiAgICAgICAgLy8gVXNlIGFycmF5IG5vdGF0aW9uIHRvIHByZXZlbnQgbWluaWZpY2F0aW9uXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnAoKTtcbiAgICAgICAgcmV0dXJuIHQgJiYgdGhpcy5nLnNldChcIkF1dGhvcml6YXRpb25cIiwgdCksIHRoaXMubCAmJiB0aGlzLmcuc2V0KFwiWC1Hb29nLUlhbS1BdXRob3JpemF0aW9uLVRva2VuXCIsIHRoaXMubCksIFxuICAgICAgICB0aGlzLmc7XG4gICAgfVxufVxuXG4vKlxuICogUHJvdmlkZXMgdXNlciBjcmVkZW50aWFscyByZXF1aXJlZCBmb3IgdGhlIEZpcmVzdG9yZSBKYXZhU2NyaXB0IFNES1xuICogdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyLCB1c2luZyB0ZWNobmlxdWUgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZVxuICogdG8gYXBwbGljYXRpb25zIGhvc3RlZCBieSBHb29nbGUuXG4gKi8gY2xhc3MgSCB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICB0aGlzLmggPSB0LCB0aGlzLmwgPSBlLCB0aGlzLm0gPSBuO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgVyh0aGlzLmgsIHRoaXMubCwgdGhpcy5tKSk7XG4gICAgfVxuICAgIHN0YXJ0KHQsIGUpIHtcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdWlkLlxuICAgICAgICB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IGUoVi5GSVJTVF9QQVJUWSkpKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7fVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG59XG5cbmNsYXNzIEoge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHQsIHRoaXMudHlwZSA9IFwiQXBwQ2hlY2tcIiwgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCwgdCAmJiB0Lmxlbmd0aCA+IDAgJiYgdGhpcy5oZWFkZXJzLnNldChcIngtZmlyZWJhc2UtYXBwY2hlY2tcIiwgdGhpcy52YWx1ZSk7XG4gICAgfVxufVxuXG5jbGFzcyBZIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuSSA9IHQsIHRoaXMuZm9yY2VSZWZyZXNoID0gITEsIHRoaXMuYXBwQ2hlY2sgPSBudWxsLCB0aGlzLlQgPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0ID0+IHtcbiAgICAgICAgICAgIG51bGwgIT0gdC5lcnJvciAmJiBOKFwiRmlyZWJhc2VBcHBDaGVja1Rva2VuUHJvdmlkZXJcIiwgYEVycm9yIGdldHRpbmcgQXBwIENoZWNrIHRva2VuOyB1c2luZyBwbGFjZWhvbGRlciB0b2tlbiBpbnN0ZWFkLiBFcnJvcjogJHt0LmVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICBjb25zdCBuID0gdC50b2tlbiAhPT0gdGhpcy5UO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVCA9IHQudG9rZW4sIE4oXCJGaXJlYmFzZUFwcENoZWNrVG9rZW5Qcm92aWRlclwiLCBgUmVjZWl2ZWQgJHtuID8gXCJuZXdcIiA6IFwiZXhpc3RpbmdcIn0gdG9rZW4uYCksIFxuICAgICAgICAgICAgbiA/IGUodC50b2tlbikgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vID0gZSA9PiB7XG4gICAgICAgICAgICB0LmVucXVldWVSZXRyeWFibGUoKCgpID0+IG4oZSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcyA9IHQgPT4ge1xuICAgICAgICAgICAgTihcIkZpcmViYXNlQXBwQ2hlY2tUb2tlblByb3ZpZGVyXCIsIFwiQXBwQ2hlY2sgZGV0ZWN0ZWRcIiksIHRoaXMuYXBwQ2hlY2sgPSB0LCB0aGlzLmFwcENoZWNrLmFkZFRva2VuTGlzdGVuZXIodGhpcy5vKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5JLm9uSW5pdCgodCA9PiBzKHQpKSksIFxuICAgICAgICAvLyBPdXIgdXNlcnMgY2FuIGluaXRpYWxpemUgQXBwQ2hlY2sgYWZ0ZXIgRmlyZXN0b3JlLCBzbyB3ZSBnaXZlIGl0XG4gICAgICAgIC8vIGEgY2hhbmNlIHRvIHJlZ2lzdGVyIGl0c2VsZiB3aXRoIHRoZSBjb21wb25lbnQgZnJhbWV3b3JrLlxuICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXBwQ2hlY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5JLmdldEltbWVkaWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiAhMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHQgPyBzKHQpIDogXG4gICAgICAgICAgICAgICAgLy8gSWYgQXBwQ2hlY2sgaXMgc3RpbGwgbm90IGF2YWlsYWJsZSwgcHJvY2VlZCB3aXRob3V0IGl0LlxuICAgICAgICAgICAgICAgIE4oXCJGaXJlYmFzZUFwcENoZWNrVG9rZW5Qcm92aWRlclwiLCBcIkFwcENoZWNrIG5vdCB5ZXQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCAwKTtcbiAgICB9XG4gICAgZ2V0VG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmZvcmNlUmVmcmVzaDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yY2VSZWZyZXNoID0gITEsIHRoaXMuYXBwQ2hlY2sgPyB0aGlzLmFwcENoZWNrLmdldFRva2VuKHQpLnRoZW4oKHQgPT4gdCA/IChGKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQudG9rZW4pLCBcbiAgICAgICAgdGhpcy5UID0gdC50b2tlbiwgbmV3IEoodC50b2tlbikpIDogbnVsbCkpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gITA7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLmFwcENoZWNrICYmIHRoaXMuYXBwQ2hlY2sucmVtb3ZlVG9rZW5MaXN0ZW5lcih0aGlzLm8pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBBcHBDaGVjayB0b2tlbiBwcm92aWRlciB0aGF0IGFsd2F5cyB5aWVsZHMgYW4gZW1wdHkgdG9rZW4uXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBYIHtcbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgSihcIlwiKSk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG4gICAgc3RhcnQodCwgZSkge31cbiAgICBzaHV0ZG93bigpIHt9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgQ3JlZGVudGlhbHNQcm92aWRlciBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2ZcbiAqIHRoZSBjcmVkZW50aWFscyBwYXNzZWQgaW4uXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEdlbmVyYXRlcyBgbkJ5dGVzYCBvZiByYW5kb20gYnl0ZXMuXG4gKlxuICogSWYgYG5CeXRlcyA8IDBgICwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIFoodCkge1xuICAgIC8vIFBvbHlmaWxscyBmb3IgSUUgYW5kIFdlYldvcmtlciBieSB1c2luZyBgc2VsZmAgYW5kIGBtc0NyeXB0b2Agd2hlbiBgY3J5cHRvYCBpcyBub3QgYXZhaWxhYmxlLlxuICAgIGNvbnN0IGUgPSBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNlbGYgJiYgKHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG8pLCBuID0gbmV3IFVpbnQ4QXJyYXkodCk7XG4gICAgaWYgKGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLmdldFJhbmRvbVZhbHVlcykgZS5nZXRSYW5kb21WYWx1ZXMobik7IGVsc2UgXG4gICAgLy8gRmFsbHMgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdDsgZSsrKSBuW2VdID0gTWF0aC5mbG9vcigyNTYgKiBNYXRoLnJhbmRvbSgpKTtcbiAgICByZXR1cm4gbjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgdHQge1xuICAgIHN0YXRpYyBBKCkge1xuICAgICAgICAvLyBBbHBoYW51bWVyaWMgY2hhcmFjdGVyc1xuICAgICAgICBjb25zdCB0ID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLCBlID0gTWF0aC5mbG9vcigyNTYgLyB0Lmxlbmd0aCkgKiB0Lmxlbmd0aDtcbiAgICAgICAgLy8gVGhlIGxhcmdlc3QgYnl0ZSB2YWx1ZSB0aGF0IGlzIGEgbXVsdGlwbGUgb2YgYGNoYXIubGVuZ3RoYC5cbiAgICAgICAgICAgICAgICBsZXQgbiA9IFwiXCI7XG4gICAgICAgIGZvciAoO24ubGVuZ3RoIDwgMjA7ICkge1xuICAgICAgICAgICAgY29uc3QgcyA9IFooNDApO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSBcbiAgICAgICAgICAgIC8vIE9ubHkgYWNjZXB0IHZhbHVlcyB0aGF0IGFyZSBbMCwgbWF4TXVsdGlwbGUpLCB0aGlzIGVuc3VyZXMgdGhleSBjYW5cbiAgICAgICAgICAgIC8vIGJlIGV2ZW5seSBtYXBwZWQgdG8gaW5kaWNlcyBvZiBgY2hhcnNgIHZpYSBhIG1vZHVsbyBvcGVyYXRpb24uXG4gICAgICAgICAgICBuLmxlbmd0aCA8IDIwICYmIHNbaV0gPCBlICYmIChuICs9IHQuY2hhckF0KHNbaV0gJSB0Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZXQodCwgZSkge1xuICAgIHJldHVybiB0IDwgZSA/IC0xIDogdCA+IGUgPyAxIDogMDtcbn1cblxuLyoqIEhlbHBlciB0byBjb21wYXJlIGFycmF5cyB1c2luZyBpc0VxdWFsKCkuICovIGZ1bmN0aW9uIG50KHQsIGUsIG4pIHtcbiAgICByZXR1cm4gdC5sZW5ndGggPT09IGUubGVuZ3RoICYmIHQuZXZlcnkoKCh0LCBzKSA9PiBuKHQsIGVbc10pKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW1tZWRpYXRlIGxleGljb2dyYXBoaWNhbGx5LWZvbGxvd2luZyBzdHJpbmcuIFRoaXMgaXMgdXNlZnVsIHRvXG4gKiBjb25zdHJ1Y3QgYW4gaW5jbHVzaXZlIHJhbmdlIGZvciBpbmRleGVkZGIgaXRlcmF0b3JzLlxuICovIGZ1bmN0aW9uIHN0KHQpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGlucHV0IHN0cmluZywgd2l0aCBhbiBhZGRpdGlvbmFsIE5VTCBieXRlIGFwcGVuZGVkLlxuICAgIHJldHVybiB0ICsgXCJcXDBcIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoZSBlYXJsaWVzdCBkYXRlIHN1cHBvcnRlZCBieSBGaXJlc3RvcmUgdGltZXN0YW1wcyAoMDAwMS0wMS0wMVQwMDowMDowMFopLlxuLyoqXG4gKiBBIGBUaW1lc3RhbXBgIHJlcHJlc2VudHMgYSBwb2ludCBpbiB0aW1lIGluZGVwZW5kZW50IG9mIGFueSB0aW1lIHpvbmUgb3JcbiAqIGNhbGVuZGFyLCByZXByZXNlbnRlZCBhcyBzZWNvbmRzIGFuZCBmcmFjdGlvbnMgb2Ygc2Vjb25kcyBhdCBuYW5vc2Vjb25kXG4gKiByZXNvbHV0aW9uIGluIFVUQyBFcG9jaCB0aW1lLlxuICpcbiAqIEl0IGlzIGVuY29kZWQgdXNpbmcgdGhlIFByb2xlcHRpYyBHcmVnb3JpYW4gQ2FsZW5kYXIgd2hpY2ggZXh0ZW5kcyB0aGVcbiAqIEdyZWdvcmlhbiBjYWxlbmRhciBiYWNrd2FyZHMgdG8geWVhciBvbmUuIEl0IGlzIGVuY29kZWQgYXNzdW1pbmcgYWxsIG1pbnV0ZXNcbiAqIGFyZSA2MCBzZWNvbmRzIGxvbmcsIGkuZS4gbGVhcCBzZWNvbmRzIGFyZSBcInNtZWFyZWRcIiBzbyB0aGF0IG5vIGxlYXAgc2Vjb25kXG4gKiB0YWJsZSBpcyBuZWVkZWQgZm9yIGludGVycHJldGF0aW9uLiBSYW5nZSBpcyBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvXG4gKiA5OTk5LTEyLTMxVDIzOjU5OjU5Ljk5OTk5OTk5OVouXG4gKlxuICogRm9yIGV4YW1wbGVzIGFuZCBmdXJ0aGVyIHNwZWNpZmljYXRpb25zLCByZWZlciB0byB0aGVcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3Byb3RvYnVmL2Jsb2IvbWFzdGVyL3NyYy9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIHwgVGltZXN0YW1wIGRlZmluaXRpb259LlxuICovXG5jbGFzcyBpdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBVVEMgdGltZSBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogICAgIDE5NzAtMDEtMDFUMDA6MDA6MDBaLiBNdXN0IGJlIGZyb20gMDAwMS0wMS0wMVQwMDowMDowMFogdG9cbiAgICAgKiAgICAgOTk5OS0xMi0zMVQyMzo1OTo1OVogaW5jbHVzaXZlLlxuICAgICAqIEBwYXJhbSBuYW5vc2Vjb25kcyAtIFRoZSBub24tbmVnYXRpdmUgZnJhY3Rpb25zIG9mIGEgc2Vjb25kIGF0IG5hbm9zZWNvbmRcbiAgICAgKiAgICAgcmVzb2x1dGlvbi4gTmVnYXRpdmUgc2Vjb25kIHZhbHVlcyB3aXRoIGZyYWN0aW9ucyBtdXN0IHN0aWxsIGhhdmVcbiAgICAgKiAgICAgbm9uLW5lZ2F0aXZlIG5hbm9zZWNvbmRzIHZhbHVlcyB0aGF0IGNvdW50IGZvcndhcmQgaW4gdGltZS4gTXVzdCBiZVxuICAgICAqICAgICBmcm9tIDAgdG8gOTk5LDk5OSw5OTkgaW5jbHVzaXZlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBVVEMgdGltZSBzaW5jZSBVbml4IGVwb2NoIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBmcmFjdGlvbnMgb2YgYSBzZWNvbmQgYXQgbmFub3NlY29uZCByZXNvbHV0aW9uLipcbiAgICAgKi9cbiAgICBlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY29uZHMgPSB0LCB0aGlzLm5hbm9zZWNvbmRzID0gZSwgZSA8IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAoZSA+PSAxZTkpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIGUpO1xuICAgICAgICBpZiAodCA8IC02MjEzNTU5NjgwMCkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIlRpbWVzdGFtcCBzZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyB0KTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJyZWFrIGluIHRoZSB5ZWFyIDEwLDAwMC5cbiAgICAgICAgICAgICAgICBpZiAodCA+PSAyNTM0MDIzMDA4MDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIHdpdGggdGhlIGN1cnJlbnQgZGF0ZSwgd2l0aCBtaWxsaXNlY29uZCBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB0aW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgICovICAgIHN0YXRpYyBub3coKSB7XG4gICAgICAgIHJldHVybiBpdC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBpbml0aWFsaXplIHRoZSBgVGltZXN0YW1wYCBmcm9tLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzIHRoZSBnaXZlblxuICAgICAqICAgICBkYXRlLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbURhdGUodCkge1xuICAgICAgICByZXR1cm4gaXQuZnJvbU1pbGxpcyh0LmdldFRpbWUoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIGZyb20gdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlsbGlzZWNvbmRzIC0gTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogICAgIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzIHRoZSBnaXZlblxuICAgICAqICAgICBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbU1pbGxpcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBNYXRoLmZsb29yKHQgLyAxZTMpLCBuID0gTWF0aC5mbG9vcigxZTYgKiAodCAtIDFlMyAqIGUpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBpdChlLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBgVGltZXN0YW1wYCB0byBhIEphdmFTY3JpcHQgYERhdGVgIG9iamVjdC4gVGhpcyBjb252ZXJzaW9uXG4gICAgICogY2F1c2VzIGEgbG9zcyBvZiBwcmVjaXNpb24gc2luY2UgYERhdGVgIG9iamVjdHMgb25seSBzdXBwb3J0IG1pbGxpc2Vjb25kXG4gICAgICogcHJlY2lzaW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzXG4gICAgICogICAgIHRoaXMgYFRpbWVzdGFtcGAsIHdpdGggbWlsbGlzZWNvbmQgcHJlY2lzaW9uLlxuICAgICAqLyAgICB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnRvTWlsbGlzKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGBUaW1lc3RhbXBgIHRvIGEgbnVtZXJpYyB0aW1lc3RhbXAgKGluIG1pbGxpc2Vjb25kcyBzaW5jZVxuICAgICAqIGVwb2NoKS4gVGhpcyBvcGVyYXRpb24gY2F1c2VzIGEgbG9zcyBvZiBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcG9pbnQgaW4gdGltZSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgdGltZXN0YW1wLCByZXByZXNlbnRlZCBhc1xuICAgICAqICAgICB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqLyAgICB0b01pbGxpcygpIHtcbiAgICAgICAgcmV0dXJuIDFlMyAqIHRoaXMuc2Vjb25kcyArIHRoaXMubmFub3NlY29uZHMgLyAxZTY7XG4gICAgfVxuICAgIF9jb21wYXJlVG8odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRzID09PSB0LnNlY29uZHMgPyBldCh0aGlzLm5hbm9zZWNvbmRzLCB0Lm5hbm9zZWNvbmRzKSA6IGV0KHRoaXMuc2Vjb25kcywgdC5zZWNvbmRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYFRpbWVzdGFtcGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciAtIFRoZSBgVGltZXN0YW1wYCB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGBUaW1lc3RhbXBgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdC5zZWNvbmRzID09PSB0aGlzLnNlY29uZHMgJiYgdC5uYW5vc2Vjb25kcyA9PT0gdGhpcy5uYW5vc2Vjb25kcztcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgYFRpbWVzdGFtcGAuICovICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJUaW1lc3RhbXAoc2Vjb25kcz1cIiArIHRoaXMuc2Vjb25kcyArIFwiLCBuYW5vc2Vjb25kcz1cIiArIHRoaXMubmFub3NlY29uZHMgKyBcIilcIjtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGBUaW1lc3RhbXBgLiAqLyAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWNvbmRzOiB0aGlzLnNlY29uZHMsXG4gICAgICAgICAgICBuYW5vc2Vjb25kczogdGhpcy5uYW5vc2Vjb25kc1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIG9iamVjdCB0byBhIHByaW1pdGl2ZSBzdHJpbmcsIHdoaWNoIGFsbG93cyBgVGltZXN0YW1wYCBvYmplY3RzXG4gICAgICogdG8gYmUgY29tcGFyZWQgdXNpbmcgdGhlIGA+YCwgYDw9YCwgYD49YCBhbmQgYD5gIG9wZXJhdG9ycy5cbiAgICAgKi8gICAgdmFsdWVPZigpIHtcbiAgICAgICAgLy8gVGhpcyBtZXRob2QgcmV0dXJucyBhIHN0cmluZyBvZiB0aGUgZm9ybSA8c2Vjb25kcz4uPG5hbm9zZWNvbmRzPiB3aGVyZVxuICAgICAgICAvLyA8c2Vjb25kcz4gaXMgdHJhbnNsYXRlZCB0byBoYXZlIGEgbm9uLW5lZ2F0aXZlIHZhbHVlIGFuZCBib3RoIDxzZWNvbmRzPlxuICAgICAgICAvLyBhbmQgPG5hbm9zZWNvbmRzPiBhcmUgbGVmdC1wYWRkZWQgd2l0aCB6ZXJvZXMgdG8gYmUgYSBjb25zaXN0ZW50IGxlbmd0aC5cbiAgICAgICAgLy8gU3RyaW5ncyB3aXRoIHRoaXMgZm9ybWF0IHRoZW4gaGF2ZSBhIGxleGlvZ3JhcGhpY2FsIG9yZGVyaW5nIHRoYXQgbWF0Y2hlc1xuICAgICAgICAvLyB0aGUgZXhwZWN0ZWQgb3JkZXJpbmcuIFRoZSA8c2Vjb25kcz4gdHJhbnNsYXRpb24gaXMgZG9uZSB0byBhdm9pZCBoYXZpbmdcbiAgICAgICAgLy8gYSBsZWFkaW5nIG5lZ2F0aXZlIHNpZ24gKGkuZS4gYSBsZWFkaW5nICctJyBjaGFyYWN0ZXIpIGluIGl0cyBzdHJpbmdcbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24sIHdoaWNoIHdvdWxkIGFmZmVjdCBpdHMgbGV4aW9ncmFwaGljYWwgb3JkZXJpbmcuXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnNlY29uZHMgLSAtNjIxMzU1OTY4MDA7XG4gICAgICAgIC8vIE5vdGU6IFVwIHRvIDEyIGRlY2ltYWwgZGlnaXRzIGFyZSByZXF1aXJlZCB0byByZXByZXNlbnQgYWxsIHZhbGlkXG4gICAgICAgIC8vICdzZWNvbmRzJyB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0KS5wYWRTdGFydCgxMiwgXCIwXCIpICsgXCIuXCIgKyBTdHJpbmcodGhpcy5uYW5vc2Vjb25kcykucGFkU3RhcnQoOSwgXCIwXCIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSB2ZXJzaW9uIG9mIGEgZG9jdW1lbnQgaW4gRmlyZXN0b3JlLiBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSB2ZXJzaW9uXG4gKiB0aW1lc3RhbXAsIHN1Y2ggYXMgdXBkYXRlX3RpbWUgb3IgcmVhZF90aW1lLlxuICovIGNsYXNzIHJ0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21UaW1lc3RhbXAodCkge1xuICAgICAgICByZXR1cm4gbmV3IHJ0KHQpO1xuICAgIH1cbiAgICBzdGF0aWMgbWluKCkge1xuICAgICAgICByZXR1cm4gbmV3IHJ0KG5ldyBpdCgwLCAwKSk7XG4gICAgfVxuICAgIHN0YXRpYyBtYXgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgcnQobmV3IGl0KDI1MzQwMjMwMDc5OSwgOTk5OTk5OTk5KSk7XG4gICAgfVxuICAgIGNvbXBhcmVUbyh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcC5fY29tcGFyZVRvKHQudGltZXN0YW1wKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcC5pc0VxdWFsKHQudGltZXN0YW1wKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBudW1iZXIgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlcnNpb24gZm9yIHVzZSBpbiBzcGVjIHRlc3RzLiAqLyAgICB0b01pY3Jvc2Vjb25kcygpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBtaWNyb3NlY29uZHMuXG4gICAgICAgIHJldHVybiAxZTYgKiB0aGlzLnRpbWVzdGFtcC5zZWNvbmRzICsgdGhpcy50aW1lc3RhbXAubmFub3NlY29uZHMgLyAxZTM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJTbmFwc2hvdFZlcnNpb24oXCIgKyB0aGlzLnRpbWVzdGFtcC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgfVxuICAgIHRvVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXA7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBQYXRoIHJlcHJlc2VudHMgYW4gb3JkZXJlZCBzZXF1ZW5jZSBvZiBzdHJpbmcgc2VnbWVudHMuXG4gKi9cbmNsYXNzIG90IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSA/IGUgPSAwIDogZSA+IHQubGVuZ3RoICYmIE8oKSwgdm9pZCAwID09PSBuID8gbiA9IHQubGVuZ3RoIC0gZSA6IG4gPiB0Lmxlbmd0aCAtIGUgJiYgTygpLCBcbiAgICAgICAgdGhpcy5zZWdtZW50cyA9IHQsIHRoaXMub2Zmc2V0ID0gZSwgdGhpcy5sZW4gPSBuO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZW47XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gMCA9PT0gb3QuY29tcGFyYXRvcih0aGlzLCB0KTtcbiAgICB9XG4gICAgY2hpbGQodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5zZWdtZW50cy5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5saW1pdCgpKTtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBvdCA/IHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLnB1c2godCk7XG4gICAgICAgIH0pKSA6IGUucHVzaCh0KSwgdGhpcy5jb25zdHJ1Y3QoZSk7XG4gICAgfVxuICAgIC8qKiBUaGUgaW5kZXggb2Ygb25lIHBhc3QgdGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgcGF0aC4gKi8gICAgbGltaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArIHRoaXMubGVuZ3RoO1xuICAgIH1cbiAgICBwb3BGaXJzdCh0KSB7XG4gICAgICAgIHJldHVybiB0ID0gdm9pZCAwID09PSB0ID8gMSA6IHQsIHRoaXMuY29uc3RydWN0KHRoaXMuc2VnbWVudHMsIHRoaXMub2Zmc2V0ICsgdCwgdGhpcy5sZW5ndGggLSB0KTtcbiAgICB9XG4gICAgcG9wTGFzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0KHRoaXMuc2VnbWVudHMsIHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBmaXJzdFNlZ21lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzW3RoaXMub2Zmc2V0XTtcbiAgICB9XG4gICAgbGFzdFNlZ21lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c1t0aGlzLm9mZnNldCArIHRdO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gMCA9PT0gdGhpcy5sZW5ndGg7XG4gICAgfVxuICAgIGlzUHJlZml4T2YodCkge1xuICAgICAgICBpZiAodC5sZW5ndGggPCB0aGlzLmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHRoaXMubGVuZ3RoOyBlKyspIGlmICh0aGlzLmdldChlKSAhPT0gdC5nZXQoZSkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBpc0ltbWVkaWF0ZVBhcmVudE9mKHQpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICsgMSAhPT0gdC5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0aGlzLmxlbmd0aDsgZSsrKSBpZiAodGhpcy5nZXQoZSkgIT09IHQuZ2V0KGUpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZm9yRWFjaCh0KSB7XG4gICAgICAgIGZvciAobGV0IGUgPSB0aGlzLm9mZnNldCwgbiA9IHRoaXMubGltaXQoKTsgZSA8IG47IGUrKykgdCh0aGlzLnNlZ21lbnRzW2VdKTtcbiAgICB9XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHMuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMubGltaXQoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBjb21wYXJhdG9yKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IE1hdGgubWluKHQubGVuZ3RoLCBlLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgbjsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5nZXQocyksIGkgPSBlLmdldChzKTtcbiAgICAgICAgICAgIGlmIChuIDwgaSkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKG4gPiBpKSByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdC5sZW5ndGggPCBlLmxlbmd0aCA/IC0xIDogdC5sZW5ndGggPiBlLmxlbmd0aCA/IDEgOiAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIHNsYXNoLXNlcGFyYXRlZCBwYXRoIGZvciBuYXZpZ2F0aW5nIHJlc291cmNlcyAoZG9jdW1lbnRzIGFuZCBjb2xsZWN0aW9ucylcbiAqIHdpdGhpbiBGaXJlc3RvcmUuXG4gKlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgdXQgZXh0ZW5kcyBvdCB7XG4gICAgY29uc3RydWN0KHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB1dCh0LCBlLCBuKTtcbiAgICB9XG4gICAgY2Fub25pY2FsU3RyaW5nKCkge1xuICAgICAgICAvLyBOT1RFOiBUaGUgY2xpZW50IGlzIGlnbm9yYW50IG9mIGFueSBwYXRoIHNlZ21lbnRzIGNvbnRhaW5pbmcgZXNjYXBlXG4gICAgICAgIC8vIHNlcXVlbmNlcyAoZS5nLiBfX2lkMTIzX18pIGFuZCBqdXN0IHBhc3NlcyB0aGVtIHRocm91Z2ggcmF3ICh0aGV5IGV4aXN0XG4gICAgICAgIC8vIGZvciBsZWdhY3kgcmVhc29ucyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGZyZXF1ZW50bHkpLlxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkuam9pbihcIi9cIik7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlc291cmNlIHBhdGggZnJvbSB0aGUgZ2l2ZW4gc2xhc2gtZGVsaW1pdGVkIHN0cmluZy4gSWYgbXVsdGlwbGVcbiAgICAgKiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBhbGwgY29tcG9uZW50cyBhcmUgY29tYmluZWQuIExlYWRpbmcgYW5kIHRyYWlsaW5nXG4gICAgICogc2xhc2hlcyBmcm9tIGFsbCBjb21wb25lbnRzIGFyZSBpZ25vcmVkLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbVN0cmluZyguLi50KSB7XG4gICAgICAgIC8vIE5PVEU6IFRoZSBjbGllbnQgaXMgaWdub3JhbnQgb2YgYW55IHBhdGggc2VnbWVudHMgY29udGFpbmluZyBlc2NhcGVcbiAgICAgICAgLy8gc2VxdWVuY2VzIChlLmcuIF9faWQxMjNfXykgYW5kIGp1c3QgcGFzc2VzIHRoZW0gdGhyb3VnaCByYXcgKHRoZXkgZXhpc3RcbiAgICAgICAgLy8gZm9yIGxlZ2FjeSByZWFzb25zIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgZnJlcXVlbnRseSkuXG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIHtcbiAgICAgICAgICAgIGlmIChuLmluZGV4T2YoXCIvL1wiKSA+PSAwKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHNlZ21lbnQgKCR7bn0pLiBQYXRocyBtdXN0IG5vdCBjb250YWluIC8vIGluIHRoZW0uYCk7XG4gICAgICAgICAgICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFsaW5nIHNsYXNoZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goLi4ubi5zcGxpdChcIi9cIikuZmlsdGVyKCh0ID0+IHQubGVuZ3RoID4gMCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHV0KGUpO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHlQYXRoKCkge1xuICAgICAgICByZXR1cm4gbmV3IHV0KFtdKTtcbiAgICB9XG59XG5cbmNvbnN0IGN0ID0gL15bX2EtekEtWl1bX2EtekEtWjAtOV0qJC87XG5cbi8qKlxuICogQSBkb3Qtc2VwYXJhdGVkIHBhdGggZm9yIG5hdmlnYXRpbmcgc3ViLW9iamVjdHMgd2l0aGluIGEgZG9jdW1lbnQuXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBhdCBleHRlbmRzIG90IHtcbiAgICBjb25zdHJ1Y3QodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbmV3IGF0KHQsIGUsIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cmluZyBjb3VsZCBiZSB1c2VkIGFzIGEgc2VnbWVudCBpbiBhIGZpZWxkIHBhdGhcbiAgICAgKiB3aXRob3V0IGVzY2FwaW5nLlxuICAgICAqLyAgICBzdGF0aWMgaXNWYWxpZElkZW50aWZpZXIodCkge1xuICAgICAgICByZXR1cm4gY3QudGVzdCh0KTtcbiAgICB9XG4gICAgY2Fub25pY2FsU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkubWFwKCh0ID0+ICh0ID0gdC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIikucmVwbGFjZSgvYC9nLCBcIlxcXFxgXCIpLCBcbiAgICAgICAgYXQuaXNWYWxpZElkZW50aWZpZXIodCkgfHwgKHQgPSBcImBcIiArIHQgKyBcImBcIiksIHQpKSkuam9pbihcIi5cIik7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZmllbGQgcmVmZXJlbmNlcyB0aGUga2V5IG9mIGEgZG9jdW1lbnQuXG4gICAgICovICAgIGlzS2V5RmllbGQoKSB7XG4gICAgICAgIHJldHVybiAxID09PSB0aGlzLmxlbmd0aCAmJiBcIl9fbmFtZV9fXCIgPT09IHRoaXMuZ2V0KDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmllbGQgZGVzaWduYXRpbmcgdGhlIGtleSBvZiBhIGRvY3VtZW50LlxuICAgICAqLyAgICBzdGF0aWMga2V5RmllbGQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXQoWyBcIl9fbmFtZV9fXCIgXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGZpZWxkIHN0cmluZyBmcm9tIHRoZSBnaXZlbiBzZXJ2ZXItZm9ybWF0dGVkIHN0cmluZy5cbiAgICAgKlxuICAgICAqIC0gU3BsaXR0aW5nIHRoZSBlbXB0eSBzdHJpbmcgaXMgbm90IGFsbG93ZWQgKGZvciBub3cgYXQgbGVhc3QpLlxuICAgICAqIC0gRW1wdHkgc2VnbWVudHMgd2l0aGluIHRoZSBzdHJpbmcgKGUuZy4gaWYgdGhlcmUgYXJlIHR3byBjb25zZWN1dGl2ZVxuICAgICAqICAgc2VwYXJhdG9ycykgYXJlIG5vdCBhbGxvd2VkLlxuICAgICAqXG4gICAgICogVE9ETyhiLzM3MjQ0MTU3KTogd2Ugc2hvdWxkIG1ha2UgdGhpcyBtb3JlIHN0cmljdC4gUmlnaHQgbm93LCBpdCBhbGxvd3NcbiAgICAgKiBub24taWRlbnRpZmllciBwYXRoIGNvbXBvbmVudHMsIGV2ZW4gaWYgdGhleSBhcmVuJ3QgZXNjYXBlZC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21TZXJ2ZXJGb3JtYXQodCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGxldCBuID0gXCJcIiwgcyA9IDA7XG4gICAgICAgIGNvbnN0IGkgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gbi5sZW5ndGgpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgZmllbGQgcGF0aCAoJHt0fSkuIFBhdGhzIG11c3Qgbm90IGJlIGVtcHR5LCBiZWdpbiB3aXRoICcuJywgZW5kIHdpdGggJy4nLCBvciBjb250YWluICcuLidgKTtcbiAgICAgICAgICAgIGUucHVzaChuKSwgbiA9IFwiXCI7XG4gICAgICAgIH07XG4gICAgICAgIGxldCByID0gITE7XG4gICAgICAgIGZvciAoO3MgPCB0Lmxlbmd0aDsgKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdFtzXTtcbiAgICAgICAgICAgIGlmIChcIlxcXFxcIiA9PT0gZSkge1xuICAgICAgICAgICAgICAgIGlmIChzICsgMSA9PT0gdC5sZW5ndGgpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJQYXRoIGhhcyB0cmFpbGluZyBlc2NhcGUgY2hhcmFjdGVyOiBcIiArIHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0W3MgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoXCJcXFxcXCIgIT09IGUgJiYgXCIuXCIgIT09IGUgJiYgXCJgXCIgIT09IGUpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJQYXRoIGhhcyBpbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZTogXCIgKyB0KTtcbiAgICAgICAgICAgICAgICBuICs9IGUsIHMgKz0gMjtcbiAgICAgICAgICAgIH0gZWxzZSBcImBcIiA9PT0gZSA/IChyID0gIXIsIHMrKykgOiBcIi5cIiAhPT0gZSB8fCByID8gKG4gKz0gZSwgcysrKSA6IChpKCksIHMrKyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkoKSwgcikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIlVudGVybWluYXRlZCBgIGluIHBhdGg6IFwiICsgdCk7XG4gICAgICAgIHJldHVybiBuZXcgYXQoZSk7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eVBhdGgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXQoW10pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgaHQge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gdDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21QYXRoKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBodCh1dC5mcm9tU3RyaW5nKHQpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21OYW1lKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBodCh1dC5mcm9tU3RyaW5nKHQpLnBvcEZpcnN0KDUpKTtcbiAgICB9XG4gICAgc3RhdGljIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gbmV3IGh0KHV0LmVtcHR5UGF0aCgpKTtcbiAgICB9XG4gICAgZ2V0IGNvbGxlY3Rpb25Hcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5wb3BMYXN0KCkubGFzdFNlZ21lbnQoKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZG9jdW1lbnQgaXMgaW4gdGhlIHNwZWNpZmllZCBjb2xsZWN0aW9uSWQuICovICAgIGhhc0NvbGxlY3Rpb25JZCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoID49IDIgJiYgdGhpcy5wYXRoLmdldCh0aGlzLnBhdGgubGVuZ3RoIC0gMikgPT09IHQ7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIGdyb3VwIChpLmUuIHRoZSBuYW1lIG9mIHRoZSBwYXJlbnQgY29sbGVjdGlvbikgZm9yIHRoaXMga2V5LiAqLyAgICBnZXRDb2xsZWN0aW9uR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguZ2V0KHRoaXMucGF0aC5sZW5ndGggLSAyKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIGZ1bGx5IHF1YWxpZmllZCBwYXRoIHRvIHRoZSBwYXJlbnQgY29sbGVjdGlvbi4gKi8gICAgZ2V0Q29sbGVjdGlvblBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgucG9wTGFzdCgpO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgMCA9PT0gdXQuY29tcGFyYXRvcih0aGlzLnBhdGgsIHQucGF0aCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjb21wYXJhdG9yKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHV0LmNvbXBhcmF0b3IodC5wYXRoLCBlLnBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNEb2N1bWVudEtleSh0KSB7XG4gICAgICAgIHJldHVybiB0Lmxlbmd0aCAlIDIgPT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBkb2N1bWVudCBrZXkgd2l0aCB0aGUgZ2l2ZW4gc2VnbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VnbWVudHMgLSBUaGUgc2VnbWVudHMgb2YgdGhlIHBhdGggdG8gdGhlIGRvY3VtZW50XG4gICAgICogQHJldHVybnMgQSBuZXcgaW5zdGFuY2Ugb2YgRG9jdW1lbnRLZXlcbiAgICAgKi8gICAgc3RhdGljIGZyb21TZWdtZW50cyh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgaHQobmV3IHV0KHQuc2xpY2UoKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIGluaXRpYWwgbXV0YXRpb24gYmF0Y2ggaWQgZm9yIGVhY2ggaW5kZXguIEdldHMgdXBkYXRlZCBkdXJpbmcgaW5kZXhcbiAqIGJhY2tmaWxsLlxuICovXG4vKipcbiAqIEFuIGluZGV4IGRlZmluaXRpb24gZm9yIGZpZWxkIGluZGV4ZXMgaW4gRmlyZXN0b3JlLlxuICpcbiAqIEV2ZXJ5IGluZGV4IGlzIGFzc29jaWF0ZWQgd2l0aCBhIGNvbGxlY3Rpb24uIFRoZSBkZWZpbml0aW9uIGNvbnRhaW5zIGEgbGlzdFxuICogb2YgZmllbGRzIGFuZCB0aGVpciBpbmRleCBraW5kICh3aGljaCBjYW4gYmUgYEFTQ0VORElOR2AsIGBERVNDRU5ESU5HYCBvclxuICogYENPTlRBSU5TYCBmb3IgQXJyYXlDb250YWlucy9BcnJheUNvbnRhaW5zQW55IHF1ZXJpZXMpLlxuICpcbiAqIFVubGlrZSB0aGUgYmFja2VuZCwgdGhlIFNESyBkb2VzIG5vdCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gY29sbGVjdGlvbiBvclxuICogY29sbGVjdGlvbiBncm91cC1zY29wZWQgaW5kaWNlcy4gRXZlcnkgaW5kZXggY2FuIGJlIHVzZWQgZm9yIGJvdGggc2luZ2xlXG4gKiBjb2xsZWN0aW9uIGFuZCBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJpZXMuXG4gKi9cbmNsYXNzIGx0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggSUQuIFJldHVybnMgLTEgaWYgdGhlIGluZGV4IElEIGlzIG5vdCBhdmFpbGFibGUgKGUuZy4gdGhlIGluZGV4XG4gICAgICogaGFzIG5vdCB5ZXQgYmVlbiBwZXJzaXN0ZWQpLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgY29sbGVjdGlvbiBJRCB0aGlzIGluZGV4IGFwcGxpZXMgdG8uICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSBmaWVsZCBzZWdtZW50cyBmb3IgdGhpcyBpbmRleC4gKi9cbiAgICBuLCBcbiAgICAvKiogU2hvd3MgaG93IHVwLXRvLWRhdGUgdGhlIGluZGV4IGlzIGZvciB0aGUgY3VycmVudCB1c2VyLiAqL1xuICAgIHMpIHtcbiAgICAgICAgdGhpcy5pbmRleElkID0gdCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAgPSBlLCB0aGlzLmZpZWxkcyA9IG4sIHRoaXMuaW5kZXhTdGF0ZSA9IHM7XG4gICAgfVxufVxuXG4vKiogQW4gSUQgZm9yIGFuIGluZGV4IHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBhZGRlZCB0byBwZXJzaXN0ZW5jZS4gICovXG4vKiogUmV0dXJucyB0aGUgQXJyYXlDb250YWlucy9BcnJheUNvbnRhaW5zQW55IHNlZ21lbnQgZm9yIHRoaXMgaW5kZXguICovXG5mdW5jdGlvbiBmdCh0KSB7XG4gICAgcmV0dXJuIHQuZmllbGRzLmZpbmQoKHQgPT4gMiAvKiBJbmRleEtpbmQuQ09OVEFJTlMgKi8gPT09IHQua2luZCkpO1xufVxuXG4vKiogUmV0dXJucyBhbGwgZGlyZWN0aW9uYWwgKGFzY2VuZGluZy9kZXNjZW5kaW5nKSBzZWdtZW50cyBmb3IgdGhpcyBpbmRleC4gKi8gZnVuY3Rpb24gZHQodCkge1xuICAgIHJldHVybiB0LmZpZWxkcy5maWx0ZXIoKHQgPT4gMiAvKiBJbmRleEtpbmQuQ09OVEFJTlMgKi8gIT09IHQua2luZCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yZGVyIG9mIHRoZSBkb2N1bWVudCBrZXkgY29tcG9uZW50IGZvciB0aGUgZ2l2ZW4gaW5kZXguXG4gKlxuICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgV2ViIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuLyoqXG4gKiBDb21wYXJlcyBpbmRleGVzIGJ5IGNvbGxlY3Rpb24gZ3JvdXAgYW5kIHNlZ21lbnRzLiBJZ25vcmVzIHVwZGF0ZSB0aW1lIGFuZFxuICogaW5kZXggSUQuXG4gKi9cbmZ1bmN0aW9uIHd0KHQsIGUpIHtcbiAgICBsZXQgbiA9IGV0KHQuY29sbGVjdGlvbkdyb3VwLCBlLmNvbGxlY3Rpb25Hcm91cCk7XG4gICAgaWYgKDAgIT09IG4pIHJldHVybiBuO1xuICAgIGZvciAobGV0IHMgPSAwOyBzIDwgTWF0aC5taW4odC5maWVsZHMubGVuZ3RoLCBlLmZpZWxkcy5sZW5ndGgpOyArK3MpIGlmIChuID0gbXQodC5maWVsZHNbc10sIGUuZmllbGRzW3NdKSwgXG4gICAgMCAhPT0gbikgcmV0dXJuIG47XG4gICAgcmV0dXJuIGV0KHQuZmllbGRzLmxlbmd0aCwgZS5maWVsZHMubGVuZ3RoKTtcbn1cblxuLyoqIFJldHVybnMgYSBkZWJ1ZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZmllbGQgaW5kZXggKi8gbHQuVU5LTk9XTl9JRCA9IC0xO1xuXG4vKiogQW4gaW5kZXggY29tcG9uZW50IGNvbnNpc3Rpbmcgb2YgZmllbGQgcGF0aCBhbmQgaW5kZXggdHlwZS4gICovXG5jbGFzcyBfdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSBmaWVsZCBwYXRoIG9mIHRoZSBjb21wb25lbnQuICovXG4gICAgdCwgXG4gICAgLyoqIFRoZSBmaWVsZHMgc29ydGluZyBvcmRlci4gKi9cbiAgICBlKSB7XG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gdCwgdGhpcy5raW5kID0gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG10KHQsIGUpIHtcbiAgICBjb25zdCBuID0gYXQuY29tcGFyYXRvcih0LmZpZWxkUGF0aCwgZS5maWVsZFBhdGgpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IGV0KHQua2luZCwgZS5raW5kKTtcbn1cblxuLyoqXG4gKiBTdG9yZXMgdGhlIFwiaGlnaCB3YXRlciBtYXJrXCIgdGhhdCBpbmRpY2F0ZXMgaG93IHVwZGF0ZWQgdGhlIEluZGV4IGlzIGZvciB0aGVcbiAqIGN1cnJlbnQgdXNlci5cbiAqLyBjbGFzcyBndCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZW4gdGhlIGluZGV4IHdhcyBsYXN0IHVwZGF0ZWQgKHJlbGF0aXZlIHRvIG90aGVyIGluZGV4ZXMpLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgdGhlIGxhdGVzdCBpbmRleGVkIHJlYWQgdGltZSwgZG9jdW1lbnQgYW5kIGJhdGNoIGlkLiAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IHQsIHRoaXMub2Zmc2V0ID0gZTtcbiAgICB9XG4gICAgLyoqIFRoZSBzdGF0ZSBvZiBhbiBpbmRleCB0aGF0IGhhcyBub3QgeWV0IGJlZW4gYmFja2ZpbGxlZC4gKi8gICAgc3RhdGljIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gbmV3IGd0KDAsIEl0Lm1pbigpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvZmZzZXQgdGhhdCBtYXRjaGVzIGFsbCBkb2N1bWVudHMgd2l0aCBhIHJlYWQgdGltZSBoaWdoZXIgdGhhblxuICogYHJlYWRUaW1lYC5cbiAqLyBmdW5jdGlvbiB5dCh0LCBlKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjcmVhdGUgYW4gb2Zmc2V0IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzIHdpdGggYSByZWFkIHRpbWVcbiAgICAvLyBncmVhdGVyIHRoYW4gdGhlIHByb3ZpZGVkIHJlYWQgdGltZS4gVG8gZG8gc28sIHdlIHRlY2huaWNhbGx5IG5lZWQgdG9cbiAgICAvLyBjcmVhdGUgYW4gb2Zmc2V0IGZvciBgKHJlYWRUaW1lLCBNQVhfRE9DVU1FTlRfS0VZKWAuIFdoaWxlIHdlIGNvdWxkIHVzZVxuICAgIC8vIFVuaWNvZGUgY29kZXBvaW50cyB0byBnZW5lcmF0ZSBNQVhfRE9DVU1FTlRfS0VZLCBpdCBpcyBtdWNoIGVhc2llciB0byB1c2VcbiAgICAvLyBgKHJlYWRUaW1lICsgMSwgRG9jdW1lbnRLZXkuZW1wdHkoKSlgIHNpbmNlIGA+IERvY3VtZW50S2V5LmVtcHR5KClgIG1hdGNoZXNcbiAgICAvLyBhbGwgdmFsaWQgZG9jdW1lbnQgSURzLlxuICAgIGNvbnN0IG4gPSB0LnRvVGltZXN0YW1wKCkuc2Vjb25kcywgcyA9IHQudG9UaW1lc3RhbXAoKS5uYW5vc2Vjb25kcyArIDEsIGkgPSBydC5mcm9tVGltZXN0YW1wKDFlOSA9PT0gcyA/IG5ldyBpdChuICsgMSwgMCkgOiBuZXcgaXQobiwgcykpO1xuICAgIHJldHVybiBuZXcgSXQoaSwgaHQuZW1wdHkoKSwgZSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgbmV3IG9mZnNldCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZG9jdW1lbnQuICovIGZ1bmN0aW9uIHB0KHQpIHtcbiAgICByZXR1cm4gbmV3IEl0KHQucmVhZFRpbWUsIHQua2V5LCAtMSk7XG59XG5cbi8qKlxuICogU3RvcmVzIHRoZSBsYXRlc3QgcmVhZCB0aW1lLCBkb2N1bWVudCBhbmQgYmF0Y2ggSUQgdGhhdCB3ZXJlIHByb2Nlc3NlZCBmb3IgYW5cbiAqIGluZGV4LlxuICovIGNsYXNzIEl0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgbGF0ZXN0IHJlYWQgdGltZSB2ZXJzaW9uIHRoYXQgaGFzIGJlZW4gaW5kZXhlZCBieSBGaXJlc3RvcmUgZm9yIHRoaXNcbiAgICAgKiBmaWVsZCBpbmRleC5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUga2V5IG9mIHRoZSBsYXN0IGRvY3VtZW50IHRoYXQgd2FzIGluZGV4ZWQgZm9yIHRoaXMgcXVlcnkuIFVzZVxuICAgICAqIGBEb2N1bWVudEtleS5lbXB0eSgpYCBpZiBubyBkb2N1bWVudCBoYXMgYmVlbiBpbmRleGVkLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qXG4gICAgICogVGhlIGxhcmdlc3QgbXV0YXRpb24gYmF0Y2ggaWQgdGhhdCdzIGJlZW4gcHJvY2Vzc2VkIGJ5IEZpcmVzdG9yZS5cbiAgICAgKi9cbiAgICBuKSB7XG4gICAgICAgIHRoaXMucmVhZFRpbWUgPSB0LCB0aGlzLmRvY3VtZW50S2V5ID0gZSwgdGhpcy5sYXJnZXN0QmF0Y2hJZCA9IG47XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGFuIG9mZnNldCB0aGF0IHNvcnRzIGJlZm9yZSBhbGwgcmVndWxhciBvZmZzZXRzLiAqLyAgICBzdGF0aWMgbWluKCkge1xuICAgICAgICByZXR1cm4gbmV3IEl0KHJ0Lm1pbigpLCBodC5lbXB0eSgpLCAtMSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGFuIG9mZnNldCB0aGF0IHNvcnRzIGFmdGVyIGFsbCByZWd1bGFyIG9mZnNldHMuICovICAgIHN0YXRpYyBtYXgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXQocnQubWF4KCksIGh0LmVtcHR5KCksIC0xKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFR0KHQsIGUpIHtcbiAgICBsZXQgbiA9IHQucmVhZFRpbWUuY29tcGFyZVRvKGUucmVhZFRpbWUpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IChuID0gaHQuY29tcGFyYXRvcih0LmRvY3VtZW50S2V5LCBlLmRvY3VtZW50S2V5KSwgMCAhPT0gbiA/IG4gOiBldCh0Lmxhcmdlc3RCYXRjaElkLCBlLmxhcmdlc3RCYXRjaElkKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IEV0ID0gXCJUaGUgY3VycmVudCB0YWIgaXMgbm90IGluIHRoZSByZXF1aXJlZCBzdGF0ZSB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLiBJdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gcmVmcmVzaCB0aGUgYnJvd3NlciB0YWIuXCI7XG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIHJlcHJlc2VudGluZyBhIHBlcnNpc3RlbmNlIHRyYW5zYWN0aW9uLCBlbmNhcHN1bGF0aW5nIGJvdGggdGhlXG4gKiB0cmFuc2FjdGlvbidzIHNlcXVlbmNlIG51bWJlcnMgYXMgd2VsbCBhcyBhIGxpc3Qgb2Ygb25Db21taXR0ZWQgbGlzdGVuZXJzLlxuICpcbiAqIFdoZW4geW91IGNhbGwgUGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oKSwgaXQgd2lsbCBjcmVhdGUgYSB0cmFuc2FjdGlvbiBhbmRcbiAqIHBhc3MgaXQgdG8geW91ciBjYWxsYmFjay4gWW91IHRoZW4gcGFzcyBpdCB0byBhbnkgbWV0aG9kIHRoYXQgb3BlcmF0ZXNcbiAqIG9uIHBlcnNpc3RlbmNlLlxuICovIGNsYXNzIEF0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5vbkNvbW1pdHRlZExpc3RlbmVycyA9IFtdO1xuICAgIH1cbiAgICBhZGRPbkNvbW1pdHRlZExpc3RlbmVyKHQpIHtcbiAgICAgICAgdGhpcy5vbkNvbW1pdHRlZExpc3RlbmVycy5wdXNoKHQpO1xuICAgIH1cbiAgICByYWlzZU9uQ29tbWl0dGVkRXZlbnQoKSB7XG4gICAgICAgIHRoaXMub25Db21taXR0ZWRMaXN0ZW5lcnMuZm9yRWFjaCgodCA9PiB0KCkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFZlcmlmaWVzIHRoZSBlcnJvciB0aHJvd24gYnkgYSBMb2NhbFN0b3JlIG9wZXJhdGlvbi4gSWYgYSBMb2NhbFN0b3JlXG4gKiBvcGVyYXRpb24gZmFpbHMgYmVjYXVzZSB0aGUgcHJpbWFyeSBsZWFzZSBoYXMgYmVlbiB0YWtlbiBieSBhbm90aGVyIGNsaWVudCxcbiAqIHdlIGlnbm9yZSB0aGUgZXJyb3IgKHRoZSBwZXJzaXN0ZW5jZSBsYXllciB3aWxsIGltbWVkaWF0ZWx5IGNhbGxcbiAqIGBhcHBseVByaW1hcnlMZWFzZWAgdG8gcHJvcGFnYXRlIHRoZSBwcmltYXJ5IHN0YXRlIGNoYW5nZSkuIEFsbCBvdGhlciBlcnJvcnNcbiAqIGFyZSByZS10aHJvd24uXG4gKlxuICogQHBhcmFtIGVyciAtIEFuIGVycm9yIHJldHVybmVkIGJ5IGEgTG9jYWxTdG9yZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciB3ZSByZWNvdmVyZWQsIG9yIHRoZSBvcmlnaW5hbCBlcnJvci5cbiAqLyBhc3luYyBmdW5jdGlvbiB2dCh0KSB7XG4gICAgaWYgKHQuY29kZSAhPT0gcS5GQUlMRURfUFJFQ09ORElUSU9OIHx8IHQubWVzc2FnZSAhPT0gRXQpIHRocm93IHQ7XG4gICAgTihcIkxvY2FsU3RvcmVcIiwgXCJVbmV4cGVjdGVkbHkgbG9zdCBwcmltYXJ5IGxlYXNlXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBQZXJzaXN0ZW5jZVByb21pc2UgaXMgZXNzZW50aWFsbHkgYSByZS1pbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlIGV4Y2VwdFxuICogaXQgaGFzIGEgLm5leHQoKSBtZXRob2QgaW5zdGVhZCBvZiAudGhlbigpIGFuZCAubmV4dCgpIGFuZCAuY2F0Y2goKSBjYWxsYmFja3NcbiAqIGFyZSBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gYSBQZXJzaXN0ZW5jZVByb21pc2UgcmVzb2x2ZXMgcmF0aGVyIHRoYW5cbiAqIGFzeW5jaHJvbm91c2x5IChQcm9taXNlIGltcGxlbWVudGF0aW9ucyB1c2Ugc2V0SW1tZWRpYXRlKCkgb3Igc2ltaWxhcikuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gaW50ZXJvcGVyYXRlIHdpdGggSW5kZXhlZERCIHdoaWNoIHdpbGwgYXV0b21hdGljYWxseVxuICogY29tbWl0IHRyYW5zYWN0aW9ucyBpZiBjb250cm9sIGlzIHJldHVybmVkIHRvIHRoZSBldmVudCBsb29wIHdpdGhvdXRcbiAqIHN5bmNocm9ub3VzbHkgaW5pdGlhdGluZyBhbm90aGVyIG9wZXJhdGlvbiBvbiB0aGUgdHJhbnNhY3Rpb24uXG4gKlxuICogTk9URTogLnRoZW4oKSBhbmQgLmNhdGNoKCkgb25seSBhbGxvdyBhIHNpbmdsZSBjb25zdW1lciwgdW5saWtlIG5vcm1hbFxuICogUHJvbWlzZXMuXG4gKi8gY2xhc3MgUnQge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgLy8gTk9URTogbmV4dC9jYXRjaENhbGxiYWNrIHdpbGwgYWx3YXlzIHBvaW50IHRvIG91ciBvd24gd3JhcHBlciBmdW5jdGlvbnMsXG4gICAgICAgIC8vIG5vdCB0aGUgdXNlcidzIHJhdyBuZXh0KCkgb3IgY2F0Y2goKSBjYWxsYmFja3MuXG4gICAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbCwgdGhpcy5jYXRjaENhbGxiYWNrID0gbnVsbCwgXG4gICAgICAgIC8vIFdoZW4gdGhlIG9wZXJhdGlvbiByZXNvbHZlcywgd2UnbGwgc2V0IHJlc3VsdCBvciBlcnJvciBhbmQgbWFyayBpc0RvbmUuXG4gICAgICAgIHRoaXMucmVzdWx0ID0gdm9pZCAwLCB0aGlzLmVycm9yID0gdm9pZCAwLCB0aGlzLmlzRG9uZSA9ICExLCBcbiAgICAgICAgLy8gU2V0IHRvIHRydWUgd2hlbiAudGhlbigpIG9yIC5jYXRjaCgpIGFyZSBjYWxsZWQgYW5kIHByZXZlbnRzIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gY2hhaW5pbmcuXG4gICAgICAgIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCA9ICExLCB0KCh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEb25lID0gITAsIHRoaXMucmVzdWx0ID0gdCwgdGhpcy5uZXh0Q2FsbGJhY2sgJiYgXG4gICAgICAgICAgICAvLyB2YWx1ZSBzaG91bGQgYmUgZGVmaW5lZCB1bmxlc3MgVCBpcyBWb2lkLCBidXQgd2UgY2FuJ3QgZXhwcmVzc1xuICAgICAgICAgICAgLy8gdGhhdCBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gICAgICAgICAgICB0aGlzLm5leHRDYWxsYmFjayh0KTtcbiAgICAgICAgfSksICh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEb25lID0gITAsIHRoaXMuZXJyb3IgPSB0LCB0aGlzLmNhdGNoQ2FsbGJhY2sgJiYgdGhpcy5jYXRjaENhbGxiYWNrKHQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNhdGNoKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dCh2b2lkIDAsIHQpO1xuICAgIH1cbiAgICBuZXh0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCAmJiBPKCksIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCA9ICEwLCB0aGlzLmlzRG9uZSA/IHRoaXMuZXJyb3IgPyB0aGlzLndyYXBGYWlsdXJlKGUsIHRoaXMuZXJyb3IpIDogdGhpcy53cmFwU3VjY2Vzcyh0LCB0aGlzLnJlc3VsdCkgOiBuZXcgUnQoKChuLCBzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5leHRDYWxsYmFjayA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcFN1Y2Nlc3ModCwgZSkubmV4dChuLCBzKTtcbiAgICAgICAgICAgIH0sIHRoaXMuY2F0Y2hDYWxsYmFjayA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcEZhaWx1cmUoZSwgdCkubmV4dChuLCBzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdG9Qcm9taXNlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5leHQodCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgd3JhcFVzZXJGdW5jdGlvbih0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBSdCA/IGUgOiBSdC5yZXNvbHZlKGUpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gUnQucmVqZWN0KHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyYXBTdWNjZXNzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHQgPyB0aGlzLndyYXBVc2VyRnVuY3Rpb24oKCgpID0+IHQoZSkpKSA6IFJ0LnJlc29sdmUoZSk7XG4gICAgfVxuICAgIHdyYXBGYWlsdXJlKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHQgPyB0aGlzLndyYXBVc2VyRnVuY3Rpb24oKCgpID0+IHQoZSkpKSA6IFJ0LnJlamVjdChlKTtcbiAgICB9XG4gICAgc3RhdGljIHJlc29sdmUodCkge1xuICAgICAgICByZXR1cm4gbmV3IFJ0KCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgZSh0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzdGF0aWMgcmVqZWN0KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSdCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIG4odCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIHdhaXRGb3IoXG4gICAgLy8gQWNjZXB0IGFsbCBQcm9taXNlIHR5cGVzIGluIHdhaXRGb3IoKS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSdCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIGxldCBzID0gMCwgaSA9IDAsIHIgPSAhMTtcbiAgICAgICAgICAgIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgKytzLCB0Lm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKytpLCByICYmIGkgPT09IHMgJiYgZSgpO1xuICAgICAgICAgICAgICAgIH0pLCAodCA9PiBuKHQpKSk7XG4gICAgICAgICAgICB9KSksIHIgPSAhMCwgaSA9PT0gcyAmJiBlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgcHJlZGljYXRlIGZ1bmN0aW9ucyB0aGF0IGFzeW5jaHJvbm91c2x5IGV2YWx1YXRlIHRvIGFcbiAgICAgKiBib29sZWFuLCBpbXBsZW1lbnRzIGEgc2hvcnQtY2lyY3VpdGluZyBgb3JgIGJldHdlZW4gdGhlIHJlc3VsdHMuIFByZWRpY2F0ZXNcbiAgICAgKiB3aWxsIGJlIGV2YWx1YXRlZCB1bnRpbCBvbmUgb2YgdGhlbSByZXR1cm5zIGB0cnVlYCwgdGhlbiBzdG9wLiBUaGUgZmluYWxcbiAgICAgKiByZXN1bHQgd2lsbCBiZSB3aGV0aGVyIGFueSBvZiB0aGVtIHJldHVybmVkIGB0cnVlYC5cbiAgICAgKi8gICAgc3RhdGljIG9yKHQpIHtcbiAgICAgICAgbGV0IGUgPSBSdC5yZXNvbHZlKCExKTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIGUgPSBlLm5leHQoKHQgPT4gdCA/IFJ0LnJlc29sdmUodCkgOiBuKCkpKTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHN0YXRpYyBmb3JFYWNoKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKCgodCwgcykgPT4ge1xuICAgICAgICAgICAgbi5wdXNoKGUuY2FsbCh0aGlzLCB0LCBzKSk7XG4gICAgICAgIH0pKSwgdGhpcy53YWl0Rm9yKG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25jdXJyZW50bHkgbWFwIGFsbCBhcnJheSBlbGVtZW50cyB0aHJvdWdoIGFzeW5jaHJvbm91cyBmdW5jdGlvbi5cbiAgICAgKi8gICAgc3RhdGljIG1hcEFycmF5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSdCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0Lmxlbmd0aCwgciA9IG5ldyBBcnJheShpKTtcbiAgICAgICAgICAgIGxldCBvID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IHUgPSAwOyB1IDwgaTsgdSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHU7XG4gICAgICAgICAgICAgICAgZSh0W2NdKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcltjXSA9IHQsICsrbywgbyA9PT0gaSAmJiBuKHIpO1xuICAgICAgICAgICAgICAgIH0pLCAodCA9PiBzKHQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gcmVjdXJzaXZlIFBlcnNpc3RlbmNlUHJvbWlzZSBjYWxscywgdGhhdCBhdm9pZHNcbiAgICAgKiBwb3RlbnRpYWwgbWVtb3J5IHByb2JsZW1zIGZyb20gdW5ib3VuZGVkIGNoYWlucyBvZiBwcm9taXNlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgYWN0aW9uYCB3aWxsIGJlIGNhbGxlZCByZXBlYXRlZGx5IHdoaWxlIGBjb25kaXRpb25gIGlzIHRydWUuXG4gICAgICovICAgIHN0YXRpYyBkb1doaWxlKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSdCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgITAgPT09IHQoKSA/IGUoKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGkoKTtcbiAgICAgICAgICAgICAgICB9KSwgcykgOiBuKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaSgpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gUmVmZXJlbmNlcyB0byBgd2luZG93YCBhcmUgZ3VhcmRlZCBieSBTaW1wbGVEYi5pc0F2YWlsYWJsZSgpXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8qKlxuICogV3JhcHMgYW4gSURCVHJhbnNhY3Rpb24gYW5kIGV4cG9zZXMgYSBzdG9yZSgpIG1ldGhvZCB0byBnZXQgYSBoYW5kbGUgdG8gYVxuICogc3BlY2lmaWMgb2JqZWN0IHN0b3JlLlxuICovXG5jbGFzcyBQdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmFjdGlvbiA9IHQsIHRoaXMudHJhbnNhY3Rpb24gPSBlLCB0aGlzLmFib3J0ZWQgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgSW5kZXhlZERiIHRyYW5zYWN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ID0gbmV3IEssIHRoaXMudHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudi5yZXNvbHZlKCk7XG4gICAgICAgIH0sIHRoaXMudHJhbnNhY3Rpb24ub25hYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgIGUuZXJyb3IgPyB0aGlzLnYucmVqZWN0KG5ldyBTdCh0LCBlLmVycm9yKSkgOiB0aGlzLnYucmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aGlzLnRyYW5zYWN0aW9uLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBrdChlLnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB0aGlzLnYucmVqZWN0KG5ldyBTdCh0LCBuKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBvcGVuKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHQoZSwgdC50cmFuc2FjdGlvbihzLCBuKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTdChlLCB0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgUigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudi5wcm9taXNlO1xuICAgIH1cbiAgICBhYm9ydCh0KSB7XG4gICAgICAgIHQgJiYgdGhpcy52LnJlamVjdCh0KSwgdGhpcy5hYm9ydGVkIHx8IChOKFwiU2ltcGxlRGJcIiwgXCJBYm9ydGluZyB0cmFuc2FjdGlvbjpcIiwgdCA/IHQubWVzc2FnZSA6IFwiQ2xpZW50LWluaXRpYXRlZCBhYm9ydFwiKSwgXG4gICAgICAgIHRoaXMuYWJvcnRlZCA9ICEwLCB0aGlzLnRyYW5zYWN0aW9uLmFib3J0KCkpO1xuICAgIH1cbiAgICBQKCkge1xuICAgICAgICAvLyBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBWMyBJbmRleGVkREIsIHdlIGludm9rZSBjb21taXQoKSBleHBsaWNpdGx5IHRvXG4gICAgICAgIC8vIHNwZWVkIHVwIGluZGV4IERCIHByb2Nlc3NpbmcgaWYgdGhlIGV2ZW50IGxvb3AgcmVtYWlucyBibG9ja3MuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnRyYW5zYWN0aW9uO1xuICAgICAgICB0aGlzLmFib3J0ZWQgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0LmNvbW1pdCB8fCB0LmNvbW1pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgU2ltcGxlRGJTdG9yZTxLZXlUeXBlLCBWYWx1ZVR5cGU+IGZvciB0aGUgc3BlY2lmaWVkIHN0b3JlLiBBbGxcbiAgICAgKiBvcGVyYXRpb25zIHBlcmZvcm1lZCBvbiB0aGUgU2ltcGxlRGJTdG9yZSBoYXBwZW4gd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoaXNcbiAgICAgKiB0cmFuc2FjdGlvbiBhbmQgaXQgY2Fubm90IGJlIHVzZWQgYW55bW9yZSBvbmNlIHRoZSB0cmFuc2FjdGlvbiBpc1xuICAgICAqIGNvbXBsZXRlZC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB3ZSBjYW4ndCBhY3R1YWxseSBlbmZvcmNlIHRoYXQgdGhlIEtleVR5cGUgYW5kIFZhbHVlVHlwZSBhcmVcbiAgICAgKiBjb3JyZWN0LCBidXQgdGhleSBhbGxvdyB0eXBlIHNhZmV0eSB0aHJvdWdoIHRoZSByZXN0IG9mIHRoZSBjb25zdW1pbmcgY29kZS5cbiAgICAgKi8gICAgc3RvcmUodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy50cmFuc2FjdGlvbi5vYmplY3RTdG9yZSh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBDdChlKTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBJbmRleGVkRGIgd2l0aCBhIHNpbXBsaWZpZWQgaW50ZXJmYWNlIHRoYXQgdXNlc1xuICogUHJvbWlzZS1saWtlIHJldHVybiB2YWx1ZXMgdG8gY2hhaW4gb3BlcmF0aW9ucy4gUmVhbCBwcm9taXNlcyBjYW5ub3QgYmUgdXNlZFxuICogc2luY2UgLnRoZW4oKSBjb250aW51YXRpb25zIGFyZSBleGVjdXRlZCBhc3luY2hyb25vdXNseSAoZS5nLiB2aWFcbiAqIC5zZXRJbW1lZGlhdGUpLCB3aGljaCB3b3VsZCBjYXVzZSBJbmRleGVkREIgdG8gZW5kIHRoZSB0cmFuc2FjdGlvbi5cbiAqIFNlZSBQZXJzaXN0ZW5jZVByb21pc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqLyBjbGFzcyBidCB7XG4gICAgLypcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNpbXBsZURiIHdyYXBwZXIgZm9yIEluZGV4ZWREYiBkYXRhYmFzZSBgbmFtZWAuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgYHZlcnNpb25gIG11c3Qgbm90IGJlIGEgZG93bmdyYWRlLiBJbmRleGVkREIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAqIGRvd25ncmFkaW5nIHRoZSBzY2hlbWEgdmVyc2lvbi4gV2UgY3VycmVudGx5IGRvIG5vdCBzdXBwb3J0IGFueSB3YXkgdG8gZG9cbiAgICAgKiB2ZXJzaW9uaW5nIG91dHNpZGUgb2YgSW5kZXhlZERCJ3MgdmVyc2lvbmluZyBtZWNoYW5pc20sIGFzIG9ubHlcbiAgICAgKiB2ZXJzaW9uLXVwZ3JhZGUgdHJhbnNhY3Rpb25zIGFyZSBhbGxvd2VkIHRvIGRvIHRoaW5ncyBsaWtlIGNyZWF0ZVxuICAgICAqIG9iamVjdHN0b3Jlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IHQsIHRoaXMudmVyc2lvbiA9IGUsIHRoaXMuViA9IG47XG4gICAgICAgIC8vIE5PVEU6IEFjY29yZGluZyB0byBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTk3MDUwLCB0aGVcbiAgICAgICAgLy8gYnVnIHdlJ3JlIGNoZWNraW5nIGZvciBzaG91bGQgZXhpc3QgaW4gaU9TID49IDEyLjIgYW5kIDwgMTMsIGJ1dCBmb3JcbiAgICAgICAgLy8gd2hhdGV2ZXIgcmVhc29uIGl0J3MgbXVjaCBoYXJkZXIgdG8gaGl0IGFmdGVyIDEyLjIgc28gd2Ugb25seSBwcm9hY3RpdmVseVxuICAgICAgICAvLyBsb2cgb24gMTIuMi5cbiAgICAgICAgMTIuMiA9PT0gYnQuUyhnZXRVQSgpKSAmJiBrKFwiRmlyZXN0b3JlIHBlcnNpc3RlbmNlIHN1ZmZlcnMgZnJvbSBhIGJ1ZyBpbiBpT1MgMTIuMiBTYWZhcmkgdGhhdCBtYXkgY2F1c2UgeW91ciBhcHAgdG8gc3RvcCB3b3JraW5nLiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzU2NDk2Mjk2LzExMDkxNSBmb3IgZGV0YWlscyBhbmQgYSBwb3RlbnRpYWwgd29ya2Fyb3VuZC5cIik7XG4gICAgfVxuICAgIC8qKiBEZWxldGVzIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UuICovICAgIHN0YXRpYyBkZWxldGUodCkge1xuICAgICAgICByZXR1cm4gTihcIlNpbXBsZURiXCIsIFwiUmVtb3ZpbmcgZGF0YWJhc2U6XCIsIHQpLCB4dCh3aW5kb3cuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKHQpKS50b1Byb21pc2UoKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiBJbmRleGVkREIgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqLyAgICBzdGF0aWMgRCgpIHtcbiAgICAgICAgaWYgKCFpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSByZXR1cm4gITE7XG4gICAgICAgIGlmIChidC5DKCkpIHJldHVybiAhMDtcbiAgICAgICAgLy8gV2UgZXh0ZW5zaXZlbHkgdXNlIGluZGV4ZWQgYXJyYXkgdmFsdWVzIGFuZCBjb21wb3VuZCBrZXlzLFxuICAgICAgICAvLyB3aGljaCBJRSBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydC4gSG93ZXZlciwgdGhleSBzdGlsbCBoYXZlIGluZGV4ZWREQlxuICAgICAgICAvLyBkZWZpbmVkIG9uIHRoZSB3aW5kb3csIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yIHRoZW0gaGVyZSBhbmQgbWFrZSBzdXJlXG4gICAgICAgIC8vIHRvIHJldHVybiB0aGF0IHBlcnNpc3RlbmNlIGlzIG5vdCBlbmFibGVkIGZvciB0aG9zZSBicm93c2Vycy5cbiAgICAgICAgLy8gRm9yIHRyYWNraW5nIHN1cHBvcnQgb2YgdGhpcyBmZWF0dXJlLCBzZWUgaGVyZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9zdGF0dXMvaW5kZXhlZGRiYXJyYXlzYW5kbXVsdGllbnRyeXN1cHBvcnQvXG4gICAgICAgIC8vIENoZWNrIHRoZSBVQSBzdHJpbmcgdG8gZmluZCBvdXQgdGhlIGJyb3dzZXIuXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGdldFVBKCksIGUgPSBidC5TKHQpLCBuID0gMCA8IGUgJiYgZSA8IDEwLCBzID0gYnQuTih0KSwgaSA9IDAgPCBzICYmIHMgPCA0LjU7XG4gICAgICAgIC8vIElFIDEwXG4gICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDEwLjA7IFdpbmRvd3MgTlQgNi4yOyBUcmlkZW50LzYuMCknO1xuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjM7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztcbiAgICAgICAgLy8gRWRnZVxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCxcbiAgICAgICAgLy8gbGlrZSBHZWNrbykgQ2hyb21lLzM5LjAuMjE3MS43MSBTYWZhcmkvNTM3LjM2IEVkZ2UvMTIuMCc7XG4gICAgICAgIC8vIGlPUyBTYWZhcmk6IERpc2FibGUgZm9yIHVzZXJzIHJ1bm5pbmcgaU9TIHZlcnNpb24gPCAxMC5cbiAgICAgICAgICAgICAgICByZXR1cm4gISh0LmluZGV4T2YoXCJNU0lFIFwiKSA+IDAgfHwgdC5pbmRleE9mKFwiVHJpZGVudC9cIikgPiAwIHx8IHQuaW5kZXhPZihcIkVkZ2UvXCIpID4gMCB8fCBuIHx8IGkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGJhY2tpbmcgSW5kZXhlZERCIHN0b3JlIGlzIHRoZSBOb2RlIEluZGV4ZWREQlNoaW1cbiAgICAgKiAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9heGVtY2xpb24vSW5kZXhlZERCU2hpbSkuXG4gICAgICovICAgIHN0YXRpYyBDKCkge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHByb2Nlc3MgJiYgXCJZRVNcIiA9PT0gKG51bGwgPT09ICh0ID0gcHJvY2Vzcy5lbnYpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQuayk7XG4gICAgfVxuICAgIC8qKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmcm9tIGEgdHJhbnNhY3Rpb24uICovICAgIHN0YXRpYyBNKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHQuc3RvcmUoZSk7XG4gICAgfVxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAvKiogUGFyc2UgVXNlciBBZ2VudCB0byBkZXRlcm1pbmUgaU9TIHZlcnNpb24uIFJldHVybnMgLTEgaWYgbm90IGZvdW5kLiAqL1xuICAgIHN0YXRpYyBTKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQubWF0Y2goL2koPzpwaG9uZXxwYWR8cG9kKSBvcyAoW1xcZF9dKykvaSksIG4gPSBlID8gZVsxXS5zcGxpdChcIl9cIikuc2xpY2UoMCwgMikuam9pbihcIi5cIikgOiBcIi0xXCI7XG4gICAgICAgIHJldHVybiBOdW1iZXIobik7XG4gICAgfVxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAvKiogUGFyc2UgVXNlciBBZ2VudCB0byBkZXRlcm1pbmUgQW5kcm9pZCB2ZXJzaW9uLiBSZXR1cm5zIC0xIGlmIG5vdCBmb3VuZC4gKi9cbiAgICBzdGF0aWMgTih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0Lm1hdGNoKC9BbmRyb2lkIChbXFxkLl0rKS9pKSwgbiA9IGUgPyBlWzFdLnNwbGl0KFwiLlwiKS5zbGljZSgwLCAyKS5qb2luKFwiLlwiKSA6IFwiLTFcIjtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNwZWNpZmllZCBkYXRhYmFzZSwgY3JlYXRpbmcgb3IgdXBncmFkaW5nIGl0IGlmIG5lY2Vzc2FyeS5cbiAgICAgKi8gICAgYXN5bmMgJCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiIHx8IChOKFwiU2ltcGxlRGJcIiwgXCJPcGVuaW5nIGRhdGFiYXNlOlwiLCB0aGlzLm5hbWUpLCB0aGlzLmRiID0gYXdhaXQgbmV3IFByb21pc2UoKChlLCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IEludmVzdGlnYXRlIGJyb3dzZXIgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbmRleGVkREJfQVBJL1VzaW5nX0luZGV4ZWREQlxuICAgICAgICAgICAgLy8gc3VnZ2VzdHMgSUU5IGFuZCBvbGRlciBXZWJLaXQgYnJvd3NlcnMgaGFuZGxlIHVwZ3JhZGVcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudGx5LiBUaGV5IGV4cGVjdCBzZXRWZXJzaW9uLCBhcyBkZXNjcmliZWQgaGVyZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJWZXJzaW9uQ2hhbmdlUmVxdWVzdC9zZXRWZXJzaW9uXG4gICAgICAgICAgICBjb25zdCBzID0gaW5kZXhlZERCLm9wZW4odGhpcy5uYW1lLCB0aGlzLnZlcnNpb24pO1xuICAgICAgICAgICAgcy5vbnN1Y2Nlc3MgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGUobik7XG4gICAgICAgICAgICB9LCBzLm9uYmxvY2tlZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBuKG5ldyBTdCh0LCBcIkNhbm5vdCB1cGdyYWRlIEluZGV4ZWREQiBzY2hlbWEgd2hpbGUgYW5vdGhlciB0YWIgaXMgb3Blbi4gQ2xvc2UgYWxsIHRhYnMgdGhhdCBhY2Nlc3MgRmlyZXN0b3JlIGFuZCByZWxvYWQgdGhpcyBwYWdlIHRvIHByb2NlZWQuXCIpKTtcbiAgICAgICAgICAgIH0sIHMub25lcnJvciA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLnRhcmdldC5lcnJvcjtcbiAgICAgICAgICAgICAgICBcIlZlcnNpb25FcnJvclwiID09PSBzLm5hbWUgPyBuKG5ldyBVKHEuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJBIG5ld2VyIHZlcnNpb24gb2YgdGhlIEZpcmVzdG9yZSBTREsgd2FzIHByZXZpb3VzbHkgdXNlZCBhbmQgc28gdGhlIHBlcnNpc3RlZCBkYXRhIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIHZlcnNpb24gb2YgdGhlIFNESyB5b3UgYXJlIG5vdyB1c2luZy4gVGhlIFNESyB3aWxsIG9wZXJhdGUgd2l0aCBwZXJzaXN0ZW5jZSBkaXNhYmxlZC4gSWYgeW91IG5lZWQgcGVyc2lzdGVuY2UsIHBsZWFzZSByZS11cGdyYWRlIHRvIGEgbmV3ZXIgdmVyc2lvbiBvZiB0aGUgU0RLIG9yIGVsc2UgY2xlYXIgdGhlIHBlcnNpc3RlZCBJbmRleGVkREIgZGF0YSBmb3IgeW91ciBhcHAgdG8gc3RhcnQgZnJlc2guXCIpKSA6IFwiSW52YWxpZFN0YXRlRXJyb3JcIiA9PT0gcy5uYW1lID8gbihuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVW5hYmxlIHRvIG9wZW4gYW4gSW5kZXhlZERCIGNvbm5lY3Rpb24uIFRoaXMgY291bGQgYmUgZHVlIHRvIHJ1bm5pbmcgaW4gYSBwcml2YXRlIGJyb3dzaW5nIHNlc3Npb24gb24gYSBicm93c2VyIHdob3NlIHByaXZhdGUgYnJvd3Npbmcgc2Vzc2lvbnMgZG8gbm90IHN1cHBvcnQgSW5kZXhlZERCOiBcIiArIHMpKSA6IG4obmV3IFN0KHQsIHMpKTtcbiAgICAgICAgICAgIH0sIHMub251cGdyYWRlbmVlZGVkID0gdCA9PiB7XG4gICAgICAgICAgICAgICAgTihcIlNpbXBsZURiXCIsICdEYXRhYmFzZSBcIicgKyB0aGlzLm5hbWUgKyAnXCIgcmVxdWlyZXMgdXBncmFkZSBmcm9tIHZlcnNpb246JywgdC5vbGRWZXJzaW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIHRoaXMuVi5PKGUsIHMudHJhbnNhY3Rpb24sIHQub2xkVmVyc2lvbiwgdGhpcy52ZXJzaW9uKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIE4oXCJTaW1wbGVEYlwiLCBcIkRhdGFiYXNlIHVwZ3JhZGUgdG8gdmVyc2lvbiBcIiArIHRoaXMudmVyc2lvbiArIFwiIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKSksIHRoaXMuRiAmJiAodGhpcy5kYi5vbnZlcnNpb25jaGFuZ2UgPSB0ID0+IHRoaXMuRih0KSksIHRoaXMuZGI7XG4gICAgfVxuICAgIEIodCkge1xuICAgICAgICB0aGlzLkYgPSB0LCB0aGlzLmRiICYmICh0aGlzLmRiLm9udmVyc2lvbmNoYW5nZSA9IGUgPT4gdChlKSk7XG4gICAgfVxuICAgIGFzeW5jIHJ1blRyYW5zYWN0aW9uKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IFwicmVhZG9ubHlcIiA9PT0gZTtcbiAgICAgICAgbGV0IHIgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICArK3I7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGIgPSBhd2FpdCB0aGlzLiQodCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFB0Lm9wZW4odGhpcy5kYiwgdCwgaSA/IFwicmVhZG9ubHlcIiA6IFwicmVhZHdyaXRlXCIsIG4pLCByID0gcyhlKS5uZXh0KCh0ID0+IChlLlAoKSwgXG4gICAgICAgICAgICAgICAgdCkpKS5jYXRjaCgodCA9PiAoXG4gICAgICAgICAgICAgICAgLy8gQWJvcnQgdGhlIHRyYW5zYWN0aW9uIGlmIHRoZXJlIHdhcyBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICBlLmFib3J0KHQpLCBSdC5yZWplY3QodCkpKSkudG9Qcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gQXMgbm90ZWQgYWJvdmUsIGVycm9ycyBhcmUgcHJvcGFnYXRlZCBieSBhYm9ydGluZyB0aGUgdHJhbnNhY3Rpb24uIFNvXG4gICAgICAgICAgICAgICAgLy8gd2Ugc3dhbGxvdyBhbnkgZXJyb3IgaGVyZSB0byBhdm9pZCB0aGUgYnJvd3NlciBsb2dnaW5nIGl0IGFzIHVuaGFuZGxlZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gci5jYXRjaCgoKCkgPT4ge30pKSwgXG4gICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGNvbXBsZXRlIChpLmUuIEluZGV4ZWREYidzIG9uc3VjY2VzcyBldmVudCB0b1xuICAgICAgICAgICAgICAgIC8vIGZpcmUpLCBidXQgc3RpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbkZuUmVzdWx0IGJhY2sgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gY2FsbGVyLlxuICAgICAgICAgICAgICAgIGF3YWl0IGUuUiwgcjtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCwgbiA9IFwiRmlyZWJhc2VFcnJvclwiICE9PSBlLm5hbWUgJiYgciA8IDM7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhzY2htaWR0LXNlYmFzdGlhbik6IFdlIGNvdWxkIHByb2JhYmx5IGJlIHNtYXJ0ZXIgYWJvdXQgdGhpcyBhbmRcbiAgICAgICAgICAgICAgICAvLyBub3QgcmV0cnkgZXhjZXB0aW9ucyB0aGF0IGFyZSBsaWtlbHkgdW5yZWNvdmVyYWJsZSAoc3VjaCBhcyBxdW90YVxuICAgICAgICAgICAgICAgIC8vIGV4Y2VlZGVkIGVycm9ycykuXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2UgY2Fubm90IHVzZSBhbiBpbnN0YW5jZW9mIGNoZWNrIGZvciBGaXJlc3RvcmVFeGNlcHRpb24sIHNpbmNlIHRoZVxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBpcyB3cmFwcGVkIGluIGEgZ2VuZXJpYyBlcnJvciBieSBvdXIgYXN5bmMvYXdhaXQgaGFuZGxpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOKFwiU2ltcGxlRGJcIiwgXCJUcmFuc2FjdGlvbiBmYWlsZWQgd2l0aCBlcnJvcjpcIiwgZS5tZXNzYWdlLCBcIlJldHJ5aW5nOlwiLCBuKSwgXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpLCAhbikgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRiICYmIHRoaXMuZGIuY2xvc2UoKSwgdGhpcy5kYiA9IHZvaWQgMDtcbiAgICB9XG59XG5cbi8qKlxuICogQSBjb250cm9sbGVyIGZvciBpdGVyYXRpbmcgb3ZlciBhIGtleSByYW5nZSBvciBpbmRleC4gSXQgYWxsb3dzIGFuIGl0ZXJhdGVcbiAqIGNhbGxiYWNrIHRvIGRlbGV0ZSB0aGUgY3VycmVudGx5LXJlZmVyZW5jZWQgb2JqZWN0LCBvciBqdW1wIHRvIGEgbmV3IGtleVxuICogd2l0aGluIHRoZSBrZXkgcmFuZ2Ugb3IgaW5kZXguXG4gKi8gY2xhc3MgVnQge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5MID0gdCwgdGhpcy5xID0gITEsIHRoaXMuVSA9IG51bGw7XG4gICAgfVxuICAgIGdldCBpc0RvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnE7XG4gICAgfVxuICAgIGdldCBLKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5VO1xuICAgIH1cbiAgICBzZXQgY3Vyc29yKHQpIHtcbiAgICAgICAgdGhpcy5MID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIHRvIHN0b3AgaXRlcmF0aW9uIGF0IGFueSBwb2ludC5cbiAgICAgKi8gICAgZG9uZSgpIHtcbiAgICAgICAgdGhpcy5xID0gITA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBza2lwIHRvIHRoYXQgbmV4dCBrZXksIHdoaWNoIGNvdWxkIGJlXG4gICAgICogYW4gaW5kZXggb3IgYSBwcmltYXJ5IGtleS5cbiAgICAgKi8gICAgRyh0KSB7XG4gICAgICAgIHRoaXMuVSA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgY3VycmVudCBjdXJzb3IgdmFsdWUgZnJvbSB0aGUgb2JqZWN0IHN0b3JlLlxuICAgICAqXG4gICAgICogTk9URTogWW91IENBTk5PVCBkbyB0aGlzIHdpdGggYSBrZXlzT25seSBxdWVyeS5cbiAgICAgKi8gICAgZGVsZXRlKCkge1xuICAgICAgICByZXR1cm4geHQodGhpcy5MLmRlbGV0ZSgpKTtcbiAgICB9XG59XG5cbi8qKiBBbiBlcnJvciB0aGF0IHdyYXBzIGV4Y2VwdGlvbnMgdGhhdCB0aHJvd24gZHVyaW5nIEluZGV4ZWREQiBleGVjdXRpb24uICovIGNsYXNzIFN0IGV4dGVuZHMgVSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcihxLlVOQVZBSUxBQkxFLCBgSW5kZXhlZERCIHRyYW5zYWN0aW9uICcke3R9JyBmYWlsZWQ6ICR7ZX1gKSwgdGhpcy5uYW1lID0gXCJJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yXCI7XG4gICAgfVxufVxuXG4vKiogVmVyaWZpZXMgd2hldGhlciBgZWAgaXMgYW4gSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvci4gKi8gZnVuY3Rpb24gRHQodCkge1xuICAgIC8vIFVzZSBuYW1lIGVxdWFsaXR5LCBhcyBpbnN0YW5jZW9mIGNoZWNrcyBvbiBlcnJvcnMgZG9uJ3Qgd29yayB3aXRoIGVycm9yc1xuICAgIC8vIHRoYXQgd3JhcCBvdGhlciBlcnJvcnMuXG4gICAgcmV0dXJuIFwiSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvclwiID09PSB0Lm5hbWU7XG59XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCBhbiBJREJPYmplY3RTdG9yZSBwcm92aWRpbmcgYW4gQVBJIHRoYXQ6XG4gKlxuICogMSkgSGFzIGdlbmVyaWMgS2V5VHlwZSAvIFZhbHVlVHlwZSBwYXJhbWV0ZXJzIHRvIHByb3ZpZGUgc3Ryb25nbHktdHlwZWRcbiAqIG1ldGhvZHMgZm9yIGFjdGluZyBhZ2FpbnN0IHRoZSBvYmplY3Qgc3RvcmUuXG4gKiAyKSBEZWFscyB3aXRoIEluZGV4ZWREQidzIG9uc3VjY2VzcyAvIG9uZXJyb3IgZXZlbnQgY2FsbGJhY2tzLCBtYWtpbmcgZXZlcnlcbiAqIG1ldGhvZCByZXR1cm4gYSBQZXJzaXN0ZW5jZVByb21pc2UgaW5zdGVhZC5cbiAqIDMpIFByb3ZpZGVzIGEgaGlnaGVyLWxldmVsIEFQSSB0byBhdm9pZCBuZWVkaW5nIHRvIGRvIGV4Y2Vzc2l2ZSB3cmFwcGluZyBvZlxuICogaW50ZXJtZWRpYXRlIEluZGV4ZWREQiB0eXBlcyAoSURCQ3Vyc29yV2l0aFZhbHVlLCBldGMuKVxuICovIGNsYXNzIEN0IHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSB0O1xuICAgIH1cbiAgICBwdXQodCwgZSkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZSA/IChOKFwiU2ltcGxlRGJcIiwgXCJQVVRcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCBlKSwgbiA9IHRoaXMuc3RvcmUucHV0KGUsIHQpKSA6IChOKFwiU2ltcGxlRGJcIiwgXCJQVVRcIiwgdGhpcy5zdG9yZS5uYW1lLCBcIjxhdXRvLWtleT5cIiwgdCksIFxuICAgICAgICBuID0gdGhpcy5zdG9yZS5wdXQodCkpLCB4dChuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyB2YWx1ZSBpbnRvIGFuIE9iamVjdCBTdG9yZSBhbmQgcmV0dXJucyB0aGUgbmV3IGtleS4gU2ltaWxhciB0b1xuICAgICAqIEluZGV4ZWREYidzIGBhZGQoKWAsIHRoaXMgbWV0aG9kIHdpbGwgZmFpbCBvbiBwcmltYXJ5IGtleSBjb2xsaXNpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIG9iamVjdCB0byB3cml0ZS5cbiAgICAgKiBAcmV0dXJucyBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBhZGQuXG4gICAgICovICAgIGFkZCh0KSB7XG4gICAgICAgIE4oXCJTaW1wbGVEYlwiLCBcIkFERFwiLCB0aGlzLnN0b3JlLm5hbWUsIHQsIHQpO1xuICAgICAgICByZXR1cm4geHQodGhpcy5zdG9yZS5hZGQodCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSBmcm9tIHRoZSBzcGVjaWZpZWQgc3RvcmUsIG9yIG51bGxcbiAgICAgKiBpZiBubyBvYmplY3QgZXhpc3RzIHdpdGggdGhlIHNwZWNpZmllZCBrZXkuXG4gICAgICpcbiAgICAgKiBAa2V5IFRoZSBrZXkgb2YgdGhlIG9iamVjdCB0byBnZXQuXG4gICAgICogQHJldHVybnMgVGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IG9yIG51bGwgaWYgbm8gb2JqZWN0IGV4aXN0cy5cbiAgICAgKi8gICAgZ2V0KHQpIHtcbiAgICAgICAgLy8gV2UncmUgZG9pbmcgYW4gdW5zYWZlIGNhc3QgdG8gVmFsdWVUeXBlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4geHQodGhpcy5zdG9yZS5nZXQodCkpLm5leHQoKGUgPT4gKFxuICAgICAgICAvLyBOb3JtYWxpemUgbm9uZXhpc3RlbmNlIHRvIG51bGwuXG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG51bGwpLCBOKFwiU2ltcGxlRGJcIiwgXCJHRVRcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCBlKSwgZSkpKTtcbiAgICB9XG4gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgTihcIlNpbXBsZURiXCIsIFwiREVMRVRFXCIsIHRoaXMuc3RvcmUubmFtZSwgdCk7XG4gICAgICAgIHJldHVybiB4dCh0aGlzLnN0b3JlLmRlbGV0ZSh0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGV2ZXIgbmVlZCBtb3JlIG9mIHRoZSBjb3VudCB2YXJpYW50cywgd2UgY2FuIGFkZCBvdmVybG9hZHMuIEZvciBub3csXG4gICAgICogYWxsIHdlIG5lZWQgaXMgdG8gY291bnQgZXZlcnl0aGluZyBpbiBhIHN0b3JlLlxuICAgICAqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHN0b3JlLlxuICAgICAqLyAgICBjb3VudCgpIHtcbiAgICAgICAgTihcIlNpbXBsZURiXCIsIFwiQ09VTlRcIiwgdGhpcy5zdG9yZS5uYW1lKTtcbiAgICAgICAgcmV0dXJuIHh0KHRoaXMuc3RvcmUuY291bnQoKSk7XG4gICAgfVxuICAgIGoodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5vcHRpb25zKHQsIGUpO1xuICAgICAgICAvLyBVc2UgYGdldEFsbCgpYCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBJbmRleGVkREIgdjMsIGFzIGl0IGlzIHJvdWdobHlcbiAgICAgICAgLy8gMjAlIGZhc3Rlci4gVW5mb3J0dW5hdGVseSwgZ2V0QWxsKCkgZG9lcyBub3Qgc3VwcG9ydCBjdXN0b20gaW5kaWNlcy5cbiAgICAgICAgICAgICAgICBpZiAobi5pbmRleCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHRoaXMuc3RvcmUuZ2V0QWxsKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5jdXJzb3IobiksIGUgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlcodCwgKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wdXNoKG4pO1xuICAgICAgICAgICAgfSkpLm5leHQoKCgpID0+IGUpKTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zdG9yZS5nZXRBbGwobi5yYW5nZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ0KCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgICAgIHQub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBuKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgICAgICB9LCB0Lm9uc3VjY2VzcyA9IHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlKHQudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZmlyc3QgYGNvdW50YCBlbGVtZW50cyBmcm9tIHRoZSBwcm92aWRlZCBpbmRleCByYW5nZS4gTG9hZHMgYWxsXG4gICAgICogZWxlbWVudHMgaWYgbm8gbGltaXQgaXMgcHJvdmlkZWQuXG4gICAgICovICAgIEgodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5zdG9yZS5nZXRBbGwodCwgbnVsbCA9PT0gZSA/IHZvaWQgMCA6IGUpO1xuICAgICAgICByZXR1cm4gbmV3IFJ0KCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgbi5vbmVycm9yID0gdCA9PiB7XG4gICAgICAgICAgICAgICAgZSh0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB9LCBuLm9uc3VjY2VzcyA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIHQoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgSih0LCBlKSB7XG4gICAgICAgIE4oXCJTaW1wbGVEYlwiLCBcIkRFTEVURSBBTExcIiwgdGhpcy5zdG9yZS5uYW1lKTtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMub3B0aW9ucyh0LCBlKTtcbiAgICAgICAgbi5ZID0gITE7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLmN1cnNvcihuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVyhzLCAoKHQsIGUsIG4pID0+IG4uZGVsZXRlKCkpKTtcbiAgICB9XG4gICAgWCh0LCBlKSB7XG4gICAgICAgIGxldCBuO1xuICAgICAgICBlID8gbiA9IHQgOiAobiA9IHt9LCBlID0gdCk7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLmN1cnNvcihuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVyhzLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhIHN0b3JlLCBidXQgd2FpdHMgZm9yIHRoZSBnaXZlbiBjYWxsYmFjayB0byBjb21wbGV0ZSBmb3JcbiAgICAgKiBlYWNoIGVudHJ5IGJlZm9yZSBpdGVyYXRpbmcgdGhlIG5leHQgZW50cnkuIFRoaXMgYWxsb3dzIHRoZSBjYWxsYmFjayB0byBkb1xuICAgICAqIGFzeW5jaHJvbm91cyB3b3JrIHRvIGRldGVybWluZSBpZiB0aGlzIGl0ZXJhdGlvbiBzaG91bGQgY29udGludWUuXG4gICAgICpcbiAgICAgKiBUaGUgcHJvdmlkZWQgY2FsbGJhY2sgc2hvdWxkIHJldHVybiBgdHJ1ZWAgdG8gY29udGludWUgaXRlcmF0aW9uLCBhbmRcbiAgICAgKiBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi8gICAgWih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmN1cnNvcih7fSk7XG4gICAgICAgIHJldHVybiBuZXcgUnQoKChuLCBzKSA9PiB7XG4gICAgICAgICAgICBlLm9uZXJyb3IgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0ga3QodC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHMoZSk7XG4gICAgICAgICAgICB9LCBlLm9uc3VjY2VzcyA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgcyA/IHQocy5wcmltYXJ5S2V5LCBzLnZhbHVlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdCA/IHMuY29udGludWUoKSA6IG4oKTtcbiAgICAgICAgICAgICAgICB9KSkgOiBuKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFcodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gW107XG4gICAgICAgIHJldHVybiBuZXcgUnQoKChzLCBpKSA9PiB7XG4gICAgICAgICAgICB0Lm9uZXJyb3IgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICBpKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIH0sIHQub25zdWNjZXNzID0gdCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHJldHVybiB2b2lkIHMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFZ0KGkpLCBvID0gZShpLnByaW1hcnlLZXksIGkudmFsdWUsIHIpO1xuICAgICAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgUnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG8uY2F0Y2goKHQgPT4gKHIuZG9uZSgpLCBSdC5yZWplY3QodCkpKSk7XG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgci5pc0RvbmUgPyBzKCkgOiBudWxsID09PSByLksgPyBpLmNvbnRpbnVlKCkgOiBpLmNvbnRpbnVlKHIuSyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gUnQud2FpdEZvcihuKSkpO1xuICAgIH1cbiAgICBvcHRpb25zKHQsIGUpIHtcbiAgICAgICAgbGV0IG47XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBuID0gdCA6IGUgPSB0KSwge1xuICAgICAgICAgICAgaW5kZXg6IG4sXG4gICAgICAgICAgICByYW5nZTogZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjdXJzb3IodCkge1xuICAgICAgICBsZXQgZSA9IFwibmV4dFwiO1xuICAgICAgICBpZiAodC5yZXZlcnNlICYmIChlID0gXCJwcmV2XCIpLCB0LmluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5zdG9yZS5pbmRleCh0LmluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiB0LlkgPyBuLm9wZW5LZXlDdXJzb3IodC5yYW5nZSwgZSkgOiBuLm9wZW5DdXJzb3IodC5yYW5nZSwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUub3BlbkN1cnNvcih0LnJhbmdlLCBlKTtcbiAgICB9XG59XG5cbi8qKlxuICogV3JhcHMgYW4gSURCUmVxdWVzdCBpbiBhIFBlcnNpc3RlbmNlUHJvbWlzZSwgdXNpbmcgdGhlIG9uc3VjY2VzcyAvIG9uZXJyb3JcbiAqIGhhbmRsZXJzIHRvIHJlc29sdmUgLyByZWplY3QgdGhlIFBlcnNpc3RlbmNlUHJvbWlzZSBhcyBhcHByb3ByaWF0ZS5cbiAqLyBmdW5jdGlvbiB4dCh0KSB7XG4gICAgcmV0dXJuIG5ldyBSdCgoKGUsIG4pID0+IHtcbiAgICAgICAgdC5vbnN1Y2Nlc3MgPSB0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICBlKG4pO1xuICAgICAgICB9LCB0Lm9uZXJyb3IgPSB0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBrdCh0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICBuKGUpO1xuICAgICAgICB9O1xuICAgIH0pKTtcbn1cblxuLy8gR3VhcmQgc28gd2Ugb25seSByZXBvcnQgdGhlIGVycm9yIG9uY2UuXG5sZXQgTnQgPSAhMTtcblxuZnVuY3Rpb24ga3QodCkge1xuICAgIGNvbnN0IGUgPSBidC5TKGdldFVBKCkpO1xuICAgIGlmIChlID49IDEyLjIgJiYgZSA8IDEzKSB7XG4gICAgICAgIGNvbnN0IGUgPSBcIkFuIGludGVybmFsIGVycm9yIHdhcyBlbmNvdW50ZXJlZCBpbiB0aGUgSW5kZXhlZCBEYXRhYmFzZSBzZXJ2ZXJcIjtcbiAgICAgICAgaWYgKHQubWVzc2FnZS5pbmRleE9mKGUpID49IDApIHtcbiAgICAgICAgICAgIC8vIFdyYXAgZXJyb3IgaW4gYSBtb3JlIGRlc2NyaXB0aXZlIG9uZS5cbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgVShcImludGVybmFsXCIsIGBJT1NfSU5ERVhFRERCX0JVRzE6IEluZGV4ZWREYiBoYXMgdGhyb3duICcke2V9Jy4gVGhpcyBpcyBsaWtlbHkgZHVlIHRvIGFuIHVuYXZvaWRhYmxlIGJ1ZyBpbiBpT1MuIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNTY0OTYyOTYvMTEwOTE1IGZvciBkZXRhaWxzIGFuZCBhIHBvdGVudGlhbCB3b3JrYXJvdW5kLmApO1xuICAgICAgICAgICAgcmV0dXJuIE50IHx8IChOdCA9ICEwLCBcbiAgICAgICAgICAgIC8vIFRocm93IGEgZ2xvYmFsIGV4Y2VwdGlvbiBvdXRzaWRlIG9mIHRoaXMgcHJvbWlzZSBjaGFpbiwgZm9yIHRoZSB1c2VyIHRvXG4gICAgICAgICAgICAvLyBwb3RlbnRpYWxseSBjYXRjaC5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyB0O1xuICAgICAgICAgICAgfSksIDApKSwgdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdDtcbn1cblxuLyoqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBzY2hlZHVsaW5nIG9mIEluZGV4IEJhY2tmaWxsZXIuICovXG5jbGFzcyBNdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSB0LCB0aGlzLnR0ID0gZSwgdGhpcy50YXNrID0gbnVsbDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuZXQoMTVlMyk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMudGFzayAmJiAodGhpcy50YXNrLmNhbmNlbCgpLCB0aGlzLnRhc2sgPSBudWxsKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLnRhc2s7XG4gICAgfVxuICAgIGV0KHQpIHtcbiAgICAgICAgTihcIkluZGV4QmFja2lsbGVyXCIsIGBTY2hlZHVsZWQgaW4gJHt0fW1zYCksIHRoaXMudGFzayA9IHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheShcImluZGV4X2JhY2tmaWxsXCIgLyogVGltZXJJZC5JbmRleEJhY2tmaWxsICovICwgdCwgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIE4oXCJJbmRleEJhY2tpbGxlclwiLCBgRG9jdW1lbnRzIHdyaXR0ZW46ICR7YXdhaXQgdGhpcy50dC5udCgpfWApO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIER0KHQpID8gTihcIkluZGV4QmFja2lsbGVyXCIsIFwiSWdub3JpbmcgSW5kZXhlZERCIGVycm9yIGR1cmluZyBpbmRleCBiYWNrZmlsbDogXCIsIHQpIDogYXdhaXQgdnQodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV0KDZlNCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKiBJbXBsZW1lbnRzIHRoZSBzdGVwcyBmb3IgYmFja2ZpbGxpbmcgaW5kZXhlcy4gKi8gY2xhc3MgJHQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIExvY2FsU3RvcmUgcHJvdmlkZXMgYWNjZXNzIHRvIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFZpZXcuXG4gICAgICogVGhlc2UgcHJvcGVydGllcyB3aWxsIHVwZGF0ZSB3aGVuIHRoZSB1c2VyIGNoYW5nZXMuIENvbnNlcXVlbnRseSxcbiAgICAgKiBtYWtpbmcgYSBsb2NhbCBjb3B5IG9mIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFZpZXcgd2lsbCByZXF1aXJlXG4gICAgICogdXBkYXRlcyBvdmVyIHRpbWUuIFRoZSBzaW1wbGVyIHNvbHV0aW9uIGlzIHRvIHJlbHkgb24gTG9jYWxTdG9yZSB0byBoYXZlXG4gICAgICogYW4gdXAtdG8tZGF0ZSByZWZlcmVuY2VzIHRvIEluZGV4TWFuYWdlciBhbmQgTG9jYWxEb2N1bWVudFN0b3JlLlxuICAgICAqL1xuICAgIHQsIGUpIHtcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlID0gdCwgdGhpcy5wZXJzaXN0ZW5jZSA9IGU7XG4gICAgfVxuICAgIGFzeW5jIG50KHQgPSA1MCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkJhY2tmaWxsIEluZGV4ZXNcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB0aGlzLnN0KGUsIHQpKSk7XG4gICAgfVxuICAgIC8qKiBXcml0ZXMgaW5kZXggZW50cmllcyB1bnRpbCB0aGUgY2FwIGlzIHJlYWNoZWQuIFJldHVybnMgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgcHJvY2Vzc2VkLiAqLyAgICBzdCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgU2V0O1xuICAgICAgICBsZXQgcyA9IGUsIGkgPSAhMDtcbiAgICAgICAgcmV0dXJuIFJ0LmRvV2hpbGUoKCgpID0+ICEwID09PSBpICYmIHMgPiAwKSwgKCgpID0+IHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIuZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlKHQpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGUgJiYgIW4uaGFzKGUpKSByZXR1cm4gTihcIkluZGV4QmFja2lsbGVyXCIsIGBQcm9jZXNzaW5nIGNvbGxlY3Rpb246ICR7ZX1gKSwgXG4gICAgICAgICAgICB0aGlzLml0KHQsIGUsIHMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHMgLT0gdCwgbi5hZGQoZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpID0gITE7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IGUgLSBzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBlbnRyaWVzIGZvciB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbiBncm91cC4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyBwcm9jZXNzZWQuXG4gICAgICovICAgIGl0KHQsIGUsIG4pIHtcbiAgICAgICAgLy8gVXNlIHRoZSBlYXJsaWVzdCBvZmZzZXQgb2YgYWxsIGZpZWxkIGluZGV4ZXMgdG8gcXVlcnkgdGhlIGxvY2FsIGNhY2hlLlxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlLmluZGV4TWFuYWdlci5nZXRNaW5PZmZzZXRGcm9tQ29sbGVjdGlvbkdyb3VwKHQsIGUpLm5leHQoKHMgPT4gdGhpcy5sb2NhbFN0b3JlLmxvY2FsRG9jdW1lbnRzLmdldE5leHREb2N1bWVudHModCwgZSwgcywgbikubmV4dCgobiA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5jaGFuZ2VzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIudXBkYXRlSW5kZXhFbnRyaWVzKHQsIGkpLm5leHQoKCgpID0+IHRoaXMucnQocywgbikpKS5uZXh0KChuID0+IChOKFwiSW5kZXhCYWNraWxsZXJcIiwgYFVwZGF0aW5nIG9mZnNldDogJHtufWApLCBcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yZS5pbmRleE1hbmFnZXIudXBkYXRlQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4pKSkpLm5leHQoKCgpID0+IGkuc2l6ZSkpO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIG5leHQgb2Zmc2V0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkb2N1bWVudHMuICovICAgIHJ0KHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSB0O1xuICAgICAgICByZXR1cm4gZS5jaGFuZ2VzLmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gcHQoZSk7XG4gICAgICAgICAgICBUdChzLCBuKSA+IDAgJiYgKG4gPSBzKTtcbiAgICAgICAgfSkpLCBuZXcgSXQobi5yZWFkVGltZSwgbi5kb2N1bWVudEtleSwgTWF0aC5tYXgoZS5iYXRjaElkLCB0Lmxhcmdlc3RCYXRjaElkKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBgTGlzdGVuU2VxdWVuY2VgIGlzIGEgbW9ub3RvbmljIHNlcXVlbmNlLiBJdCBpcyBpbml0aWFsaXplZCB3aXRoIGEgbWluaW11bSB2YWx1ZSB0b1xuICogZXhjZWVkLiBBbGwgc3Vic2VxdWVudCBjYWxscyB0byBuZXh0IHdpbGwgcmV0dXJuIGluY3JlYXNpbmcgdmFsdWVzLiBJZiBwcm92aWRlZCB3aXRoIGFcbiAqIGBTZXF1ZW5jZU51bWJlclN5bmNlcmAsIGl0IHdpbGwgYWRkaXRpb25hbGx5IGJ1bXAgaXRzIG5leHQgdmFsdWUgd2hlbiB0b2xkIG9mIGEgbmV3IHZhbHVlLCBhc1xuICogd2VsbCBhcyB3cml0ZSBvdXQgc2VxdWVuY2UgbnVtYmVycyB0aGF0IGl0IHByb2R1Y2VzIHZpYSBgbmV4dCgpYC5cbiAqLyBjbGFzcyBPdCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSB0LCBlICYmIChlLnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IHQgPT4gdGhpcy5vdCh0KSwgdGhpcy51dCA9IHQgPT4gZS53cml0ZVNlcXVlbmNlTnVtYmVyKHQpKTtcbiAgICB9XG4gICAgb3QodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID0gTWF0aC5tYXgodCwgdGhpcy5wcmV2aW91c1ZhbHVlKSwgdGhpcy5wcmV2aW91c1ZhbHVlO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCB0ID0gKyt0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLnV0ICYmIHRoaXMudXQodCksIHQ7XG4gICAgfVxufVxuXG5PdC5jdCA9IC0xO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHZhcmlhYmxlIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gRnQodCkge1xuICAgIHJldHVybiBudWxsID09IHQ7XG59XG5cbi8qKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHZhbHVlIHJlcHJlc2VudHMgLTAuICovIGZ1bmN0aW9uIEJ0KHQpIHtcbiAgICAvLyBEZXRlY3QgaWYgdGhlIHZhbHVlIGlzIC0wLjAuIEJhc2VkIG9uIHBvbHlmaWxsIGZyb21cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICByZXR1cm4gMCA9PT0gdCAmJiAxIC8gdCA9PSAtMSAvIDA7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgdmFsdWUgaXMgYW4gaW50ZWdlciBhbmQgaW4gdGhlIHNhZmUgaW50ZWdlciByYW5nZVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QgZm9yIGJlaW5nIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIHJhbmdlXG4gKi8gZnVuY3Rpb24gTHQodCkge1xuICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiB0ICYmIE51bWJlci5pc0ludGVnZXIodCkgJiYgIUJ0KHQpICYmIHQgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgdCA+PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRW5jb2RlcyBhIHJlc291cmNlIHBhdGggaW50byBhIEluZGV4ZWREYi1jb21wYXRpYmxlIHN0cmluZyBmb3JtLlxuICovXG5mdW5jdGlvbiBxdCh0KSB7XG4gICAgbGV0IGUgPSBcIlwiO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykgZS5sZW5ndGggPiAwICYmIChlID0gS3QoZSkpLCBlID0gVXQodC5nZXQobiksIGUpO1xuICAgIHJldHVybiBLdChlKTtcbn1cblxuLyoqIEVuY29kZXMgYSBzaW5nbGUgc2VnbWVudCBvZiBhIHJlc291cmNlIHBhdGggaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIFV0KHQsIGUpIHtcbiAgICBsZXQgbiA9IGU7XG4gICAgY29uc3QgcyA9IHQubGVuZ3RoO1xuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgczsgZSsrKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0LmNoYXJBdChlKTtcbiAgICAgICAgc3dpdGNoIChzKSB7XG4gICAgICAgICAgY2FzZSBcIlxcMFwiOlxuICAgICAgICAgICAgbiArPSBcIlx1MDAwMVx1MDAxMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDAxXCI6XG4gICAgICAgICAgICBuICs9IFwiXHUwMDAxXHUwMDExXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuICs9IHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKiBFbmNvZGVzIGEgcGF0aCBzZXBhcmF0b3IgaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIEt0KHQpIHtcbiAgICByZXR1cm4gdCArIFwiXHUwMDAxXHUwMDAxXCI7XG59XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgZ2l2ZW4gSW5kZXhlZERiLWNvbXBhdGlibGUgc3RyaW5nIGZvcm0gb2YgYSByZXNvdXJjZSBwYXRoIGludG9cbiAqIGEgUmVzb3VyY2VQYXRoIGluc3RhbmNlLiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgbm90IHN1aXRhYmxlIGZvciB1c2Ugd2l0aFxuICogZGVjb2RpbmcgcmVzb3VyY2UgbmFtZXMgZnJvbSB0aGUgc2VydmVyOyB0aG9zZSBhcmUgT25lIFBsYXRmb3JtIGZvcm1hdFxuICogc3RyaW5ncy5cbiAqLyBmdW5jdGlvbiBHdCh0KSB7XG4gICAgLy8gRXZlbnQgdGhlIGVtcHR5IHBhdGggbXVzdCBlbmNvZGUgYXMgYSBwYXRoIG9mIGF0IGxlYXN0IGxlbmd0aCAyLiBBIHBhdGhcbiAgICAvLyB3aXRoIGV4YWN0bHkgMiBtdXN0IGJlIHRoZSBlbXB0eSBwYXRoLlxuICAgIGNvbnN0IGUgPSB0Lmxlbmd0aDtcbiAgICBpZiAoRihlID49IDIpLCAyID09PSBlKSByZXR1cm4gRihcIlx1MDAwMVwiID09PSB0LmNoYXJBdCgwKSAmJiBcIlx1MDAwMVwiID09PSB0LmNoYXJBdCgxKSksIHV0LmVtcHR5UGF0aCgpO1xuICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIGNhbm5vdCBleGlzdCBwYXN0IHRoZSBzZWNvbmQtdG8tbGFzdCBwb3NpdGlvbiBpbiB0aGVcbiAgICAvLyBzb3VyY2UgdmFsdWUuXG4gICAgICAgIGNvbnN0IF9fUFJJVkFURV9sYXN0UmVhc29uYWJsZUVzY2FwZUluZGV4ID0gZSAtIDIsIG4gPSBbXTtcbiAgICBsZXQgcyA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlOyApIHtcbiAgICAgICAgLy8gVGhlIGxhc3QgdHdvIGNoYXJhY3RlcnMgb2YgYSB2YWxpZCBlbmNvZGVkIHBhdGggbXVzdCBiZSBhIHNlcGFyYXRvciwgc29cbiAgICAgICAgLy8gdGhlcmUgbXVzdCBiZSBhbiBlbmQgdG8gdGhpcyBzZWdtZW50LlxuICAgICAgICBjb25zdCBlID0gdC5pbmRleE9mKFwiXHUwMDAxXCIsIGkpO1xuICAgICAgICAoZSA8IDAgfHwgZSA+IF9fUFJJVkFURV9sYXN0UmVhc29uYWJsZUVzY2FwZUluZGV4KSAmJiBPKCk7XG4gICAgICAgIHN3aXRjaCAodC5jaGFyQXQoZSArIDEpKSB7XG4gICAgICAgICAgY2FzZSBcIlx1MDAwMVwiOlxuICAgICAgICAgICAgY29uc3QgciA9IHQuc3Vic3RyaW5nKGksIGUpO1xuICAgICAgICAgICAgbGV0IG87XG4gICAgICAgICAgICAwID09PSBzLmxlbmd0aCA/IFxuICAgICAgICAgICAgLy8gQXZvaWQgY29weWluZyBmb3IgdGhlIGNvbW1vbiBjYXNlIG9mIGEgc2VnbWVudCB0aGF0IGV4Y2x1ZGVzIFxcMFxuICAgICAgICAgICAgLy8gYW5kIFxcMDAxXG4gICAgICAgICAgICBvID0gciA6IChzICs9IHIsIG8gPSBzLCBzID0gXCJcIiksIG4ucHVzaChvKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlx1MDAxMFwiOlxuICAgICAgICAgICAgcyArPSB0LnN1YnN0cmluZyhpLCBlKSwgcyArPSBcIlxcMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDExXCI6XG4gICAgICAgICAgICAvLyBUaGUgZXNjYXBlIGNoYXJhY3RlciBjYW4gYmUgdXNlZCBpbiB0aGUgb3V0cHV0IHRvIGVuY29kZSBpdHNlbGYuXG4gICAgICAgICAgICBzICs9IHQuc3Vic3RyaW5nKGksIGUgKyAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIE8oKTtcbiAgICAgICAgfVxuICAgICAgICBpID0gZSArIDI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdXQobik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IFF0ID0gWyBcInVzZXJJZFwiLCBcImJhdGNoSWRcIiBdO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBOYW1lIG9mIHRoZSBJbmRleGVkRGIgb2JqZWN0IHN0b3JlLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgbmFtZSAnb3duZXInIGlzIGNob3NlbiB0byBlbnN1cmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aFxuICogb2xkZXIgY2xpZW50cyB0aGF0IG9ubHkgc3VwcG9ydGVkIHNpbmdsZSBsb2NrZWQgYWNjZXNzIHRvIHRoZSBwZXJzaXN0ZW5jZVxuICogbGF5ZXIuXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhIFt1c2VySWQsIGVuY29kZWRQYXRoXSBrZXkgZm9yIHVzZSBpbiB0aGUgRGJEb2N1bWVudE11dGF0aW9uc1xuICogaW5kZXggdG8gaXRlcmF0ZSBvdmVyIGFsbCBhdCBkb2N1bWVudCBtdXRhdGlvbnMgZm9yIGEgZ2l2ZW4gcGF0aCBvciBsb3dlci5cbiAqL1xuZnVuY3Rpb24ganQodCwgZSkge1xuICAgIHJldHVybiBbIHQsIHF0KGUpIF07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bGwgaW5kZXgga2V5IG9mIFt1c2VySWQsIGVuY29kZWRQYXRoLCBiYXRjaElkXSBmb3IgaW5zZXJ0aW5nXG4gKiBhbmQgZGVsZXRpbmcgaW50byB0aGUgRGJEb2N1bWVudE11dGF0aW9ucyBpbmRleC5cbiAqLyBmdW5jdGlvbiB6dCh0LCBlLCBuKSB7XG4gICAgcmV0dXJuIFsgdCwgcXQoZSksIG4gXTtcbn1cblxuLyoqXG4gKiBCZWNhdXNlIHdlIHN0b3JlIGFsbCB0aGUgdXNlZnVsIGluZm9ybWF0aW9uIGZvciB0aGlzIHN0b3JlIGluIHRoZSBrZXksXG4gKiB0aGVyZSBpcyBubyB1c2VmdWwgaW5mb3JtYXRpb24gdG8gc3RvcmUgYXMgdGhlIHZhbHVlLiBUaGUgcmF3ICh1bmVuY29kZWQpXG4gKiBwYXRoIGNhbm5vdCBiZSBzdG9yZWQgYmVjYXVzZSBJbmRleGVkRGIgZG9lc24ndCBzdG9yZSBwcm90b3R5cGVcbiAqIGluZm9ybWF0aW9uLlxuICovIGNvbnN0IFd0ID0ge30sIEh0ID0gWyBcInByZWZpeFBhdGhcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwgXCJyZWFkVGltZVwiLCBcImRvY3VtZW50SWRcIiBdLCBKdCA9IFsgXCJwcmVmaXhQYXRoXCIsIFwiY29sbGVjdGlvbkdyb3VwXCIsIFwiZG9jdW1lbnRJZFwiIF0sIFl0ID0gWyBcImNvbGxlY3Rpb25Hcm91cFwiLCBcInJlYWRUaW1lXCIsIFwicHJlZml4UGF0aFwiLCBcImRvY3VtZW50SWRcIiBdLCBYdCA9IFsgXCJjYW5vbmljYWxJZFwiLCBcInRhcmdldElkXCIgXSwgWnQgPSBbIFwidGFyZ2V0SWRcIiwgXCJwYXRoXCIgXSwgdGUgPSBbIFwicGF0aFwiLCBcInRhcmdldElkXCIgXSwgZWUgPSBbIFwiY29sbGVjdGlvbklkXCIsIFwicGFyZW50XCIgXSwgbmUgPSBbIFwiaW5kZXhJZFwiLCBcInVpZFwiIF0sIHNlID0gWyBcInVpZFwiLCBcInNlcXVlbmNlTnVtYmVyXCIgXSwgaWUgPSBbIFwiaW5kZXhJZFwiLCBcInVpZFwiLCBcImFycmF5VmFsdWVcIiwgXCJkaXJlY3Rpb25hbFZhbHVlXCIsIFwib3JkZXJlZERvY3VtZW50S2V5XCIsIFwiZG9jdW1lbnRLZXlcIiBdLCByZSA9IFsgXCJpbmRleElkXCIsIFwidWlkXCIsIFwib3JkZXJlZERvY3VtZW50S2V5XCIgXSwgb2UgPSBbIFwidXNlcklkXCIsIFwiY29sbGVjdGlvblBhdGhcIiwgXCJkb2N1bWVudElkXCIgXSwgdWUgPSBbIFwidXNlcklkXCIsIFwiY29sbGVjdGlvblBhdGhcIiwgXCJsYXJnZXN0QmF0Y2hJZFwiIF0sIGNlID0gWyBcInVzZXJJZFwiLCBcImNvbGxlY3Rpb25Hcm91cFwiLCBcImxhcmdlc3RCYXRjaElkXCIgXSwgYWUgPSBbIC4uLlsgLi4uWyAuLi5bIC4uLlsgXCJtdXRhdGlvblF1ZXVlc1wiLCBcIm11dGF0aW9uc1wiLCBcImRvY3VtZW50TXV0YXRpb25zXCIsIFwicmVtb3RlRG9jdW1lbnRzXCIsIFwidGFyZ2V0c1wiLCBcIm93bmVyXCIsIFwidGFyZ2V0R2xvYmFsXCIsIFwidGFyZ2V0RG9jdW1lbnRzXCIgXSwgXCJjbGllbnRNZXRhZGF0YVwiIF0sIFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIiBdLCBcImNvbGxlY3Rpb25QYXJlbnRzXCIgXSwgXCJidW5kbGVzXCIsIFwibmFtZWRRdWVyaWVzXCIgXSwgaGUgPSBbIC4uLmFlLCBcImRvY3VtZW50T3ZlcmxheXNcIiBdLCBsZSA9IFsgXCJtdXRhdGlvblF1ZXVlc1wiLCBcIm11dGF0aW9uc1wiLCBcImRvY3VtZW50TXV0YXRpb25zXCIsIFwicmVtb3RlRG9jdW1lbnRzVjE0XCIsIFwidGFyZ2V0c1wiLCBcIm93bmVyXCIsIFwidGFyZ2V0R2xvYmFsXCIsIFwidGFyZ2V0RG9jdW1lbnRzXCIsIFwiY2xpZW50TWV0YWRhdGFcIiwgXCJyZW1vdGVEb2N1bWVudEdsb2JhbFwiLCBcImNvbGxlY3Rpb25QYXJlbnRzXCIsIFwiYnVuZGxlc1wiLCBcIm5hbWVkUXVlcmllc1wiLCBcImRvY3VtZW50T3ZlcmxheXNcIiBdLCBmZSA9IGxlLCBkZSA9IFsgLi4uZmUsIFwiaW5kZXhDb25maWd1cmF0aW9uXCIsIFwiaW5kZXhTdGF0ZVwiLCBcImluZGV4RW50cmllc1wiIF07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyB3ZSBleHRlbmRzIEF0IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuaHQgPSB0LCB0aGlzLmN1cnJlbnRTZXF1ZW5jZU51bWJlciA9IGU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfZSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgcmV0dXJuIGJ0Lk0obi5odCwgZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIG1lKHQpIHtcbiAgICBsZXQgZSA9IDA7XG4gICAgZm9yIChjb25zdCBuIGluIHQpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBuKSAmJiBlKys7XG4gICAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGdlKHQsIGUpIHtcbiAgICBmb3IgKGNvbnN0IG4gaW4gdCkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG4pICYmIGUobiwgdFtuXSk7XG59XG5cbmZ1bmN0aW9uIHllKHQpIHtcbiAgICBmb3IgKGNvbnN0IGUgaW4gdCkgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBlKSkgcmV0dXJuICExO1xuICAgIHJldHVybiAhMDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEFuIGltbXV0YWJsZSBzb3J0ZWQgbWFwIGltcGxlbWVudGF0aW9uLCBiYXNlZCBvbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2tcbi8vIHRyZWUuXG5jbGFzcyBwZSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSB0LCB0aGlzLnJvb3QgPSBlIHx8IFRlLkVNUFRZO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkIG9yIHJlcGxhY2VkLlxuICAgIGluc2VydCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgcGUodGhpcy5jb21wYXJhdG9yLCB0aGlzLnJvb3QuaW5zZXJ0KHQsIGUsIHRoaXMuY29tcGFyYXRvcikuY29weShudWxsLCBudWxsLCBUZS5CTEFDSywgbnVsbCwgbnVsbCkpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgcmVtb3ZlKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBwZSh0aGlzLmNvbXBhcmF0b3IsIHRoaXMucm9vdC5yZW1vdmUodCwgdGhpcy5jb21wYXJhdG9yKS5jb3B5KG51bGwsIG51bGwsIFRlLkJMQUNLLCBudWxsLCBudWxsKSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbC5cbiAgICBnZXQodCkge1xuICAgICAgICBsZXQgZSA9IHRoaXMucm9vdDtcbiAgICAgICAgZm9yICg7IWUuaXNFbXB0eSgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmNvbXBhcmF0b3IodCwgZS5rZXkpO1xuICAgICAgICAgICAgaWYgKDAgPT09IG4pIHJldHVybiBlLnZhbHVlO1xuICAgICAgICAgICAgbiA8IDAgPyBlID0gZS5sZWZ0IDogbiA+IDAgJiYgKGUgPSBlLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhpcyBzb3J0ZWQgbWFwLCBvciAtMSBpZiBpdCBkb2Vzbid0XG4gICAgLy8gZXhpc3QuXG4gICAgaW5kZXhPZih0KSB7XG4gICAgICAgIC8vIE51bWJlciBvZiBub2RlcyB0aGF0IHdlcmUgcHJ1bmVkIHdoZW4gZGVzY2VuZGluZyByaWdodFxuICAgICAgICBsZXQgZSA9IDAsIG4gPSB0aGlzLnJvb3Q7XG4gICAgICAgIGZvciAoOyFuLmlzRW1wdHkoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5jb21wYXJhdG9yKHQsIG4ua2V5KTtcbiAgICAgICAgICAgIGlmICgwID09PSBzKSByZXR1cm4gZSArIG4ubGVmdC5zaXplO1xuICAgICAgICAgICAgcyA8IDAgPyBuID0gbi5sZWZ0IDogKFxuICAgICAgICAgICAgLy8gQ291bnQgYWxsIG5vZGVzIGxlZnQgb2YgdGhlIG5vZGUgcGx1cyB0aGUgbm9kZSBpdHNlbGZcbiAgICAgICAgICAgIGUgKz0gbi5sZWZ0LnNpemUgKyAxLCBuID0gbi5yaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9kZSBub3QgZm91bmRcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuaXNFbXB0eSgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG1hcC5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5zaXplO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtaW5pbXVtIGtleSBpbiB0aGUgbWFwLlxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5taW5LZXkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIG1hcC5cbiAgICBtYXhLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4S2V5KCk7XG4gICAgfVxuICAgIC8vIFRyYXZlcnNlcyB0aGUgbWFwIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAvLyBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIGlub3JkZXJUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lmlub3JkZXJUcmF2ZXJzYWwodCk7XG4gICAgfVxuICAgIGZvckVhY2godCkge1xuICAgICAgICB0aGlzLmlub3JkZXJUcmF2ZXJzYWwoKChlLCBuKSA9PiAodChlLCBuKSwgITEpKSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmlub3JkZXJUcmF2ZXJzYWwoKChlLCBuKSA9PiAodC5wdXNoKGAke2V9OiR7bn1gKSwgITEpKSksIGB7JHt0LmpvaW4oXCIsIFwiKX19YDtcbiAgICB9XG4gICAgLy8gVHJhdmVyc2VzIHRoZSBtYXAgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpc1xuICAgIC8vIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHJldmVyc2VUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LnJldmVyc2VUcmF2ZXJzYWwodCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgU29ydGVkTWFwLlxuICAgIGdldEl0ZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IEllKHRoaXMucm9vdCwgbnVsbCwgdGhpcy5jb21wYXJhdG9yLCAhMSk7XG4gICAgfVxuICAgIGdldEl0ZXJhdG9yRnJvbSh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgSWUodGhpcy5yb290LCB0LCB0aGlzLmNvbXBhcmF0b3IsICExKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IEllKHRoaXMucm9vdCwgbnVsbCwgdGhpcy5jb21wYXJhdG9yLCAhMCk7XG4gICAgfVxuICAgIGdldFJldmVyc2VJdGVyYXRvckZyb20odCkge1xuICAgICAgICByZXR1cm4gbmV3IEllKHRoaXMucm9vdCwgdCwgdGhpcy5jb21wYXJhdG9yLCAhMCk7XG4gICAgfVxufVxuXG4gLy8gZW5kIFNvcnRlZE1hcFxuLy8gQW4gaXRlcmF0b3Igb3ZlciBhbiBMTFJCTm9kZS5cbmNsYXNzIEllIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMuaXNSZXZlcnNlID0gcywgdGhpcy5ub2RlU3RhY2sgPSBbXTtcbiAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICBmb3IgKDshdC5pc0VtcHR5KCk7ICkgaWYgKGkgPSBlID8gbih0LmtleSwgZSkgOiAxLCBcbiAgICAgICAgLy8gZmxpcCB0aGUgY29tcGFyaXNvbiBpZiB3ZSdyZSBnb2luZyBpbiByZXZlcnNlXG4gICAgICAgIGUgJiYgcyAmJiAoaSAqPSAtMSksIGkgPCAwKSBcbiAgICAgICAgLy8gVGhpcyBub2RlIGlzIGxlc3MgdGhhbiBvdXIgc3RhcnQga2V5LiBpZ25vcmUgaXRcbiAgICAgICAgdCA9IHRoaXMuaXNSZXZlcnNlID8gdC5sZWZ0IDogdC5yaWdodDsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gaSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBleGFjdGx5IGVxdWFsIHRvIG91ciBzdGFydCBrZXkuIFB1c2ggaXQgb24gdGhlIHN0YWNrLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBzdG9wIGl0ZXJhdGluZztcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjay5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGdyZWF0ZXIgdGhhbiBvdXIgc3RhcnQga2V5LCBhZGQgaXQgdG8gdGhlIHN0YWNrIGFuZCBtb3ZlXG4gICAgICAgICAgICAvLyB0byB0aGUgbmV4dCBvbmVcbiAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrLnB1c2godCksIHQgPSB0aGlzLmlzUmV2ZXJzZSA/IHQucmlnaHQgOiB0LmxlZnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmV4dCgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzLm5vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgY29uc3QgZSA9IHtcbiAgICAgICAgICAgIGtleTogdC5rZXksXG4gICAgICAgICAgICB2YWx1ZTogdC52YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5pc1JldmVyc2UpIGZvciAodCA9IHQubGVmdDsgIXQuaXNFbXB0eSgpOyApIHRoaXMubm9kZVN0YWNrLnB1c2godCksIHQgPSB0LnJpZ2h0OyBlbHNlIGZvciAodCA9IHQucmlnaHQ7ICF0LmlzRW1wdHkoKTsgKSB0aGlzLm5vZGVTdGFjay5wdXNoKHQpLCBcbiAgICAgICAgdCA9IHQubGVmdDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGhhc05leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVTdGFjay5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAoMCA9PT0gdGhpcy5ub2RlU3RhY2subGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMubm9kZVN0YWNrW3RoaXMubm9kZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiB0LmtleSxcbiAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4gLy8gZW5kIFNvcnRlZE1hcEl0ZXJhdG9yXG4vLyBSZXByZXNlbnRzIGEgbm9kZSBpbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2sgdHJlZS5cbmNsYXNzIFRlIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIHRoaXMua2V5ID0gdCwgdGhpcy52YWx1ZSA9IGUsIHRoaXMuY29sb3IgPSBudWxsICE9IG4gPyBuIDogVGUuUkVELCB0aGlzLmxlZnQgPSBudWxsICE9IHMgPyBzIDogVGUuRU1QVFksIFxuICAgICAgICB0aGlzLnJpZ2h0ID0gbnVsbCAhPSBpID8gaSA6IFRlLkVNUFRZLCB0aGlzLnNpemUgPSB0aGlzLmxlZnQuc2l6ZSArIDEgKyB0aGlzLnJpZ2h0LnNpemU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHBpZWNlcyBvZiBpdC5cbiAgICBjb3B5KHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZShudWxsICE9IHQgPyB0IDogdGhpcy5rZXksIG51bGwgIT0gZSA/IGUgOiB0aGlzLnZhbHVlLCBudWxsICE9IG4gPyBuIDogdGhpcy5jb2xvciwgbnVsbCAhPSBzID8gcyA6IHRoaXMubGVmdCwgbnVsbCAhPSBpID8gaSA6IHRoaXMucmlnaHQpO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXG4gICAgLy8gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIGlub3JkZXJUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0Lmlub3JkZXJUcmF2ZXJzYWwodCkgfHwgdCh0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHwgdGhpcy5yaWdodC5pbm9yZGVyVHJhdmVyc2FsKHQpO1xuICAgIH1cbiAgICAvLyBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHJldmVyc2VUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5yZXZlcnNlVHJhdmVyc2FsKHQpIHx8IHQodGhpcy5rZXksIHRoaXMudmFsdWUpIHx8IHRoaXMubGVmdC5yZXZlcnNlVHJhdmVyc2FsKHQpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtaW5pbXVtIG5vZGUgaW4gdGhlIHRyZWUuXG4gICAgbWluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmlzRW1wdHkoKSA/IHRoaXMgOiB0aGlzLmxlZnQubWluKCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKCkua2V5O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtYXhpbXVtIGtleSBpbiB0aGUgdHJlZS5cbiAgICBtYXhLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LmlzRW1wdHkoKSA/IHRoaXMua2V5IDogdGhpcy5yaWdodC5tYXhLZXkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUga2V5L3ZhbHVlIGFkZGVkLlxuICAgIGluc2VydCh0LCBlLCBuKSB7XG4gICAgICAgIGxldCBzID0gdGhpcztcbiAgICAgICAgY29uc3QgaSA9IG4odCwgcy5rZXkpO1xuICAgICAgICByZXR1cm4gcyA9IGkgPCAwID8gcy5jb3B5KG51bGwsIG51bGwsIG51bGwsIHMubGVmdC5pbnNlcnQodCwgZSwgbiksIG51bGwpIDogMCA9PT0gaSA/IHMuY29weShudWxsLCBlLCBudWxsLCBudWxsLCBudWxsKSA6IHMuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBzLnJpZ2h0Lmluc2VydCh0LCBlLCBuKSksIFxuICAgICAgICBzLmZpeFVwKCk7XG4gICAgfVxuICAgIHJlbW92ZU1pbigpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdC5pc0VtcHR5KCkpIHJldHVybiBUZS5FTVBUWTtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdC5sZWZ0LmlzUmVkKCkgfHwgdC5sZWZ0LmxlZnQuaXNSZWQoKSB8fCAodCA9IHQubW92ZVJlZExlZnQoKSksIHQgPSB0LmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgdC5sZWZ0LnJlbW92ZU1pbigpLCBudWxsKSwgXG4gICAgICAgIHQuZml4VXAoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGl0ZW0gcmVtb3ZlZC5cbiAgICByZW1vdmUodCwgZSkge1xuICAgICAgICBsZXQgbiwgcyA9IHRoaXM7XG4gICAgICAgIGlmIChlKHQsIHMua2V5KSA8IDApIHMubGVmdC5pc0VtcHR5KCkgfHwgcy5sZWZ0LmlzUmVkKCkgfHwgcy5sZWZ0LmxlZnQuaXNSZWQoKSB8fCAocyA9IHMubW92ZVJlZExlZnQoKSksIFxuICAgICAgICBzID0gcy5jb3B5KG51bGwsIG51bGwsIG51bGwsIHMubGVmdC5yZW1vdmUodCwgZSksIG51bGwpOyBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzLmxlZnQuaXNSZWQoKSAmJiAocyA9IHMucm90YXRlUmlnaHQoKSksIHMucmlnaHQuaXNFbXB0eSgpIHx8IHMucmlnaHQuaXNSZWQoKSB8fCBzLnJpZ2h0LmxlZnQuaXNSZWQoKSB8fCAocyA9IHMubW92ZVJlZFJpZ2h0KCkpLCBcbiAgICAgICAgICAgIDAgPT09IGUodCwgcy5rZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMucmlnaHQuaXNFbXB0eSgpKSByZXR1cm4gVGUuRU1QVFk7XG4gICAgICAgICAgICAgICAgbiA9IHMucmlnaHQubWluKCksIHMgPSBzLmNvcHkobi5rZXksIG4udmFsdWUsIG51bGwsIG51bGwsIHMucmlnaHQucmVtb3ZlTWluKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcyA9IHMuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBzLnJpZ2h0LnJlbW92ZSh0LCBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMuZml4VXAoKTtcbiAgICB9XG4gICAgaXNSZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lZWRlZCByb3RhdGlvbnMuXG4gICAgZml4VXAoKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHQucmlnaHQuaXNSZWQoKSAmJiAhdC5sZWZ0LmlzUmVkKCkgJiYgKHQgPSB0LnJvdGF0ZUxlZnQoKSksIHQubGVmdC5pc1JlZCgpICYmIHQubGVmdC5sZWZ0LmlzUmVkKCkgJiYgKHQgPSB0LnJvdGF0ZVJpZ2h0KCkpLCBcbiAgICAgICAgdC5sZWZ0LmlzUmVkKCkgJiYgdC5yaWdodC5pc1JlZCgpICYmICh0ID0gdC5jb2xvckZsaXAoKSksIHQ7XG4gICAgfVxuICAgIG1vdmVSZWRMZWZ0KCkge1xuICAgICAgICBsZXQgdCA9IHRoaXMuY29sb3JGbGlwKCk7XG4gICAgICAgIHJldHVybiB0LnJpZ2h0LmxlZnQuaXNSZWQoKSAmJiAodCA9IHQuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCB0LnJpZ2h0LnJvdGF0ZVJpZ2h0KCkpLCBcbiAgICAgICAgdCA9IHQucm90YXRlTGVmdCgpLCB0ID0gdC5jb2xvckZsaXAoKSksIHQ7XG4gICAgfVxuICAgIG1vdmVSZWRSaWdodCgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzLmNvbG9yRmxpcCgpO1xuICAgICAgICByZXR1cm4gdC5sZWZ0LmxlZnQuaXNSZWQoKSAmJiAodCA9IHQucm90YXRlUmlnaHQoKSwgdCA9IHQuY29sb3JGbGlwKCkpLCB0O1xuICAgIH1cbiAgICByb3RhdGVMZWZ0KCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIFRlLlJFRCwgbnVsbCwgdGhpcy5yaWdodC5sZWZ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCB0LCBudWxsKTtcbiAgICB9XG4gICAgcm90YXRlUmlnaHQoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgVGUuUkVELCB0aGlzLmxlZnQucmlnaHQsIG51bGwpO1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgbnVsbCwgdCk7XG4gICAgfVxuICAgIGNvbG9yRmxpcCgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMubGVmdC5jb3B5KG51bGwsIG51bGwsICF0aGlzLmxlZnQuY29sb3IsIG51bGwsIG51bGwpLCBlID0gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsICF0aGlzLnJpZ2h0LmNvbG9yLCBudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weShudWxsLCBudWxsLCAhdGhpcy5jb2xvciwgdCwgZSk7XG4gICAgfVxuICAgIC8vIEZvciB0ZXN0aW5nLlxuICAgIGNoZWNrTWF4RGVwdGgoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNoZWNrKCk7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygyLCB0KSA8PSB0aGlzLnNpemUgKyAxO1xuICAgIH1cbiAgICAvLyBJbiBhIGJhbGFuY2VkIFJCIHRyZWUsIHRoZSBibGFjay1kZXB0aCAobnVtYmVyIG9mIGJsYWNrIG5vZGVzKSBmcm9tIHJvb3QgdG9cbiAgICAvLyBsZWF2ZXMgaXMgZXF1YWwgb24gYm90aCBzaWRlcy4gIFRoaXMgZnVuY3Rpb24gdmVyaWZpZXMgdGhhdCBvciBhc3NlcnRzLlxuICAgIGNoZWNrKCkge1xuICAgICAgICBpZiAodGhpcy5pc1JlZCgpICYmIHRoaXMubGVmdC5pc1JlZCgpKSB0aHJvdyBPKCk7XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzUmVkKCkpIHRocm93IE8oKTtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMubGVmdC5jaGVjaygpO1xuICAgICAgICBpZiAodCAhPT0gdGhpcy5yaWdodC5jaGVjaygpKSB0aHJvdyBPKCk7XG4gICAgICAgIHJldHVybiB0ICsgKHRoaXMuaXNSZWQoKSA/IDAgOiAxKTtcbiAgICB9XG59XG5cbiAvLyBlbmQgTExSQk5vZGVcbi8vIEVtcHR5IG5vZGUgaXMgc2hhcmVkIGJldHdlZW4gYWxsIExMUkIgdHJlZXMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuVGUuRU1QVFkgPSBudWxsLCBUZS5SRUQgPSAhMCwgVGUuQkxBQ0sgPSAhMTtcblxuLy8gZW5kIExMUkJFbXB0eU5vZGVcblRlLkVNUFRZID0gbmV3IFxuLy8gUmVwcmVzZW50cyBhbiBlbXB0eSBub2RlIChhIGxlYWYgbm9kZSBpbiB0aGUgUmVkLUJsYWNrIFRyZWUpLlxuY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cbiAgICBnZXQga2V5KCkge1xuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbiAgICBnZXQgY29sb3IoKSB7XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9XG4gICAgZ2V0IGxlZnQoKSB7XG4gICAgICAgIHRocm93IE8oKTtcbiAgICB9XG4gICAgZ2V0IHJpZ2h0KCkge1xuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgY29weSh0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS92YWx1ZSBhZGRlZC5cbiAgICBpbnNlcnQodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbmV3IFRlKHQsIGUpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSByZW1vdmVkLlxuICAgIHJlbW92ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGlub3JkZXJUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIHJldmVyc2VUcmF2ZXJzYWwodCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG1heEtleSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlzUmVkKCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIC8vIEZvciB0ZXN0aW5nLlxuICAgIGNoZWNrTWF4RGVwdGgoKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgY2hlY2soKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNvcnRlZFNldCBpcyBhbiBpbW11dGFibGUgKGNvcHktb24td3JpdGUpIGNvbGxlY3Rpb24gdGhhdCBob2xkcyBlbGVtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLlxuICpcbiAqIE5PVEU6IGlmIHByb3ZpZGVkIGNvbXBhcmF0b3IgcmV0dXJucyAwIGZvciB0d28gZWxlbWVudHMsIHdlIGNvbnNpZGVyIHRoZW0gdG9cbiAqIGJlIGVxdWFsIVxuICovXG5jbGFzcyBFZSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSB0LCB0aGlzLmRhdGEgPSBuZXcgcGUodGhpcy5jb21wYXJhdG9yKTtcbiAgICB9XG4gICAgaGFzKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuZGF0YS5nZXQodCk7XG4gICAgfVxuICAgIGZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1pbktleSgpO1xuICAgIH1cbiAgICBsYXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1heEtleSgpO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zaXplO1xuICAgIH1cbiAgICBpbmRleE9mKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pbmRleE9mKHQpO1xuICAgIH1cbiAgICAvKiogSXRlcmF0ZXMgZWxlbWVudHMgaW4gb3JkZXIgZGVmaW5lZCBieSBcImNvbXBhcmF0b3JcIiAqLyAgICBmb3JFYWNoKHQpIHtcbiAgICAgICAgdGhpcy5kYXRhLmlub3JkZXJUcmF2ZXJzYWwoKChlLCBuKSA9PiAodChlKSwgITEpKSk7XG4gICAgfVxuICAgIC8qKiBJdGVyYXRlcyBvdmVyIGBlbGVtYHMgc3VjaCB0aGF0OiByYW5nZVswXSAmbHQ7PSBlbGVtICZsdDsgcmFuZ2VbMV0uICovICAgIGZvckVhY2hJblJhbmdlKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuZGF0YS5nZXRJdGVyYXRvckZyb20odFswXSk7XG4gICAgICAgIGZvciAoO24uaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuLmdldE5leHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBhcmF0b3Iocy5rZXksIHRbMV0pID49IDApIHJldHVybjtcbiAgICAgICAgICAgIGUocy5rZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYGVsZW1gcyBzdWNoIHRoYXQ6IHN0YXJ0ICZsdDs9IGVsZW0gdW50aWwgZmFsc2UgaXMgcmV0dXJuZWQuXG4gICAgICovICAgIGZvckVhY2hXaGlsZSh0LCBlKSB7XG4gICAgICAgIGxldCBuO1xuICAgICAgICBmb3IgKG4gPSB2b2lkIDAgIT09IGUgPyB0aGlzLmRhdGEuZ2V0SXRlcmF0b3JGcm9tKGUpIDogdGhpcy5kYXRhLmdldEl0ZXJhdG9yKCk7IG4uaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGlmICghdChuLmdldE5leHQoKS5rZXkpKSByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEZpbmRzIHRoZSBsZWFzdCBlbGVtZW50IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgZWxlbWAuICovICAgIGZpcnN0QWZ0ZXJPckVxdWFsKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZGF0YS5nZXRJdGVyYXRvckZyb20odCk7XG4gICAgICAgIHJldHVybiBlLmhhc05leHQoKSA/IGUuZ2V0TmV4dCgpLmtleSA6IG51bGw7XG4gICAgfVxuICAgIGdldEl0ZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFlKHRoaXMuZGF0YS5nZXRJdGVyYXRvcigpKTtcbiAgICB9XG4gICAgZ2V0SXRlcmF0b3JGcm9tKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZSh0aGlzLmRhdGEuZ2V0SXRlcmF0b3JGcm9tKHQpKTtcbiAgICB9XG4gICAgLyoqIEluc2VydHMgb3IgdXBkYXRlcyBhbiBlbGVtZW50ICovICAgIGFkZCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHkodGhpcy5kYXRhLnJlbW92ZSh0KS5pbnNlcnQodCwgITApKTtcbiAgICB9XG4gICAgLyoqIERlbGV0ZXMgYW4gZWxlbWVudCAqLyAgICBkZWxldGUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXModCkgPyB0aGlzLmNvcHkodGhpcy5kYXRhLnJlbW92ZSh0KSkgOiB0aGlzO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmlzRW1wdHkoKTtcbiAgICB9XG4gICAgdW5pb25XaXRoKHQpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzO1xuICAgICAgICAvLyBNYWtlIHN1cmUgYHJlc3VsdGAgYWx3YXlzIHJlZmVycyB0byB0aGUgbGFyZ2VyIG9uZSBvZiB0aGUgdHdvIHNldHMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc2l6ZSA8IHQuc2l6ZSAmJiAoZSA9IHQsIHQgPSB0aGlzKSwgdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIGUgPSBlLmFkZCh0KTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIEVlKSkgcmV0dXJuICExO1xuICAgICAgICBpZiAodGhpcy5zaXplICE9PSB0LnNpemUpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZGF0YS5nZXRJdGVyYXRvcigpLCBuID0gdC5kYXRhLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGZvciAoO2UuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldE5leHQoKS5rZXksIHMgPSBuLmdldE5leHQoKS5rZXk7XG4gICAgICAgICAgICBpZiAoMCAhPT0gdGhpcy5jb21wYXJhdG9yKHQsIHMpKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICB0b0FycmF5KCkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgdC5wdXNoKGUpO1xuICAgICAgICB9KSksIHQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGUgPT4gdC5wdXNoKGUpKSksIFwiU29ydGVkU2V0KFwiICsgdC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgfVxuICAgIGNvcHkodCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IEVlKHRoaXMuY29tcGFyYXRvcik7XG4gICAgICAgIHJldHVybiBlLmRhdGEgPSB0LCBlO1xuICAgIH1cbn1cblxuY2xhc3MgQWUge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5pdGVyID0gdDtcbiAgICB9XG4gICAgZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlci5nZXROZXh0KCkua2V5O1xuICAgIH1cbiAgICBoYXNOZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVyLmhhc05leHQoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHNvcnRlZCBzZXRzIGZvciBlcXVhbGl0eSB1c2luZyB0aGVpciBuYXR1cmFsIG9yZGVyaW5nLiBUaGVcbiAqIG1ldGhvZCBjb21wdXRlcyB0aGUgaW50ZXJzZWN0aW9uIGFuZCBpbnZva2VzIGBvbkFkZGAgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdFxuICogaXMgaW4gYGFmdGVyYCBidXQgbm90IGBiZWZvcmVgLiBgb25SZW1vdmVgIGlzIGludm9rZWQgZm9yIGV2ZXJ5IGVsZW1lbnQgaW5cbiAqIGBiZWZvcmVgIGJ1dCBtaXNzaW5nIGZyb20gYGFmdGVyYC5cbiAqXG4gKiBUaGUgbWV0aG9kIGNyZWF0ZXMgYSBjb3B5IG9mIGJvdGggYGJlZm9yZWAgYW5kIGBhZnRlcmAgYW5kIHJ1bnMgaW4gTyhuIGxvZ1xuICogbiksIHdoZXJlIG4gaXMgdGhlIHNpemUgb2YgdGhlIHR3byBsaXN0cy5cbiAqXG4gKiBAcGFyYW0gYmVmb3JlIC0gVGhlIGVsZW1lbnRzIHRoYXQgZXhpc3QgaW4gdGhlIG9yaWdpbmFsIHNldC5cbiAqIEBwYXJhbSBhZnRlciAtIFRoZSBlbGVtZW50cyB0byBkaWZmIGFnYWluc3QgdGhlIG9yaWdpbmFsIHNldC5cbiAqIEBwYXJhbSBjb21wYXJhdG9yIC0gVGhlIGNvbXBhcmF0b3IgZm9yIHRoZSBlbGVtZW50cyBpbiBiZWZvcmUgYW5kIGFmdGVyLlxuICogQHBhcmFtIG9uQWRkIC0gQSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBwYXJ0IG9mIGBcbiAqIGFmdGVyYCBidXQgbm90IGBiZWZvcmVgLlxuICogQHBhcmFtIG9uUmVtb3ZlIC0gQSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBwYXJ0IG9mXG4gKiBgYmVmb3JlYCBidXQgbm90IGBhZnRlcmAuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBlbGVtZW50IGZyb20gdGhlIGl0ZXJhdG9yIG9yIGB1bmRlZmluZWRgIGlmIG5vbmUgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiB2ZSh0KSB7XG4gICAgcmV0dXJuIHQuaGFzTmV4dCgpID8gdC5nZXROZXh0KCkgOiB2b2lkIDA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFByb3ZpZGVzIGEgc2V0IG9mIGZpZWxkcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHBhcnRpYWxseSBwYXRjaCBhIGRvY3VtZW50LlxuICogRmllbGRNYXNrIGlzIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBPYmplY3RWYWx1ZS5cbiAqIEV4YW1wbGVzOlxuICogICBmb28gLSBPdmVyd3JpdGVzIGZvbyBlbnRpcmVseSB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS4gSWYgZm9vIGlzIG5vdFxuICogICAgICAgICBwcmVzZW50IGluIHRoZSBjb21wYW5pb24gT2JqZWN0VmFsdWUsIHRoZSBmaWVsZCBpcyBkZWxldGVkLlxuICogICBmb28uYmFyIC0gT3ZlcndyaXRlcyBvbmx5IHRoZSBmaWVsZCBiYXIgb2YgdGhlIG9iamVjdCBmb28uXG4gKiAgICAgICAgICAgICBJZiBmb28gaXMgbm90IGFuIG9iamVjdCwgZm9vIGlzIHJlcGxhY2VkIHdpdGggYW4gb2JqZWN0XG4gKiAgICAgICAgICAgICBjb250YWluaW5nIGZvb1xuICovIGNsYXNzIFJlIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0gdCwgXG4gICAgICAgIC8vIFRPRE8oZGltb25kKTogdmFsaWRhdGlvbiBvZiBGaWVsZE1hc2tcbiAgICAgICAgLy8gU29ydCB0aGUgZmllbGQgbWFzayB0byBzdXBwb3J0IGBGaWVsZE1hc2suaXNFcXVhbCgpYCBhbmQgYXNzZXJ0IGJlbG93LlxuICAgICAgICB0LnNvcnQoYXQuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZShbXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgRmllbGRNYXNrIG9iamVjdCB0aGF0IGlzIHRoZSByZXN1bHQgb2YgYWRkaW5nIGFsbCB0aGUgZ2l2ZW5cbiAgICAgKiBmaWVsZHMgcGF0aHMgdG8gdGhpcyBmaWVsZCBtYXNrLlxuICAgICAqLyAgICB1bmlvbldpdGgodCkge1xuICAgICAgICBsZXQgZSA9IG5ldyBFZShhdC5jb21wYXJhdG9yKTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuZmllbGRzKSBlID0gZS5hZGQodCk7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5hZGQobik7XG4gICAgICAgIHJldHVybiBuZXcgUmUoZS50b0FycmF5KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyB0aGF0IGBmaWVsZFBhdGhgIGlzIGluY2x1ZGVkIGJ5IGF0IGxlYXN0IG9uZSBmaWVsZCBpbiB0aGlzIGZpZWxkXG4gICAgICogbWFzay5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYW4gTyhuKSBvcGVyYXRpb24sIHdoZXJlIGBuYCBpcyB0aGUgc2l6ZSBvZiB0aGUgZmllbGQgbWFzay5cbiAgICAgKi8gICAgY292ZXJzKHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZmllbGRzKSBpZiAoZS5pc1ByZWZpeE9mKHQpKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiBudCh0aGlzLmZpZWxkcywgdC5maWVsZHMsICgodCwgZSkgPT4gdC5pc0VxdWFsKGUpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBlcnJvciBlbmNvdW50ZXJlZCB3aGlsZSBkZWNvZGluZyBiYXNlNjQgc3RyaW5nLlxuICovIGNsYXNzIFBlIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLm5hbWUgPSBcIkJhc2U2NERlY29kZUVycm9yXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIENvbnZlcnRzIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgYmluYXJ5IHN0cmluZy4gKi9cbi8qKiBUcnVlIGlmIGFuZCBvbmx5IGlmIHRoZSBCYXNlNjQgY29udmVyc2lvbiBmdW5jdGlvbnMgYXJlIGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uIGJlKCkge1xuICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhdG9iO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbW11dGFibGUgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgXCJwcm90b1wiIGJ5dGUgc3RyaW5nLlxuICpcbiAqIFByb3RvIGJ5dGUgc3RyaW5ncyBjYW4gZWl0aGVyIGJlIEJhc2U2NC1lbmNvZGVkIHN0cmluZ3Mgb3IgVWludDhBcnJheXMgd2hlblxuICogc2VudCBvbiB0aGUgd2lyZS4gVGhpcyBjbGFzcyBhYnN0cmFjdHMgYXdheSB0aGlzIGRpZmZlcmVudGlhdGlvbiBieSBob2xkaW5nXG4gKiB0aGUgcHJvdG8gYnl0ZSBzdHJpbmcgaW4gYSBjb21tb24gY2xhc3MgdGhhdCBtdXN0IGJlIGNvbnZlcnRlZCBpbnRvIGEgc3RyaW5nXG4gKiBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIHByb3RvLlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgVmUge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5iaW5hcnlTdHJpbmcgPSB0O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJhc2U2NFN0cmluZyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdG9iKHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgYERPTUV4Y2VwdGlvbmAgaXMgZGVmaW5lZCBiZWZvcmUgdXNpbmcgaXQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyBcIlJlZmVyZW5jZUVycm9yOiBQcm9wZXJ0eSAnRE9NRXhjZXB0aW9uJyBkb2Vzbid0IGV4aXN0XCIgaW4gcmVhY3QtbmF0aXZlLlxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy83MTE1KVxuICAgICAgICAgICAgICAgIHRocm93IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIERPTUV4Y2VwdGlvbiAmJiB0IGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uID8gbmV3IFBlKFwiSW52YWxpZCBiYXNlNjQgc3RyaW5nOiBcIiArIHQpIDogdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogQ29udmVydHMgYSBiaW5hcnkgc3RyaW5nIHRvIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nLiAqLyAodCk7XG4gICAgICAgIHJldHVybiBuZXcgVmUoZSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVWludDhBcnJheSh0KSB7XG4gICAgICAgIC8vIFRPRE8oaW5kZXhpbmcpOyBSZW1vdmUgdGhlIGNvcHkgb2YgdGhlIGJ5dGUgc3RyaW5nIGhlcmUgYXMgdGhpcyBtZXRob2RcbiAgICAgICAgLy8gaXMgZnJlcXVlbnRseSBjYWxsZWQgZHVyaW5nIGluZGV4aW5nLlxuICAgICAgICBjb25zdCBlID0gXG4gICAgICAgIC8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYW4gVWludDhhcnJheSB0byBhIGJpbmFyeSBzdHJpbmcuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbGV0IGUgPSBcIlwiO1xuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgKytuKSBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodFtuXSk7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGEgYmluYXJ5IHN0cmluZyB0byBhbiBVaW50OEFycmF5LlxuICovICh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBWZShlKTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHQgPCB0aGlzLmJpbmFyeVN0cmluZy5sZW5ndGggPyB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQodCsrKSxcbiAgICAgICAgICAgICAgICBkb25lOiAhMVxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gdCA9IHRoaXMuYmluYXJ5U3RyaW5nLCBidG9hKHQpO1xuICAgICAgICB2YXIgdDtcbiAgICB9XG4gICAgdG9VaW50OEFycmF5KCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBVaW50OEFycmF5KHQubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykgZVtuXSA9IHQuY2hhckNvZGVBdChuKTtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgICAgIC8vIEEgUmVnRXhwIG1hdGNoaW5nIElTTyA4NjAxIFVUQyB0aW1lc3RhbXBzIHdpdGggb3B0aW9uYWwgZnJhY3Rpb24uXG4gICAgICAgICh0aGlzLmJpbmFyeVN0cmluZyk7XG4gICAgfVxuICAgIGFwcHJveGltYXRlQnl0ZVNpemUoKSB7XG4gICAgICAgIHJldHVybiAyICogdGhpcy5iaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgIH1cbiAgICBjb21wYXJlVG8odCkge1xuICAgICAgICByZXR1cm4gZXQodGhpcy5iaW5hcnlTdHJpbmcsIHQuYmluYXJ5U3RyaW5nKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmFyeVN0cmluZyA9PT0gdC5iaW5hcnlTdHJpbmc7XG4gICAgfVxufVxuXG5WZS5FTVBUWV9CWVRFX1NUUklORyA9IG5ldyBWZShcIlwiKTtcblxuY29uc3QgU2UgPSBuZXcgUmVnRXhwKC9eXFxkezR9LVxcZFxcZC1cXGRcXGRUXFxkXFxkOlxcZFxcZDpcXGRcXGQoPzpcXC4oXFxkKykpP1okLyk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIHBvc3NpYmxlIFByb3RvIHZhbHVlcyBmb3IgYSB0aW1lc3RhbXAgdmFsdWUgaW50byBhIFwic2Vjb25kcyBhbmRcbiAqIG5hbm9zXCIgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gRGUodCkge1xuICAgIC8vIFRoZSBqc29uIGludGVyZmFjZSAoZm9yIHRoZSBicm93c2VyKSB3aWxsIHJldHVybiBhbiBpc28gdGltZXN0YW1wIHN0cmluZyxcbiAgICAvLyB3aGlsZSB0aGUgcHJvdG8ganMgbGlicmFyeSAoZm9yIG5vZGUpIHdpbGwgcmV0dXJuIGFcbiAgICAvLyBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIGluc3RhbmNlLlxuICAgIGlmIChGKCEhdCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgLy8gVGhlIGRhdGUgc3RyaW5nIGNhbiBoYXZlIGhpZ2hlciBwcmVjaXNpb24gKG5hbm9zKSB0aGFuIHRoZSBEYXRlIGNsYXNzXG4gICAgICAgIC8vIChtaWxsaXMpLCBzbyB3ZSBkbyBzb21lIGN1c3RvbSBwYXJzaW5nIGhlcmUuXG4gICAgICAgIC8vIFBhcnNlIHRoZSBuYW5vcyByaWdodCBvdXQgb2YgdGhlIHN0cmluZy5cbiAgICAgICAgbGV0IGUgPSAwO1xuICAgICAgICBjb25zdCBuID0gU2UuZXhlYyh0KTtcbiAgICAgICAgaWYgKEYoISFuKSwgblsxXSkge1xuICAgICAgICAgICAgLy8gUGFkIHRoZSBmcmFjdGlvbiBvdXQgdG8gOSBkaWdpdHMgKG5hbm9zKS5cbiAgICAgICAgICAgIGxldCB0ID0gblsxXTtcbiAgICAgICAgICAgIHQgPSAodCArIFwiMDAwMDAwMDAwXCIpLnN1YnN0cigwLCA5KSwgZSA9IE51bWJlcih0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXJzZSB0aGUgZGF0ZSB0byBnZXQgdGhlIHNlY29uZHMuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBEYXRlKHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2Vjb25kczogTWF0aC5mbG9vcihzLmdldFRpbWUoKSAvIDFlMyksXG4gICAgICAgICAgICBuYW5vczogZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWNvbmRzOiBDZSh0LnNlY29uZHMpLFxuICAgICAgICBuYW5vczogQ2UodC5uYW5vcylcbiAgICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBwb3NzaWJsZSBQcm90byB0eXBlcyBmb3IgbnVtYmVycyBpbnRvIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBSZXR1cm5zIDAgaWYgdGhlIHZhbHVlIGlzIG5vdCBudW1lcmljLlxuICovIGZ1bmN0aW9uIENlKHQpIHtcbiAgICAvLyBUT0RPKGJqb3JuaWNrKTogSGFuZGxlIGludDY0IGdyZWF0ZXIgdGhhbiA1MyBiaXRzLlxuICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiB0ID8gdCA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBOdW1iZXIodCkgOiAwO1xufVxuXG4vKiogQ29udmVydHMgdGhlIHBvc3NpYmxlIFByb3RvIHR5cGVzIGZvciBCbG9icyBpbnRvIGEgQnl0ZVN0cmluZy4gKi8gZnVuY3Rpb24geGUodCkge1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gVmUuZnJvbUJhc2U2NFN0cmluZyh0KSA6IFZlLmZyb21VaW50OEFycmF5KHQpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxseS1hcHBsaWVkIFNlcnZlclRpbWVzdGFtcC5cbiAqXG4gKiBTZXJ2ZXIgVGltZXN0YW1wcyBhcmUgYmFja2VkIGJ5IE1hcFZhbHVlcyB0aGF0IGNvbnRhaW4gYW4gaW50ZXJuYWwgZmllbGRcbiAqIGBfX3R5cGVfX2Agd2l0aCBhIHZhbHVlIG9mIGBzZXJ2ZXJfdGltZXN0YW1wYC4gVGhlIHByZXZpb3VzIHZhbHVlIGFuZCBsb2NhbFxuICogd3JpdGUgdGltZSBhcmUgc3RvcmVkIGluIGl0cyBgX19wcmV2aW91c192YWx1ZV9fYCBhbmQgYF9fbG9jYWxfd3JpdGVfdGltZV9fYFxuICogZmllbGRzIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBOb3RlczpcbiAqIC0gU2VydmVyVGltZXN0YW1wVmFsdWUgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYVxuICogICB0cmFuc2Zvcm0uIFRoZXkgY2FuIG9ubHkgZXhpc3QgaW4gdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudC4gVGhlcmVmb3JlXG4gKiAgIHRoZXkgZG8gbm90IG5lZWQgdG8gYmUgcGFyc2VkIG9yIHNlcmlhbGl6ZWQuXG4gKiAtIFdoZW4gZXZhbHVhdGVkIGxvY2FsbHkgKGUuZy4gZm9yIHNuYXBzaG90LmRhdGEoKSksIHRoZXkgYnkgZGVmYXVsdFxuICogICBldmFsdWF0ZSB0byBgbnVsbGAuIFRoaXMgYmVoYXZpb3IgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgcGFzc2luZyBjdXN0b21cbiAqICAgRmllbGRWYWx1ZU9wdGlvbnMgdG8gdmFsdWUoKS5cbiAqIC0gV2l0aCByZXNwZWN0IHRvIG90aGVyIFNlcnZlclRpbWVzdGFtcFZhbHVlcywgdGhleSBzb3J0IGJ5IHRoZWlyXG4gKiAgIGxvY2FsV3JpdGVUaW1lLlxuICovIGZ1bmN0aW9uIE5lKHQpIHtcbiAgICB2YXIgZSwgbjtcbiAgICByZXR1cm4gXCJzZXJ2ZXJfdGltZXN0YW1wXCIgPT09IChudWxsID09PSAobiA9ICgobnVsbCA9PT0gKGUgPSBudWxsID09IHQgPyB2b2lkIDAgOiB0Lm1hcFZhbHVlKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmZpZWxkcykgfHwge30pLl9fdHlwZV9fKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLnN0cmluZ1ZhbHVlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNlcnZlclRpbWVzdGFtcCBwcm90byB2YWx1ZSAodXNpbmcgdGhlIGludGVybmFsIGZvcm1hdCkuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkIGJlZm9yZSB0aGlzIFNlcnZlclRpbWVzdGFtcCB3YXMgc2V0LlxuICpcbiAqIFByZXNlcnZpbmcgdGhlIHByZXZpb3VzIHZhbHVlcyBhbGxvd3MgdGhlIHVzZXIgdG8gZGlzcGxheSB0aGUgbGFzdCByZXNvbGVkXG4gKiB2YWx1ZSB1bnRpbCB0aGUgYmFja2VuZCByZXNwb25kcyB3aXRoIHRoZSB0aW1lc3RhbXAuXG4gKi9cbmZ1bmN0aW9uIGtlKHQpIHtcbiAgICBjb25zdCBlID0gdC5tYXBWYWx1ZS5maWVsZHMuX19wcmV2aW91c192YWx1ZV9fO1xuICAgIHJldHVybiBOZShlKSA/IGtlKGUpIDogZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2NhbCB0aW1lIGF0IHdoaWNoIHRoaXMgdGltZXN0YW1wIHdhcyBmaXJzdCBzZXQuXG4gKi8gZnVuY3Rpb24gTWUodCkge1xuICAgIGNvbnN0IGUgPSBEZSh0Lm1hcFZhbHVlLmZpZWxkcy5fX2xvY2FsX3dyaXRlX3RpbWVfXy50aW1lc3RhbXBWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBpdChlLnNlY29uZHMsIGUubmFub3MpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyAkZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIERhdGFiYXNlSW5mbyB1c2luZyB0aGUgcHJvdmlkZWQgaG9zdCwgZGF0YWJhc2VJZCBhbmRcbiAgICAgKiBwZXJzaXN0ZW5jZUtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhYmFzZUlkIC0gVGhlIGRhdGFiYXNlIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gYXBwSWQgLSBUaGUgRmlyZWJhc2UgQXBwIElkLlxuICAgICAqIEBwYXJhbSBwZXJzaXN0ZW5jZUtleSAtIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgRmlyZXN0b3JlJ3MgbG9jYWxcbiAgICAgKiBzdG9yYWdlICh1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGRhdGFiYXNlSWQpLlxuICAgICAqIEBwYXJhbSBob3N0IC0gVGhlIEZpcmVzdG9yZSBiYWNrZW5kIGhvc3QgdG8gY29ubmVjdCB0by5cbiAgICAgKiBAcGFyYW0gc3NsIC0gV2hldGhlciB0byB1c2UgU1NMIHdoZW4gY29ubmVjdGluZy5cbiAgICAgKiBAcGFyYW0gZm9yY2VMb25nUG9sbGluZyAtIFdoZXRoZXIgdG8gdXNlIHRoZSBmb3JjZUxvbmdQb2xsaW5nIG9wdGlvblxuICAgICAqIHdoZW4gdXNpbmcgV2ViQ2hhbm5lbCBhcyB0aGUgbmV0d29yayB0cmFuc3BvcnQuXG4gICAgICogQHBhcmFtIGF1dG9EZXRlY3RMb25nUG9sbGluZyAtIFdoZXRoZXIgdG8gdXNlIHRoZSBkZXRlY3RCdWZmZXJpbmdQcm94eVxuICAgICAqIG9wdGlvbiB3aGVuIHVzaW5nIFdlYkNoYW5uZWwgYXMgdGhlIG5ldHdvcmsgdHJhbnNwb3J0LlxuICAgICAqIEBwYXJhbSBsb25nUG9sbGluZ09wdGlvbnMgT3B0aW9ucyB0aGF0IGNvbmZpZ3VyZSBsb25nLXBvbGxpbmcuXG4gICAgICogQHBhcmFtIHVzZUZldGNoU3RyZWFtcyBXaGV0aGVyIHRvIHVzZSB0aGUgRmV0Y2ggQVBJIGluc3RlYWQgb2ZcbiAgICAgKiBYTUxIVFRQUmVxdWVzdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGksIHIsIG8sIHUsIGMpIHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gdCwgdGhpcy5hcHBJZCA9IGUsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBuLCB0aGlzLmhvc3QgPSBzLCB0aGlzLnNzbCA9IGksIFxuICAgICAgICB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcgPSByLCB0aGlzLmF1dG9EZXRlY3RMb25nUG9sbGluZyA9IG8sIHRoaXMubG9uZ1BvbGxpbmdPcHRpb25zID0gdSwgXG4gICAgICAgIHRoaXMudXNlRmV0Y2hTdHJlYW1zID0gYztcbiAgICB9XG59XG5cbi8qKiBUaGUgZGVmYXVsdCBkYXRhYmFzZSBuYW1lIGZvciBhIHByb2plY3QuICovXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRhdGFiYXNlIElEIGEgRmlyZXN0b3JlIGNsaWVudCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgT2Uge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSB0LCB0aGlzLmRhdGFiYXNlID0gZSB8fCBcIihkZWZhdWx0KVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2UoXCJcIiwgXCJcIik7XG4gICAgfVxuICAgIGdldCBpc0RlZmF1bHREYXRhYmFzZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiKGRlZmF1bHQpXCIgPT09IHRoaXMuZGF0YWJhc2U7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIE9lICYmIHQucHJvamVjdElkID09PSB0aGlzLnByb2plY3RJZCAmJiB0LmRhdGFiYXNlID09PSB0aGlzLmRhdGFiYXNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IEZlID0ge1xuICAgIG1hcFZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgX190eXBlX186IHtcbiAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZTogXCJfX21heF9fXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0sIEJlID0ge1xuICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbn07XG5cbi8qKiBFeHRyYWN0cyB0aGUgYmFja2VuZCdzIHR5cGUgb3JkZXIgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZS4gKi9cbmZ1bmN0aW9uIExlKHQpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiB0ID8gMCAvKiBUeXBlT3JkZXIuTnVsbFZhbHVlICovIDogXCJib29sZWFuVmFsdWVcIiBpbiB0ID8gMSAvKiBUeXBlT3JkZXIuQm9vbGVhblZhbHVlICovIDogXCJpbnRlZ2VyVmFsdWVcIiBpbiB0IHx8IFwiZG91YmxlVmFsdWVcIiBpbiB0ID8gMiAvKiBUeXBlT3JkZXIuTnVtYmVyVmFsdWUgKi8gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IDMgLyogVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlICovIDogXCJzdHJpbmdWYWx1ZVwiIGluIHQgPyA1IC8qIFR5cGVPcmRlci5TdHJpbmdWYWx1ZSAqLyA6IFwiYnl0ZXNWYWx1ZVwiIGluIHQgPyA2IC8qIFR5cGVPcmRlci5CbG9iVmFsdWUgKi8gOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IDcgLyogVHlwZU9yZGVyLlJlZlZhbHVlICovIDogXCJnZW9Qb2ludFZhbHVlXCIgaW4gdCA/IDggLyogVHlwZU9yZGVyLkdlb1BvaW50VmFsdWUgKi8gOiBcImFycmF5VmFsdWVcIiBpbiB0ID8gOSAvKiBUeXBlT3JkZXIuQXJyYXlWYWx1ZSAqLyA6IFwibWFwVmFsdWVcIiBpbiB0ID8gTmUodCkgPyA0IC8qIFR5cGVPcmRlci5TZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6IGVuKHQpID8gOTAwNzE5OTI1NDc0MDk5MSAvKiBUeXBlT3JkZXIuTWF4VmFsdWUgKi8gOiAxMCAvKiBUeXBlT3JkZXIuT2JqZWN0VmFsdWUgKi8gOiBPKCk7XG59XG5cbi8qKiBUZXN0cyBgbGVmdGAgYW5kIGByaWdodGAgZm9yIGVxdWFsaXR5IGJhc2VkIG9uIHRoZSBiYWNrZW5kIHNlbWFudGljcy4gKi8gZnVuY3Rpb24gcWUodCwgZSkge1xuICAgIGlmICh0ID09PSBlKSByZXR1cm4gITA7XG4gICAgY29uc3QgbiA9IExlKHQpO1xuICAgIGlmIChuICE9PSBMZShlKSkgcmV0dXJuICExO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwIC8qIFR5cGVPcmRlci5OdWxsVmFsdWUgKi8gOlxuICAgICAgY2FzZSA5MDA3MTk5MjU0NzQwOTkxIC8qIFR5cGVPcmRlci5NYXhWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiAhMDtcblxuICAgICAgY2FzZSAxIC8qIFR5cGVPcmRlci5Cb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gdC5ib29sZWFuVmFsdWUgPT09IGUuYm9vbGVhblZhbHVlO1xuXG4gICAgICBjYXNlIDQgLyogVHlwZU9yZGVyLlNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIE1lKHQpLmlzRXF1YWwoTWUoZSkpO1xuXG4gICAgICBjYXNlIDMgLyogVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0LnRpbWVzdGFtcFZhbHVlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUudGltZXN0YW1wVmFsdWUgJiYgdC50aW1lc3RhbXBWYWx1ZS5sZW5ndGggPT09IGUudGltZXN0YW1wVmFsdWUubGVuZ3RoKSBcbiAgICAgICAgICAgIC8vIFVzZSBzdHJpbmcgZXF1YWxpdHkgZm9yIElTTyA4NjAxIHRpbWVzdGFtcHNcbiAgICAgICAgICAgIHJldHVybiB0LnRpbWVzdGFtcFZhbHVlID09PSBlLnRpbWVzdGFtcFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgbiA9IERlKHQudGltZXN0YW1wVmFsdWUpLCBzID0gRGUoZS50aW1lc3RhbXBWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbi5zZWNvbmRzID09PSBzLnNlY29uZHMgJiYgbi5uYW5vcyA9PT0gcy5uYW5vcztcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSA1IC8qIFR5cGVPcmRlci5TdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiB0LnN0cmluZ1ZhbHVlID09PSBlLnN0cmluZ1ZhbHVlO1xuXG4gICAgICBjYXNlIDYgLyogVHlwZU9yZGVyLkJsb2JWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4geGUodC5ieXRlc1ZhbHVlKS5pc0VxdWFsKHhlKGUuYnl0ZXNWYWx1ZSkpO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBjYXNlIDcgLyogVHlwZU9yZGVyLlJlZlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQucmVmZXJlbmNlVmFsdWUgPT09IGUucmVmZXJlbmNlVmFsdWU7XG5cbiAgICAgIGNhc2UgOCAvKiBUeXBlT3JkZXIuR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2UodC5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlKSA9PT0gQ2UoZS5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlKSAmJiBDZSh0Lmdlb1BvaW50VmFsdWUubG9uZ2l0dWRlKSA9PT0gQ2UoZS5nZW9Qb2ludFZhbHVlLmxvbmdpdHVkZSk7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgMiAvKiBUeXBlT3JkZXIuTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKFwiaW50ZWdlclZhbHVlXCIgaW4gdCAmJiBcImludGVnZXJWYWx1ZVwiIGluIGUpIHJldHVybiBDZSh0LmludGVnZXJWYWx1ZSkgPT09IENlKGUuaW50ZWdlclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChcImRvdWJsZVZhbHVlXCIgaW4gdCAmJiBcImRvdWJsZVZhbHVlXCIgaW4gZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBDZSh0LmRvdWJsZVZhbHVlKSwgcyA9IENlKGUuZG91YmxlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuID09PSBzID8gQnQobikgPT09IEJ0KHMpIDogaXNOYU4obikgJiYgaXNOYU4ocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgOSAvKiBUeXBlT3JkZXIuQXJyYXlWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBudCh0LmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCBlLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCBxZSk7XG5cbiAgICAgIGNhc2UgMTAgLyogVHlwZU9yZGVyLk9iamVjdFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0Lm1hcFZhbHVlLmZpZWxkcyB8fCB7fSwgcyA9IGUubWFwVmFsdWUuZmllbGRzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKG1lKG4pICE9PSBtZShzKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IGluIG4pIGlmIChuLmhhc093blByb3BlcnR5KHQpICYmICh2b2lkIDAgPT09IHNbdF0gfHwgIXFlKG5bdF0sIHNbdF0pKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIEFycmF5VmFsdWUgY29udGFpbnMgdGhlIHNwZWNpZmllZCBlbGVtZW50LiAqLyAodCwgZSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBVZSh0LCBlKSB7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gKHQudmFsdWVzIHx8IFtdKS5maW5kKCh0ID0+IHFlKHQsIGUpKSk7XG59XG5cbmZ1bmN0aW9uIEtlKHQsIGUpIHtcbiAgICBpZiAodCA9PT0gZSkgcmV0dXJuIDA7XG4gICAgY29uc3QgbiA9IExlKHQpLCBzID0gTGUoZSk7XG4gICAgaWYgKG4gIT09IHMpIHJldHVybiBldChuLCBzKTtcbiAgICBzd2l0Y2ggKG4pIHtcbiAgICAgIGNhc2UgMCAvKiBUeXBlT3JkZXIuTnVsbFZhbHVlICovIDpcbiAgICAgIGNhc2UgOTAwNzE5OTI1NDc0MDk5MSAvKiBUeXBlT3JkZXIuTWF4VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgY2FzZSAxIC8qIFR5cGVPcmRlci5Cb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZXQodC5ib29sZWFuVmFsdWUsIGUuYm9vbGVhblZhbHVlKTtcblxuICAgICAgY2FzZSAyIC8qIFR5cGVPcmRlci5OdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gQ2UodC5pbnRlZ2VyVmFsdWUgfHwgdC5kb3VibGVWYWx1ZSksIHMgPSBDZShlLmludGVnZXJWYWx1ZSB8fCBlLmRvdWJsZVZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuIDwgcyA/IC0xIDogbiA+IHMgPyAxIDogbiA9PT0gcyA/IDAgOiBcbiAgICAgICAgICAgIC8vIG9uZSBvciBib3RoIGFyZSBOYU4uXG4gICAgICAgICAgICBpc05hTihuKSA/IGlzTmFOKHMpID8gMCA6IC0xIDogMTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSAzIC8qIFR5cGVPcmRlci5UaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBHZSh0LnRpbWVzdGFtcFZhbHVlLCBlLnRpbWVzdGFtcFZhbHVlKTtcblxuICAgICAgY2FzZSA0IC8qIFR5cGVPcmRlci5TZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBHZShNZSh0KSwgTWUoZSkpO1xuXG4gICAgICBjYXNlIDUgLyogVHlwZU9yZGVyLlN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGV0KHQuc3RyaW5nVmFsdWUsIGUuc3RyaW5nVmFsdWUpO1xuXG4gICAgICBjYXNlIDYgLyogVHlwZU9yZGVyLkJsb2JWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0geGUodCksIHMgPSB4ZShlKTtcbiAgICAgICAgICAgIHJldHVybiBuLmNvbXBhcmVUbyhzKTtcbiAgICAgICAgfSh0LmJ5dGVzVmFsdWUsIGUuYnl0ZXNWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNyAvKiBUeXBlT3JkZXIuUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQuc3BsaXQoXCIvXCIpLCBzID0gZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IG4ubGVuZ3RoICYmIHQgPCBzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IGV0KG5bdF0sIHNbdF0pO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBlKSByZXR1cm4gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldChuLmxlbmd0aCwgcy5sZW5ndGgpO1xuICAgICAgICB9KHQucmVmZXJlbmNlVmFsdWUsIGUucmVmZXJlbmNlVmFsdWUpO1xuXG4gICAgICBjYXNlIDggLyogVHlwZU9yZGVyLkdlb1BvaW50VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IGV0KENlKHQubGF0aXR1ZGUpLCBDZShlLmxhdGl0dWRlKSk7XG4gICAgICAgICAgICBpZiAoMCAhPT0gbikgcmV0dXJuIG47XG4gICAgICAgICAgICByZXR1cm4gZXQoQ2UodC5sb25naXR1ZGUpLCBDZShlLmxvbmdpdHVkZSkpO1xuICAgICAgICB9KHQuZ2VvUG9pbnRWYWx1ZSwgZS5nZW9Qb2ludFZhbHVlKTtcblxuICAgICAgY2FzZSA5IC8qIFR5cGVPcmRlci5BcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnZhbHVlcyB8fCBbXSwgcyA9IGUudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBuLmxlbmd0aCAmJiB0IDwgcy5sZW5ndGg7ICsrdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBLZShuW3RdLCBzW3RdKTtcbiAgICAgICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXQobi5sZW5ndGgsIHMubGVuZ3RoKTtcbiAgICAgICAgfSh0LmFycmF5VmFsdWUsIGUuYXJyYXlWYWx1ZSk7XG5cbiAgICAgIGNhc2UgMTAgLyogVHlwZU9yZGVyLk9iamVjdFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSBGZS5tYXBWYWx1ZSAmJiBlID09PSBGZS5tYXBWYWx1ZSkgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAodCA9PT0gRmUubWFwVmFsdWUpIHJldHVybiAxO1xuICAgICAgICAgICAgaWYgKGUgPT09IEZlLm1hcFZhbHVlKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5maWVsZHMgfHwge30sIHMgPSBPYmplY3Qua2V5cyhuKSwgaSA9IGUuZmllbGRzIHx8IHt9LCByID0gT2JqZWN0LmtleXMoaSk7XG4gICAgICAgICAgICAvLyBFdmVuIHRob3VnaCBNYXBWYWx1ZXMgYXJlIGxpa2VseSBzb3J0ZWQgY29ycmVjdGx5IGJhc2VkIG9uIHRoZWlyIGluc2VydGlvblxuICAgICAgICAgICAgLy8gb3JkZXIgKGUuZy4gd2hlbiByZWNlaXZlZCBmcm9tIHRoZSBiYWNrZW5kKSwgbG9jYWwgbW9kaWZpY2F0aW9ucyBjYW4gYnJpbmdcbiAgICAgICAgICAgIC8vIGVsZW1lbnRzIG91dCBvZiBvcmRlci4gV2UgbmVlZCB0byByZS1zb3J0IHRoZSBlbGVtZW50cyB0byBlbnN1cmUgdGhhdFxuICAgICAgICAgICAgLy8gY2Fub25pY2FsIElEcyBhcmUgaW5kZXBlbmRlbnQgb2YgaW5zZXJ0aW9uIG9yZGVyLlxuICAgICAgICAgICAgcy5zb3J0KCksIHIuc29ydCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBzLmxlbmd0aCAmJiB0IDwgci5sZW5ndGg7ICsrdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBldChzW3RdLCByW3RdKTtcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gZSkgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IEtlKG5bc1t0XV0sIGlbclt0XV0pO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBvKSByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldChzLmxlbmd0aCwgci5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogR2VuZXJhdGVzIHRoZSBjYW5vbmljYWwgSUQgZm9yIHRoZSBwcm92aWRlZCBmaWVsZCB2YWx1ZSAoYXMgdXNlZCBpbiBUYXJnZXRcbiAqIHNlcmlhbGl6YXRpb24pLlxuICovICh0Lm1hcFZhbHVlLCBlLm1hcFZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gR2UodCwgZSkge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgdC5sZW5ndGggPT09IGUubGVuZ3RoKSByZXR1cm4gZXQodCwgZSk7XG4gICAgY29uc3QgbiA9IERlKHQpLCBzID0gRGUoZSksIGkgPSBldChuLnNlY29uZHMsIHMuc2Vjb25kcyk7XG4gICAgcmV0dXJuIDAgIT09IGkgPyBpIDogZXQobi5uYW5vcywgcy5uYW5vcyk7XG59XG5cbmZ1bmN0aW9uIFFlKHQpIHtcbiAgICByZXR1cm4gamUodCk7XG59XG5cbmZ1bmN0aW9uIGplKHQpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiB0ID8gXCJudWxsXCIgOiBcImJvb2xlYW5WYWx1ZVwiIGluIHQgPyBcIlwiICsgdC5ib29sZWFuVmFsdWUgOiBcImludGVnZXJWYWx1ZVwiIGluIHQgPyBcIlwiICsgdC5pbnRlZ2VyVmFsdWUgOiBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IFwiXCIgKyB0LmRvdWJsZVZhbHVlIDogXCJ0aW1lc3RhbXBWYWx1ZVwiIGluIHQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBEZSh0KTtcbiAgICAgICAgcmV0dXJuIGB0aW1lKCR7ZS5zZWNvbmRzfSwke2UubmFub3N9KWA7XG4gICAgfSh0LnRpbWVzdGFtcFZhbHVlKSA6IFwic3RyaW5nVmFsdWVcIiBpbiB0ID8gdC5zdHJpbmdWYWx1ZSA6IFwiYnl0ZXNWYWx1ZVwiIGluIHQgPyB4ZSh0LmJ5dGVzVmFsdWUpLnRvQmFzZTY0KCkgOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IChuID0gdC5yZWZlcmVuY2VWYWx1ZSwgXG4gICAgaHQuZnJvbU5hbWUobikudG9TdHJpbmcoKSkgOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8gYGdlbygkeyhlID0gdC5nZW9Qb2ludFZhbHVlKS5sYXRpdHVkZX0sJHtlLmxvbmdpdHVkZX0pYCA6IFwiYXJyYXlWYWx1ZVwiIGluIHQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBlID0gXCJbXCIsIG4gPSAhMDtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIHQudmFsdWVzIHx8IFtdKSBuID8gbiA9ICExIDogZSArPSBcIixcIiwgZSArPSBqZShzKTtcbiAgICAgICAgcmV0dXJuIGUgKyBcIl1cIjtcbiAgICB9XG4gICAgLyoqXG4gKiBSZXR1cm5zIGFuIGFwcHJveGltYXRlIChhbmQgd2lsZGx5IGluYWNjdXJhdGUpIGluLW1lbW9yeSBzaXplIGZvciB0aGUgZmllbGRcbiAqIHZhbHVlLlxuICpcbiAqIFRoZSBtZW1vcnkgc2l6ZSB0YWtlcyBpbnRvIGFjY291bnQgb25seSB0aGUgYWN0dWFsIHVzZXIgZGF0YSBhcyBpdCByZXNpZGVzXG4gKiBpbiBtZW1vcnkgYW5kIGlnbm9yZXMgb2JqZWN0IG92ZXJoZWFkLlxuICovICh0LmFycmF5VmFsdWUpIDogXCJtYXBWYWx1ZVwiIGluIHQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEl0ZXJhdGlvbiBvcmRlciBpbiBKYXZhU2NyaXB0IGlzIG5vdCBndWFyYW50ZWVkLiBUbyBlbnN1cmUgdGhhdCB3ZSBnZW5lcmF0ZVxuICAgICAgICAvLyBtYXRjaGluZyBjYW5vbmljYWwgSURzIGZvciBpZGVudGljYWwgbWFwcywgd2UgbmVlZCB0byBzb3J0IHRoZSBrZXlzLlxuICAgICAgICBjb25zdCBlID0gT2JqZWN0LmtleXModC5maWVsZHMgfHwge30pLnNvcnQoKTtcbiAgICAgICAgbGV0IG4gPSBcIntcIiwgcyA9ICEwO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZSkgcyA/IHMgPSAhMSA6IG4gKz0gXCIsXCIsIG4gKz0gYCR7aX06JHtqZSh0LmZpZWxkc1tpXSl9YDtcbiAgICAgICAgcmV0dXJuIG4gKyBcIn1cIjtcbiAgICB9KHQubWFwVmFsdWUpIDogTygpO1xuICAgIHZhciBlLCBuO1xufVxuXG5mdW5jdGlvbiB6ZSh0KSB7XG4gICAgc3dpdGNoIChMZSh0KSkge1xuICAgICAgY2FzZSAwIC8qIFR5cGVPcmRlci5OdWxsVmFsdWUgKi8gOlxuICAgICAgY2FzZSAxIC8qIFR5cGVPcmRlci5Cb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gNDtcblxuICAgICAgY2FzZSAyIC8qIFR5cGVPcmRlci5OdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiA4O1xuXG4gICAgICBjYXNlIDMgLyogVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgIGNhc2UgOCAvKiBUeXBlT3JkZXIuR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgIC8vIEdlb1BvaW50cyBhcmUgbWFkZSB1cCBvZiB0d28gZGlzdGluY3QgbnVtYmVycyAobGF0aXR1ZGUgKyBsb25naXR1ZGUpXG4gICAgICAgIHJldHVybiAxNjtcblxuICAgICAgY2FzZSA0IC8qIFR5cGVPcmRlci5TZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIGNvbnN0IGUgPSBrZSh0KTtcbiAgICAgICAgcmV0dXJuIGUgPyAxNiArIHplKGUpIDogMTY7XG5cbiAgICAgIGNhc2UgNSAvKiBUeXBlT3JkZXIuU3RyaW5nVmFsdWUgKi8gOlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9EYXRhX3N0cnVjdHVyZXM6XG4gICAgICAgIC8vIFwiSmF2YVNjcmlwdCdzIFN0cmluZyB0eXBlIGlzIFsuLi5dIGEgc2V0IG9mIGVsZW1lbnRzIG9mIDE2LWJpdCB1bnNpZ25lZFxuICAgICAgICAvLyBpbnRlZ2VyIHZhbHVlc1wiXG4gICAgICAgIHJldHVybiAyICogdC5zdHJpbmdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgIGNhc2UgNiAvKiBUeXBlT3JkZXIuQmxvYlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHhlKHQuYnl0ZXNWYWx1ZSkuYXBwcm94aW1hdGVCeXRlU2l6ZSgpO1xuXG4gICAgICBjYXNlIDcgLyogVHlwZU9yZGVyLlJlZlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQucmVmZXJlbmNlVmFsdWUubGVuZ3RoO1xuXG4gICAgICBjYXNlIDkgLyogVHlwZU9yZGVyLkFycmF5VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gKHQuYXJyYXlWYWx1ZS52YWx1ZXMgfHwgW10pLnJlZHVjZSgoKHQsIGUpID0+IHQgKyB6ZShlKSksIDApO1xuXG4gICAgICBjYXNlIDEwIC8qIFR5cGVPcmRlci5PYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gZ2UodC5maWVsZHMsICgodCwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGUgKz0gdC5sZW5ndGggKyB6ZShuKTtcbiAgICAgICAgICAgIH0pKSwgZTtcbiAgICAgICAgfSh0Lm1hcFZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbn1cblxuLyoqIFJldHVybnMgYSByZWZlcmVuY2UgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBkYXRhYmFzZSBhbmQga2V5LiAqL1xuZnVuY3Rpb24gV2UodCwgZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlZmVyZW5jZVZhbHVlOiBgcHJvamVjdHMvJHt0LnByb2plY3RJZH0vZGF0YWJhc2VzLyR7dC5kYXRhYmFzZX0vZG9jdW1lbnRzLyR7ZS5wYXRoLmNhbm9uaWNhbFN0cmluZygpfWBcbiAgICB9O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gSW50ZWdlclZhbHVlIC4gKi8gZnVuY3Rpb24gSGUodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJpbnRlZ2VyVmFsdWVcIiBpbiB0O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBEb3VibGVWYWx1ZS4gKi9cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBBcnJheVZhbHVlLiAqL1xuZnVuY3Rpb24gSmUodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJhcnJheVZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgTnVsbFZhbHVlLiAqLyBmdW5jdGlvbiBZZSh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcIm51bGxWYWx1ZVwiIGluIHQ7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBOYU4uICovIGZ1bmN0aW9uIFhlKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwiZG91YmxlVmFsdWVcIiBpbiB0ICYmIGlzTmFOKE51bWJlcih0LmRvdWJsZVZhbHVlKSk7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIE1hcFZhbHVlLiAqLyBmdW5jdGlvbiBaZSh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcIm1hcFZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAuICovIGZ1bmN0aW9uIHRuKHQpIHtcbiAgICBpZiAodC5nZW9Qb2ludFZhbHVlKSByZXR1cm4ge1xuICAgICAgICBnZW9Qb2ludFZhbHVlOiBPYmplY3QuYXNzaWduKHt9LCB0Lmdlb1BvaW50VmFsdWUpXG4gICAgfTtcbiAgICBpZiAodC50aW1lc3RhbXBWYWx1ZSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiB0LnRpbWVzdGFtcFZhbHVlKSByZXR1cm4ge1xuICAgICAgICB0aW1lc3RhbXBWYWx1ZTogT2JqZWN0LmFzc2lnbih7fSwgdC50aW1lc3RhbXBWYWx1ZSlcbiAgICB9O1xuICAgIGlmICh0Lm1hcFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgIGZpZWxkczoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGdlKHQubWFwVmFsdWUuZmllbGRzLCAoKHQsIG4pID0+IGUubWFwVmFsdWUuZmllbGRzW3RdID0gdG4obikpKSwgZTtcbiAgICB9XG4gICAgaWYgKHQuYXJyYXlWYWx1ZSkge1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgIHZhbHVlczogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCAodC5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSkubGVuZ3RoOyArK24pIGUuYXJyYXlWYWx1ZS52YWx1ZXNbbl0gPSB0bih0LmFycmF5VmFsdWUudmFsdWVzW25dKTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0KTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgVmFsdWUgcmVwcmVzZW50cyB0aGUgY2Fub25pY2FsIHtAbGluayAjTUFYX1ZBTFVFfSAuICovIGZ1bmN0aW9uIGVuKHQpIHtcbiAgICByZXR1cm4gXCJfX21heF9fXCIgPT09ICgoKHQubWFwVmFsdWUgfHwge30pLmZpZWxkcyB8fCB7fSkuX190eXBlX18gfHwge30pLnN0cmluZ1ZhbHVlO1xufVxuXG4vKiogUmV0dXJucyB0aGUgbG93ZXN0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gdmFsdWUgdHlwZSAoaW5jbHVzaXZlKS4gKi8gZnVuY3Rpb24gbm4odCkge1xuICAgIHJldHVybiBcIm51bGxWYWx1ZVwiIGluIHQgPyBCZSA6IFwiYm9vbGVhblZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgYm9vbGVhblZhbHVlOiAhMVxuICAgIH0gOiBcImludGVnZXJWYWx1ZVwiIGluIHQgfHwgXCJkb3VibGVWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICB9IDogXCJ0aW1lc3RhbXBWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIHRpbWVzdGFtcFZhbHVlOiB7XG4gICAgICAgICAgICBzZWNvbmRzOiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuICAgICAgICB9XG4gICAgfSA6IFwic3RyaW5nVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBzdHJpbmdWYWx1ZTogXCJcIlxuICAgIH0gOiBcImJ5dGVzVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBieXRlc1ZhbHVlOiBcIlwiXG4gICAgfSA6IFwicmVmZXJlbmNlVmFsdWVcIiBpbiB0ID8gV2UoT2UuZW1wdHkoKSwgaHQuZW1wdHkoKSkgOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBnZW9Qb2ludFZhbHVlOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogLTkwLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAtMTgwXG4gICAgICAgIH1cbiAgICB9IDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgYXJyYXlWYWx1ZToge31cbiAgICB9IDogXCJtYXBWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIG1hcFZhbHVlOiB7fVxuICAgIH0gOiBPKCk7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBsYXJnZXN0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gdmFsdWUgdHlwZSAoZXhjbHVzaXZlKS4gKi8gZnVuY3Rpb24gc24odCkge1xuICAgIHJldHVybiBcIm51bGxWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIGJvb2xlYW5WYWx1ZTogITFcbiAgICB9IDogXCJib29sZWFuVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBkb3VibGVWYWx1ZTogTmFOXG4gICAgfSA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCB8fCBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgdGltZXN0YW1wVmFsdWU6IHtcbiAgICAgICAgICAgIHNlY29uZHM6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG4gICAgICAgIH1cbiAgICB9IDogXCJ0aW1lc3RhbXBWYWx1ZVwiIGluIHQgPyB7XG4gICAgICAgIHN0cmluZ1ZhbHVlOiBcIlwiXG4gICAgfSA6IFwic3RyaW5nVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBieXRlc1ZhbHVlOiBcIlwiXG4gICAgfSA6IFwiYnl0ZXNWYWx1ZVwiIGluIHQgPyBXZShPZS5lbXB0eSgpLCBodC5lbXB0eSgpKSA6IFwicmVmZXJlbmNlVmFsdWVcIiBpbiB0ID8ge1xuICAgICAgICBnZW9Qb2ludFZhbHVlOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogLTkwLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAtMTgwXG4gICAgICAgIH1cbiAgICB9IDogXCJnZW9Qb2ludFZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgYXJyYXlWYWx1ZToge31cbiAgICB9IDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IHtcbiAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgfSA6IFwibWFwVmFsdWVcIiBpbiB0ID8gRmUgOiBPKCk7XG59XG5cbmZ1bmN0aW9uIHJuKHQsIGUpIHtcbiAgICBjb25zdCBuID0gS2UodC52YWx1ZSwgZS52YWx1ZSk7XG4gICAgcmV0dXJuIDAgIT09IG4gPyBuIDogdC5pbmNsdXNpdmUgJiYgIWUuaW5jbHVzaXZlID8gLTEgOiAhdC5pbmNsdXNpdmUgJiYgZS5pbmNsdXNpdmUgPyAxIDogMDtcbn1cblxuZnVuY3Rpb24gb24odCwgZSkge1xuICAgIGNvbnN0IG4gPSBLZSh0LnZhbHVlLCBlLnZhbHVlKTtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiB0LmluY2x1c2l2ZSAmJiAhZS5pbmNsdXNpdmUgPyAxIDogIXQuaW5jbHVzaXZlICYmIGUuaW5jbHVzaXZlID8gLTEgOiAwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBPYmplY3RWYWx1ZSByZXByZXNlbnRzIGEgTWFwVmFsdWUgaW4gdGhlIEZpcmVzdG9yZSBQcm90byBhbmQgb2ZmZXJzIHRoZVxuICogYWJpbGl0eSB0byBhZGQgYW5kIHJlbW92ZSBmaWVsZHMgKHZpYSB0aGUgT2JqZWN0VmFsdWVCdWlsZGVyKS5cbiAqLyBjbGFzcyB1biB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdDtcbiAgICB9XG4gICAgc3RhdGljIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gbmV3IHVuKHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGggb3IgbnVsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIC0gdGhlIHBhdGggdG8gc2VhcmNoXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIGF0IHRoZSBwYXRoIG9yIG51bGwgaWYgdGhlIHBhdGggaXMgbm90IHNldC5cbiAgICAgKi8gICAgZmllbGQodCkge1xuICAgICAgICBpZiAodC5pc0VtcHR5KCkpIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubGVuZ3RoIC0gMTsgKytuKSBpZiAoZSA9IChlLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSlbdC5nZXQobildLCBcbiAgICAgICAgICAgICFaZShlKSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZSA9IChlLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSlbdC5sYXN0U2VnbWVudCgpXSwgZSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGZpZWxkIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIC0gVGhlIGZpZWxkIHBhdGggdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICovICAgIHNldCh0LCBlKSB7XG4gICAgICAgIHRoaXMuZ2V0RmllbGRzTWFwKHQucG9wTGFzdCgpKVt0Lmxhc3RTZWdtZW50KCldID0gdG4oZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHByb3ZpZGVkIGZpZWxkcyB0byB0aGUgcHJvdmlkZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgLSBBIG1hcCBvZiBmaWVsZHMgdG8gdmFsdWVzIChvciBudWxsIGZvciBkZWxldGVzKS5cbiAgICAgKi8gICAgc2V0QWxsKHQpIHtcbiAgICAgICAgbGV0IGUgPSBhdC5lbXB0eVBhdGgoKSwgbiA9IHt9LCBzID0gW107XG4gICAgICAgIHQuZm9yRWFjaCgoKHQsIGkpID0+IHtcbiAgICAgICAgICAgIGlmICghZS5pc0ltbWVkaWF0ZVBhcmVudE9mKGkpKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBhY2N1bXVsYXRlZCBjaGFuZ2VzIGF0IHRoaXMgcGFyZW50IGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0RmllbGRzTWFwKGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlDaGFuZ2VzKHQsIG4sIHMpLCBuID0ge30sIHMgPSBbXSwgZSA9IGkucG9wTGFzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA/IG5baS5sYXN0U2VnbWVudCgpXSA9IHRuKHQpIDogcy5wdXNoKGkubGFzdFNlZ21lbnQoKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0RmllbGRzTWFwKGUpO1xuICAgICAgICB0aGlzLmFwcGx5Q2hhbmdlcyhpLCBuLCBzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZmllbGQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBubyBmaWVsZCBhdCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgcGF0aCwgbm90aGluZyBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZmllbGQgcGF0aCB0byByZW1vdmUuXG4gICAgICovICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmZpZWxkKHQucG9wTGFzdCgpKTtcbiAgICAgICAgWmUoZSkgJiYgZS5tYXBWYWx1ZS5maWVsZHMgJiYgZGVsZXRlIGUubWFwVmFsdWUuZmllbGRzW3QubGFzdFNlZ21lbnQoKV07XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gcWUodGhpcy52YWx1ZSwgdC52YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCB0aGF0IGNvbnRhaW5zIHRoZSBsZWFmIGVsZW1lbnQgb2YgYHBhdGhgLiBJZiB0aGUgcGFyZW50XG4gICAgICogZW50cnkgZG9lcyBub3QgeWV0IGV4aXN0LCBvciBpZiBpdCBpcyBub3QgYSBtYXAsIGEgbmV3IG1hcCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgICovICAgIGdldEZpZWxkc01hcCh0KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgZS5tYXBWYWx1ZS5maWVsZHMgfHwgKGUubWFwVmFsdWUgPSB7XG4gICAgICAgICAgICBmaWVsZHM6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubGVuZ3RoOyArK24pIHtcbiAgICAgICAgICAgIGxldCBzID0gZS5tYXBWYWx1ZS5maWVsZHNbdC5nZXQobildO1xuICAgICAgICAgICAgWmUocykgJiYgcy5tYXBWYWx1ZS5maWVsZHMgfHwgKHMgPSB7XG4gICAgICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGUubWFwVmFsdWUuZmllbGRzW3QuZ2V0KG4pXSA9IHMpLCBlID0gcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5tYXBWYWx1ZS5maWVsZHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIGBmaWVsZHNNYXBgIGJ5IGFkZGluZywgcmVwbGFjaW5nIG9yIGRlbGV0aW5nIHRoZSBzcGVjaWZpZWRcbiAgICAgKiBlbnRyaWVzLlxuICAgICAqLyAgICBhcHBseUNoYW5nZXModCwgZSwgbikge1xuICAgICAgICBnZShlLCAoKGUsIG4pID0+IHRbZV0gPSBuKSk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBuKSBkZWxldGUgdFtlXTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgdW4odG4odGhpcy52YWx1ZSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgRmllbGRNYXNrIGJ1aWx0IGZyb20gYWxsIGZpZWxkcyBpbiBhIE1hcFZhbHVlLlxuICovIGZ1bmN0aW9uIGNuKHQpIHtcbiAgICBjb25zdCBlID0gW107XG4gICAgcmV0dXJuIGdlKHQuZmllbGRzLCAoKHQsIG4pID0+IHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBhdChbIHQgXSk7XG4gICAgICAgIGlmIChaZShuKSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGNuKG4ubWFwVmFsdWUpLmZpZWxkcztcbiAgICAgICAgICAgIGlmICgwID09PSB0Lmxlbmd0aCkgXG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSB0aGUgZW1wdHkgbWFwIGJ5IGFkZGluZyBpdCB0byB0aGUgRmllbGRNYXNrLlxuICAgICAgICAgICAgZS5wdXNoKHMpOyBlbHNlIFxuICAgICAgICAgICAgLy8gRm9yIG5lc3RlZCBhbmQgbm9uLWVtcHR5IE9iamVjdFZhbHVlcywgYWRkIHRoZSBGaWVsZFBhdGggb2YgdGhlXG4gICAgICAgICAgICAvLyBsZWFmIG5vZGVzLlxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIGUucHVzaChzLmNoaWxkKG4pKTtcbiAgICAgICAgfSBlbHNlIFxuICAgICAgICAvLyBGb3IgbmVzdGVkIGFuZCBub24tZW1wdHkgT2JqZWN0VmFsdWVzLCBhZGQgdGhlIEZpZWxkUGF0aCBvZiB0aGUgbGVhZlxuICAgICAgICAvLyBub2Rlcy5cbiAgICAgICAgZS5wdXNoKHMpO1xuICAgIH0pKSwgbmV3IFJlKGUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgZG9jdW1lbnQgaW4gRmlyZXN0b3JlIHdpdGggYSBrZXksIHZlcnNpb24sIGRhdGEgYW5kIHdoZXRoZXIgaXRcbiAqIGhhcyBsb2NhbCBtdXRhdGlvbnMgYXBwbGllZCB0byBpdC5cbiAqXG4gKiBEb2N1bWVudHMgY2FuIHRyYW5zaXRpb24gYmV0d2VlbiBzdGF0ZXMgdmlhIGBjb252ZXJ0VG9Gb3VuZERvY3VtZW50KClgLFxuICogYGNvbnZlcnRUb05vRG9jdW1lbnQoKWAgYW5kIGBjb252ZXJ0VG9Vbmtub3duRG9jdW1lbnQoKWAuIElmIGEgZG9jdW1lbnQgZG9lc1xuICogbm90IHRyYW5zaXRpb24gdG8gb25lIG9mIHRoZXNlIHN0YXRlcyBldmVuIGFmdGVyIGFsbCBtdXRhdGlvbnMgaGF2ZSBiZWVuXG4gKiBhcHBsaWVkLCBgaXNWYWxpZERvY3VtZW50KClgIHJldHVybnMgZmFsc2UgYW5kIHRoZSBkb2N1bWVudCBzaG91bGQgYmUgcmVtb3ZlZFxuICogZnJvbSBhbGwgdmlld3MuXG4gKi8gY2xhc3MgYW4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGksIHIsIG8pIHtcbiAgICAgICAgdGhpcy5rZXkgPSB0LCB0aGlzLmRvY3VtZW50VHlwZSA9IGUsIHRoaXMudmVyc2lvbiA9IG4sIHRoaXMucmVhZFRpbWUgPSBzLCB0aGlzLmNyZWF0ZVRpbWUgPSBpLCBcbiAgICAgICAgdGhpcy5kYXRhID0gciwgdGhpcy5kb2N1bWVudFN0YXRlID0gbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRvY3VtZW50IHdpdGggbm8ga25vd24gdmVyc2lvbiBvciBkYXRhLCBidXQgd2hpY2ggY2FuIHNlcnZlIGFzXG4gICAgICogYmFzZSBkb2N1bWVudCBmb3IgbXV0YXRpb25zLlxuICAgICAqLyAgICBzdGF0aWMgbmV3SW52YWxpZERvY3VtZW50KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhbih0LCAwIC8qIERvY3VtZW50VHlwZS5JTlZBTElEICovICwgXG4gICAgICAgIC8qIHZlcnNpb24gKi8gcnQubWluKCksIFxuICAgICAgICAvKiByZWFkVGltZSAqLyBydC5taW4oKSwgXG4gICAgICAgIC8qIGNyZWF0ZVRpbWUgKi8gcnQubWluKCksIHVuLmVtcHR5KCksIDAgLyogRG9jdW1lbnRTdGF0ZS5TWU5DRUQgKi8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gZXhpc3Qgd2l0aCB0aGUgZ2l2ZW4gZGF0YSBhdCB0aGVcbiAgICAgKiBnaXZlbiB2ZXJzaW9uLlxuICAgICAqLyAgICBzdGF0aWMgbmV3Rm91bmREb2N1bWVudCh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBuZXcgYW4odCwgMSAvKiBEb2N1bWVudFR5cGUuRk9VTkRfRE9DVU1FTlQgKi8gLCBcbiAgICAgICAgLyogdmVyc2lvbiAqLyBlLCBcbiAgICAgICAgLyogcmVhZFRpbWUgKi8gcnQubWluKCksIFxuICAgICAgICAvKiBjcmVhdGVUaW1lICovIG4sIHMsIDAgLyogRG9jdW1lbnRTdGF0ZS5TWU5DRUQgKi8pO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBkb2N1bWVudCB0aGF0IGlzIGtub3duIHRvIG5vdCBleGlzdCBhdCB0aGUgZ2l2ZW4gdmVyc2lvbi4gKi8gICAgc3RhdGljIG5ld05vRG9jdW1lbnQodCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFuKHQsIDIgLyogRG9jdW1lbnRUeXBlLk5PX0RPQ1VNRU5UICovICwgXG4gICAgICAgIC8qIHZlcnNpb24gKi8gZSwgXG4gICAgICAgIC8qIHJlYWRUaW1lICovIHJ0Lm1pbigpLCBcbiAgICAgICAgLyogY3JlYXRlVGltZSAqLyBydC5taW4oKSwgdW4uZW1wdHkoKSwgMCAvKiBEb2N1bWVudFN0YXRlLlNZTkNFRCAqLyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgdGhhdCBpcyBrbm93biB0byBleGlzdCBhdCB0aGUgZ2l2ZW4gdmVyc2lvbiBidXRcbiAgICAgKiB3aG9zZSBkYXRhIGlzIG5vdCBrbm93biAoZS5nLiBhIGRvY3VtZW50IHRoYXQgd2FzIHVwZGF0ZWQgd2l0aG91dCBhIGtub3duXG4gICAgICogYmFzZSBkb2N1bWVudCkuXG4gICAgICovICAgIHN0YXRpYyBuZXdVbmtub3duRG9jdW1lbnQodCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFuKHQsIDMgLyogRG9jdW1lbnRUeXBlLlVOS05PV05fRE9DVU1FTlQgKi8gLCBcbiAgICAgICAgLyogdmVyc2lvbiAqLyBlLCBcbiAgICAgICAgLyogcmVhZFRpbWUgKi8gcnQubWluKCksIFxuICAgICAgICAvKiBjcmVhdGVUaW1lICovIHJ0Lm1pbigpLCB1bi5lbXB0eSgpLCAyIC8qIERvY3VtZW50U3RhdGUuSEFTX0NPTU1JVFRFRF9NVVRBVElPTlMgKi8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBkb2N1bWVudCB0eXBlIHRvIGluZGljYXRlIHRoYXQgaXQgZXhpc3RzIGFuZCB0aGF0IGl0cyB2ZXJzaW9uXG4gICAgICogYW5kIGRhdGEgYXJlIGtub3duLlxuICAgICAqLyAgICBjb252ZXJ0VG9Gb3VuZERvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgLy8gSWYgYSBkb2N1bWVudCBpcyBzd2l0Y2hpbmcgc3RhdGUgZnJvbSBiZWluZyBhbiBpbnZhbGlkIG9yIGRlbGV0ZWRcbiAgICAgICAgLy8gZG9jdW1lbnQgdG8gYSB2YWxpZCAoRk9VTkRfRE9DVU1FTlQpIGRvY3VtZW50LCBlaXRoZXIgZHVlIHRvIHJlY2VpdmluZyBhblxuICAgICAgICAvLyB1cGRhdGUgZnJvbSBXYXRjaCBvciBkdWUgdG8gYXBwbHlpbmcgYSBsb2NhbCBzZXQgbXV0YXRpb24gb24gdG9wXG4gICAgICAgIC8vIG9mIGEgZGVsZXRlZCBkb2N1bWVudCwgb3VyIGJlc3QgZ3Vlc3MgYWJvdXQgaXRzIGNyZWF0ZVRpbWUgd291bGQgYmUgdGhlXG4gICAgICAgIC8vIHZlcnNpb24gYXQgd2hpY2ggdGhlIGRvY3VtZW50IHRyYW5zaXRpb25lZCB0byBhIEZPVU5EX0RPQ1VNRU5ULlxuICAgICAgICByZXR1cm4gIXRoaXMuY3JlYXRlVGltZS5pc0VxdWFsKHJ0Lm1pbigpKSB8fCAyIC8qIERvY3VtZW50VHlwZS5OT19ET0NVTUVOVCAqLyAhPT0gdGhpcy5kb2N1bWVudFR5cGUgJiYgMCAvKiBEb2N1bWVudFR5cGUuSU5WQUxJRCAqLyAhPT0gdGhpcy5kb2N1bWVudFR5cGUgfHwgKHRoaXMuY3JlYXRlVGltZSA9IHQpLCBcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdCwgdGhpcy5kb2N1bWVudFR5cGUgPSAxIC8qIERvY3VtZW50VHlwZS5GT1VORF9ET0NVTUVOVCAqLyAsIHRoaXMuZGF0YSA9IGUsIFxuICAgICAgICB0aGlzLmRvY3VtZW50U3RhdGUgPSAwIC8qIERvY3VtZW50U3RhdGUuU1lOQ0VEICovICwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgZG9jdW1lbnQgdHlwZSB0byBpbmRpY2F0ZSB0aGF0IGl0IGRvZXNuJ3QgZXhpc3QgYXQgdGhlIGdpdmVuXG4gICAgICogdmVyc2lvbi5cbiAgICAgKi8gICAgY29udmVydFRvTm9Eb2N1bWVudCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnNpb24gPSB0LCB0aGlzLmRvY3VtZW50VHlwZSA9IDIgLyogRG9jdW1lbnRUeXBlLk5PX0RPQ1VNRU5UICovICwgXG4gICAgICAgIHRoaXMuZGF0YSA9IHVuLmVtcHR5KCksIHRoaXMuZG9jdW1lbnRTdGF0ZSA9IDAgLyogRG9jdW1lbnRTdGF0ZS5TWU5DRUQgKi8gLCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBkb2N1bWVudCB0eXBlIHRvIGluZGljYXRlIHRoYXQgaXQgZXhpc3RzIGF0IGEgZ2l2ZW4gdmVyc2lvbiBidXRcbiAgICAgKiB0aGF0IGl0cyBkYXRhIGlzIG5vdCBrbm93biAoZS5nLiBhIGRvY3VtZW50IHRoYXQgd2FzIHVwZGF0ZWQgd2l0aG91dCBhIGtub3duXG4gICAgICogYmFzZSBkb2N1bWVudCkuXG4gICAgICovICAgIGNvbnZlcnRUb1Vua25vd25Eb2N1bWVudCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnNpb24gPSB0LCB0aGlzLmRvY3VtZW50VHlwZSA9IDMgLyogRG9jdW1lbnRUeXBlLlVOS05PV05fRE9DVU1FTlQgKi8gLCBcbiAgICAgICAgdGhpcy5kYXRhID0gdW4uZW1wdHkoKSwgdGhpcy5kb2N1bWVudFN0YXRlID0gMiAvKiBEb2N1bWVudFN0YXRlLkhBU19DT01NSVRURURfTVVUQVRJT05TICovICwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIHNldEhhc0NvbW1pdHRlZE11dGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRTdGF0ZSA9IDIgLyogRG9jdW1lbnRTdGF0ZS5IQVNfQ09NTUlUVEVEX01VVEFUSU9OUyAqLyAsIHRoaXM7XG4gICAgfVxuICAgIHNldEhhc0xvY2FsTXV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudFN0YXRlID0gMSAvKiBEb2N1bWVudFN0YXRlLkhBU19MT0NBTF9NVVRBVElPTlMgKi8gLCB0aGlzLnZlcnNpb24gPSBydC5taW4oKSwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIHNldFJlYWRUaW1lKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFRpbWUgPSB0LCB0aGlzO1xuICAgIH1cbiAgICBnZXQgaGFzTG9jYWxNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiAxIC8qIERvY3VtZW50U3RhdGUuSEFTX0xPQ0FMX01VVEFUSU9OUyAqLyA9PT0gdGhpcy5kb2N1bWVudFN0YXRlO1xuICAgIH1cbiAgICBnZXQgaGFzQ29tbWl0dGVkTXV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gMiAvKiBEb2N1bWVudFN0YXRlLkhBU19DT01NSVRURURfTVVUQVRJT05TICovID09PSB0aGlzLmRvY3VtZW50U3RhdGU7XG4gICAgfVxuICAgIGdldCBoYXNQZW5kaW5nV3JpdGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNMb2NhbE11dGF0aW9ucyB8fCB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucztcbiAgICB9XG4gICAgaXNWYWxpZERvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMCAvKiBEb2N1bWVudFR5cGUuSU5WQUxJRCAqLyAhPT0gdGhpcy5kb2N1bWVudFR5cGU7XG4gICAgfVxuICAgIGlzRm91bmREb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogRG9jdW1lbnRUeXBlLkZPVU5EX0RPQ1VNRU5UICovID09PSB0aGlzLmRvY3VtZW50VHlwZTtcbiAgICB9XG4gICAgaXNOb0RvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMiAvKiBEb2N1bWVudFR5cGUuTk9fRE9DVU1FTlQgKi8gPT09IHRoaXMuZG9jdW1lbnRUeXBlO1xuICAgIH1cbiAgICBpc1Vua25vd25Eb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIDMgLyogRG9jdW1lbnRUeXBlLlVOS05PV05fRE9DVU1FTlQgKi8gPT09IHRoaXMuZG9jdW1lbnRUeXBlO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBhbiAmJiB0aGlzLmtleS5pc0VxdWFsKHQua2V5KSAmJiB0aGlzLnZlcnNpb24uaXNFcXVhbCh0LnZlcnNpb24pICYmIHRoaXMuZG9jdW1lbnRUeXBlID09PSB0LmRvY3VtZW50VHlwZSAmJiB0aGlzLmRvY3VtZW50U3RhdGUgPT09IHQuZG9jdW1lbnRTdGF0ZSAmJiB0aGlzLmRhdGEuaXNFcXVhbCh0LmRhdGEpO1xuICAgIH1cbiAgICBtdXRhYmxlQ29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhbih0aGlzLmtleSwgdGhpcy5kb2N1bWVudFR5cGUsIHRoaXMudmVyc2lvbiwgdGhpcy5yZWFkVGltZSwgdGhpcy5jcmVhdGVUaW1lLCB0aGlzLmRhdGEuY2xvbmUoKSwgdGhpcy5kb2N1bWVudFN0YXRlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgRG9jdW1lbnQoJHt0aGlzLmtleX0sICR7dGhpcy52ZXJzaW9ufSwgJHtKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEudmFsdWUpfSwge2NyZWF0ZVRpbWU6ICR7dGhpcy5jcmVhdGVUaW1lfX0pLCB7ZG9jdW1lbnRUeXBlOiAke3RoaXMuZG9jdW1lbnRUeXBlfX0pLCB7ZG9jdW1lbnRTdGF0ZTogJHt0aGlzLmRvY3VtZW50U3RhdGV9fSlgO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0aGUgdmFsdWUgZm9yIGZpZWxkIGBmaWVsZGAgaW4gdGhlIHByb3ZpZGVkIGRvY3VtZW50cy4gVGhyb3dzIGlmXG4gKiB0aGUgZmllbGQgZG9lcyBub3QgZXhpc3QgaW4gYm90aCBkb2N1bWVudHMuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBib3VuZCBvZiBhIHF1ZXJ5LlxuICpcbiAqIFRoZSBib3VuZCBpcyBzcGVjaWZpZWQgd2l0aCB0aGUgZ2l2ZW4gY29tcG9uZW50cyByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBhbmRcbiAqIHdoZXRoZXIgaXQncyBqdXN0IGJlZm9yZSBvciBqdXN0IGFmdGVyIHRoZSBwb3NpdGlvbiAocmVsYXRpdmUgdG8gd2hhdGV2ZXIgdGhlXG4gKiBxdWVyeSBvcmRlciBpcykuXG4gKlxuICogVGhlIHBvc2l0aW9uIHJlcHJlc2VudHMgYSBsb2dpY2FsIGluZGV4IHBvc2l0aW9uIGZvciBhIHF1ZXJ5LiBJdCdzIGEgcHJlZml4XG4gKiBvZiB2YWx1ZXMgZm9yIHRoZSAocG90ZW50aWFsbHkgaW1wbGljaXQpIG9yZGVyIGJ5IGNsYXVzZXMgb2YgYSBxdWVyeS5cbiAqXG4gKiBCb3VuZCBwcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZG9jdW1lbnQgY29tZXMgYmVmb3JlIG9yXG4gKiBhZnRlciBhIGJvdW5kLiBUaGlzIGlzIGluZmx1ZW5jZWQgYnkgd2hldGhlciB0aGUgcG9zaXRpb24gaXMganVzdCBiZWZvcmUgb3JcbiAqIGp1c3QgYWZ0ZXIgdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAqL1xuY2xhc3MgaG4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQsIHRoaXMuaW5jbHVzaXZlID0gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxuKHQsIGUsIG4pIHtcbiAgICBsZXQgcyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0LnBvc2l0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlW2ldLCBvID0gdC5wb3NpdGlvbltpXTtcbiAgICAgICAgaWYgKHIuZmllbGQuaXNLZXlGaWVsZCgpKSBzID0gaHQuY29tcGFyYXRvcihodC5mcm9tTmFtZShvLnJlZmVyZW5jZVZhbHVlKSwgbi5rZXkpOyBlbHNlIHtcbiAgICAgICAgICAgIHMgPSBLZShvLCBuLmRhdGEuZmllbGQoci5maWVsZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImRlc2NcIiAvKiBEaXJlY3Rpb24uREVTQ0VORElORyAqLyA9PT0gci5kaXIgJiYgKHMgKj0gLTEpLCAwICE9PSBzKSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZG9jdW1lbnQgc29ydHMgYWZ0ZXIgYSBib3VuZCB1c2luZyB0aGUgcHJvdmlkZWQgc29ydFxuICogb3JkZXIuXG4gKi8gZnVuY3Rpb24gZm4odCwgZSkge1xuICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gbnVsbCA9PT0gZTtcbiAgICBpZiAobnVsbCA9PT0gZSkgcmV0dXJuICExO1xuICAgIGlmICh0LmluY2x1c2l2ZSAhPT0gZS5pbmNsdXNpdmUgfHwgdC5wb3NpdGlvbi5sZW5ndGggIT09IGUucG9zaXRpb24ubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0LnBvc2l0aW9uLmxlbmd0aDsgbisrKSB7XG4gICAgICAgIGlmICghcWUodC5wb3NpdGlvbltuXSwgZS5wb3NpdGlvbltuXSkpIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBvcmRlcmluZyBvbiBhIGZpZWxkLCBpbiBzb21lIERpcmVjdGlvbi4gRGlyZWN0aW9uIGRlZmF1bHRzIHRvIEFTQ0VORElORy5cbiAqLyBjbGFzcyBkbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSA9IFwiYXNjXCIgLyogRGlyZWN0aW9uLkFTQ0VORElORyAqLykge1xuICAgICAgICB0aGlzLmZpZWxkID0gdCwgdGhpcy5kaXIgPSBlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd24odCwgZSkge1xuICAgIHJldHVybiB0LmRpciA9PT0gZS5kaXIgJiYgdC5maWVsZC5pc0VxdWFsKGUuZmllbGQpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBfbiB7fVxuXG5jbGFzcyBtbiBleHRlbmRzIF9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZmllbGQgPSB0LCB0aGlzLm9wID0gZSwgdGhpcy52YWx1ZSA9IG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmaWx0ZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKi8gICAgc3RhdGljIGNyZWF0ZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0LmlzS2V5RmllbGQoKSA/IFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA9PT0gZSB8fCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyA9PT0gZSA/IHRoaXMuY3JlYXRlS2V5RmllbGRJbkZpbHRlcih0LCBlLCBuKSA6IG5ldyBQbih0LCBlLCBuKSA6IFwiYXJyYXktY29udGFpbnNcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOUyAqLyA9PT0gZSA/IG5ldyBEbih0LCBuKSA6IFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA9PT0gZSA/IG5ldyBDbih0LCBuKSA6IFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovID09PSBlID8gbmV3IHhuKHQsIG4pIDogXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IGUgPyBuZXcgTm4odCwgbikgOiBuZXcgbW4odCwgZSwgbik7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVLZXlGaWVsZEluRmlsdGVyKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA9PT0gZSA/IG5ldyBibih0LCBuKSA6IG5ldyBWbih0LCBuKTtcbiAgICB9XG4gICAgbWF0Y2hlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LmRhdGEuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIC8vIFR5cGVzIGRvIG5vdCBoYXZlIHRvIG1hdGNoIGluIE5PVF9FUVVBTCBmaWx0ZXJzLlxuICAgICAgICAgICAgICAgIHJldHVybiBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovID09PSB0aGlzLm9wID8gbnVsbCAhPT0gZSAmJiB0aGlzLm1hdGNoZXNDb21wYXJpc29uKEtlKGUsIHRoaXMudmFsdWUpKSA6IG51bGwgIT09IGUgJiYgTGUodGhpcy52YWx1ZSkgPT09IExlKGUpICYmIHRoaXMubWF0Y2hlc0NvbXBhcmlzb24oS2UoZSwgdGhpcy52YWx1ZSkpO1xuICAgICAgICAvLyBPbmx5IGNvbXBhcmUgdHlwZXMgd2l0aCBtYXRjaGluZyBiYWNrZW5kIG9yZGVyIChzdWNoIGFzIGRvdWJsZSBhbmQgaW50KS5cbiAgICAgICAgfVxuICAgIG1hdGNoZXNDb21wYXJpc29uKHQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIiAvKiBPcGVyYXRvci5MRVNTX1RIQU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPCAwO1xuXG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiB0IDw9IDA7XG5cbiAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gdDtcblxuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gdDtcblxuICAgICAgICAgIGNhc2UgXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovIDpcbiAgICAgICAgICAgIHJldHVybiB0ID4gMDtcblxuICAgICAgICAgIGNhc2UgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdCA+PSAwO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNJbmVxdWFsaXR5KCkge1xuICAgICAgICByZXR1cm4gWyBcIjxcIiAvKiBPcGVyYXRvci5MRVNTX1RIQU4gKi8gLCBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovICwgXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovICwgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyAsIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gLCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyBdLmluZGV4T2YodGhpcy5vcCkgPj0gMDtcbiAgICB9XG4gICAgZ2V0RmxhdHRlbmVkRmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIFsgdGhpcyBdO1xuICAgIH1cbiAgICBnZXRGaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gWyB0aGlzIF07XG4gICAgfVxuICAgIGdldEZpcnN0SW5lcXVhbGl0eUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0luZXF1YWxpdHkoKSA/IHRoaXMuZmllbGQgOiBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgZ24gZXh0ZW5kcyBfbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmZpbHRlcnMgPSB0LCB0aGlzLm9wID0gZSwgdGhpcy5sdCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmaWx0ZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKi8gICAgc3RhdGljIGNyZWF0ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgZ24odCwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICByZXR1cm4geW4odGhpcykgPyB2b2lkIDAgPT09IHRoaXMuZmlsdGVycy5maW5kKChlID0+ICFlLm1hdGNoZXModCkpKSA6IHZvaWQgMCAhPT0gdGhpcy5maWx0ZXJzLmZpbmQoKGUgPT4gZS5tYXRjaGVzKHQpKSk7XG4gICAgfVxuICAgIGdldEZsYXR0ZW5lZEZpbHRlcnMoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmx0IHx8ICh0aGlzLmx0ID0gdGhpcy5maWx0ZXJzLnJlZHVjZSgoKHQsIGUpID0+IHQuY29uY2F0KGUuZ2V0RmxhdHRlbmVkRmlsdGVycygpKSksIFtdKSksIFxuICAgICAgICB0aGlzLmx0O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgbXV0YWJsZSBjb3B5IG9mIGB0aGlzLmZpbHRlcnNgXG4gICAgZ2V0RmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oW10sIHRoaXMuZmlsdGVycyk7XG4gICAgfVxuICAgIGdldEZpcnN0SW5lcXVhbGl0eUZpZWxkKCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5mdCgodCA9PiB0LmlzSW5lcXVhbGl0eSgpKSk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ID8gdC5maWVsZCA6IG51bGw7XG4gICAgfVxuICAgIC8vIFBlcmZvcm1zIGEgZGVwdGgtZmlyc3Qgc2VhcmNoIHRvIGZpbmQgYW5kIHJldHVybiB0aGUgZmlyc3QgRmllbGRGaWx0ZXIgaW4gdGhlIGNvbXBvc2l0ZSBmaWx0ZXJcbiAgICAvLyB0aGF0IHNhdGlzZmllcyB0aGUgcHJlZGljYXRlLiBSZXR1cm5zIGBudWxsYCBpZiBub25lIG9mIHRoZSBGaWVsZEZpbHRlcnMgc2F0aXNmeSB0aGVcbiAgICAvLyBwcmVkaWNhdGUuXG4gICAgZnQodCkge1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5nZXRGbGF0dGVuZWRGaWx0ZXJzKCkpIGlmICh0KGUpKSByZXR1cm4gZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB5bih0KSB7XG4gICAgcmV0dXJuIFwiYW5kXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuQU5EICovID09PSB0Lm9wO1xufVxuXG5mdW5jdGlvbiBwbih0KSB7XG4gICAgcmV0dXJuIFwib3JcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5PUiAqLyA9PT0gdC5vcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBmaWx0ZXIgaXMgYSBjb25qdW5jdGlvbiBvZiBmaWVsZCBmaWx0ZXJzIG9ubHkuIFJldHVybnMgZmFsc2Ugb3RoZXJ3aXNlLlxuICovIGZ1bmN0aW9uIEluKHQpIHtcbiAgICByZXR1cm4gVG4odCkgJiYgeW4odCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZmlsdGVyIGRvZXMgbm90IGNvbnRhaW4gYW55IGNvbXBvc2l0ZSBmaWx0ZXJzLiBSZXR1cm5zIGZhbHNlIG90aGVyd2lzZS5cbiAqLyBmdW5jdGlvbiBUbih0KSB7XG4gICAgZm9yIChjb25zdCBlIG9mIHQuZmlsdGVycykgaWYgKGUgaW5zdGFuY2VvZiBnbikgcmV0dXJuICExO1xuICAgIHJldHVybiAhMDtcbn1cblxuZnVuY3Rpb24gRW4odCkge1xuICAgIGlmICh0IGluc3RhbmNlb2YgbW4pIFxuICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IFRlY2huaWNhbGx5LCB0aGlzIHdvbid0IGJlIHVuaXF1ZSBpZiB0d28gdmFsdWVzIGhhdmVcbiAgICAvLyB0aGUgc2FtZSBkZXNjcmlwdGlvbiwgc3VjaCBhcyB0aGUgaW50IDMgYW5kIHRoZSBzdHJpbmcgXCIzXCIuIFNvIHdlIHNob3VsZFxuICAgIC8vIGFkZCB0aGUgdHlwZXMgaW4gaGVyZSBzb21laG93LCB0b28uXG4gICAgcmV0dXJuIHQuZmllbGQuY2Fub25pY2FsU3RyaW5nKCkgKyB0Lm9wLnRvU3RyaW5nKCkgKyBRZSh0LnZhbHVlKTtcbiAgICBpZiAoSW4odCkpIFxuICAgIC8vIE9sZGVyIFNESyB2ZXJzaW9ucyB1c2UgYW4gaW1wbGljaXQgQU5EIG9wZXJhdGlvbiBiZXR3ZWVuIHRoZWlyIGZpbHRlcnMuXG4gICAgLy8gSW4gdGhlIG5ldyBTREsgdmVyc2lvbnMsIHRoZSBkZXZlbG9wZXIgbWF5IHVzZSBhbiBleHBsaWNpdCBBTkQgZmlsdGVyLlxuICAgIC8vIFRvIHN0YXkgY29uc2lzdGVudCB3aXRoIHRoZSBvbGQgdXNhZ2VzLCB3ZSBhZGQgYSBzcGVjaWFsIGNhc2UgdG8gZW5zdXJlXG4gICAgLy8gdGhlIGNhbm9uaWNhbCBJRCBmb3IgdGhlc2UgdHdvIGFyZSB0aGUgc2FtZS4gRm9yIGV4YW1wbGU6XG4gICAgLy8gYGNvbC53aGVyZUVxdWFscyhcImFcIiwgMSkud2hlcmVFcXVhbHMoXCJiXCIsIDIpYCBzaG91bGQgaGF2ZSB0aGUgc2FtZVxuICAgIC8vIGNhbm9uaWNhbCBJRCBhcyBgY29sLndoZXJlKGFuZChlcXVhbHMoXCJhXCIsMSksIGVxdWFscyhcImJcIiwyKSkpYC5cbiAgICByZXR1cm4gdC5maWx0ZXJzLm1hcCgodCA9PiBFbih0KSkpLmpvaW4oXCIsXCIpO1xuICAgIHtcbiAgICAgICAgLy8gZmlsdGVyIGluc3RhbmNlb2YgQ29tcG9zaXRlRmlsdGVyXG4gICAgICAgIGNvbnN0IGUgPSB0LmZpbHRlcnMubWFwKCh0ID0+IEVuKHQpKSkuam9pbihcIixcIik7XG4gICAgICAgIHJldHVybiBgJHt0Lm9wfSgke2V9KWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBBbih0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBtbiA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBtbiAmJiB0Lm9wID09PSBlLm9wICYmIHQuZmllbGQuaXNFcXVhbChlLmZpZWxkKSAmJiBxZSh0LnZhbHVlLCBlLnZhbHVlKTtcbiAgICB9KHQsIGUpIDogdCBpbnN0YW5jZW9mIGduID8gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGduICYmIHQub3AgPT09IGUub3AgJiYgdC5maWx0ZXJzLmxlbmd0aCA9PT0gZS5maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZmlsdGVycy5yZWR1Y2UoKCh0LCBuLCBzKSA9PiB0ICYmIEFuKG4sIGUuZmlsdGVyc1tzXSkpLCAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICAvKipcbiAqIFJldHVybnMgYSBuZXcgY29tcG9zaXRlIGZpbHRlciB0aGF0IGNvbnRhaW5zIGFsbCBmaWx0ZXIgZnJvbVxuICogYGNvbXBvc2l0ZUZpbHRlcmAgcGx1cyBhbGwgdGhlIGdpdmVuIGZpbHRlcnMgaW4gYG90aGVyRmlsdGVyc2AuXG4gKi8gKHQsIGUpIDogdm9pZCBPKCk7XG59XG5cbmZ1bmN0aW9uIHZuKHQsIGUpIHtcbiAgICBjb25zdCBuID0gdC5maWx0ZXJzLmNvbmNhdChlKTtcbiAgICByZXR1cm4gZ24uY3JlYXRlKG4sIHQub3ApO1xufVxuXG4vKiogUmV0dXJucyBhIGRlYnVnIGRlc2NyaXB0aW9uIGZvciBgZmlsdGVyYC4gKi8gZnVuY3Rpb24gUm4odCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgbW4gPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBgJHt0LmZpZWxkLmNhbm9uaWNhbFN0cmluZygpfSAke3Qub3B9ICR7UWUodC52YWx1ZSl9YDtcbiAgICB9XG4gICAgLyoqIEZpbHRlciB0aGF0IG1hdGNoZXMgb24ga2V5IGZpZWxkcyAoaS5lLiAnX19uYW1lX18nKS4gKi8gKHQpIDogdCBpbnN0YW5jZW9mIGduID8gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5vcC50b1N0cmluZygpICsgXCIge1wiICsgdC5nZXRGaWx0ZXJzKCkubWFwKFJuKS5qb2luKFwiICxcIikgKyBcIn1cIjtcbiAgICB9KHQpIDogXCJGaWx0ZXJcIjtcbn1cblxuY2xhc3MgUG4gZXh0ZW5kcyBtbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBzdXBlcih0LCBlLCBuKSwgdGhpcy5rZXkgPSBodC5mcm9tTmFtZShuLnJlZmVyZW5jZVZhbHVlKTtcbiAgICB9XG4gICAgbWF0Y2hlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBodC5jb21wYXJhdG9yKHQua2V5LCB0aGlzLmtleSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXNDb21wYXJpc29uKGUpO1xuICAgIH1cbn1cblxuLyoqIEZpbHRlciB0aGF0IG1hdGNoZXMgb24ga2V5IGZpZWxkcyB3aXRoaW4gYW4gYXJyYXkuICovIGNsYXNzIGJuIGV4dGVuZHMgbW4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgXCJpblwiIC8qIE9wZXJhdG9yLklOICovICwgZSksIHRoaXMua2V5cyA9IFNuKFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyAsIGUpO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5cy5zb21lKChlID0+IGUuaXNFcXVhbCh0LmtleSkpKTtcbiAgICB9XG59XG5cbi8qKiBGaWx0ZXIgdGhhdCBtYXRjaGVzIG9uIGtleSBmaWVsZHMgbm90IHByZXNlbnQgd2l0aGluIGFuIGFycmF5LiAqLyBjbGFzcyBWbiBleHRlbmRzIG1uIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKHQsIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovICwgZSksIHRoaXMua2V5cyA9IFNuKFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICByZXR1cm4gIXRoaXMua2V5cy5zb21lKChlID0+IGUuaXNFcXVhbCh0LmtleSkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFNuKHQsIGUpIHtcbiAgICB2YXIgbjtcbiAgICByZXR1cm4gKChudWxsID09PSAobiA9IGUuYXJyYXlWYWx1ZSkgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi52YWx1ZXMpIHx8IFtdKS5tYXAoKHQgPT4gaHQuZnJvbU5hbWUodC5yZWZlcmVuY2VWYWx1ZSkpKTtcbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgYXJyYXktY29udGFpbnMgb3BlcmF0b3IuICovIGNsYXNzIERuIGV4dGVuZHMgbW4ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovICwgZSk7XG4gICAgfVxuICAgIG1hdGNoZXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gSmUoZSkgJiYgVWUoZS5hcnJheVZhbHVlLCB0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIElOIG9wZXJhdG9yLiAqLyBjbGFzcyBDbiBleHRlbmRzIG1uIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKHQsIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyAsIGUpO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuZGF0YS5maWVsZCh0aGlzLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgVWUodGhpcy52YWx1ZS5hcnJheVZhbHVlLCBlKTtcbiAgICB9XG59XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIG5vdC1pbiBvcGVyYXRvci4gKi8gY2xhc3MgeG4gZXh0ZW5kcyBtbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyAsIGUpO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgaWYgKFVlKHRoaXMudmFsdWUuYXJyYXlWYWx1ZSwge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9KSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiAhVWUodGhpcy52YWx1ZS5hcnJheVZhbHVlLCBlKTtcbiAgICB9XG59XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIGFycmF5LWNvbnRhaW5zLWFueSBvcGVyYXRvci4gKi8gY2xhc3MgTm4gZXh0ZW5kcyBtbiB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLyAsIGUpO1xuICAgIH1cbiAgICBtYXRjaGVzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuZGF0YS5maWVsZCh0aGlzLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuICEoIUplKGUpIHx8ICFlLmFycmF5VmFsdWUudmFsdWVzKSAmJiBlLmFycmF5VmFsdWUudmFsdWVzLnNvbWUoKHQgPT4gVWUodGhpcy52YWx1ZS5hcnJheVZhbHVlLCB0KSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcbmNsYXNzIGtuIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlID0gbnVsbCwgbiA9IFtdLCBzID0gW10sIGkgPSBudWxsLCByID0gbnVsbCwgbyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gdCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAgPSBlLCB0aGlzLm9yZGVyQnkgPSBuLCB0aGlzLmZpbHRlcnMgPSBzLCB0aGlzLmxpbWl0ID0gaSwgXG4gICAgICAgIHRoaXMuc3RhcnRBdCA9IHIsIHRoaXMuZW5kQXQgPSBvLCB0aGlzLmR0ID0gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBUYXJnZXQgd2l0aCBhIHBhdGggYW5kIG9wdGlvbmFsIGFkZGl0aW9uYWwgcXVlcnkgY29uc3RyYWludHMuXG4gKiBQYXRoIG11c3QgY3VycmVudGx5IGJlIGVtcHR5IGlmIHRoaXMgaXMgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5LlxuICpcbiAqIE5PVEU6IHlvdSBzaG91bGQgYWx3YXlzIGNvbnN0cnVjdCBgVGFyZ2V0YCBmcm9tIGBRdWVyeS50b1RhcmdldGAgaW5zdGVhZCBvZlxuICogdXNpbmcgdGhpcyBmYWN0b3J5IG1ldGhvZCwgYmVjYXVzZSBgUXVlcnlgIHByb3ZpZGVzIGFuIGltcGxpY2l0IGBvcmRlckJ5YFxuICogcHJvcGVydHkuXG4gKi8gZnVuY3Rpb24gTW4odCwgZSA9IG51bGwsIG4gPSBbXSwgcyA9IFtdLCBpID0gbnVsbCwgciA9IG51bGwsIG8gPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBrbih0LCBlLCBuLCBzLCBpLCByLCBvKTtcbn1cblxuZnVuY3Rpb24gJG4odCkge1xuICAgIGNvbnN0IGUgPSBMKHQpO1xuICAgIGlmIChudWxsID09PSBlLmR0KSB7XG4gICAgICAgIGxldCB0ID0gZS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgICAgICBudWxsICE9PSBlLmNvbGxlY3Rpb25Hcm91cCAmJiAodCArPSBcInxjZzpcIiArIGUuY29sbGVjdGlvbkdyb3VwKSwgdCArPSBcInxmOlwiLCB0ICs9IGUuZmlsdGVycy5tYXAoKHQgPT4gRW4odCkpKS5qb2luKFwiLFwiKSwgXG4gICAgICAgIHQgKz0gXCJ8b2I6XCIsIHQgKz0gZS5vcmRlckJ5Lm1hcCgodCA9PiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAvLyBUT0RPKGIvMjkxODMxNjUpOiBNYWtlIHRoaXMgY29sbGlzaW9uIHJvYnVzdC5cbiAgICAgICAgICAgIHJldHVybiB0LmZpZWxkLmNhbm9uaWNhbFN0cmluZygpICsgdC5kaXI7XG4gICAgICAgIH0odCkpKS5qb2luKFwiLFwiKSwgRnQoZS5saW1pdCkgfHwgKHQgKz0gXCJ8bDpcIiwgdCArPSBlLmxpbWl0KSwgZS5zdGFydEF0ICYmICh0ICs9IFwifGxiOlwiLCBcbiAgICAgICAgdCArPSBlLnN0YXJ0QXQuaW5jbHVzaXZlID8gXCJiOlwiIDogXCJhOlwiLCB0ICs9IGUuc3RhcnRBdC5wb3NpdGlvbi5tYXAoKHQgPT4gUWUodCkpKS5qb2luKFwiLFwiKSksIFxuICAgICAgICBlLmVuZEF0ICYmICh0ICs9IFwifHViOlwiLCB0ICs9IGUuZW5kQXQuaW5jbHVzaXZlID8gXCJhOlwiIDogXCJiOlwiLCB0ICs9IGUuZW5kQXQucG9zaXRpb24ubWFwKCh0ID0+IFFlKHQpKSkuam9pbihcIixcIikpLCBcbiAgICAgICAgZS5kdCA9IHQ7XG4gICAgfVxuICAgIHJldHVybiBlLmR0O1xufVxuXG5mdW5jdGlvbiBPbih0LCBlKSB7XG4gICAgaWYgKHQubGltaXQgIT09IGUubGltaXQpIHJldHVybiAhMTtcbiAgICBpZiAodC5vcmRlckJ5Lmxlbmd0aCAhPT0gZS5vcmRlckJ5Lmxlbmd0aCkgcmV0dXJuICExO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5vcmRlckJ5Lmxlbmd0aDsgbisrKSBpZiAoIXduKHQub3JkZXJCeVtuXSwgZS5vcmRlckJ5W25dKSkgcmV0dXJuICExO1xuICAgIGlmICh0LmZpbHRlcnMubGVuZ3RoICE9PSBlLmZpbHRlcnMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0LmZpbHRlcnMubGVuZ3RoOyBuKyspIGlmICghQW4odC5maWx0ZXJzW25dLCBlLmZpbHRlcnNbbl0pKSByZXR1cm4gITE7XG4gICAgcmV0dXJuIHQuY29sbGVjdGlvbkdyb3VwID09PSBlLmNvbGxlY3Rpb25Hcm91cCAmJiAoISF0LnBhdGguaXNFcXVhbChlLnBhdGgpICYmICghIWZuKHQuc3RhcnRBdCwgZS5zdGFydEF0KSAmJiBmbih0LmVuZEF0LCBlLmVuZEF0KSkpO1xufVxuXG5mdW5jdGlvbiBGbih0KSB7XG4gICAgcmV0dXJuIGh0LmlzRG9jdW1lbnRLZXkodC5wYXRoKSAmJiBudWxsID09PSB0LmNvbGxlY3Rpb25Hcm91cCAmJiAwID09PSB0LmZpbHRlcnMubGVuZ3RoO1xufVxuXG4vKiogUmV0dXJucyB0aGUgZmllbGQgZmlsdGVycyB0aGF0IHRhcmdldCB0aGUgZ2l2ZW4gZmllbGQgcGF0aC4gKi8gZnVuY3Rpb24gQm4odCwgZSkge1xuICAgIHJldHVybiB0LmZpbHRlcnMuZmlsdGVyKCh0ID0+IHQgaW5zdGFuY2VvZiBtbiAmJiB0LmZpZWxkLmlzRXF1YWwoZSkpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZXMgdGhhdCBhcmUgdXNlZCBpbiBBUlJBWV9DT05UQUlOUyBvciBBUlJBWV9DT05UQUlOU19BTllcbiAqIGZpbHRlcnMuIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBzdWNoIGZpbHRlcnMuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgdG8gdXNlIGFzIHRoZSBsb3dlciBib3VuZCBmb3IgYXNjZW5kaW5nIGluZGV4IHNlZ21lbnQgYXRcbiAqIHRoZSBwcm92aWRlZCBgZmllbGRQYXRoYCAob3IgdGhlIHVwcGVyIGJvdW5kIGZvciBhbiBkZXNjZW5kaW5nIHNlZ21lbnQpLlxuICovXG5mdW5jdGlvbiBMbih0LCBlLCBuKSB7XG4gICAgbGV0IHMgPSBCZSwgaSA9ICEwO1xuICAgIC8vIFByb2Nlc3MgYWxsIGZpbHRlcnMgdG8gZmluZCBhIHZhbHVlIGZvciB0aGUgY3VycmVudCBmaWVsZCBzZWdtZW50XG4gICAgZm9yIChjb25zdCBuIG9mIEJuKHQsIGUpKSB7XG4gICAgICAgIGxldCB0ID0gQmUsIGUgPSAhMDtcbiAgICAgICAgc3dpdGNoIChuLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIiAvKiBPcGVyYXRvci5MRVNTX1RIQU4gKi8gOlxuICAgICAgICAgIGNhc2UgXCI8PVwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgICB0ID0gbm4obi52YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovIDpcbiAgICAgICAgICBjYXNlIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA6XG4gICAgICAgICAgY2FzZSBcIj49XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHQgPSBuLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiPlwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTiAqLyA6XG4gICAgICAgICAgICB0ID0gbi52YWx1ZSwgZSA9ICExO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gOlxuICAgICAgICAgICAgdCA9IEJlO1xuIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIGxvd2VyIGJvdW5kcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIHJuKHtcbiAgICAgICAgICAgIHZhbHVlOiBzLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBlXG4gICAgICAgIH0pIDwgMCAmJiAocyA9IHQsIGkgPSBlKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gYWRkaXRpb25hbCBib3VuZCwgY29tcGFyZSB0aGUgdmFsdWVzIGFnYWluc3QgdGhlIGV4aXN0aW5nXG4gICAgLy8gcmFuZ2UgdG8gc2VlIGlmIHdlIGNhbiBuYXJyb3cgdGhlIHNjb3BlLlxuICAgICAgICBpZiAobnVsbCAhPT0gbikgZm9yIChsZXQgciA9IDA7IHIgPCB0Lm9yZGVyQnkubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgaWYgKHQub3JkZXJCeVtyXS5maWVsZC5pc0VxdWFsKGUpKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbi5wb3NpdGlvbltyXTtcbiAgICAgICAgICAgIHJuKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcyxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IG4uaW5jbHVzaXZlXG4gICAgICAgICAgICB9KSA8IDAgJiYgKHMgPSB0LCBpID0gbi5pbmNsdXNpdmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHMsXG4gICAgICAgIGluY2x1c2l2ZTogaVxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgdG8gdXNlIGFzIHRoZSB1cHBlciBib3VuZCBmb3IgYXNjZW5kaW5nIGluZGV4IHNlZ21lbnQgYXRcbiAqIHRoZSBwcm92aWRlZCBgZmllbGRQYXRoYCAob3IgdGhlIGxvd2VyIGJvdW5kIGZvciBhIGRlc2NlbmRpbmcgc2VnbWVudCkuXG4gKi8gZnVuY3Rpb24gcW4odCwgZSwgbikge1xuICAgIGxldCBzID0gRmUsIGkgPSAhMDtcbiAgICAvLyBQcm9jZXNzIGFsbCBmaWx0ZXJzIHRvIGZpbmQgYSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgZmllbGQgc2VnbWVudFxuICAgIGZvciAoY29uc3QgbiBvZiBCbih0LCBlKSkge1xuICAgICAgICBsZXQgdCA9IEZlLCBlID0gITA7XG4gICAgICAgIHN3aXRjaCAobi5vcCkge1xuICAgICAgICAgIGNhc2UgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgY2FzZSBcIj5cIiAvKiBPcGVyYXRvci5HUkVBVEVSX1RIQU4gKi8gOlxuICAgICAgICAgICAgdCA9IHNuKG4udmFsdWUpLCBlID0gITE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovIDpcbiAgICAgICAgICBjYXNlIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA6XG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHQgPSBuLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgICB0ID0gbi52YWx1ZSwgZSA9ICExO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gOlxuICAgICAgICAgICAgdCA9IEZlO1xuIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIHVwcGVyIGJvdW5kcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIG9uKHtcbiAgICAgICAgICAgIHZhbHVlOiBzLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBlXG4gICAgICAgIH0pID4gMCAmJiAocyA9IHQsIGkgPSBlKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gYWRkaXRpb25hbCBib3VuZCwgY29tcGFyZSB0aGUgdmFsdWVzIGFnYWluc3QgdGhlIGV4aXN0aW5nXG4gICAgLy8gcmFuZ2UgdG8gc2VlIGlmIHdlIGNhbiBuYXJyb3cgdGhlIHNjb3BlLlxuICAgICAgICBpZiAobnVsbCAhPT0gbikgZm9yIChsZXQgciA9IDA7IHIgPCB0Lm9yZGVyQnkubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgaWYgKHQub3JkZXJCeVtyXS5maWVsZC5pc0VxdWFsKGUpKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbi5wb3NpdGlvbltyXTtcbiAgICAgICAgICAgIG9uKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcyxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IG4uaW5jbHVzaXZlXG4gICAgICAgICAgICB9KSA+IDAgJiYgKHMgPSB0LCBpID0gbi5pbmNsdXNpdmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHMsXG4gICAgICAgIGluY2x1c2l2ZTogaVxuICAgIH07XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2VnbWVudHMgb2YgYSBwZXJmZWN0IGluZGV4IGZvciB0aGlzIHRhcmdldC4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFF1ZXJ5IGVuY2Fwc3VsYXRlcyBhbGwgdGhlIHF1ZXJ5IGF0dHJpYnV0ZXMgd2Ugc3VwcG9ydCBpbiB0aGUgU0RLLiBJdCBjYW5cbiAqIGJlIHJ1biBhZ2FpbnN0IHRoZSBMb2NhbFN0b3JlLCBhcyB3ZWxsIGFzIGJlIGNvbnZlcnRlZCB0byBhIGBUYXJnZXRgIHRvXG4gKiBxdWVyeSB0aGUgUmVtb3RlU3RvcmUgcmVzdWx0cy5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5jbGFzcyBVbiB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBRdWVyeSB3aXRoIGEgcGF0aCBhbmQgb3B0aW9uYWwgYWRkaXRpb25hbCBxdWVyeSBjb25zdHJhaW50cy5cbiAgICAgKiBQYXRoIG11c3QgY3VycmVudGx5IGJlIGVtcHR5IGlmIHRoaXMgaXMgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUgPSBudWxsLCBuID0gW10sIHMgPSBbXSwgaSA9IG51bGwsIHIgPSBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8gLCBvID0gbnVsbCwgdSA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gdCwgdGhpcy5jb2xsZWN0aW9uR3JvdXAgPSBlLCB0aGlzLmV4cGxpY2l0T3JkZXJCeSA9IG4sIHRoaXMuZmlsdGVycyA9IHMsIFxuICAgICAgICB0aGlzLmxpbWl0ID0gaSwgdGhpcy5saW1pdFR5cGUgPSByLCB0aGlzLnN0YXJ0QXQgPSBvLCB0aGlzLmVuZEF0ID0gdSwgdGhpcy53dCA9IG51bGwsIFxuICAgICAgICAvLyBUaGUgY29ycmVzcG9uZGluZyBgVGFyZ2V0YCBvZiB0aGlzIGBRdWVyeWAgaW5zdGFuY2UuXG4gICAgICAgIHRoaXMuX3QgPSBudWxsLCB0aGlzLnN0YXJ0QXQsIHRoaXMuZW5kQXQ7XG4gICAgfVxufVxuXG4vKiogQ3JlYXRlcyBhIG5ldyBRdWVyeSBpbnN0YW5jZSB3aXRoIHRoZSBvcHRpb25zIHByb3ZpZGVkLiAqLyBmdW5jdGlvbiBLbih0LCBlLCBuLCBzLCBpLCByLCBvLCB1KSB7XG4gICAgcmV0dXJuIG5ldyBVbih0LCBlLCBuLCBzLCBpLCByLCBvLCB1KTtcbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgUXVlcnkgZm9yIGEgcXVlcnkgdGhhdCBtYXRjaGVzIGFsbCBkb2N1bWVudHMgYXQgYHBhdGhgICovIGZ1bmN0aW9uIEduKHQpIHtcbiAgICByZXR1cm4gbmV3IFVuKHQpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBjb252ZXJ0IGEgY29sbGVjdGlvbiBncm91cCBxdWVyeSBpbnRvIGEgY29sbGVjdGlvbiBxdWVyeSBhdCBhXG4gKiBzcGVjaWZpYyBwYXRoLiBUaGlzIGlzIHVzZWQgd2hlbiBleGVjdXRpbmcgY29sbGVjdGlvbiBncm91cCBxdWVyaWVzLCBzaW5jZVxuICogd2UgaGF2ZSB0byBzcGxpdCB0aGUgcXVlcnkgaW50byBhIHNldCBvZiBjb2xsZWN0aW9uIHF1ZXJpZXMgYXQgbXVsdGlwbGVcbiAqIHBhdGhzLlxuICovXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHF1ZXJ5IGRvZXMgbm90IHNwZWNpZnkgYW55IHF1ZXJ5IGNvbnN0cmFpbnRzIHRoYXRcbiAqIGNvdWxkIHJlbW92ZSByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBRbih0KSB7XG4gICAgcmV0dXJuIDAgPT09IHQuZmlsdGVycy5sZW5ndGggJiYgbnVsbCA9PT0gdC5saW1pdCAmJiBudWxsID09IHQuc3RhcnRBdCAmJiBudWxsID09IHQuZW5kQXQgJiYgKDAgPT09IHQuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCB8fCAxID09PSB0LmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggJiYgdC5leHBsaWNpdE9yZGVyQnlbMF0uZmllbGQuaXNLZXlGaWVsZCgpKTtcbn1cblxuZnVuY3Rpb24gam4odCkge1xuICAgIHJldHVybiB0LmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggPiAwID8gdC5leHBsaWNpdE9yZGVyQnlbMF0uZmllbGQgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB6bih0KSB7XG4gICAgZm9yIChjb25zdCBlIG9mIHQuZmlsdGVycykge1xuICAgICAgICBjb25zdCB0ID0gZS5nZXRGaXJzdEluZXF1YWxpdHlGaWVsZCgpO1xuICAgICAgICBpZiAobnVsbCAhPT0gdCkgcmV0dXJuIHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUXVlcnkgZm9yIGEgY29sbGVjdGlvbiBncm91cCBxdWVyeSB0aGF0IG1hdGNoZXMgYWxsIGRvY3VtZW50c1xuICogd2l0aGluIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIGdyb3VwLlxuICovXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcXVlcnkgbWF0Y2hlcyBhIGNvbGxlY3Rpb24gZ3JvdXAgcmF0aGVyIHRoYW4gYSBzcGVjaWZpY1xuICogY29sbGVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gV24odCkge1xuICAgIHJldHVybiBudWxsICE9PSB0LmNvbGxlY3Rpb25Hcm91cDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbXBsaWNpdCBvcmRlciBieSBjb25zdHJhaW50IHRoYXQgaXMgdXNlZCB0byBleGVjdXRlIHRoZSBRdWVyeSxcbiAqIHdoaWNoIGNhbiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgb3JkZXIgYnkgY29uc3RyYWludHMgdGhlIHVzZXIgcHJvdmlkZWQgKGUuZy5cbiAqIHRoZSBTREsgYW5kIGJhY2tlbmQgYWx3YXlzIG9yZGVycyBieSBgX19uYW1lX19gKS5cbiAqLyBmdW5jdGlvbiBIbih0KSB7XG4gICAgY29uc3QgZSA9IEwodCk7XG4gICAgaWYgKG51bGwgPT09IGUud3QpIHtcbiAgICAgICAgZS53dCA9IFtdO1xuICAgICAgICBjb25zdCB0ID0gem4oZSksIG4gPSBqbihlKTtcbiAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgbnVsbCA9PT0gbikgXG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGltcGxpY2l0bHkgYWRkIGtleSBvcmRlcmluZywgd2UgbXVzdCBhbHNvIGFkZCB0aGVcbiAgICAgICAgLy8gaW5lcXVhbGl0eSBmaWx0ZXIgZmllbGQgZm9yIGl0IHRvIGJlIGEgdmFsaWQgcXVlcnkuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgZGVmYXVsdCBpbmVxdWFsaXR5IGZpZWxkIGFuZCBrZXkgb3JkZXJpbmcgaXMgYXNjZW5kaW5nLlxuICAgICAgICB0LmlzS2V5RmllbGQoKSB8fCBlLnd0LnB1c2gobmV3IGRuKHQpKSwgZS53dC5wdXNoKG5ldyBkbihhdC5rZXlGaWVsZCgpLCBcImFzY1wiIC8qIERpcmVjdGlvbi5BU0NFTkRJTkcgKi8pKTsgZWxzZSB7XG4gICAgICAgICAgICBsZXQgdCA9ICExO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGUuZXhwbGljaXRPcmRlckJ5KSBlLnd0LnB1c2gobiksIG4uZmllbGQuaXNLZXlGaWVsZCgpICYmICh0ID0gITApO1xuICAgICAgICAgICAgaWYgKCF0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9yZGVyIG9mIHRoZSBpbXBsaWNpdCBrZXkgb3JkZXJpbmcgYWx3YXlzIG1hdGNoZXMgdGhlIGxhc3RcbiAgICAgICAgICAgICAgICAvLyBleHBsaWNpdCBvcmRlciBieVxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggPiAwID8gZS5leHBsaWNpdE9yZGVyQnlbZS5leHBsaWNpdE9yZGVyQnkubGVuZ3RoIC0gMV0uZGlyIDogXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovO1xuICAgICAgICAgICAgICAgIGUud3QucHVzaChuZXcgZG4oYXQua2V5RmllbGQoKSwgdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlLnd0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgYFF1ZXJ5YCBpbnN0YW5jZSB0byBpdCdzIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gSm4odCkge1xuICAgIGNvbnN0IGUgPSBMKHQpO1xuICAgIGlmICghZS5fdCkgaWYgKFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLyA9PT0gZS5saW1pdFR5cGUpIGUuX3QgPSBNbihlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBIbihlKSwgZS5maWx0ZXJzLCBlLmxpbWl0LCBlLnN0YXJ0QXQsIGUuZW5kQXQpOyBlbHNlIHtcbiAgICAgICAgLy8gRmxpcCB0aGUgb3JkZXJCeSBkaXJlY3Rpb25zIHNpbmNlIHdlIHdhbnQgdGhlIGxhc3QgcmVzdWx0c1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiBIbihlKSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovID09PSBuLmRpciA/IFwiYXNjXCIgLyogRGlyZWN0aW9uLkFTQ0VORElORyAqLyA6IFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovO1xuICAgICAgICAgICAgdC5wdXNoKG5ldyBkbihuLmZpZWxkLCBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCB0byBzd2FwIHRoZSBjdXJzb3JzIHRvIG1hdGNoIHRoZSBub3ctZmxpcHBlZCBxdWVyeSBvcmRlcmluZy5cbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5lbmRBdCA/IG5ldyBobihlLmVuZEF0LnBvc2l0aW9uLCBlLmVuZEF0LmluY2x1c2l2ZSkgOiBudWxsLCBzID0gZS5zdGFydEF0ID8gbmV3IGhuKGUuc3RhcnRBdC5wb3NpdGlvbiwgZS5zdGFydEF0LmluY2x1c2l2ZSkgOiBudWxsO1xuICAgICAgICAvLyBOb3cgcmV0dXJuIGFzIGEgTGltaXRUeXBlLkZpcnN0IHF1ZXJ5LlxuICAgICAgICBlLl90ID0gTW4oZS5wYXRoLCBlLmNvbGxlY3Rpb25Hcm91cCwgdCwgZS5maWx0ZXJzLCBlLmxpbWl0LCBuLCBzKTtcbiAgICB9XG4gICAgcmV0dXJuIGUuX3Q7XG59XG5cbmZ1bmN0aW9uIFluKHQsIGUpIHtcbiAgICBlLmdldEZpcnN0SW5lcXVhbGl0eUZpZWxkKCksIHpuKHQpO1xuICAgIGNvbnN0IG4gPSB0LmZpbHRlcnMuY29uY2F0KFsgZSBdKTtcbiAgICByZXR1cm4gbmV3IFVuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIHQuZXhwbGljaXRPcmRlckJ5LnNsaWNlKCksIG4sIHQubGltaXQsIHQubGltaXRUeXBlLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xufVxuXG5mdW5jdGlvbiBYbih0LCBlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBVbih0LnBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCB0LmZpbHRlcnMuc2xpY2UoKSwgZSwgbiwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbn1cblxuZnVuY3Rpb24gWm4odCwgZSkge1xuICAgIHJldHVybiBPbihKbih0KSwgSm4oZSkpICYmIHQubGltaXRUeXBlID09PSBlLmxpbWl0VHlwZTtcbn1cblxuLy8gVE9ETyhiLzI5MTgzMTY1KTogVGhpcyBpcyB1c2VkIHRvIGdldCBhIHVuaXF1ZSBzdHJpbmcgZnJvbSBhIHF1ZXJ5IHRvLCBmb3Jcbi8vIGV4YW1wbGUsIHVzZSBhcyBhIGRpY3Rpb25hcnkga2V5LCBidXQgdGhlIGltcGxlbWVudGF0aW9uIGlzIHN1YmplY3QgdG9cbi8vIGNvbGxpc2lvbnMuIE1ha2UgaXQgY29sbGlzaW9uLWZyZWUuXG5mdW5jdGlvbiB0cyh0KSB7XG4gICAgcmV0dXJuIGAkeyRuKEpuKHQpKX18bHQ6JHt0LmxpbWl0VHlwZX1gO1xufVxuXG5mdW5jdGlvbiBlcyh0KSB7XG4gICAgcmV0dXJuIGBRdWVyeSh0YXJnZXQ9JHtmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBlID0gdC5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdC5jb2xsZWN0aW9uR3JvdXAgJiYgKGUgKz0gXCIgY29sbGVjdGlvbkdyb3VwPVwiICsgdC5jb2xsZWN0aW9uR3JvdXApLCBcbiAgICAgICAgdC5maWx0ZXJzLmxlbmd0aCA+IDAgJiYgKGUgKz0gYCwgZmlsdGVyczogWyR7dC5maWx0ZXJzLm1hcCgodCA9PiBSbih0KSkpLmpvaW4oXCIsIFwiKX1dYCksIFxuICAgICAgICBGdCh0LmxpbWl0KSB8fCAoZSArPSBcIiwgbGltaXQ6IFwiICsgdC5saW1pdCksIHQub3JkZXJCeS5sZW5ndGggPiAwICYmIChlICs9IGAsIG9yZGVyQnk6IFske3Qub3JkZXJCeS5tYXAoKHQgPT4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3QuZmllbGQuY2Fub25pY2FsU3RyaW5nKCl9ICgke3QuZGlyfSlgO1xuICAgICAgICB9KHQpKSkuam9pbihcIiwgXCIpfV1gKSwgdC5zdGFydEF0ICYmIChlICs9IFwiLCBzdGFydEF0OiBcIiwgZSArPSB0LnN0YXJ0QXQuaW5jbHVzaXZlID8gXCJiOlwiIDogXCJhOlwiLCBcbiAgICAgICAgZSArPSB0LnN0YXJ0QXQucG9zaXRpb24ubWFwKCh0ID0+IFFlKHQpKSkuam9pbihcIixcIikpLCB0LmVuZEF0ICYmIChlICs9IFwiLCBlbmRBdDogXCIsIFxuICAgICAgICBlICs9IHQuZW5kQXQuaW5jbHVzaXZlID8gXCJhOlwiIDogXCJiOlwiLCBlICs9IHQuZW5kQXQucG9zaXRpb24ubWFwKCh0ID0+IFFlKHQpKSkuam9pbihcIixcIikpLCBcbiAgICAgICAgYFRhcmdldCgke2V9KWA7XG4gICAgfShKbih0KSl9OyBsaW1pdFR5cGU9JHt0LmxpbWl0VHlwZX0pYDtcbn1cblxuLyoqIFJldHVybnMgd2hldGhlciBgZG9jYCBtYXRjaGVzIHRoZSBjb25zdHJhaW50cyBvZiBgcXVlcnlgLiAqLyBmdW5jdGlvbiBucyh0LCBlKSB7XG4gICAgcmV0dXJuIGUuaXNGb3VuZERvY3VtZW50KCkgJiYgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZS5rZXkucGF0aDtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQuY29sbGVjdGlvbkdyb3VwID8gZS5rZXkuaGFzQ29sbGVjdGlvbklkKHQuY29sbGVjdGlvbkdyb3VwKSAmJiB0LnBhdGguaXNQcmVmaXhPZihuKSA6IGh0LmlzRG9jdW1lbnRLZXkodC5wYXRoKSA/IHQucGF0aC5pc0VxdWFsKG4pIDogdC5wYXRoLmlzSW1tZWRpYXRlUGFyZW50T2Yobik7XG4gICAgfVxuICAgIC8qKlxuICogQSBkb2N1bWVudCBtdXN0IGhhdmUgYSB2YWx1ZSBmb3IgZXZlcnkgb3JkZXJpbmcgY2xhdXNlIGluIG9yZGVyIHRvIHNob3cgdXBcbiAqIGluIHRoZSByZXN1bHRzLlxuICovICh0LCBlKSAmJiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFdlIG11c3QgdXNlIGBxdWVyeU9yZGVyQnkoKWAgdG8gZ2V0IHRoZSBsaXN0IG9mIGFsbCBvcmRlckJ5cyAoYm90aCBpbXBsaWNpdCBhbmQgZXhwbGljaXQpLlxuICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIE9SIHF1ZXJpZXMsIG9yZGVyQnkgYXBwbGllcyB0byBhbGwgZGlzanVuY3Rpb24gdGVybXMgYW5kIGltcGxpY2l0IG9yZGVyQnlzIG11c3RcbiAgICAgICAgLy8gYmUgdGFrZW4gaW50byBhY2NvdW50LiBGb3IgZXhhbXBsZSwgdGhlIHF1ZXJ5IFwiYSA+IDEgfHwgYj09MVwiIGhhcyBhbiBpbXBsaWNpdCBcIm9yZGVyQnkgYVwiIGR1ZVxuICAgICAgICAvLyB0byB0aGUgaW5lcXVhbGl0eSwgYW5kIGlzIGV2YWx1YXRlZCBhcyBcImEgPiAxIG9yZGVyQnkgYSB8fCBiPT0xIG9yZGVyQnkgYVwiLlxuICAgICAgICAvLyBBIGRvY3VtZW50IHdpdGggY29udGVudCBvZiB7YjoxfSBtYXRjaGVzIHRoZSBmaWx0ZXJzLCBidXQgZG9lcyBub3QgbWF0Y2ggdGhlIG9yZGVyQnkgYmVjYXVzZVxuICAgICAgICAvLyBpdCdzIG1pc3NpbmcgdGhlIGZpZWxkICdhJy5cbiAgICAgICAgZm9yIChjb25zdCBuIG9mIEhuKHQpKSBcbiAgICAgICAgLy8gb3JkZXIgYnkga2V5IGFsd2F5cyBtYXRjaGVzXG4gICAgICAgIGlmICghbi5maWVsZC5pc0tleUZpZWxkKCkgJiYgbnVsbCA9PT0gZS5kYXRhLmZpZWxkKG4uZmllbGQpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9KHQsIGUpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIHQuZmlsdGVycykgaWYgKCFuLm1hdGNoZXMoZSkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICAvKiogTWFrZXMgc3VyZSBhIGRvY3VtZW50IGlzIHdpdGhpbiB0aGUgYm91bmRzLCBpZiBwcm92aWRlZC4gKi8gKHQsIGUpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHQuc3RhcnRBdCAmJiAhXG4gICAgICAgIC8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZG9jdW1lbnQgc29ydHMgYmVmb3JlIGEgYm91bmQgdXNpbmcgdGhlIHByb3ZpZGVkIHNvcnRcbiAqIG9yZGVyLlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBsbih0LCBlLCBuKTtcbiAgICAgICAgICAgIHJldHVybiB0LmluY2x1c2l2ZSA/IHMgPD0gMCA6IHMgPCAwO1xuICAgICAgICB9KHQuc3RhcnRBdCwgSG4odCksIGUpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0LmVuZEF0ICYmICFmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gbG4odCwgZSwgbik7XG4gICAgICAgICAgICByZXR1cm4gdC5pbmNsdXNpdmUgPyBzID49IDAgOiBzID4gMDtcbiAgICAgICAgfSh0LmVuZEF0LCBIbih0KSwgZSkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICAvKipcbiAqIFJldHVybnMgdGhlIGNvbGxlY3Rpb24gZ3JvdXAgdGhhdCB0aGlzIHF1ZXJ5IHRhcmdldHMuXG4gKlxuICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgV2ViIFNESyB0byBmYWNpbGl0YXRlIG11bHRpLXRhYlxuICogc3luY2hyb25pemF0aW9uIGZvciBxdWVyeSByZXN1bHRzLlxuICovICh0LCBlKTtcbn1cblxuZnVuY3Rpb24gc3ModCkge1xuICAgIHJldHVybiB0LmNvbGxlY3Rpb25Hcm91cCB8fCAodC5wYXRoLmxlbmd0aCAlIDIgPT0gMSA/IHQucGF0aC5sYXN0U2VnbWVudCgpIDogdC5wYXRoLmdldCh0LnBhdGgubGVuZ3RoIC0gMikpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgY29tcGFyYXRvciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXBhcmUgdHdvIGRvY3VtZW50c1xuICogYmFzZWQgb24gdGhlIFF1ZXJ5J3Mgb3JkZXJpbmcgY29uc3RyYWludC5cbiAqLyBmdW5jdGlvbiBpcyh0KSB7XG4gICAgcmV0dXJuIChlLCBuKSA9PiB7XG4gICAgICAgIGxldCBzID0gITE7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBIbih0KSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHJzKGksIGUsIG4pO1xuICAgICAgICAgICAgaWYgKDAgIT09IHQpIHJldHVybiB0O1xuICAgICAgICAgICAgcyA9IHMgfHwgaS5maWVsZC5pc0tleUZpZWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcnModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSB0LmZpZWxkLmlzS2V5RmllbGQoKSA/IGh0LmNvbXBhcmF0b3IoZS5rZXksIG4ua2V5KSA6IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IGUuZGF0YS5maWVsZCh0KSwgaSA9IG4uZGF0YS5maWVsZCh0KTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHMgJiYgbnVsbCAhPT0gaSA/IEtlKHMsIGkpIDogTygpO1xuICAgIH0odC5maWVsZCwgZSwgbik7XG4gICAgc3dpdGNoICh0LmRpcikge1xuICAgICAgY2FzZSBcImFzY1wiIC8qIERpcmVjdGlvbi5BU0NFTkRJTkcgKi8gOlxuICAgICAgICByZXR1cm4gcztcblxuICAgICAgY2FzZSBcImRlc2NcIiAvKiBEaXJlY3Rpb24uREVTQ0VORElORyAqLyA6XG4gICAgICAgIHJldHVybiAtMSAqIHM7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIG1hcCBpbXBsZW1lbnRhdGlvbiB0aGF0IHVzZXMgb2JqZWN0cyBhcyBrZXlzLiBPYmplY3RzIG11c3QgaGF2ZSBhblxuICogYXNzb2NpYXRlZCBlcXVhbHMgZnVuY3Rpb24gYW5kIG11c3QgYmUgaW1tdXRhYmxlLiBFbnRyaWVzIGluIHRoZSBtYXAgYXJlXG4gKiBzdG9yZWQgdG9nZXRoZXIgd2l0aCB0aGUga2V5IGJlaW5nIHByb2R1Y2VkIGZyb20gdGhlIG1hcEtleUZuLiBUaGlzIG1hcFxuICogYXV0b21hdGljYWxseSBoYW5kbGVzIGNvbGxpc2lvbnMgb2Yga2V5cy5cbiAqLyBjbGFzcyBvcyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLm1hcEtleUZuID0gdCwgdGhpcy5lcXVhbHNGbiA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGlubmVyIG1hcCBmb3IgYSBrZXkvdmFsdWUgcGFpci4gRHVlIHRvIHRoZSBwb3NzaWJpbGl0eSBvZiBjb2xsaXNpb25zIHdlXG4gICAgICAgICAqIGtlZXAgYSBsaXN0IG9mIGVudHJpZXMgdGhhdCB3ZSBkbyBhIGxpbmVhciBzZWFyY2ggdGhyb3VnaCB0byBmaW5kIGFuIGFjdHVhbFxuICAgICAgICAgKiBtYXRjaC4gTm90ZSB0aGF0IGNvbGxpc2lvbnMgc2hvdWxkIGJlIHJhcmUsIHNvIHdlIHN0aWxsIGV4cGVjdCBuZWFyXG4gICAgICAgICAqIGNvbnN0YW50IHRpbWUgbG9va3VwcyBpbiBwcmFjdGljZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5uZXIgPSB7fSwgXG4gICAgICAgIC8qKiBUaGUgbnVtYmVyIG9mIGVudHJpZXMgc3RvcmVkIGluIHRoZSBtYXAgKi9cbiAgICAgICAgdGhpcy5pbm5lclNpemUgPSAwO1xuICAgIH1cbiAgICAvKiogR2V0IGEgdmFsdWUgZm9yIHRoaXMga2V5LCBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgZXhpc3QuICovICAgIGdldCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLm1hcEtleUZuKHQpLCBuID0gdGhpcy5pbm5lcltlXTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gbikgZm9yIChjb25zdCBbZSwgc10gb2YgbikgaWYgKHRoaXMuZXF1YWxzRm4oZSwgdCkpIHJldHVybiBzO1xuICAgIH1cbiAgICBoYXModCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmdldCh0KTtcbiAgICB9XG4gICAgLyoqIFB1dCB0aGlzIGtleSBhbmQgdmFsdWUgaW4gdGhlIG1hcC4gKi8gICAgc2V0KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMubWFwS2V5Rm4odCksIHMgPSB0aGlzLmlubmVyW25dO1xuICAgICAgICBpZiAodm9pZCAwID09PSBzKSByZXR1cm4gdGhpcy5pbm5lcltuXSA9IFsgWyB0LCBlIF0gXSwgdm9pZCB0aGlzLmlubmVyU2l6ZSsrO1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHMubGVuZ3RoOyBuKyspIGlmICh0aGlzLmVxdWFsc0ZuKHNbbl1bMF0sIHQpKSBcbiAgICAgICAgLy8gVGhpcyBpcyB1cGRhdGluZyBhbiBleGlzdGluZyBlbnRyeSBhbmQgZG9lcyBub3QgaW5jcmVhc2UgYGlubmVyU2l6ZWAuXG4gICAgICAgIHJldHVybiB2b2lkIChzW25dID0gWyB0LCBlIF0pO1xuICAgICAgICBzLnB1c2goWyB0LCBlIF0pLCB0aGlzLmlubmVyU2l6ZSsrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhpcyBrZXkgZnJvbSB0aGUgbWFwLiBSZXR1cm5zIGEgYm9vbGVhbiBpZiBhbnl0aGluZyB3YXMgZGVsZXRlZC5cbiAgICAgKi8gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMubWFwS2V5Rm4odCksIG4gPSB0aGlzLmlubmVyW2VdO1xuICAgICAgICBpZiAodm9pZCAwID09PSBuKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgbi5sZW5ndGg7IHMrKykgaWYgKHRoaXMuZXF1YWxzRm4obltzXVswXSwgdCkpIHJldHVybiAxID09PSBuLmxlbmd0aCA/IGRlbGV0ZSB0aGlzLmlubmVyW2VdIDogbi5zcGxpY2UocywgMSksIFxuICAgICAgICB0aGlzLmlubmVyU2l6ZS0tLCAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICBmb3JFYWNoKHQpIHtcbiAgICAgICAgZ2UodGhpcy5pbm5lciwgKChlLCBuKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlLCBzXSBvZiBuKSB0KGUsIHMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB5ZSh0aGlzLmlubmVyKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJTaXplO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgdXMgPSBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIGNzKCkge1xuICAgIHJldHVybiB1cztcbn1cblxuY29uc3QgYXMgPSBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIGhzKC4uLnQpIHtcbiAgICBsZXQgZSA9IGFzO1xuICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5pbnNlcnQobi5rZXksIG4pO1xuICAgIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBscyh0KSB7XG4gICAgbGV0IGUgPSBhcztcbiAgICByZXR1cm4gdC5mb3JFYWNoKCgodCwgbikgPT4gZSA9IGUuaW5zZXJ0KHQsIG4ub3ZlcmxheWVkRG9jdW1lbnQpKSksIGU7XG59XG5cbmZ1bmN0aW9uIGZzKCkge1xuICAgIHJldHVybiB3cygpO1xufVxuXG5mdW5jdGlvbiBkcygpIHtcbiAgICByZXR1cm4gd3MoKTtcbn1cblxuZnVuY3Rpb24gd3MoKSB7XG4gICAgcmV0dXJuIG5ldyBvcygodCA9PiB0LnRvU3RyaW5nKCkpLCAoKHQsIGUpID0+IHQuaXNFcXVhbChlKSkpO1xufVxuXG5jb25zdCBfcyA9IG5ldyBwZShodC5jb21wYXJhdG9yKTtcblxuY29uc3QgbXMgPSBuZXcgRWUoaHQuY29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIGdzKC4uLnQpIHtcbiAgICBsZXQgZSA9IG1zO1xuICAgIGZvciAoY29uc3QgbiBvZiB0KSBlID0gZS5hZGQobik7XG4gICAgcmV0dXJuIGU7XG59XG5cbmNvbnN0IHlzID0gbmV3IEVlKGV0KTtcblxuZnVuY3Rpb24gcHMoKSB7XG4gICAgcmV0dXJuIHlzO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGFuIERvdWJsZVZhbHVlIGZvciBgdmFsdWVgIHRoYXQgaXMgZW5jb2RlZCBiYXNlZCB0aGUgc2VyaWFsaXplcidzXG4gKiBgdXNlUHJvdG8zSnNvbmAgc2V0dGluZy5cbiAqLyBmdW5jdGlvbiBJcyh0LCBlKSB7XG4gICAgaWYgKHQudXNlUHJvdG8zSnNvbikge1xuICAgICAgICBpZiAoaXNOYU4oZSkpIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJOYU5cIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSA9PT0gMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJJbmZpbml0eVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlID09PSAtMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCItSW5maW5pdHlcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkb3VibGVWYWx1ZTogQnQoZSkgPyBcIi0wXCIgOiBlXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIEludGVnZXJWYWx1ZSBmb3IgYHZhbHVlYC5cbiAqLyBmdW5jdGlvbiBUcyh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZWdlclZhbHVlOiBcIlwiICsgdFxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGZvciBhIG51bWJlciB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG8gYSBwcm90by5cbiAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gSW50ZWdlclZhbHVlIGlmIGl0IGNhbiBzYWZlbHkgcmVwcmVzZW50IHRoZSB2YWx1ZSxcbiAqIG90aGVyd2lzZSBhIERvdWJsZVZhbHVlIGlzIHJldHVybmVkLlxuICovIGZ1bmN0aW9uIEVzKHQsIGUpIHtcbiAgICByZXR1cm4gTHQoZSkgPyBUcyhlKSA6IElzKHQsIGUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFVzZWQgdG8gcmVwcmVzZW50IGEgZmllbGQgdHJhbnNmb3JtIG9uIGEgbXV0YXRpb24uICovIGNsYXNzIEFzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHN0cnVjdHVyYWwgdHlwZSBvZiBgVHJhbnNmb3JtT3BlcmF0aW9uYCBpcyB1bmlxdWUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU0NTFcbiAgICAgICAgdGhpcy5fID0gdm9pZCAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbG9jYWwgdHJhbnNmb3JtIHJlc3VsdCBhZ2FpbnN0IHRoZSBwcm92aWRlZCBgcHJldmlvdXNWYWx1ZWAsXG4gKiBvcHRpb25hbGx5IHVzaW5nIHRoZSBwcm92aWRlZCBsb2NhbFdyaXRlVGltZS5cbiAqLyBmdW5jdGlvbiB2cyh0LCBlLCBuKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBicyA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIF9fdHlwZV9fOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiBcInNlcnZlcl90aW1lc3RhbXBcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX19sb2NhbF93cml0ZV90aW1lX186IHtcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHM6IHQuc2Vjb25kcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbm9zOiB0Lm5hbm9zZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIFdlIHNob3VsZCBhdm9pZCBzdG9yaW5nIGRlZXBseSBuZXN0ZWQgc2VydmVyIHRpbWVzdGFtcCBtYXAgdmFsdWVzXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgbmV2ZXIgdXNlIHRoZSBpbnRlcm1lZGlhdGUgXCJwcmV2aW91cyB2YWx1ZXNcIi5cbiAgICAgICAgLy8gRm9yIGV4YW1wbGU6XG4gICAgICAgIC8vIHByZXZpb3VzOiA0MkwsIGFkZDogdDEsIHJlc3VsdDogdDEgLT4gNDJMXG4gICAgICAgIC8vIHByZXZpb3VzOiB0MSwgIGFkZDogdDIsIHJlc3VsdDogdDIgLT4gNDJMIChOT1QgdDIgLT4gdDEgLT4gNDJMKVxuICAgICAgICAvLyBwcmV2aW91czogdDIsICBhZGQ6IHQzLCByZXN1bHQ6IHQzIC0+IDQyTCAoTk9UIHQzIC0+IHQyIC0+IHQxIC0+IDQyTClcbiAgICAgICAgLy8gYGdldFByZXZpb3VzVmFsdWVgIHJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyBzZXJ2ZXIgdGltZXN0YW1wcyB0byBmaW5kIHRoZVxuICAgICAgICAvLyBsZWFzdCByZWNlbnQgVmFsdWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgJiYgTmUoZSkgJiYgKGUgPSBrZShlKSksIGUgJiYgKG4uZmllbGRzLl9fcHJldmlvdXNfdmFsdWVfXyA9IGUpLCBcbiAgICAgICAge1xuICAgICAgICAgICAgbWFwVmFsdWU6IG5cbiAgICAgICAgfTtcbiAgICB9KG4sIGUpIDogdCBpbnN0YW5jZW9mIFZzID8gU3ModCwgZSkgOiB0IGluc3RhbmNlb2YgRHMgPyBDcyh0LCBlKSA6IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBTaW5jZSBKYXZhU2NyaXB0J3MgaW50ZWdlciBhcml0aG1ldGljIGlzIGxpbWl0ZWQgdG8gNTMgYml0XG4gICAgICAgIC8vIHByZWNpc2lvbiBhbmQgcmVzb2x2ZXMgb3ZlcmZsb3dzIGJ5IHJlZHVjaW5nIHByZWNpc2lvbiwgd2UgZG8gbm90XG4gICAgICAgIC8vIG1hbnVhbGx5IGNhcCBvdmVyZmxvd3MgYXQgMl42My5cbiAgICAgICAgY29uc3QgbiA9IFBzKHQsIGUpLCBzID0gTnMobikgKyBOcyh0Lmd0KTtcbiAgICAgICAgcmV0dXJuIEhlKG4pICYmIEhlKHQuZ3QpID8gVHMocykgOiBJcyh0LnNlcmlhbGl6ZXIsIHMpO1xuICAgIH0odCwgZSk7XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBmaW5hbCB0cmFuc2Zvcm0gcmVzdWx0IGFmdGVyIHRoZSB0cmFuc2Zvcm0gaGFzIGJlZW4gYWNrbm93bGVkZ2VkXG4gKiBieSB0aGUgc2VydmVyLCBwb3RlbnRpYWxseSB1c2luZyB0aGUgc2VydmVyLXByb3ZpZGVkIHRyYW5zZm9ybVJlc3VsdC5cbiAqLyBmdW5jdGlvbiBScyh0LCBlLCBuKSB7XG4gICAgLy8gVGhlIHNlcnZlciBqdXN0IHNlbmRzIG51bGwgYXMgdGhlIHRyYW5zZm9ybSByZXN1bHQgZm9yIGFycmF5IG9wZXJhdGlvbnMsXG4gICAgLy8gc28gd2UgaGF2ZSB0byBjYWxjdWxhdGUgYSByZXN1bHQgdGhlIHNhbWUgYXMgd2UgZG8gZm9yIGxvY2FsXG4gICAgLy8gYXBwbGljYXRpb25zLlxuICAgIHJldHVybiB0IGluc3RhbmNlb2YgVnMgPyBTcyh0LCBlKSA6IHQgaW5zdGFuY2VvZiBEcyA/IENzKHQsIGUpIDogbjtcbn1cblxuLyoqXG4gKiBJZiB0aGlzIHRyYW5zZm9ybSBvcGVyYXRpb24gaXMgbm90IGlkZW1wb3RlbnQsIHJldHVybnMgdGhlIGJhc2UgdmFsdWUgdG9cbiAqIHBlcnNpc3QgZm9yIHRoaXMgdHJhbnNmb3JtLiBJZiBhIGJhc2UgdmFsdWUgaXMgcmV0dXJuZWQsIHRoZSB0cmFuc2Zvcm1cbiAqIG9wZXJhdGlvbiBpcyBhbHdheXMgYXBwbGllZCB0byB0aGlzIGJhc2UgdmFsdWUsIGV2ZW4gaWYgZG9jdW1lbnQgaGFzXG4gKiBhbHJlYWR5IGJlZW4gdXBkYXRlZC5cbiAqXG4gKiBCYXNlIHZhbHVlcyBwcm92aWRlIGNvbnNpc3RlbnQgYmVoYXZpb3IgZm9yIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybXMgYW5kXG4gKiBhbGxvdyB1cyB0byByZXR1cm4gdGhlIHNhbWUgbGF0ZW5jeS1jb21wZW5zYXRlZCB2YWx1ZSBldmVuIGlmIHRoZSBiYWNrZW5kXG4gKiBoYXMgYWxyZWFkeSBhcHBsaWVkIHRoZSB0cmFuc2Zvcm0gb3BlcmF0aW9uLiBUaGUgYmFzZSB2YWx1ZSBpcyBudWxsIGZvclxuICogaWRlbXBvdGVudCB0cmFuc2Zvcm1zLCBhcyB0aGV5IGNhbiBiZSByZS1wbGF5ZWQgZXZlbiBpZiB0aGUgYmFja2VuZCBoYXNcbiAqIGFscmVhZHkgYXBwbGllZCB0aGVtLlxuICpcbiAqIEByZXR1cm5zIGEgYmFzZSB2YWx1ZSB0byBzdG9yZSBhbG9uZyB3aXRoIHRoZSBtdXRhdGlvbiwgb3IgbnVsbCBmb3JcbiAqIGlkZW1wb3RlbnQgdHJhbnNmb3Jtcy5cbiAqLyBmdW5jdGlvbiBQcyh0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiB4cyA/IEhlKG4gPSBlKSB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhIXQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIHQ7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBlaXRoZXIgYW4gSW50ZWdlclZhbHVlIG9yIGEgRG91YmxlVmFsdWUuICovIChuKSA/IGUgOiB7XG4gICAgICAgIGludGVnZXJWYWx1ZTogMFxuICAgIH0gOiBudWxsO1xuICAgIHZhciBuO1xufVxuXG4vKiogVHJhbnNmb3JtcyBhIHZhbHVlIGludG8gYSBzZXJ2ZXItZ2VuZXJhdGVkIHRpbWVzdGFtcC4gKi9cbmNsYXNzIGJzIGV4dGVuZHMgQXMge31cblxuLyoqIFRyYW5zZm9ybXMgYW4gYXJyYXkgdmFsdWUgdmlhIGEgdW5pb24gb3BlcmF0aW9uLiAqLyBjbGFzcyBWcyBleHRlbmRzIEFzIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZWxlbWVudHMgPSB0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gU3ModCwgZSkge1xuICAgIGNvbnN0IG4gPSBrcyhlKTtcbiAgICBmb3IgKGNvbnN0IGUgb2YgdC5lbGVtZW50cykgbi5zb21lKCh0ID0+IHFlKHQsIGUpKSkgfHwgbi5wdXNoKGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlczogblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqIFRyYW5zZm9ybXMgYW4gYXJyYXkgdmFsdWUgdmlhIGEgcmVtb3ZlIG9wZXJhdGlvbi4gKi8gY2xhc3MgRHMgZXh0ZW5kcyBBcyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmVsZW1lbnRzID0gdDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIENzKHQsIGUpIHtcbiAgICBsZXQgbiA9IGtzKGUpO1xuICAgIGZvciAoY29uc3QgZSBvZiB0LmVsZW1lbnRzKSBuID0gbi5maWx0ZXIoKHQgPT4gIXFlKHQsIGUpKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGJhY2tlbmQgc2VtYW50aWNzIGZvciBsb2NhbGx5IGNvbXB1dGVkIE5VTUVSSUNfQUREIChpbmNyZW1lbnQpXG4gKiB0cmFuc2Zvcm1zLiBDb252ZXJ0cyBhbGwgZmllbGQgdmFsdWVzIHRvIGludGVnZXJzIG9yIGRvdWJsZXMsIGJ1dCB1bmxpa2UgdGhlXG4gKiBiYWNrZW5kIGRvZXMgbm90IGNhcCBpbnRlZ2VyIHZhbHVlcyBhdCAyXjYzLiBJbnN0ZWFkLCBKYXZhU2NyaXB0IG51bWJlclxuICogYXJpdGhtZXRpYyBpcyB1c2VkIGFuZCBwcmVjaXNpb24gbG9zcyBjYW4gb2NjdXIgZm9yIHZhbHVlcyBncmVhdGVyIHRoYW4gMl41My5cbiAqLyBjbGFzcyB4cyBleHRlbmRzIEFzIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuc2VyaWFsaXplciA9IHQsIHRoaXMuZ3QgPSBlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gTnModCkge1xuICAgIHJldHVybiBDZSh0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcbn1cblxuZnVuY3Rpb24ga3ModCkge1xuICAgIHJldHVybiBKZSh0KSAmJiB0LmFycmF5VmFsdWUudmFsdWVzID8gdC5hcnJheVZhbHVlLnZhbHVlcy5zbGljZSgpIDogW107XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQSBmaWVsZCBwYXRoIGFuZCB0aGUgVHJhbnNmb3JtT3BlcmF0aW9uIHRvIHBlcmZvcm0gdXBvbiBpdC4gKi8gY2xhc3MgTXMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IHQsIHRoaXMudHJhbnNmb3JtID0gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uICRzKHQsIGUpIHtcbiAgICByZXR1cm4gdC5maWVsZC5pc0VxdWFsKGUuZmllbGQpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBWcyAmJiBlIGluc3RhbmNlb2YgVnMgfHwgdCBpbnN0YW5jZW9mIERzICYmIGUgaW5zdGFuY2VvZiBEcyA/IG50KHQuZWxlbWVudHMsIGUuZWxlbWVudHMsIHFlKSA6IHQgaW5zdGFuY2VvZiB4cyAmJiBlIGluc3RhbmNlb2YgeHMgPyBxZSh0Lmd0LCBlLmd0KSA6IHQgaW5zdGFuY2VvZiBicyAmJiBlIGluc3RhbmNlb2YgYnM7XG4gICAgfSh0LnRyYW5zZm9ybSwgZS50cmFuc2Zvcm0pO1xufVxuXG4vKiogVGhlIHJlc3VsdCBvZiBzdWNjZXNzZnVsbHkgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byB0aGUgYmFja2VuZC4gKi9cbmNsYXNzIE9zIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBhdCB3aGljaCB0aGUgbXV0YXRpb24gd2FzIGNvbW1pdHRlZDpcbiAgICAgKlxuICAgICAqIC0gRm9yIG1vc3Qgb3BlcmF0aW9ucywgdGhpcyBpcyB0aGUgdXBkYXRlVGltZSBpbiB0aGUgV3JpdGVSZXN1bHQuXG4gICAgICogLSBGb3IgZGVsZXRlcywgdGhlIGNvbW1pdFRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgKGJlY2F1c2UgZGVsZXRlcyBhcmVcbiAgICAgKiAgIG5vdCBzdG9yZWQgYW5kIGhhdmUgbm8gdXBkYXRlVGltZSkuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlc2UgdmVyc2lvbnMgY2FuIGJlIGRpZmZlcmVudDogTm8tb3Agd3JpdGVzIHdpbGwgbm90IGNoYW5nZVxuICAgICAqIHRoZSB1cGRhdGVUaW1lIGV2ZW4gdGhvdWdoIHRoZSBjb21taXRUaW1lIGFkdmFuY2VzLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHRpbmcgZmllbGRzIHJldHVybmVkIGZyb20gdGhlIGJhY2tlbmQgYWZ0ZXIgYSBtdXRhdGlvblxuICAgICAqIGNvbnRhaW5pbmcgZmllbGQgdHJhbnNmb3JtcyBoYXMgYmVlbiBjb21taXR0ZWQuIENvbnRhaW5zIG9uZSBGaWVsZFZhbHVlXG4gICAgICogZm9yIGVhY2ggRmllbGRUcmFuc2Zvcm0gdGhhdCB3YXMgaW4gdGhlIG11dGF0aW9uLlxuICAgICAqXG4gICAgICogV2lsbCBiZSBlbXB0eSBpZiB0aGUgbXV0YXRpb24gZGlkIG5vdCBjb250YWluIGFueSBmaWVsZCB0cmFuc2Zvcm1zLlxuICAgICAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdCwgdGhpcy50cmFuc2Zvcm1SZXN1bHRzID0gZTtcbiAgICB9XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHByZWNvbmRpdGlvbiBmb3IgYSBtdXRhdGlvbi4gVGhpcyBmb2xsb3dzIHRoZSBtb2RlbCB0aGF0IHRoZVxuICogYmFja2VuZCBhY2NlcHRzIHdpdGggdGhlIHNwZWNpYWwgY2FzZSBvZiBhbiBleHBsaWNpdCBcImVtcHR5XCIgcHJlY29uZGl0aW9uXG4gKiAobWVhbmluZyBubyBwcmVjb25kaXRpb24pLlxuICovIGNsYXNzIEZzIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGltZSA9IHQsIHRoaXMuZXhpc3RzID0gZTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZW1wdHkgUHJlY29uZGl0aW9uLiAqLyAgICBzdGF0aWMgbm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcztcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIHdpdGggYW4gZXhpc3RzIGZsYWcuICovICAgIHN0YXRpYyBleGlzdHModCkge1xuICAgICAgICByZXR1cm4gbmV3IEZzKHZvaWQgMCwgdCk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IFByZWNvbmRpdGlvbiBiYXNlZCBvbiBhIHZlcnNpb24gYSBkb2N1bWVudCBleGlzdHMgYXQuICovICAgIHN0YXRpYyB1cGRhdGVUaW1lKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcyh0KTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgd2hldGhlciB0aGlzIFByZWNvbmRpdGlvbiBpcyBlbXB0eS4gKi8gICAgZ2V0IGlzTm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdGhpcy51cGRhdGVUaW1lICYmIHZvaWQgMCA9PT0gdGhpcy5leGlzdHM7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leGlzdHMgPT09IHQuZXhpc3RzICYmICh0aGlzLnVwZGF0ZVRpbWUgPyAhIXQudXBkYXRlVGltZSAmJiB0aGlzLnVwZGF0ZVRpbWUuaXNFcXVhbCh0LnVwZGF0ZVRpbWUpIDogIXQudXBkYXRlVGltZSk7XG4gICAgfVxufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHRoZSBwcmVjb25kaXRpb25zIGlzIHZhbGlkIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQuICovIGZ1bmN0aW9uIEJzKHQsIGUpIHtcbiAgICByZXR1cm4gdm9pZCAwICE9PSB0LnVwZGF0ZVRpbWUgPyBlLmlzRm91bmREb2N1bWVudCgpICYmIGUudmVyc2lvbi5pc0VxdWFsKHQudXBkYXRlVGltZSkgOiB2b2lkIDAgPT09IHQuZXhpc3RzIHx8IHQuZXhpc3RzID09PSBlLmlzRm91bmREb2N1bWVudCgpO1xufVxuXG4vKipcbiAqIEEgbXV0YXRpb24gZGVzY3JpYmVzIGEgc2VsZi1jb250YWluZWQgY2hhbmdlIHRvIGEgZG9jdW1lbnQuIE11dGF0aW9ucyBjYW5cbiAqIGNyZWF0ZSwgcmVwbGFjZSwgZGVsZXRlLCBhbmQgdXBkYXRlIHN1YnNldHMgb2YgZG9jdW1lbnRzLlxuICpcbiAqIE11dGF0aW9ucyBub3Qgb25seSBhY3Qgb24gdGhlIHZhbHVlIG9mIHRoZSBkb2N1bWVudCBidXQgYWxzbyBpdHMgdmVyc2lvbi5cbiAqXG4gKiBGb3IgbG9jYWwgbXV0YXRpb25zIChtdXRhdGlvbnMgdGhhdCBoYXZlbid0IGJlZW4gY29tbWl0dGVkIHlldCksIHdlIHByZXNlcnZlXG4gKiB0aGUgZXhpc3RpbmcgdmVyc2lvbiBmb3IgU2V0IGFuZCBQYXRjaCBtdXRhdGlvbnMuIEZvciBEZWxldGUgbXV0YXRpb25zLCB3ZVxuICogcmVzZXQgdGhlIHZlcnNpb24gdG8gMC5cbiAqXG4gKiBIZXJlJ3MgdGhlIGV4cGVjdGVkIHRyYW5zaXRpb24gdGFibGUuXG4gKlxuICogTVVUQVRJT04gICAgICAgICAgIEFQUExJRUQgVE8gICAgICAgICAgICBSRVNVTFRTIElOXG4gKlxuICogU2V0TXV0YXRpb24gICAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFNldE11dGF0aW9uICAgICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgRG9jdW1lbnQodjApXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgSW52YWxpZERvY3VtZW50KHYwKSAgIERvY3VtZW50KHYwKVxuICogUGF0Y2hNdXRhdGlvbiAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBJbnZhbGlkRG9jdW1lbnQodjApICAgVW5rbm93bkRvY3VtZW50KHYzKVxuICogRGVsZXRlTXV0YXRpb24gICAgIERvY3VtZW50KHYzKSAgICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIE5vRG9jdW1lbnQodjMpICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIEludmFsaWREb2N1bWVudCh2MCkgICBOb0RvY3VtZW50KHYwKVxuICpcbiAqIEZvciBhY2tub3dsZWRnZWQgbXV0YXRpb25zLCB3ZSB1c2UgdGhlIHVwZGF0ZVRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgYXNcbiAqIHRoZSByZXN1bHRpbmcgdmVyc2lvbiBmb3IgU2V0IGFuZCBQYXRjaCBtdXRhdGlvbnMuIEFzIGRlbGV0ZXMgaGF2ZSBub1xuICogZXhwbGljaXQgdXBkYXRlIHRpbWUsIHdlIHVzZSB0aGUgY29tbWl0VGltZSBvZiB0aGUgV3JpdGVSZXNwb25zZSBmb3JcbiAqIERlbGV0ZSBtdXRhdGlvbnMuXG4gKlxuICogSWYgYSBtdXRhdGlvbiBpcyBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmQgYnV0IGZhaWxzIHRoZSBwcmVjb25kaXRpb24gY2hlY2tcbiAqIGxvY2FsbHksIHdlIHRyYW5zaXRpb24gdG8gYW4gYFVua25vd25Eb2N1bWVudGAgYW5kIHJlbHkgb24gV2F0Y2ggdG8gc2VuZCB1c1xuICogdGhlIHVwZGF0ZWQgdmVyc2lvbi5cbiAqXG4gKiBGaWVsZCB0cmFuc2Zvcm1zIGFyZSB1c2VkIG9ubHkgd2l0aCBQYXRjaCBhbmQgU2V0IE11dGF0aW9ucy4gV2UgdXNlIHRoZVxuICogYHVwZGF0ZVRyYW5zZm9ybXNgIG1lc3NhZ2UgdG8gc3RvcmUgdHJhbnNmb3JtcywgcmF0aGVyIHRoYW4gdGhlIGB0cmFuc2Zvcm1zYHNcbiAqIG1lc3NhZ2VzLlxuICpcbiAqICMjIFN1YmNsYXNzaW5nIE5vdGVzXG4gKlxuICogRXZlcnkgdHlwZSBvZiBtdXRhdGlvbiBuZWVkcyB0byBpbXBsZW1lbnQgaXRzIG93biBhcHBseVRvUmVtb3RlRG9jdW1lbnQoKSBhbmRcbiAqIGFwcGx5VG9Mb2NhbFZpZXcoKSB0byBpbXBsZW1lbnQgdGhlIGFjdHVhbCBiZWhhdmlvciBvZiBhcHBseWluZyB0aGUgbXV0YXRpb25cbiAqIHRvIHNvbWUgc291cmNlIGRvY3VtZW50IChzZWUgYHNldE11dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50KClgIGZvciBhblxuICogZXhhbXBsZSkuXG4gKi8gY2xhc3MgTHMge31cblxuLyoqXG4gKiBBIHV0aWxpdHkgbWV0aG9kIHRvIGNhbGN1bGF0ZSBhIGBNdXRhdGlvbmAgcmVwcmVzZW50aW5nIHRoZSBvdmVybGF5IGZyb20gdGhlXG4gKiBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIGFuZCBhIGBGaWVsZE1hc2tgIHJlcHJlc2VudGluZyB0aGUgZmllbGRzIHRoYXRcbiAqIGFyZSBtdXRhdGVkIGJ5IHRoZSBsb2NhbCBtdXRhdGlvbnMuXG4gKi8gZnVuY3Rpb24gcXModCwgZSkge1xuICAgIGlmICghdC5oYXNMb2NhbE11dGF0aW9ucyB8fCBlICYmIDAgPT09IGUuZmllbGRzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgLy8gbWFzayBpcyBudWxsIHdoZW4gc2V0cyBvciBkZWxldGVzIGFyZSBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IGRvY3VtZW50LlxuICAgICAgICBpZiAobnVsbCA9PT0gZSkgcmV0dXJuIHQuaXNOb0RvY3VtZW50KCkgPyBuZXcgWXModC5rZXksIEZzLm5vbmUoKSkgOiBuZXcganModC5rZXksIHQuZGF0YSwgRnMubm9uZSgpKTtcbiAgICB7XG4gICAgICAgIGNvbnN0IG4gPSB0LmRhdGEsIHMgPSB1bi5lbXB0eSgpO1xuICAgICAgICBsZXQgaSA9IG5ldyBFZShhdC5jb21wYXJhdG9yKTtcbiAgICAgICAgZm9yIChsZXQgdCBvZiBlLmZpZWxkcykgaWYgKCFpLmhhcyh0KSkge1xuICAgICAgICAgICAgbGV0IGUgPSBuLmZpZWxkKHQpO1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGRlbGV0aW5nIGEgbmVzdGVkIGZpZWxkLCB3ZSB0YWtlIHRoZSBpbW1lZGlhdGUgcGFyZW50IGFzXG4gICAgICAgICAgICAvLyB0aGUgbWFzayB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgcmVzdWx0aW5nIG11dGF0aW9uLlxuICAgICAgICAgICAgLy8gSnVzdGlmaWNhdGlvbjogTmVzdGVkIGZpZWxkcyBjYW4gY3JlYXRlIHBhcmVudCBmaWVsZHMgaW1wbGljaXRseS4gSWZcbiAgICAgICAgICAgIC8vIG9ubHkgYSBsZWFmIGVudHJ5IGlzIGRlbGV0ZWQgaW4gbGF0ZXIgbXV0YXRpb25zLCB0aGUgcGFyZW50IGZpZWxkXG4gICAgICAgICAgICAvLyBzaG91bGQgc3RpbGwgcmVtYWluLCBidXQgd2UgbWF5IGhhdmUgbG9zdCB0aGlzIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAgLy8gQ29uc2lkZXIgbXV0YXRpb24gKGZvby5iYXIgMSksIHRoZW4gbXV0YXRpb24gKGZvby5iYXIgZGVsZXRlKCkpLlxuICAgICAgICAgICAgLy8gVGhpcyBsZWF2ZXMgdGhlIGZpbmFsIHJlc3VsdCAoZm9vLCB7fSkuIERlc3BpdGUgdGhlIGZhY3QgdGhhdCBgZG9jYFxuICAgICAgICAgICAgLy8gaGFzIHRoZSBjb3JyZWN0IHJlc3VsdCwgYGZvb2AgaXMgbm90IGluIGBtYXNrYCwgYW5kIHRoZSByZXN1bHRpbmdcbiAgICAgICAgICAgIC8vIG11dGF0aW9uIHdvdWxkIG1pc3MgYGZvb2AuXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBlICYmIHQubGVuZ3RoID4gMSAmJiAodCA9IHQucG9wTGFzdCgpLCBlID0gbi5maWVsZCh0KSksIG51bGwgPT09IGUgPyBzLmRlbGV0ZSh0KSA6IHMuc2V0KHQsIGUpLCBcbiAgICAgICAgICAgIGkgPSBpLmFkZCh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHpzKHQua2V5LCBzLCBuZXcgUmUoaS50b0FycmF5KCkpLCBGcy5ub25lKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgbXV0YXRpb24gdG8gdGhlIGdpdmVuIGRvY3VtZW50IGZvciB0aGUgcHVycG9zZXMgb2YgY29tcHV0aW5nIGFcbiAqIG5ldyByZW1vdGUgZG9jdW1lbnQuIElmIHRoZSBpbnB1dCBkb2N1bWVudCBkb2Vzbid0IG1hdGNoIHRoZSBleHBlY3RlZCBzdGF0ZVxuICogKGUuZy4gaXQgaXMgaW52YWxpZCBvciBvdXRkYXRlZCksIHRoZSBkb2N1bWVudCB0eXBlIG1heSB0cmFuc2l0aW9uIHRvXG4gKiB1bmtub3duLlxuICpcbiAqIEBwYXJhbSBtdXRhdGlvbiAtIFRoZSBtdXRhdGlvbiB0byBhcHBseS5cbiAqIEBwYXJhbSBkb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0byBtdXRhdGUuIFRoZSBpbnB1dCBkb2N1bWVudCBjYW4gYmUgYW5cbiAqICAgICBpbnZhbGlkIGRvY3VtZW50IGlmIHRoZSBjbGllbnQgaGFzIG5vIGtub3dsZWRnZSBvZiB0aGUgcHJlLW11dGF0aW9uIHN0YXRlXG4gKiAgICAgb2YgdGhlIGRvY3VtZW50LlxuICogQHBhcmFtIG11dGF0aW9uUmVzdWx0IC0gVGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgbXV0YXRpb24gZnJvbSB0aGUgYmFja2VuZC5cbiAqLyBmdW5jdGlvbiBVcyh0LCBlLCBuKSB7XG4gICAgdCBpbnN0YW5jZW9mIGpzID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBVbmxpa2Ugc2V0TXV0YXRpb25BcHBseVRvTG9jYWxWaWV3LCBpZiB3ZSdyZSBhcHBseWluZyBhIG11dGF0aW9uIHRvIGFcbiAgICAgICAgLy8gcmVtb3RlIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uXG4gICAgICAgIC8vIG11c3QgaGF2ZSBoZWxkLlxuICAgICAgICBjb25zdCBzID0gdC52YWx1ZS5jbG9uZSgpLCBpID0gSHModC5maWVsZFRyYW5zZm9ybXMsIGUsIG4udHJhbnNmb3JtUmVzdWx0cyk7XG4gICAgICAgIHMuc2V0QWxsKGkpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQobi52ZXJzaW9uLCBzKS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9KHQsIGUsIG4pIDogdCBpbnN0YW5jZW9mIHpzID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAoIUJzKHQucHJlY29uZGl0aW9uLCBlKSkgXG4gICAgICAgIC8vIFNpbmNlIHRoZSBtdXRhdGlvbiB3YXMgbm90IHJlamVjdGVkLCB3ZSBrbm93IHRoYXQgdGhlIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtYXRjaGVkIG9uIHRoZSBiYWNrZW5kLiBXZSB0aGVyZWZvcmUgbXVzdCBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgdmVyc2lvblxuICAgICAgICAvLyBvZiB0aGUgZG9jdW1lbnQgaW4gb3VyIGNhY2hlIGFuZCBjb252ZXJ0IHRvIGFuIFVua25vd25Eb2N1bWVudCB3aXRoIGFcbiAgICAgICAgLy8ga25vd24gdXBkYXRlVGltZS5cbiAgICAgICAgcmV0dXJuIHZvaWQgZS5jb252ZXJ0VG9Vbmtub3duRG9jdW1lbnQobi52ZXJzaW9uKTtcbiAgICAgICAgY29uc3QgcyA9IEhzKHQuZmllbGRUcmFuc2Zvcm1zLCBlLCBuLnRyYW5zZm9ybVJlc3VsdHMpLCBpID0gZS5kYXRhO1xuICAgICAgICBpLnNldEFsbChXcyh0KSksIGkuc2V0QWxsKHMpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQobi52ZXJzaW9uLCBpKS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9KHQsIGUsIG4pIDogZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBVbmxpa2UgYXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhIHJlbW90ZVxuICAgICAgICAvLyBkb2N1bWVudCB0aGUgc2VydmVyIGhhcyBhY2NlcHRlZCB0aGUgbXV0YXRpb24gc28gdGhlIHByZWNvbmRpdGlvbiBtdXN0XG4gICAgICAgIC8vIGhhdmUgaGVsZC5cbiAgICAgICAgZS5jb252ZXJ0VG9Ob0RvY3VtZW50KG4udmVyc2lvbikuc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCk7XG4gICAgfSgwLCBlLCBuKTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgbXV0YXRpb24gdG8gdGhlIGdpdmVuIGRvY3VtZW50IGZvciB0aGUgcHVycG9zZXMgb2YgY29tcHV0aW5nXG4gKiB0aGUgbmV3IGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudC4gSWYgdGhlIGlucHV0IGRvY3VtZW50IGRvZXNuJ3QgbWF0Y2ggdGhlXG4gKiBleHBlY3RlZCBzdGF0ZSwgdGhlIGRvY3VtZW50IGlzIG5vdCBtb2RpZmllZC5cbiAqXG4gKiBAcGFyYW0gbXV0YXRpb24gLSBUaGUgbXV0YXRpb24gdG8gYXBwbHkuXG4gKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gbXV0YXRlLiBUaGUgaW5wdXQgZG9jdW1lbnQgY2FuIGJlIGFuXG4gKiAgICAgaW52YWxpZCBkb2N1bWVudCBpZiB0aGUgY2xpZW50IGhhcyBubyBrbm93bGVkZ2Ugb2YgdGhlIHByZS1tdXRhdGlvbiBzdGF0ZVxuICogICAgIG9mIHRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSBwcmV2aW91c01hc2sgLSBUaGUgZmllbGRzIHRoYXQgaGF2ZSBiZWVuIHVwZGF0ZWQgYmVmb3JlIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24uXG4gKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgLSBBIHRpbWVzdGFtcCBpbmRpY2F0aW5nIHRoZSBsb2NhbCB3cml0ZSB0aW1lIG9mIHRoZVxuICogICAgIGJhdGNoIHRoaXMgbXV0YXRpb24gaXMgYSBwYXJ0IG9mLlxuICogQHJldHVybnMgQSBgRmllbGRNYXNrYCByZXByZXNlbnRpbmcgdGhlIGZpZWxkcyB0aGF0IGFyZSBjaGFuZ2VkIGJ5IGFwcGx5aW5nIHRoaXMgbXV0YXRpb24uXG4gKi8gZnVuY3Rpb24gS3ModCwgZSwgbiwgcykge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YganMgPyBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGlmICghQnModC5wcmVjb25kaXRpb24sIGUpKSBcbiAgICAgICAgLy8gVGhlIG11dGF0aW9uIGZhaWxlZCB0byBhcHBseSAoZS5nLiBhIGRvY3VtZW50IElEIGNyZWF0ZWQgd2l0aCBhZGQoKVxuICAgICAgICAvLyBjYXVzZWQgYSBuYW1lIGNvbGxpc2lvbikuXG4gICAgICAgIHJldHVybiBuO1xuICAgICAgICBjb25zdCBpID0gdC52YWx1ZS5jbG9uZSgpLCByID0gSnModC5maWVsZFRyYW5zZm9ybXMsIHMsIGUpO1xuICAgICAgICByZXR1cm4gaS5zZXRBbGwociksIGUuY29udmVydFRvRm91bmREb2N1bWVudChlLnZlcnNpb24sIGkpLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsO1xuIC8vIFNldE11dGF0aW9uIG92ZXJ3cml0ZXMgYWxsIGZpZWxkcy5cbiAgICAgICAgfVxuICAgIC8qKlxuICogQSBtdXRhdGlvbiB0aGF0IG1vZGlmaWVzIGZpZWxkcyBvZiB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoIHRoZVxuICogZ2l2ZW4gdmFsdWVzLiBUaGUgdmFsdWVzIGFyZSBhcHBsaWVkIHRocm91Z2ggYSBmaWVsZCBtYXNrOlxuICpcbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiBib3RoIHRoZSBtYXNrIGFuZCB0aGUgdmFsdWVzLCB0aGUgY29ycmVzcG9uZGluZyBmaWVsZFxuICogICAgaXMgdXBkYXRlZC5cbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiBuZWl0aGVyIHRoZSBtYXNrIG5vciB0aGUgdmFsdWVzLCB0aGUgY29ycmVzcG9uZGluZ1xuICogICAgZmllbGQgaXMgdW5tb2RpZmllZC5cbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiB0aGUgbWFzayBidXQgbm90IGluIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkXG4gKiAgICBpcyBkZWxldGVkLlxuICogICogV2hlbiBhIGZpZWxkIGlzIG5vdCBpbiB0aGUgbWFzayBidXQgaXMgaW4gdGhlIHZhbHVlcywgdGhlIHZhbHVlcyBtYXAgaXNcbiAqICAgIGlnbm9yZWQuXG4gKi8gKHQsIGUsIG4sIHMpIDogdCBpbnN0YW5jZW9mIHpzID8gZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICBpZiAoIUJzKHQucHJlY29uZGl0aW9uLCBlKSkgcmV0dXJuIG47XG4gICAgICAgIGNvbnN0IGkgPSBKcyh0LmZpZWxkVHJhbnNmb3JtcywgcywgZSksIHIgPSBlLmRhdGE7XG4gICAgICAgIGlmIChyLnNldEFsbChXcyh0KSksIHIuc2V0QWxsKGkpLCBlLmNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQoZS52ZXJzaW9uLCByKS5zZXRIYXNMb2NhbE11dGF0aW9ucygpLCBcbiAgICAgICAgbnVsbCA9PT0gbikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuLnVuaW9uV2l0aCh0LmZpZWxkTWFzay5maWVsZHMpLnVuaW9uV2l0aCh0LmZpZWxkVHJhbnNmb3Jtcy5tYXAoKHQgPT4gdC5maWVsZCkpKTtcbiAgICB9XG4gICAgLyoqXG4gKiBSZXR1cm5zIGEgRmllbGRQYXRoL1ZhbHVlIG1hcCB3aXRoIHRoZSBjb250ZW50IG9mIHRoZSBQYXRjaE11dGF0aW9uLlxuICovICh0LCBlLCBuLCBzKSA6IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgaWYgKEJzKHQucHJlY29uZGl0aW9uLCBlKSkgcmV0dXJuIGUuY29udmVydFRvTm9Eb2N1bWVudChlLnZlcnNpb24pLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gKiBBIG11dGF0aW9uIHRoYXQgdmVyaWZpZXMgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoXG4gKiB0aGUgcHJvdmlkZWQgcHJlY29uZGl0aW9uLlxuICpcbiAqIFRoZSBgdmVyaWZ5YCBvcGVyYXRpb24gaXMgb25seSB1c2VkIGluIFRyYW5zYWN0aW9ucywgYW5kIHRoaXMgY2xhc3Mgc2VydmVzXG4gKiBwcmltYXJpbHkgdG8gZmFjaWxpdGF0ZSBzZXJpYWxpemF0aW9uIGludG8gcHJvdG9zLlxuICovICh0LCBlLCBuKTtcbn1cblxuLyoqXG4gKiBJZiB0aGlzIG11dGF0aW9uIGlzIG5vdCBpZGVtcG90ZW50LCByZXR1cm5zIHRoZSBiYXNlIHZhbHVlIHRvIHBlcnNpc3Qgd2l0aFxuICogdGhpcyBtdXRhdGlvbi4gSWYgYSBiYXNlIHZhbHVlIGlzIHJldHVybmVkLCB0aGUgbXV0YXRpb24gaXMgYWx3YXlzIGFwcGxpZWRcbiAqIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGJhc2UgdmFsdWUgaXMgYSBzcGFyc2Ugb2JqZWN0IHRoYXQgY29uc2lzdHMgb2Ygb25seSB0aGUgZG9jdW1lbnRcbiAqIGZpZWxkcyBmb3Igd2hpY2ggdGhpcyBtdXRhdGlvbiBjb250YWlucyBhIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybWF0aW9uXG4gKiAoZS5nLiBhIG51bWVyaWMgaW5jcmVtZW50KS4gVGhlIHByb3ZpZGVkIHZhbHVlIGd1YXJhbnRlZXMgY29uc2lzdGVudFxuICogYmVoYXZpb3IgZm9yIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybXMgYW5kIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZVxuICogbGF0ZW5jeS1jb21wZW5zYXRlZCB2YWx1ZSBldmVuIGlmIHRoZSBiYWNrZW5kIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlXG4gKiBtdXRhdGlvbi4gVGhlIGJhc2UgdmFsdWUgaXMgbnVsbCBmb3IgaWRlbXBvdGVudCBtdXRhdGlvbnMsIGFzIHRoZXkgY2FuIGJlXG4gKiByZS1wbGF5ZWQgZXZlbiBpZiB0aGUgYmFja2VuZCBoYXMgYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybnMgYSBiYXNlIHZhbHVlIHRvIHN0b3JlIGFsb25nIHdpdGggdGhlIG11dGF0aW9uLCBvciBudWxsIGZvclxuICogaWRlbXBvdGVudCBtdXRhdGlvbnMuXG4gKi8gZnVuY3Rpb24gR3ModCwgZSkge1xuICAgIGxldCBuID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHMgb2YgdC5maWVsZFRyYW5zZm9ybXMpIHtcbiAgICAgICAgY29uc3QgdCA9IGUuZGF0YS5maWVsZChzLmZpZWxkKSwgaSA9IFBzKHMudHJhbnNmb3JtLCB0IHx8IG51bGwpO1xuICAgICAgICBudWxsICE9IGkgJiYgKG51bGwgPT09IG4gJiYgKG4gPSB1bi5lbXB0eSgpKSwgbi5zZXQocy5maWVsZCwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gbiB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiBRcyh0LCBlKSB7XG4gICAgcmV0dXJuIHQudHlwZSA9PT0gZS50eXBlICYmICghIXQua2V5LmlzRXF1YWwoZS5rZXkpICYmICghIXQucHJlY29uZGl0aW9uLmlzRXF1YWwoZS5wcmVjb25kaXRpb24pICYmICghIWZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiB2b2lkIDAgPT09IGUgfHwgISghdCB8fCAhZSkgJiYgbnQodCwgZSwgKCh0LCBlKSA9PiAkcyh0LCBlKSkpO1xuICAgIH0odC5maWVsZFRyYW5zZm9ybXMsIGUuZmllbGRUcmFuc2Zvcm1zKSAmJiAoMCAvKiBNdXRhdGlvblR5cGUuU2V0ICovID09PSB0LnR5cGUgPyB0LnZhbHVlLmlzRXF1YWwoZS52YWx1ZSkgOiAxIC8qIE11dGF0aW9uVHlwZS5QYXRjaCAqLyAhPT0gdC50eXBlIHx8IHQuZGF0YS5pc0VxdWFsKGUuZGF0YSkgJiYgdC5maWVsZE1hc2suaXNFcXVhbChlLmZpZWxkTWFzaykpKSkpO1xufVxuXG4vKipcbiAqIEEgbXV0YXRpb24gdGhhdCBjcmVhdGVzIG9yIHJlcGxhY2VzIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5IHdpdGggdGhlXG4gKiBvYmplY3QgdmFsdWUgY29udGVudHMuXG4gKi8gY2xhc3MganMgZXh0ZW5kcyBMcyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcyA9IFtdKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMua2V5ID0gdCwgdGhpcy52YWx1ZSA9IGUsIHRoaXMucHJlY29uZGl0aW9uID0gbiwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBzLCBcbiAgICAgICAgdGhpcy50eXBlID0gMCAvKiBNdXRhdGlvblR5cGUuU2V0ICovO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgenMgZXh0ZW5kcyBMcyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSA9IFtdKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMua2V5ID0gdCwgdGhpcy5kYXRhID0gZSwgdGhpcy5maWVsZE1hc2sgPSBuLCB0aGlzLnByZWNvbmRpdGlvbiA9IHMsIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGksIHRoaXMudHlwZSA9IDEgLyogTXV0YXRpb25UeXBlLlBhdGNoICovO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkTWFzaztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFdzKHQpIHtcbiAgICBjb25zdCBlID0gbmV3IE1hcDtcbiAgICByZXR1cm4gdC5maWVsZE1hc2suZmllbGRzLmZvckVhY2goKG4gPT4ge1xuICAgICAgICBpZiAoIW4uaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gdC5kYXRhLmZpZWxkKG4pO1xuICAgICAgICAgICAgZS5zZXQobiwgcyk7XG4gICAgICAgIH1cbiAgICB9KSksIGU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGxpc3Qgb2YgXCJ0cmFuc2Zvcm0gcmVzdWx0c1wiIChhIHRyYW5zZm9ybSByZXN1bHQgaXMgYSBmaWVsZCB2YWx1ZVxuICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSB0cmFuc2Zvcm0pIGZvciB1c2UgYWZ0ZXIgYSBtdXRhdGlvblxuICogY29udGFpbmluZyB0cmFuc2Zvcm1zIGhhcyBiZWVuIGFja25vd2xlZGdlZCBieSB0aGUgc2VydmVyLlxuICpcbiAqIEBwYXJhbSBmaWVsZFRyYW5zZm9ybXMgLSBUaGUgZmllbGQgdHJhbnNmb3JtcyB0byBhcHBseSB0aGUgcmVzdWx0IHRvLlxuICogQHBhcmFtIG11dGFibGVEb2N1bWVudCAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBkb2N1bWVudCBhZnRlciBhcHBseWluZyBhbGxcbiAqIHByZXZpb3VzIG11dGF0aW9ucy5cbiAqIEBwYXJhbSBzZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzIC0gVGhlIHRyYW5zZm9ybSByZXN1bHRzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKiBAcmV0dXJucyBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgbGlzdC5cbiAqLyBmdW5jdGlvbiBIcyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IG5ldyBNYXA7XG4gICAgRih0Lmxlbmd0aCA9PT0gbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCByID0gdFtpXSwgbyA9IHIudHJhbnNmb3JtLCB1ID0gZS5kYXRhLmZpZWxkKHIuZmllbGQpO1xuICAgICAgICBzLnNldChyLmZpZWxkLCBScyhvLCB1LCBuW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBsaXN0IG9mIFwidHJhbnNmb3JtIHJlc3VsdHNcIiAoYSB0cmFuc2Zvcm0gcmVzdWx0IGlzIGEgZmllbGQgdmFsdWVcbiAqIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGEgdHJhbnNmb3JtKSBmb3IgdXNlIHdoZW4gYXBwbHlpbmcgYVxuICogdHJhbnNmb3JtIGxvY2FsbHkuXG4gKlxuICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyAtIFRoZSBmaWVsZCB0cmFuc2Zvcm1zIHRvIGFwcGx5IHRoZSByZXN1bHQgdG8uXG4gKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgLSBUaGUgbG9jYWwgdGltZSBvZiB0aGUgbXV0YXRpb24gKHVzZWQgdG9cbiAqICAgICBnZW5lcmF0ZSBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZXMpLlxuICogQHBhcmFtIG11dGFibGVEb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0byBhcHBseSB0cmFuc2Zvcm1zIG9uLlxuICogQHJldHVybnMgVGhlIHRyYW5zZm9ybSByZXN1bHRzIGxpc3QuXG4gKi8gZnVuY3Rpb24gSnModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBuZXcgTWFwO1xuICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XG4gICAgICAgIGNvbnN0IHQgPSBpLnRyYW5zZm9ybSwgciA9IG4uZGF0YS5maWVsZChpLmZpZWxkKTtcbiAgICAgICAgcy5zZXQoaS5maWVsZCwgdnModCwgciwgZSkpO1xuICAgIH1cbiAgICByZXR1cm4gcztcbn1cblxuLyoqIEEgbXV0YXRpb24gdGhhdCBkZWxldGVzIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5LiAqLyBjbGFzcyBZcyBleHRlbmRzIExzIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMua2V5ID0gdCwgdGhpcy5wcmVjb25kaXRpb24gPSBlLCB0aGlzLnR5cGUgPSAyIC8qIE11dGF0aW9uVHlwZS5EZWxldGUgKi8gLCBcbiAgICAgICAgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBbXTtcbiAgICB9XG4gICAgZ2V0RmllbGRNYXNrKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIFhzIGV4dGVuZHMgTHMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5rZXkgPSB0LCB0aGlzLnByZWNvbmRpdGlvbiA9IGUsIHRoaXMudHlwZSA9IDMgLyogTXV0YXRpb25UeXBlLlZlcmlmeSAqLyAsIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IFtdO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBiYXRjaCBvZiBtdXRhdGlvbnMgdGhhdCB3aWxsIGJlIHNlbnQgYXMgb25lIHVuaXQgdG8gdGhlIGJhY2tlbmQuXG4gKi8gY2xhc3MgWnMge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBiYXRjaElkIC0gVGhlIHVuaXF1ZSBJRCBvZiB0aGlzIG11dGF0aW9uIGJhdGNoLlxuICAgICAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSAtIFRoZSBvcmlnaW5hbCB3cml0ZSB0aW1lIG9mIHRoaXMgbXV0YXRpb24uXG4gICAgICogQHBhcmFtIGJhc2VNdXRhdGlvbnMgLSBNdXRhdGlvbnMgdGhhdCBhcmUgdXNlZCB0byBwb3B1bGF0ZSB0aGUgYmFzZVxuICAgICAqIHZhbHVlcyB3aGVuIHRoaXMgbXV0YXRpb24gaXMgYXBwbGllZCBsb2NhbGx5LiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvY2FsbHlcbiAgICAgKiBvdmVyd3JpdGUgdmFsdWVzIHRoYXQgYXJlIHBlcnNpc3RlZCBpbiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLiBCYXNlXG4gICAgICogbXV0YXRpb25zIGFyZSBuZXZlciBzZW50IHRvIHRoZSBiYWNrZW5kLlxuICAgICAqIEBwYXJhbSBtdXRhdGlvbnMgLSBUaGUgdXNlci1wcm92aWRlZCBtdXRhdGlvbnMgaW4gdGhpcyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgKiBVc2VyLXByb3ZpZGVkIG11dGF0aW9ucyBhcmUgYXBwbGllZCBib3RoIGxvY2FsbHkgYW5kIHJlbW90ZWx5IG9uIHRoZVxuICAgICAqIGJhY2tlbmQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLmJhdGNoSWQgPSB0LCB0aGlzLmxvY2FsV3JpdGVUaW1lID0gZSwgdGhpcy5iYXNlTXV0YXRpb25zID0gbiwgdGhpcy5tdXRhdGlvbnMgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFsbCB0aGUgbXV0YXRpb25zIGluIHRoaXMgTXV0YXRpb25CYXRjaCB0byB0aGUgc3BlY2lmaWVkIGRvY3VtZW50XG4gICAgICogdG8gY29tcHV0ZSB0aGUgc3RhdGUgb2YgdGhlIHJlbW90ZSBkb2N1bWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50IC0gVGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0gYmF0Y2hSZXN1bHQgLSBUaGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBNdXRhdGlvbkJhdGNoIHRvIHRoZVxuICAgICAqIGJhY2tlbmQuXG4gICAgICovICAgIGFwcGx5VG9SZW1vdGVEb2N1bWVudCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLm11dGF0aW9uUmVzdWx0cztcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0aGlzLm11dGF0aW9ucy5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMubXV0YXRpb25zW2VdO1xuICAgICAgICAgICAgaWYgKHMua2V5LmlzRXF1YWwodC5rZXkpKSB7XG4gICAgICAgICAgICAgICAgVXMocywgdCwgbltlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudCBnaXZlbiBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzXG4gICAgICogYmF0Y2guXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBtdXRhdGVkRmllbGRzIC0gRmllbGRzIHRoYXQgaGF2ZSBiZWVuIHVwZGF0ZWQgYmVmb3JlIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogQHJldHVybnMgQSBgRmllbGRNYXNrYCByZXByZXNlbnRpbmcgYWxsIHRoZSBmaWVsZHMgdGhhdCBhcmUgbXV0YXRlZC5cbiAgICAgKi8gICAgYXBwbHlUb0xvY2FsVmlldyh0LCBlKSB7XG4gICAgICAgIC8vIEZpcnN0LCBhcHBseSB0aGUgYmFzZSBzdGF0ZS4gVGhpcyBhbGxvd3MgdXMgdG8gYXBwbHkgbm9uLWlkZW1wb3RlbnRcbiAgICAgICAgLy8gdHJhbnNmb3JtIGFnYWluc3QgYSBjb25zaXN0ZW50IHNldCBvZiB2YWx1ZXMuXG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLmJhc2VNdXRhdGlvbnMpIG4ua2V5LmlzRXF1YWwodC5rZXkpICYmIChlID0gS3MobiwgdCwgZSwgdGhpcy5sb2NhbFdyaXRlVGltZSkpO1xuICAgICAgICAvLyBTZWNvbmQsIGFwcGx5IGFsbCB1c2VyLXByb3ZpZGVkIG11dGF0aW9ucy5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdGhpcy5tdXRhdGlvbnMpIG4ua2V5LmlzRXF1YWwodC5rZXkpICYmIChlID0gS3MobiwgdCwgZSwgdGhpcy5sb2NhbFdyaXRlVGltZSkpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgZm9yIGFsbCBwcm92aWRlZCBkb2N1bWVudHMgZ2l2ZW4gdGhlIG11dGF0aW9ucyBpblxuICAgICAqIHRoaXMgYmF0Y2guIFJldHVybnMgYSBgRG9jdW1lbnRLZXlgIHRvIGBNdXRhdGlvbmAgbWFwIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICogcmVwbGFjZSBhbGwgdGhlIG11dGF0aW9uIGFwcGxpY2F0aW9ucy5cbiAgICAgKi8gICAgYXBwbHlUb0xvY2FsRG9jdW1lbnRTZXQodCwgZSkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IFRoaXMgaW1wbGVtZW50YXRpb24gaXMgTyhuXjIpLiBJZiB3ZSBhcHBseSB0aGUgbXV0YXRpb25zXG4gICAgICAgIC8vIGRpcmVjdGx5IChhcyBkb25lIGluIGBhcHBseVRvTG9jYWxWaWV3KClgKSwgd2UgY2FuIHJlZHVjZSB0aGUgY29tcGxleGl0eVxuICAgICAgICAvLyB0byBPKG4pLlxuICAgICAgICBjb25zdCBuID0gZHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZvckVhY2goKHMgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0KHMua2V5KSwgciA9IGkub3ZlcmxheWVkRG9jdW1lbnQ7XG4gICAgICAgICAgICAvLyBUT0RPKG11dGFibGVkb2N1bWVudHMpOiBUaGlzIG1ldGhvZCBzaG91bGQgdGFrZSBhIE11dGFibGVEb2N1bWVudE1hcFxuICAgICAgICAgICAgLy8gYW5kIHdlIHNob3VsZCByZW1vdmUgdGhpcyBjYXN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSB0aGlzLmFwcGx5VG9Mb2NhbFZpZXcociwgaS5tdXRhdGVkRmllbGRzKTtcbiAgICAgICAgICAgIC8vIFNldCBtdXRhdGVkRmllbGRzIHRvIG51bGwgaWYgdGhlIGRvY3VtZW50IGlzIG9ubHkgZnJvbSBsb2NhbCBtdXRhdGlvbnMuXG4gICAgICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYSBTZXQgb3IgRGVsZXRlIG11dGF0aW9uLCBpbnN0ZWFkIG9mIHRyeWluZyB0byBjcmVhdGUgYVxuICAgICAgICAgICAgLy8gcGF0Y2ggbXV0YXRpb24gYXMgdGhlIG92ZXJsYXkuXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gZS5oYXMocy5rZXkpID8gbnVsbCA6IG87XG4gICAgICAgICAgICBjb25zdCB1ID0gcXMociwgbyk7XG4gICAgICAgICAgICBudWxsICE9PSB1ICYmIG4uc2V0KHMua2V5LCB1KSwgci5pc1ZhbGlkRG9jdW1lbnQoKSB8fCByLmNvbnZlcnRUb05vRG9jdW1lbnQocnQubWluKCkpO1xuICAgICAgICB9KSksIG47XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5yZWR1Y2UoKCh0LCBlKSA9PiB0LmFkZChlLmtleSkpLCBncygpKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhdGNoSWQgPT09IHQuYmF0Y2hJZCAmJiBudCh0aGlzLm11dGF0aW9ucywgdC5tdXRhdGlvbnMsICgodCwgZSkgPT4gUXModCwgZSkpKSAmJiBudCh0aGlzLmJhc2VNdXRhdGlvbnMsIHQuYmFzZU11dGF0aW9ucywgKCh0LCBlKSA9PiBRcyh0LCBlKSkpO1xuICAgIH1cbn1cblxuLyoqIFRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSBtdXRhdGlvbiBiYXRjaCB0byB0aGUgYmFja2VuZC4gKi8gY2xhc3MgdGkge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIFxuICAgIC8qKlxuICAgICAqIEEgcHJlLWNvbXB1dGVkIG1hcHBpbmcgZnJvbSBlYWNoIG11dGF0ZWQgZG9jdW1lbnQgdG8gdGhlIHJlc3VsdGluZ1xuICAgICAqIHZlcnNpb24uXG4gICAgICovXG4gICAgcykge1xuICAgICAgICB0aGlzLmJhdGNoID0gdCwgdGhpcy5jb21taXRWZXJzaW9uID0gZSwgdGhpcy5tdXRhdGlvblJlc3VsdHMgPSBuLCB0aGlzLmRvY1ZlcnNpb25zID0gcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNdXRhdGlvbkJhdGNoUmVzdWx0IGZvciB0aGUgZ2l2ZW4gYmF0Y2ggYW5kIHJlc3VsdHMuIFRoZXJlXG4gICAgICogbXVzdCBiZSBvbmUgcmVzdWx0IGZvciBlYWNoIG11dGF0aW9uIGluIHRoZSBiYXRjaC4gVGhpcyBzdGF0aWMgZmFjdG9yeVxuICAgICAqIGNhY2hlcyBhIGRvY3VtZW50PSZndDt2ZXJzaW9uIG1hcHBpbmcgKGRvY1ZlcnNpb25zKS5cbiAgICAgKi8gICAgc3RhdGljIGZyb20odCwgZSwgbikge1xuICAgICAgICBGKHQubXV0YXRpb25zLmxlbmd0aCA9PT0gbi5sZW5ndGgpO1xuICAgICAgICBsZXQgcyA9IF9zO1xuICAgICAgICBjb25zdCBpID0gdC5tdXRhdGlvbnM7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgaS5sZW5ndGg7IHQrKykgcyA9IHMuaW5zZXJ0KGlbdF0ua2V5LCBuW3RdLnZlcnNpb24pO1xuICAgICAgICByZXR1cm4gbmV3IHRpKHQsIGUsIG4sIHMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYW4gb3ZlcmxheSBjb21wdXRlZCBieSBGaXJlc3RvcmUuXG4gKlxuICogSG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgYSBtdXRhdGlvbiBhbmQgdGhlIGxhcmdlc3QgYmF0Y2ggaWQgaW4gRmlyZXN0b3JlIHdoZW5cbiAqIHRoZSBtdXRhdGlvbiB3YXMgY3JlYXRlZC5cbiAqLyBjbGFzcyBlaSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmxhcmdlc3RCYXRjaElkID0gdCwgdGhpcy5tdXRhdGlvbiA9IGU7XG4gICAgfVxuICAgIGdldEtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb24ua2V5O1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgdGhpcy5tdXRhdGlvbiA9PT0gdC5tdXRhdGlvbjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgT3ZlcmxheXtcXG4gICAgICBsYXJnZXN0QmF0Y2hJZDogJHt0aGlzLmxhcmdlc3RCYXRjaElkfSxcXG4gICAgICBtdXRhdGlvbjogJHt0aGlzLm11dGF0aW9uLnRvU3RyaW5nKCl9XFxuICAgIH1gO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEFnZ3JlZ2F0ZSB0eXBlLlxuICovIGNsYXNzIG5pIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuYWxpYXMgPSB0LCB0aGlzLnl0ID0gZSwgdGhpcy5maWVsZFBhdGggPSBuO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3Mgc2kge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IHQsIHRoaXMudW5jaGFuZ2VkTmFtZXMgPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRXJyb3IgQ29kZXMgZGVzY3JpYmluZyB0aGUgZGlmZmVyZW50IHdheXMgR1JQQyBjYW4gZmFpbC4gVGhlc2UgYXJlIGNvcGllZFxuICogZGlyZWN0bHkgZnJvbSBHUlBDJ3Mgc291cmNlcyBoZXJlOlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9iY2VlYzk0ZWE0ZmM1ZjAwODVkODEyMzVkOGUxYzA2Nzk4ZGMzNDFhL2luY2x1ZGUvZ3JwYyUyQiUyQi9pbXBsL2NvZGVnZW4vc3RhdHVzX2NvZGVfZW51bS5oXG4gKlxuICogSW1wb3J0YW50ISBUaGUgbmFtZXMgb2YgdGhlc2UgaWRlbnRpZmllcnMgbWF0dGVyIGJlY2F1c2UgdGhlIHN0cmluZyBmb3Jtc1xuICogYXJlIHVzZWQgZm9yIHJldmVyc2UgbG9va3VwcyBmcm9tIHRoZSB3ZWJjaGFubmVsIHN0cmVhbS4gRG8gTk9UIGNoYW5nZSB0aGVcbiAqIG5hbWVzIG9mIHRoZXNlIGlkZW50aWZpZXJzIG9yIGNoYW5nZSB0aGlzIGludG8gYSBjb25zdCBlbnVtLlxuICovIHZhciBpaSwgcmk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGNvZGUgcmVwcmVzZW50cyBhIHBlcm1hbmVudCBlcnJvciB3aGVuIHJlY2VpdmVkXG4gKiBpbiByZXNwb25zZSB0byBhIG5vbi13cml0ZSBvcGVyYXRpb24uXG4gKlxuICogU2VlIGlzUGVybWFuZW50V3JpdGVFcnJvciBmb3IgY2xhc3NpZnlpbmcgd3JpdGUgZXJyb3JzLlxuICovXG5mdW5jdGlvbiBvaSh0KSB7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTygpO1xuXG4gICAgICBjYXNlIHEuQ0FOQ0VMTEVEOlxuICAgICAgY2FzZSBxLlVOS05PV046XG4gICAgICBjYXNlIHEuREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICBjYXNlIHEuUkVTT1VSQ0VfRVhIQVVTVEVEOlxuICAgICAgY2FzZSBxLklOVEVSTkFMOlxuICAgICAgY2FzZSBxLlVOQVZBSUxBQkxFOlxuIC8vIFVuYXV0aGVudGljYXRlZCBtZWFucyBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIG91ciB0b2tlbiBhbmQgd2UgbmVlZFxuICAgICAgICAvLyB0byByZXRyeSB3aXRoIG5ldyBjcmVkZW50aWFscyB3aGljaCB3aWxsIGhhcHBlbiBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgICAgICBjYXNlIHEuVU5BVVRIRU5USUNBVEVEOlxuICAgICAgICByZXR1cm4gITE7XG5cbiAgICAgIGNhc2UgcS5JTlZBTElEX0FSR1VNRU5UOlxuICAgICAgY2FzZSBxLk5PVF9GT1VORDpcbiAgICAgIGNhc2UgcS5BTFJFQURZX0VYSVNUUzpcbiAgICAgIGNhc2UgcS5QRVJNSVNTSU9OX0RFTklFRDpcbiAgICAgIGNhc2UgcS5GQUlMRURfUFJFQ09ORElUSU9OOlxuIC8vIEFib3J0ZWQgbWlnaHQgYmUgcmV0cmllZCBpbiBzb21lIHNjZW5hcmlvcywgYnV0IHRoYXQgaXMgZGVwZW5kYW50IG9uXG4gICAgICAgIC8vIHRoZSBjb250ZXh0IGFuZCBzaG91bGQgaGFuZGxlZCBpbmRpdmlkdWFsbHkgYnkgdGhlIGNhbGxpbmcgY29kZS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9hcGlzL2Rlc2lnbi9lcnJvcnMuXG4gICAgICAgICAgICAgIGNhc2UgcS5BQk9SVEVEOlxuICAgICAgY2FzZSBxLk9VVF9PRl9SQU5HRTpcbiAgICAgIGNhc2UgcS5VTklNUExFTUVOVEVEOlxuICAgICAgY2FzZSBxLkRBVEFfTE9TUzpcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgY29kZSByZXByZXNlbnRzIGEgcGVybWFuZW50IGVycm9yIHdoZW4gcmVjZWl2ZWRcbiAqIGluIHJlc3BvbnNlIHRvIGEgd3JpdGUgb3BlcmF0aW9uLlxuICpcbiAqIFdyaXRlIG9wZXJhdGlvbnMgbXVzdCBiZSBoYW5kbGVkIHNwZWNpYWxseSBiZWNhdXNlIGFzIG9mIGIvMTE5NDM3NzY0LCBBQk9SVEVEXG4gKiBlcnJvcnMgb24gdGhlIHdyaXRlIHN0cmVhbSBzaG91bGQgYmUgcmV0cmllZCB0b28gKGV2ZW4gdGhvdWdoIEFCT1JURUQgZXJyb3JzXG4gKiBhcmUgbm90IGdlbmVyYWxseSByZXRyeWFibGUpLlxuICpcbiAqIE5vdGUgdGhhdCBkdXJpbmcgdGhlIGluaXRpYWwgaGFuZHNoYWtlIG9uIHRoZSB3cml0ZSBzdHJlYW0gYW4gQUJPUlRFRCBlcnJvclxuICogc2lnbmFscyB0aGF0IHdlIHNob3VsZCBkaXNjYXJkIG91ciBzdHJlYW0gdG9rZW4gKGkuZS4gaXQgaXMgcGVybWFuZW50KS4gVGhpc1xuICogbWVhbnMgYSBoYW5kc2hha2UgZXJyb3Igc2hvdWxkIGJlIGNsYXNzaWZpZWQgd2l0aCBpc1Blcm1hbmVudEVycm9yLCBhYm92ZS5cbiAqL1xuLyoqXG4gKiBNYXBzIGFuIGVycm9yIENvZGUgZnJvbSBHUlBDIHN0YXR1cyBjb2RlIG51bWJlciwgbGlrZSAwLCAxLCBvciAxNC4gVGhlc2VcbiAqIGFyZSBub3QgdGhlIHNhbWUgYXMgSFRUUCBzdGF0dXMgY29kZXMuXG4gKlxuICogQHJldHVybnMgVGhlIENvZGUgZXF1aXZhbGVudCB0byB0aGUgZ2l2ZW4gR1JQQyBzdGF0dXMgY29kZS4gRmFpbHMgaWYgdGhlcmVcbiAqICAgICBpcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gdWkodCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIFxuICAgIC8vIFRoaXMgc2hvdWxkbid0IG5vcm1hbGx5IGhhcHBlbiwgYnV0IGluIGNlcnRhaW4gZXJyb3IgY2FzZXMgKGxpa2UgdHJ5aW5nXG4gICAgLy8gdG8gc2VuZCBpbnZhbGlkIHByb3RvIG1lc3NhZ2VzKSB3ZSBtYXkgZ2V0IGFuIGVycm9yIHdpdGggbm8gR1JQQyBjb2RlLlxuICAgIHJldHVybiBrKFwiR1JQQyBlcnJvciBoYXMgbm8gLmNvZGVcIiksIHEuVU5LTk9XTjtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgaWkuT0s6XG4gICAgICAgIHJldHVybiBxLk9LO1xuXG4gICAgICBjYXNlIGlpLkNBTkNFTExFRDpcbiAgICAgICAgcmV0dXJuIHEuQ0FOQ0VMTEVEO1xuXG4gICAgICBjYXNlIGlpLlVOS05PV046XG4gICAgICAgIHJldHVybiBxLlVOS05PV047XG5cbiAgICAgIGNhc2UgaWkuREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICAgIHJldHVybiBxLkRFQURMSU5FX0VYQ0VFREVEO1xuXG4gICAgICBjYXNlIGlpLlJFU09VUkNFX0VYSEFVU1RFRDpcbiAgICAgICAgcmV0dXJuIHEuUkVTT1VSQ0VfRVhIQVVTVEVEO1xuXG4gICAgICBjYXNlIGlpLklOVEVSTkFMOlxuICAgICAgICByZXR1cm4gcS5JTlRFUk5BTDtcblxuICAgICAgY2FzZSBpaS5VTkFWQUlMQUJMRTpcbiAgICAgICAgcmV0dXJuIHEuVU5BVkFJTEFCTEU7XG5cbiAgICAgIGNhc2UgaWkuVU5BVVRIRU5USUNBVEVEOlxuICAgICAgICByZXR1cm4gcS5VTkFVVEhFTlRJQ0FURUQ7XG5cbiAgICAgIGNhc2UgaWkuSU5WQUxJRF9BUkdVTUVOVDpcbiAgICAgICAgcmV0dXJuIHEuSU5WQUxJRF9BUkdVTUVOVDtcblxuICAgICAgY2FzZSBpaS5OT1RfRk9VTkQ6XG4gICAgICAgIHJldHVybiBxLk5PVF9GT1VORDtcblxuICAgICAgY2FzZSBpaS5BTFJFQURZX0VYSVNUUzpcbiAgICAgICAgcmV0dXJuIHEuQUxSRUFEWV9FWElTVFM7XG5cbiAgICAgIGNhc2UgaWkuUEVSTUlTU0lPTl9ERU5JRUQ6XG4gICAgICAgIHJldHVybiBxLlBFUk1JU1NJT05fREVOSUVEO1xuXG4gICAgICBjYXNlIGlpLkZBSUxFRF9QUkVDT05ESVRJT046XG4gICAgICAgIHJldHVybiBxLkZBSUxFRF9QUkVDT05ESVRJT047XG5cbiAgICAgIGNhc2UgaWkuQUJPUlRFRDpcbiAgICAgICAgcmV0dXJuIHEuQUJPUlRFRDtcblxuICAgICAgY2FzZSBpaS5PVVRfT0ZfUkFOR0U6XG4gICAgICAgIHJldHVybiBxLk9VVF9PRl9SQU5HRTtcblxuICAgICAgY2FzZSBpaS5VTklNUExFTUVOVEVEOlxuICAgICAgICByZXR1cm4gcS5VTklNUExFTUVOVEVEO1xuXG4gICAgICBjYXNlIGlpLkRBVEFfTE9TUzpcbiAgICAgICAgcmV0dXJuIHEuREFUQV9MT1NTO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTygpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBIVFRQIHJlc3BvbnNlJ3MgZXJyb3Igc3RhdHVzIHRvIHRoZSBlcXVpdmFsZW50IGVycm9yIGNvZGUuXG4gKlxuICogQHBhcmFtIHN0YXR1cyAtIEFuIEhUVFAgZXJyb3IgcmVzcG9uc2Ugc3RhdHVzIChcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAqIFwiVU5LTk9XTlwiLCBldGMuKVxuICogQHJldHVybnMgVGhlIGVxdWl2YWxlbnQgQ29kZS4gTm9uLW1hdGNoaW5nIHJlc3BvbnNlcyBhcmUgbWFwcGVkIHRvXG4gKiAgICAgQ29kZS5VTktOT1dOLlxuICovIChyaSA9IGlpIHx8IChpaSA9IHt9KSlbcmkuT0sgPSAwXSA9IFwiT0tcIiwgcmlbcmkuQ0FOQ0VMTEVEID0gMV0gPSBcIkNBTkNFTExFRFwiLCBcbnJpW3JpLlVOS05PV04gPSAyXSA9IFwiVU5LTk9XTlwiLCByaVtyaS5JTlZBTElEX0FSR1VNRU5UID0gM10gPSBcIklOVkFMSURfQVJHVU1FTlRcIiwgXG5yaVtyaS5ERUFETElORV9FWENFRURFRCA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiLCByaVtyaS5OT1RfRk9VTkQgPSA1XSA9IFwiTk9UX0ZPVU5EXCIsIFxucmlbcmkuQUxSRUFEWV9FWElTVFMgPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIiwgcmlbcmkuUEVSTUlTU0lPTl9ERU5JRUQgPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIiwgXG5yaVtyaS5VTkFVVEhFTlRJQ0FURUQgPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiLCByaVtyaS5SRVNPVVJDRV9FWEhBVVNURUQgPSA4XSA9IFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCIsIFxucmlbcmkuRkFJTEVEX1BSRUNPTkRJVElPTiA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsIHJpW3JpLkFCT1JURUQgPSAxMF0gPSBcIkFCT1JURURcIiwgXG5yaVtyaS5PVVRfT0ZfUkFOR0UgPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiLCByaVtyaS5VTklNUExFTUVOVEVEID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCIsIFxucmlbcmkuSU5URVJOQUwgPSAxM10gPSBcIklOVEVSTkFMXCIsIHJpW3JpLlVOQVZBSUxBQkxFID0gMTRdID0gXCJVTkFWQUlMQUJMRVwiLCByaVtyaS5EQVRBX0xPU1MgPSAxNV0gPSBcIkRBVEFfTE9TU1wiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBNYW5hZ2VzIFwidGVzdGluZyBob29rc1wiLCBob29rcyBpbnRvIHRoZSBpbnRlcm5hbHMgb2YgdGhlIFNESyB0byB2ZXJpZnlcbiAqIGludGVybmFsIHN0YXRlIGFuZCBldmVudHMgZHVyaW5nIGludGVncmF0aW9uIHRlc3RzLiBEbyBub3QgdXNlIHRoaXMgY2xhc3NcbiAqIGV4Y2VwdCBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIHdheXMgdG8gcmV0cmlldmUgdGhlIGdsb2JhbCBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzczpcbiAqIDEuIFRoZSBgaW5zdGFuY2VgIHByb3BlcnR5LCB3aGljaCByZXR1cm5zIG51bGwgaWYgdGhlIGdsb2JhbCBzaW5nbGV0b25cbiAqICAgICAgaW5zdGFuY2UgaGFzIG5vdCBiZWVuIGNyZWF0ZWQuIFVzZSB0aGlzIHByb3BlcnR5IGlmIHRoZSBjYWxsZXIgc2hvdWxkXG4gKiAgICAgIFwiZG8gbm90aGluZ1wiIGlmIHRoZXJlIGFyZSBubyB0ZXN0aW5nIGhvb2tzIHJlZ2lzdGVyZWQsIHN1Y2ggYXMgd2hlblxuICogICAgICBkZWxpdmVyaW5nIGFuIGV2ZW50IHRvIG5vdGlmeSByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqIDIuIFRoZSBgZ2V0T3JDcmVhdGVJbnN0YW5jZSgpYCBtZXRob2QsIHdoaWNoIGNyZWF0ZXMgdGhlIGdsb2JhbCBzaW5nbGV0b25cbiAqICAgICAgaW5zdGFuY2UgaWYgaXQgaGFzIG5vdCBiZWVuIGNyZWF0ZWQuIFVzZSB0aGlzIG1ldGhvZCBpZiB0aGUgaW5zdGFuY2UgaXNcbiAqICAgICAgbmVlZGVkIHRvLCBmb3IgZXhhbXBsZSwgcmVnaXN0ZXIgYSBjYWxsYmFjay5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgY2kge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9uRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2hDYWxsYmFja3MgPSBuZXcgTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcywgb3IgbnVsbCBpZiBpdCBoYXMgbm90IGJlZW5cbiAgICAgKiBpbml0aWFsaXplZC5cbiAgICAgKi8gICAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGFpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcywgY3JlYXRpbmcgaXQgaWYgaXMgaGFzIG5ldmVyXG4gICAgICogYmVlbiBjcmVhdGVkIGJlZm9yZS5cbiAgICAgKi8gICAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiBudWxsID09PSBhaSAmJiAoYWkgPSBuZXcgY2kpLCBhaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gYmUgbm90aWZpZWQgd2hlbiBhbiBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoXG4gICAgICogb2NjdXJzIGluIHRoZSBXYXRjaCBsaXN0ZW4gc3RyZWFtLlxuICAgICAqXG4gICAgICogVGhlIHJlbGF0aXZlIG9yZGVyIGluIHdoaWNoIGNhbGxiYWNrcyBhcmUgbm90aWZpZWQgaXMgdW5zcGVjaWZpZWQ7IGRvIG5vdFxuICAgICAqIHJlbHkgb24gYW55IHBhcnRpY3VsYXIgb3JkZXJpbmcuIElmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgcmVnaXN0ZXJlZCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIHRoZW4gaXQgd2lsbCBiZSBub3RpZmllZCBtdWx0aXBsZSB0aW1lcywgb25jZSBwZXIgcmVnaXN0cmF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB1bnJlZ2lzdGVycyB0aGUgZ2l2ZW4gY2FsbGJhY2s7IG9ubHlcbiAgICAgKiB0aGUgZmlyc3QgaW52b2NhdGlvbiBvZiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gZG9lcyBhbnl0aGluZzsgYWxsIHN1YnNlcXVlbnRcbiAgICAgKiBpbnZvY2F0aW9ucyBkbyBub3RoaW5nLlxuICAgICAqLyAgICBvbkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFN5bWJvbCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5vbkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQ2FsbGJhY2tzLnNldChlLCB0KSwgKCkgPT4gdGhpcy5vbkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQ2FsbGJhY2tzLmRlbGV0ZShlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlcyBhbGwgY3VycmVudGx5LXJlZ2lzdGVyZWQgYG9uRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2hgIGNhbGxiYWNrcy5cbiAgICAgKiBAcGFyYW0gaW5mbyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaC5cbiAgICAgKi8gICAgbm90aWZ5T25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCh0KSB7XG4gICAgICAgIHRoaXMub25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaENhbGxiYWNrcy5mb3JFYWNoKChlID0+IGUodCkpKTtcbiAgICB9XG59XG5cbi8qKiBUaGUgZ2xvYmFsIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBgVGVzdGluZ0hvb2tzYC4gKi8gbGV0IGFpID0gbnVsbDtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIFBsYXRmb3JtJ3MgJ1RleHRFbmNvZGVyJyBpbXBsZW1lbnRhdGlvbi5cbiAqLyBmdW5jdGlvbiBoaSgpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyO1xufVxuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBQbGF0Zm9ybSdzICdUZXh0RGVjb2RlcicgaW1wbGVtZW50YXRpb24uXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCBsaSA9IG5ldyBJbnRlZ2VyKFsgNDI5NDk2NzI5NSwgNDI5NDk2NzI5NSBdLCAwKTtcblxuLy8gSGFzaCBhIHN0cmluZyB1c2luZyBtZDUgaGFzaGluZyBhbGdvcml0aG0uXG5mdW5jdGlvbiBmaSh0KSB7XG4gICAgY29uc3QgZSA9IGhpKCkuZW5jb2RlKHQpLCBuID0gbmV3IE1kNTtcbiAgICByZXR1cm4gbi51cGRhdGUoZSksIG5ldyBVaW50OEFycmF5KG4uZGlnZXN0KCkpO1xufVxuXG4vLyBJbnRlcnByZXQgdGhlIDE2IGJ5dGVzIGFycmF5IGFzIHR3byA2NC1iaXQgdW5zaWduZWQgaW50ZWdlcnMsIGVuY29kZWQgdXNpbmdcbi8vIDLigJlzIGNvbXBsZW1lbnQgdXNpbmcgbGl0dGxlIGVuZGlhbi5cbmZ1bmN0aW9uIGRpKHQpIHtcbiAgICBjb25zdCBlID0gbmV3IERhdGFWaWV3KHQuYnVmZmVyKSwgbiA9IGUuZ2V0VWludDMyKDAsIC8qIGxpdHRsZUVuZGlhbj0gKi8gITApLCBzID0gZS5nZXRVaW50MzIoNCwgLyogbGl0dGxlRW5kaWFuPSAqLyAhMCksIGkgPSBlLmdldFVpbnQzMig4LCAvKiBsaXR0bGVFbmRpYW49ICovICEwKSwgciA9IGUuZ2V0VWludDMyKDEyLCAvKiBsaXR0bGVFbmRpYW49ICovICEwKTtcbiAgICByZXR1cm4gWyBuZXcgSW50ZWdlcihbIG4sIHMgXSwgMCksIG5ldyBJbnRlZ2VyKFsgaSwgciBdLCAwKSBdO1xufVxuXG5jbGFzcyB3aSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBpZiAodGhpcy5iaXRtYXAgPSB0LCB0aGlzLnBhZGRpbmcgPSBlLCB0aGlzLmhhc2hDb3VudCA9IG4sIGUgPCAwIHx8IGUgPj0gOCkgdGhyb3cgbmV3IF9pKGBJbnZhbGlkIHBhZGRpbmc6ICR7ZX1gKTtcbiAgICAgICAgaWYgKG4gPCAwKSB0aHJvdyBuZXcgX2koYEludmFsaWQgaGFzaCBjb3VudDogJHtufWApO1xuICAgICAgICBpZiAodC5sZW5ndGggPiAwICYmIDAgPT09IHRoaXMuaGFzaENvdW50KSBcbiAgICAgICAgLy8gT25seSBlbXB0eSBibG9vbSBmaWx0ZXIgY2FuIGhhdmUgMCBoYXNoIGNvdW50LlxuICAgICAgICB0aHJvdyBuZXcgX2koYEludmFsaWQgaGFzaCBjb3VudDogJHtufWApO1xuICAgICAgICBpZiAoMCA9PT0gdC5sZW5ndGggJiYgMCAhPT0gZSkgXG4gICAgICAgIC8vIEVtcHR5IGJsb29tIGZpbHRlciBzaG91bGQgaGF2ZSAwIHBhZGRpbmcuXG4gICAgICAgIHRocm93IG5ldyBfaShgSW52YWxpZCBwYWRkaW5nIHdoZW4gYml0bWFwIGxlbmd0aCBpcyAwOiAke2V9YCk7XG4gICAgICAgIHRoaXMuSXQgPSA4ICogdC5sZW5ndGggLSBlLCBcbiAgICAgICAgLy8gU2V0IHRoZSBiaXQgY291bnQgaW4gSW50ZWdlciB0byBhdm9pZCByZXBldGl0aW9uIGluIG1pZ2h0Q29udGFpbigpLlxuICAgICAgICB0aGlzLlR0ID0gSW50ZWdlci5mcm9tTnVtYmVyKHRoaXMuSXQpO1xuICAgIH1cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGl0aCBoYXNoIHZhbHVlIGJhc2VkIG9uIHRoZSBoYXNoZWQgNjRiaXQgaW50ZWdlcnMsXG4gICAgLy8gYW5kIGNhbGN1bGF0ZSBpdHMgY29ycmVzcG9uZGluZyBiaXQgaW5kZXggaW4gdGhlIGJpdG1hcCB0byBiZSBjaGVja2VkLlxuICAgIEV0KHQsIGUsIG4pIHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGhhc2hlZCB2YWx1ZSBoKGkpID0gaDEgKyAoaSAqIGgyKS5cbiAgICAgICAgbGV0IHMgPSB0LmFkZChlLm11bHRpcGx5KEludGVnZXIuZnJvbU51bWJlcihuKSkpO1xuICAgICAgICAvLyBXcmFwIGlmIGhhc2ggdmFsdWUgb3ZlcmZsb3cgNjRiaXQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IHMuY29tcGFyZShsaSkgJiYgKHMgPSBuZXcgSW50ZWdlcihbIHMuZ2V0Qml0cygwKSwgcy5nZXRCaXRzKDEpIF0sIDApKSwgXG4gICAgICAgIHMubW9kdWxvKHRoaXMuVHQpLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIC8vIFJldHVybiB3aGV0aGVyIHRoZSBiaXQgb24gdGhlIGdpdmVuIGluZGV4IGluIHRoZSBiaXRtYXAgaXMgc2V0IHRvIDEuXG4gICAgQXQodCkge1xuICAgICAgICByZXR1cm4gMCAhPSAodGhpcy5iaXRtYXBbTWF0aC5mbG9vcih0IC8gOCldICYgMSA8PCB0ICUgOCk7XG4gICAgfVxuICAgIHZ0KHQpIHtcbiAgICAgICAgLy8gRW1wdHkgYml0bWFwIHNob3VsZCBhbHdheXMgcmV0dXJuIGZhbHNlIG9uIG1lbWJlcnNoaXAgY2hlY2suXG4gICAgICAgIGlmICgwID09PSB0aGlzLkl0KSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGUgPSBmaSh0KSwgW24sIHNdID0gZGkoZSk7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGhpcy5oYXNoQ291bnQ7IHQrKykge1xuICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuRXQobiwgcywgdCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuQXQoZSkpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYmxvb20gZmlsdGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuICovICAgIHN0YXRpYyBjcmVhdGUodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gdCAlIDggPT0gMCA/IDAgOiA4IC0gdCAlIDgsIGkgPSBuZXcgVWludDhBcnJheShNYXRoLmNlaWwodCAvIDgpKSwgciA9IG5ldyB3aShpLCBzLCBlKTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgodCA9PiByLmluc2VydCh0KSkpLCByO1xuICAgIH1cbiAgICBpbnNlcnQodCkge1xuICAgICAgICBpZiAoMCA9PT0gdGhpcy5JdCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBlID0gZmkodCksIFtuLCBzXSA9IGRpKGUpO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRoaXMuaGFzaENvdW50OyB0KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLkV0KG4sIHMsIHQpO1xuICAgICAgICAgICAgdGhpcy5SdChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBSdCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBNYXRoLmZsb29yKHQgLyA4KSwgbiA9IHQgJSA4O1xuICAgICAgICB0aGlzLmJpdG1hcFtlXSB8PSAxIDw8IG47XG4gICAgfVxufVxuXG5jbGFzcyBfaSBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5uYW1lID0gXCJCbG9vbUZpbHRlckVycm9yXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBldmVudCBmcm9tIHRoZSBSZW1vdGVTdG9yZS4gSXQgaXMgc3BsaXQgaW50byB0YXJnZXRDaGFuZ2VzIChjaGFuZ2VzIHRvIHRoZVxuICogc3RhdGUgb3IgdGhlIHNldCBvZiBkb2N1bWVudHMgaW4gb3VyIHdhdGNoZWQgdGFyZ2V0cykgYW5kIGRvY3VtZW50VXBkYXRlc1xuICogKGNoYW5nZXMgdG8gdGhlIGFjdHVhbCBkb2N1bWVudHMpLlxuICovIGNsYXNzIG1pIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgc25hcHNob3QgdmVyc2lvbiB0aGlzIGV2ZW50IGJyaW5ncyB1cyB1cCB0bywgb3IgTUlOIGlmIG5vdCBzZXQuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogQSBtYXAgZnJvbSB0YXJnZXQgdG8gY2hhbmdlcyB0byB0aGUgdGFyZ2V0LiBTZWUgVGFyZ2V0Q2hhbmdlLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRhcmdldHMgdGhhdCBpcyBrbm93biB0byBiZSBpbmNvbnNpc3RlbnQsIGFuZCB0aGUgcHVycG9zZSBmb3JcbiAgICAgKiByZS1saXN0ZW5pbmcuIExpc3RlbnMgZm9yIHRoZXNlIHRhcmdldHMgc2hvdWxkIGJlIHJlLWVzdGFibGlzaGVkIHdpdGhvdXRcbiAgICAgKiByZXN1bWUgdG9rZW5zLlxuICAgICAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHdoaWNoIGRvY3VtZW50cyBoYXZlIGNoYW5nZWQgb3IgYmVlbiBkZWxldGVkLCBhbG9uZyB3aXRoIHRoZVxuICAgICAqIGRvYydzIG5ldyB2YWx1ZXMgKGlmIG5vdCBkZWxldGVkKS5cbiAgICAgKi9cbiAgICBzLCBcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiB3aGljaCBkb2N1bWVudCB1cGRhdGVzIGFyZSBkdWUgb25seSB0byBsaW1ibyByZXNvbHV0aW9uIHRhcmdldHMuXG4gICAgICovXG4gICAgaSkge1xuICAgICAgICB0aGlzLnNuYXBzaG90VmVyc2lvbiA9IHQsIHRoaXMudGFyZ2V0Q2hhbmdlcyA9IGUsIHRoaXMudGFyZ2V0TWlzbWF0Y2hlcyA9IG4sIHRoaXMuZG9jdW1lbnRVcGRhdGVzID0gcywgXG4gICAgICAgIHRoaXMucmVzb2x2ZWRMaW1ib0RvY3VtZW50cyA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhBQ0s6IFZpZXdzIHJlcXVpcmUgUmVtb3RlRXZlbnRzIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB2aWV3IGlzXG4gICAgICogQ1VSUkVOVCwgYnV0IHNlY29uZGFyeSB0YWJzIGRvbid0IHJlY2VpdmUgcmVtb3RlIGV2ZW50cy4gU28gdGhpcyBtZXRob2QgaXNcbiAgICAgKiB1c2VkIHRvIGNyZWF0ZSBhIHN5bnRoZXNpemVkIFJlbW90ZUV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gYXBwbHkgYVxuICAgICAqIENVUlJFTlQgc3RhdHVzIGNoYW5nZSB0byBhIFZpZXcsIGZvciBxdWVyaWVzIGV4ZWN1dGVkIGluIGEgZGlmZmVyZW50IHRhYi5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XG4gICAgc3RhdGljIGNyZWF0ZVN5bnRoZXNpemVkUmVtb3RlRXZlbnRGb3JDdXJyZW50Q2hhbmdlKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBNYXA7XG4gICAgICAgIHJldHVybiBzLnNldCh0LCBnaS5jcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UodCwgZSwgbikpLCBuZXcgbWkocnQubWluKCksIHMsIG5ldyBwZShldCksIGNzKCksIGdzKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIFRhcmdldENoYW5nZSBzcGVjaWZpZXMgdGhlIHNldCBvZiBjaGFuZ2VzIGZvciBhIHNwZWNpZmljIHRhcmdldCBhcyBwYXJ0IG9mXG4gKiBhIFJlbW90ZUV2ZW50LiBUaGVzZSBjaGFuZ2VzIHRyYWNrIHdoaWNoIGRvY3VtZW50cyBhcmUgYWRkZWQsIG1vZGlmaWVkIG9yXG4gKiByZW1vdmVkLCBhcyB3ZWxsIGFzIHRoZSB0YXJnZXQncyByZXN1bWUgdG9rZW4gYW5kIHdoZXRoZXIgdGhlIHRhcmdldCBpc1xuICogbWFya2VkIENVUlJFTlQuXG4gKiBUaGUgYWN0dWFsIGNoYW5nZXMgKnRvKiBkb2N1bWVudHMgYXJlIG5vdCBwYXJ0IG9mIHRoZSBUYXJnZXRDaGFuZ2Ugc2luY2VcbiAqIGRvY3VtZW50cyBtYXkgYmUgcGFydCBvZiBtdWx0aXBsZSB0YXJnZXRzLlxuICovIGNsYXNzIGdpIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHF1ZXJ5IHRvIGJlIHJlc3VtZWRcbiAgICAgKiBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXQgbWF0Y2hlcyB0aGVcbiAgICAgKiBxdWVyeS4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW4gdGltZSBmcm9tIHdoaWNoXG4gICAgICogdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgXCJjdXJyZW50XCIgKHN5bmNlZCkgc3RhdHVzIG9mIHRoaXMgdGFyZ2V0LiBOb3RlIHRoYXQgXCJjdXJyZW50XCJcbiAgICAgKiBoYXMgc3BlY2lhbCBtZWFuaW5nIGluIHRoZSBSUEMgcHJvdG9jb2wgdGhhdCBpbXBsaWVzIHRoYXQgYSB0YXJnZXQgaXNcbiAgICAgKiBib3RoIHVwLXRvLWRhdGUgYW5kIGNvbnNpc3RlbnQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgd2F0Y2ggc3RyZWFtLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSBuZXdseSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBhcyBwYXJ0IG9mXG4gICAgICogdGhpcyByZW1vdGUgZXZlbnQuXG4gICAgICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIGFscmVhZHkgYXNzaWduZWQgdG8gdGhpcyB0YXJnZXQgYnV0IHJlY2VpdmVkXG4gICAgICogYW4gdXBkYXRlIGR1cmluZyB0aGlzIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICBzLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoaXMgdGFyZ2V0IGFzIHBhcnQgb2YgdGhpc1xuICAgICAqIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICBpKSB7XG4gICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSB0LCB0aGlzLmN1cnJlbnQgPSBlLCB0aGlzLmFkZGVkRG9jdW1lbnRzID0gbiwgdGhpcy5tb2RpZmllZERvY3VtZW50cyA9IHMsIFxuICAgICAgICB0aGlzLnJlbW92ZWREb2N1bWVudHMgPSBpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHN5bnRoZXNpemVkIFRhcmdldENoYW5nZXMgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAgICAqIGFwcGx5IGEgQ1VSUkVOVCBzdGF0dXMgY2hhbmdlIHRvIGEgVmlldyAoZm9yIHF1ZXJpZXMgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnRcbiAgICAgKiB0YWIpIG9yIGZvciBuZXcgcXVlcmllcyAodG8gcmFpc2Ugc25hcHNob3RzIHdpdGggY29ycmVjdCBDVVJSRU5UIHN0YXR1cykuXG4gICAgICovICAgIHN0YXRpYyBjcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbmV3IGdpKG4sIGUsIGdzKCksIGdzKCksIGdzKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGNoYW5nZWQgZG9jdW1lbnQgYW5kIGEgbGlzdCBvZiB0YXJnZXQgaWRzIHRvIHdoaWNoIHRoaXMgY2hhbmdlXG4gKiBhcHBsaWVzLlxuICpcbiAqIElmIGRvY3VtZW50IGhhcyBiZWVuIGRlbGV0ZWQgTm9Eb2N1bWVudCB3aWxsIGJlIHByb3ZpZGVkLlxuICovIGNsYXNzIHlpIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIG5ldyBkb2N1bWVudCBhcHBsaWVzIHRvIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgbmV3IGRvY3VtZW50IGlzIHJlbW92ZWQgZnJvbSBhbGwgb2YgdGhlc2UgdGFyZ2V0cy4gKi9cbiAgICBlLCBcbiAgICAvKiogVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoaXMgY2hhbmdlLiAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIFRoZSBuZXcgZG9jdW1lbnQgb3IgTm9Eb2N1bWVudCBpZiBpdCB3YXMgZGVsZXRlZC4gSXMgbnVsbCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCB3ZW50IG91dCBvZiB2aWV3IHdpdGhvdXQgdGhlIHNlcnZlciBzZW5kaW5nIGEgbmV3IGRvY3VtZW50LlxuICAgICAqL1xuICAgIHMpIHtcbiAgICAgICAgdGhpcy5QdCA9IHQsIHRoaXMucmVtb3ZlZFRhcmdldElkcyA9IGUsIHRoaXMua2V5ID0gbiwgdGhpcy5idCA9IHM7XG4gICAgfVxufVxuXG5jbGFzcyBwaSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnRhcmdldElkID0gdCwgdGhpcy5WdCA9IGU7XG4gICAgfVxufVxuXG5jbGFzcyBJaSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFdoYXQga2luZCBvZiBjaGFuZ2Ugb2NjdXJyZWQgdG8gdGhlIHdhdGNoIHRhcmdldC4gKi9cbiAgICB0LCBcbiAgICAvKiogVGhlIHRhcmdldCBJRHMgdGhhdCB3ZXJlIGFkZGVkL3JlbW92ZWQvc2V0LiAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgdGFyZ2V0IHRvIGJlXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXRcbiAgICAgKiBtYXRjaGVzIHRoZSB0YXJnZXQuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluXG4gICAgICogdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICovXG4gICAgbiA9IFZlLkVNUFRZX0JZVEVfU1RSSU5HXG4gICAgLyoqIEFuIFJQQyBlcnJvciBpbmRpY2F0aW5nIHdoeSB0aGUgd2F0Y2ggZmFpbGVkLiAqLyAsIHMgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0LCB0aGlzLnRhcmdldElkcyA9IGUsIHRoaXMucmVzdW1lVG9rZW4gPSBuLCB0aGlzLmNhdXNlID0gcztcbiAgICB9XG59XG5cbi8qKiBUcmFja3MgdGhlIGludGVybmFsIHN0YXRlIG9mIGEgV2F0Y2ggdGFyZ2V0LiAqLyBjbGFzcyBUaSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIChhZGRzIG9yIHJlbW92ZXMpIHRoYXQgd2UgYXJlIHdhaXRpbmcgb24uXG4gICAgICAgICAqIFdlIG9ubHkgY29uc2lkZXIgdGFyZ2V0cyBhY3RpdmUgdGhhdCBoYXZlIG5vIHBlbmRpbmcgcmVzcG9uc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5TdCA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGRvY3VtZW50IGNoYW5nZXMgc2luY2UgdGhlIGxhc3QgcmFpc2VkIHNuYXBzaG90LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGVzZSBjaGFuZ2VzIGFyZSBjb250aW51b3VzbHkgdXBkYXRlZCBhcyB3ZSByZWNlaXZlIGRvY3VtZW50IHVwZGF0ZXMgYW5kXG4gICAgICAgICAqIGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzIGFnYWluc3QgdGhlIGxhc3QgaXNzdWVkIHNuYXBzaG90LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5EdCA9IHZpKCksIFxuICAgICAgICAvKiogU2VlIHB1YmxpYyBnZXR0ZXJzIGZvciBleHBsYW5hdGlvbnMgb2YgdGhlc2UgZmllbGRzLiAqL1xuICAgICAgICB0aGlzLkN0ID0gVmUuRU1QVFlfQllURV9TVFJJTkcsIHRoaXMueHQgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IHN0YXRlIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgbmV4dCBzbmFwc2hvdC4gV2VcbiAgICAgICAgICogaW5pdGlhbGl6ZSB0byB0cnVlIHNvIHRoYXQgbmV3bHktYWRkZWQgdGFyZ2V0cyBhcmUgaW5jbHVkZWQgaW4gdGhlIG5leHRcbiAgICAgICAgICogUmVtb3RlRXZlbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLk50ID0gITA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyB0YXJnZXQgaGFzIGJlZW4gbWFya2VkICdjdXJyZW50Jy5cbiAgICAgKlxuICAgICAqICdDdXJyZW50JyBoYXMgc3BlY2lhbCBtZWFuaW5nIGluIHRoZSBSUEMgcHJvdG9jb2w6IEl0IGltcGxpZXMgdGhhdCB0aGVcbiAgICAgKiBXYXRjaCBiYWNrZW5kIGhhcyBzZW50IHVzIGFsbCBjaGFuZ2VzIHVwIHRvIHRoZSBwb2ludCBhdCB3aGljaCB0aGUgdGFyZ2V0XG4gICAgICogd2FzIGFkZGVkIGFuZCB0aGF0IHRoZSB0YXJnZXQgaXMgY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSB3YXRjaFxuICAgICAqIHN0cmVhbS5cbiAgICAgKi8gICAgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnh0O1xuICAgIH1cbiAgICAvKiogVGhlIGxhc3QgcmVzdW1lIHRva2VuIHNlbnQgdG8gdXMgZm9yIHRoaXMgdGFyZ2V0LiAqLyAgICBnZXQgcmVzdW1lVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkN0O1xuICAgIH1cbiAgICAvKiogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgcGVuZGluZyB0YXJnZXQgYWRkcyBvciB0YXJnZXQgcmVtb3Zlcy4gKi8gICAgZ2V0IGt0KCkge1xuICAgICAgICByZXR1cm4gMCAhPT0gdGhpcy5TdDtcbiAgICB9XG4gICAgLyoqIFdoZXRoZXIgd2UgaGF2ZSBtb2RpZmllZCBhbnkgc3RhdGUgdGhhdCBzaG91bGQgdHJpZ2dlciBhIHNuYXBzaG90LiAqLyAgICBnZXQgTXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSByZXN1bWUgdG9rZW4gdG8gdGhlIFRhcmdldENoYW5nZSwgYnV0IG9ubHkgd2hlbiBpdCBoYXMgYSBuZXdcbiAgICAgKiB2YWx1ZS4gRW1wdHkgcmVzdW1lVG9rZW5zIGFyZSBkaXNjYXJkZWQuXG4gICAgICovICAgICR0KHQpIHtcbiAgICAgICAgdC5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwICYmICh0aGlzLk50ID0gITAsIHRoaXMuQ3QgPSB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRhcmdldCBjaGFuZ2UgZnJvbSB0aGUgY3VycmVudCBzZXQgb2YgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIFRvIHJlc2V0IHRoZSBkb2N1bWVudCBjaGFuZ2VzIGFmdGVyIHJhaXNpbmcgdGhpcyBzbmFwc2hvdCwgY2FsbFxuICAgICAqIGBjbGVhclBlbmRpbmdDaGFuZ2VzKClgLlxuICAgICAqLyAgICBPdCgpIHtcbiAgICAgICAgbGV0IHQgPSBncygpLCBlID0gZ3MoKSwgbiA9IGdzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLkR0LmZvckVhY2goKChzLCBpKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgY2FzZSAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIHQgPSB0LmFkZChzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA6XG4gICAgICAgICAgICAgICAgZSA9IGUuYWRkKHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgIG4gPSBuLmFkZChzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIE8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBuZXcgZ2kodGhpcy5DdCwgdGhpcy54dCwgdCwgZSwgbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgZG9jdW1lbnQgY2hhbmdlcyBhbmQgc2V0cyBgaGFzUGVuZGluZ0NoYW5nZXNgIHRvIGZhbHNlLlxuICAgICAqLyAgICBGdCgpIHtcbiAgICAgICAgdGhpcy5OdCA9ICExLCB0aGlzLkR0ID0gdmkoKTtcbiAgICB9XG4gICAgQnQodCwgZSkge1xuICAgICAgICB0aGlzLk50ID0gITAsIHRoaXMuRHQgPSB0aGlzLkR0Lmluc2VydCh0LCBlKTtcbiAgICB9XG4gICAgTHQodCkge1xuICAgICAgICB0aGlzLk50ID0gITAsIHRoaXMuRHQgPSB0aGlzLkR0LnJlbW92ZSh0KTtcbiAgICB9XG4gICAgcXQoKSB7XG4gICAgICAgIHRoaXMuU3QgKz0gMTtcbiAgICB9XG4gICAgVXQoKSB7XG4gICAgICAgIHRoaXMuU3QgLT0gMTtcbiAgICB9XG4gICAgS3QoKSB7XG4gICAgICAgIHRoaXMuTnQgPSAhMCwgdGhpcy54dCA9ICEwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGhlbHBlciBjbGFzcyB0byBhY2N1bXVsYXRlIHdhdGNoIGNoYW5nZXMgaW50byBhIFJlbW90ZUV2ZW50LlxuICovXG5jbGFzcyBFaSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLkd0ID0gdCwgXG4gICAgICAgIC8qKiBUaGUgaW50ZXJuYWwgc3RhdGUgb2YgYWxsIHRyYWNrZWQgdGFyZ2V0cy4gKi9cbiAgICAgICAgdGhpcy5RdCA9IG5ldyBNYXAsIFxuICAgICAgICAvKiogS2VlcHMgdHJhY2sgb2YgdGhlIGRvY3VtZW50cyB0byB1cGRhdGUgc2luY2UgdGhlIGxhc3QgcmFpc2VkIHNuYXBzaG90LiAqL1xuICAgICAgICB0aGlzLmp0ID0gY3MoKSwgXG4gICAgICAgIC8qKiBBIG1hcHBpbmcgb2YgZG9jdW1lbnQga2V5cyB0byB0aGVpciBzZXQgb2YgdGFyZ2V0IElEcy4gKi9cbiAgICAgICAgdGhpcy56dCA9IEFpKCksIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgdGFyZ2V0cyB3aXRoIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy4gVGhlc2UgdGFyZ2V0cyBhcmVcbiAgICAgICAgICoga25vd24gdG8gYmUgaW5jb25zaXN0ZW50IGFuZCB0aGVpciBsaXN0ZW5zIG5lZWRzIHRvIGJlIHJlLWVzdGFibGlzaGVkIGJ5XG4gICAgICAgICAqIFJlbW90ZVN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5XdCA9IG5ldyBwZShldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBhbmQgYWRkcyB0aGUgRG9jdW1lbnRXYXRjaENoYW5nZSB0byB0aGUgY3VycmVudCBzZXQgb2YgY2hhbmdlcy5cbiAgICAgKi8gICAgSHQodCkge1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5QdCkgdC5idCAmJiB0LmJ0LmlzRm91bmREb2N1bWVudCgpID8gdGhpcy5KdChlLCB0LmJ0KSA6IHRoaXMuWXQoZSwgdC5rZXksIHQuYnQpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5yZW1vdmVkVGFyZ2V0SWRzKSB0aGlzLll0KGUsIHQua2V5LCB0LmJ0KTtcbiAgICB9XG4gICAgLyoqIFByb2Nlc3NlcyBhbmQgYWRkcyB0aGUgV2F0Y2hUYXJnZXRDaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuICovICAgIFh0KHQpIHtcbiAgICAgICAgdGhpcy5mb3JFYWNoVGFyZ2V0KHQsIChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLlp0KGUpO1xuICAgICAgICAgICAgc3dpdGNoICh0LnN0YXRlKSB7XG4gICAgICAgICAgICAgIGNhc2UgMCAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLk5vQ2hhbmdlICovIDpcbiAgICAgICAgICAgICAgICB0aGlzLnRlKGUpICYmIG4uJHQodC5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxIC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZGVjcmVtZW50IHRoZSBudW1iZXIgb2YgcGVuZGluZyBhY2tzIG5lZWRlZCBmcm9tIHdhdGNoXG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoaXMgdGFyZ2V0SWQuXG4gICAgICAgICAgICAgICAgbi5VdCgpLCBuLmt0IHx8IFxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBmcmVzaGx5IGFkZGVkIHRhcmdldCwgc28gd2UgbmVlZCB0byByZXNldCBhbnkgc3RhdGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHdlIGhhZCBwcmV2aW91c2x5LiBUaGlzIGNhbiBoYXBwZW4gZS5nLiB3aGVuIHJlbW92ZSBhbmQgYWRkXG4gICAgICAgICAgICAgICAgLy8gYmFjayBhIHRhcmdldCBmb3IgZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICAgIG4uRnQoKSwgbi4kdCh0LnJlc3VtZVRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgcmVtb3ZlZCB0YXJnZXRzIHRvIHdlIGNhbiBwb3N0LWZpbHRlciBhbmRcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYW55IHRhcmdldCBjaGFuZ2VzLlxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZGVjcmVtZW50IHRoZSBudW1iZXIgb2YgcGVuZGluZyBhY2tzIG5lZWRlZCBmcm9tIHdhdGNoXG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoaXMgdGFyZ2V0SWQuXG4gICAgICAgICAgICAgICAgbi5VdCgpLCBuLmt0IHx8IHRoaXMucmVtb3ZlVGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMyAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkN1cnJlbnQgKi8gOlxuICAgICAgICAgICAgICAgIHRoaXMudGUoZSkgJiYgKG4uS3QoKSwgbi4kdCh0LnJlc3VtZVRva2VuKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA0IC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuUmVzZXQgKi8gOlxuICAgICAgICAgICAgICAgIHRoaXMudGUoZSkgJiYgKFxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0YXJnZXQgYW5kIHN5bnRoZXNpemVzIHJlbW92ZXMgZm9yIGFsbCBleGlzdGluZ1xuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50cy4gVGhlIGJhY2tlbmQgd2lsbCByZS1hZGQgYW55IGRvY3VtZW50cyB0aGF0IHN0aWxsXG4gICAgICAgICAgICAgICAgLy8gbWF0Y2ggdGhlIHRhcmdldCBiZWZvcmUgaXQgc2VuZHMgdGhlIG5leHQgZ2xvYmFsIHNuYXBzaG90LlxuICAgICAgICAgICAgICAgIHRoaXMuZWUoZSksIG4uJHQodC5yZXN1bWVUb2tlbikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgTygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYWxsIHRhcmdldElkcyB0aGF0IHRoZSB3YXRjaCBjaGFuZ2UgYXBwbGllcyB0bzogZWl0aGVyIHRoZVxuICAgICAqIHRhcmdldElkcyBleHBsaWNpdGx5IGxpc3RlZCBpbiB0aGUgY2hhbmdlIG9yIHRoZSB0YXJnZXRJZHMgb2YgYWxsIGN1cnJlbnRseVxuICAgICAqIGFjdGl2ZSB0YXJnZXRzLlxuICAgICAqLyAgICBmb3JFYWNoVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgdC50YXJnZXRJZHMubGVuZ3RoID4gMCA/IHQudGFyZ2V0SWRzLmZvckVhY2goZSkgOiB0aGlzLlF0LmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlKG4pICYmIGUobik7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBleGlzdGVuY2UgZmlsdGVycyBhbmQgc3ludGhlc2l6ZXMgZGVsZXRlcyBmb3IgZmlsdGVyIG1pc21hdGNoZXMuXG4gICAgICogVGFyZ2V0cyB0aGF0IGFyZSBpbnZhbGlkYXRlZCBieSBmaWx0ZXIgbWlzbWF0Y2hlcyBhcmUgYWRkZWQgdG9cbiAgICAgKiBgcGVuZGluZ1RhcmdldFJlc2V0c2AuXG4gICAgICovICAgIG5lKHQpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGNvbnN0IG4gPSB0LnRhcmdldElkLCBzID0gdC5WdC5jb3VudCwgaSA9IHRoaXMuc2Uobik7XG4gICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICBjb25zdCByID0gaS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoRm4ocikpIGlmICgwID09PSBzKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV4aXN0ZW5jZSBmaWx0ZXIgdG9sZCB1cyB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QuIFdlIGRlZHVjZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhpcyBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCBhbmQgYXBwbHkgYSBkZWxldGVkIGRvY3VtZW50IHRvXG4gICAgICAgICAgICAgICAgLy8gb3VyIHVwZGF0ZXMuIFdpdGhvdXQgYXBwbHlpbmcgdGhpcyBkZWxldGVkIGRvY3VtZW50IHRoZXJlIG1pZ2h0IGJlXG4gICAgICAgICAgICAgICAgLy8gYW5vdGhlciBxdWVyeSB0aGF0IHdpbGwgcmFpc2UgdGhpcyBkb2N1bWVudCBhcyBwYXJ0IG9mIGEgc25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyB1bnRpbCBpdCBpcyByZXNvbHZlZCwgZXNzZW50aWFsbHkgZXhwb3NpbmcgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuXG4gICAgICAgICAgICAgICAgLy8gcXVlcmllcy5cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IGh0KHIucGF0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ZdChuLCB0LCBhbi5uZXdOb0RvY3VtZW50KHQsIHJ0Lm1pbigpKSk7XG4gICAgICAgICAgICB9IGVsc2UgRigxID09PSBzKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuaWUobik7XG4gICAgICAgICAgICAgICAgLy8gRXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaC4gTWFyayB0aGUgZG9jdW1lbnRzIGFzIGJlaW5nIGluIGxpbWJvLCBhbmRcbiAgICAgICAgICAgICAgICAvLyByYWlzZSBhIHNuYXBzaG90IHdpdGggYGlzRnJvbUNhY2hlOnRydWVgLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBibG9vbSBmaWx0ZXIgdG8gaWRlbnRpZnkgYW5kIG1hcmsgcmVtb3ZlZCBkb2N1bWVudHMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnJlKHQsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCAvKiBCbG9vbUZpbHRlckFwcGxpY2F0aW9uU3RhdHVzLlN1Y2Nlc3MgKi8gIT09IHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGJsb29tIGZpbHRlciBhcHBsaWNhdGlvbiBmYWlscywgd2UgcmVzZXQgdGhlIG1hcHBpbmcgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHJlLXJ1biBvZiB0aGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVlKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IDIgLyogQmxvb21GaWx0ZXJBcHBsaWNhdGlvblN0YXR1cy5GYWxzZVBvc2l0aXZlICovID09PSBzID8gXCJUYXJnZXRQdXJwb3NlRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2hCbG9vbVwiIC8qIFRhcmdldFB1cnBvc2UuRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2hCbG9vbSAqLyA6IFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoXCIgLyogVGFyZ2V0UHVycG9zZS5FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuV3QgPSB0aGlzLld0Lmluc2VydChuLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSAoZSA9IGNpLmluc3RhbmNlKSB8fCB2b2lkIDAgPT09IGUgfHwgZS5ub3RpZnlPbkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoKGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzLCBpLCByLCBvLCB1LCBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbENhY2hlQ291bnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlRmlsdGVyQ291bnQ6IG4uY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGggPSBuLnVuY2hhbmdlZE5hbWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaCAmJiAoYS5ibG9vbUZpbHRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWVkOiAwIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU3VjY2VzcyAqLyA9PT0gdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoQ291bnQ6IG51bGwgIT09IChzID0gbnVsbCA9PSBoID8gdm9pZCAwIDogaC5oYXNoQ291bnQpICYmIHZvaWQgMCAhPT0gcyA/IHMgOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdG1hcExlbmd0aDogbnVsbCAhPT0gKG8gPSBudWxsID09PSAociA9IG51bGwgPT09IChpID0gbnVsbCA9PSBoID8gdm9pZCAwIDogaC5iaXRzKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLmJpdG1hcCkgfHwgdm9pZCAwID09PSByID8gdm9pZCAwIDogci5sZW5ndGgpICYmIHZvaWQgMCAhPT0gbyA/IG8gOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IG51bGwgIT09IChjID0gbnVsbCA9PT0gKHUgPSBudWxsID09IGggPyB2b2lkIDAgOiBoLmJpdHMpIHx8IHZvaWQgMCA9PT0gdSA/IHZvaWQgMCA6IHUucGFkZGluZykgJiYgdm9pZCAwICE9PSBjID8gYyA6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gKHMsIGksIHQuVnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgYmxvb20gZmlsdGVyIHRvIHJlbW92ZSB0aGUgZGVsZXRlZCBkb2N1bWVudHMsIGFuZCByZXR1cm4gdGhlXG4gICAgICogYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAqLyAgICByZSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IHt1bmNoYW5nZWROYW1lczogbiwgY291bnQ6IHN9ID0gdC5WdDtcbiAgICAgICAgaWYgKCFuIHx8ICFuLmJpdHMpIHJldHVybiAxIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU2tpcHBlZCAqLztcbiAgICAgICAgY29uc3Qge2JpdHM6IHtiaXRtYXA6IGkgPSBcIlwiLCBwYWRkaW5nOiByID0gMH0sIGhhc2hDb3VudDogbyA9IDB9ID0gbjtcbiAgICAgICAgbGV0IHUsIGM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1ID0geGUoaSkudG9VaW50OEFycmF5KCk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgUGUpIHJldHVybiBNKFwiRGVjb2RpbmcgdGhlIGJhc2U2NCBibG9vbSBmaWx0ZXIgaW4gZXhpc3RlbmNlIGZpbHRlciBmYWlsZWQgKFwiICsgdC5tZXNzYWdlICsgXCIpOyBpZ25vcmluZyB0aGUgYmxvb20gZmlsdGVyIGFuZCBmYWxsaW5nIGJhY2sgdG8gZnVsbCByZS1xdWVyeS5cIiksIFxuICAgICAgICAgICAgMSAvKiBCbG9vbUZpbHRlckFwcGxpY2F0aW9uU3RhdHVzLlNraXBwZWQgKi87XG4gICAgICAgICAgICB0aHJvdyB0O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBCbG9vbUZpbHRlciB0aHJvd3MgZXJyb3IgaWYgdGhlIGlucHV0cyBhcmUgaW52YWxpZC5cbiAgICAgICAgICAgIGMgPSBuZXcgd2kodSwgciwgbyk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBNKHQgaW5zdGFuY2VvZiBfaSA/IFwiQmxvb21GaWx0ZXIgZXJyb3I6IFwiIDogXCJBcHBseWluZyBibG9vbSBmaWx0ZXIgZmFpbGVkOiBcIiwgdCksIFxuICAgICAgICAgICAgMSAvKiBCbG9vbUZpbHRlckFwcGxpY2F0aW9uU3RhdHVzLlNraXBwZWQgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDAgPT09IGMuSXQpIHJldHVybiAxIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU2tpcHBlZCAqLztcbiAgICAgICAgcmV0dXJuIHMgIT09IGUgLSB0aGlzLm9lKHQudGFyZ2V0SWQsIGMpID8gMiAvKiBCbG9vbUZpbHRlckFwcGxpY2F0aW9uU3RhdHVzLkZhbHNlUG9zaXRpdmUgKi8gOiAwIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU3VjY2VzcyAqLztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyIG91dCByZW1vdmVkIGRvY3VtZW50cyBiYXNlZCBvbiBibG9vbSBmaWx0ZXIgbWVtYmVyc2hpcCByZXN1bHQgYW5kXG4gICAgICogcmV0dXJuIG51bWJlciBvZiBkb2N1bWVudHMgcmVtb3ZlZC5cbiAgICAgKi8gICAgb2UodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5HdC5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHQpO1xuICAgICAgICBsZXQgcyA9IDA7XG4gICAgICAgIHJldHVybiBuLmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuR3QudWUoKSwgciA9IGBwcm9qZWN0cy8ke2kucHJvamVjdElkfS9kYXRhYmFzZXMvJHtpLmRhdGFiYXNlfS9kb2N1bWVudHMvJHtuLnBhdGguY2Fub25pY2FsU3RyaW5nKCl9YDtcbiAgICAgICAgICAgIGUudnQocikgfHwgKHRoaXMuWXQodCwgbiwgLyp1cGRhdGVkRG9jdW1lbnQ9Ki8gbnVsbCksIHMrKyk7XG4gICAgICAgIH0pKSwgcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGN1cnJlbnRseSBhY2N1bXVsYXRlZCBzdGF0ZSBpbnRvIGEgcmVtb3RlIGV2ZW50IGF0IHRoZVxuICAgICAqIHByb3ZpZGVkIHNuYXBzaG90IHZlcnNpb24uIFJlc2V0cyB0aGUgYWNjdW11bGF0ZWQgY2hhbmdlcyBiZWZvcmUgcmV0dXJuaW5nLlxuICAgICAqLyAgICBjZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgTWFwO1xuICAgICAgICB0aGlzLlF0LmZvckVhY2goKChuLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5zZShzKTtcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4uY3VycmVudCAmJiBGbihpLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQgcXVlcmllcyBmb3IgZG9jdW1lbnQgdGhhdCBkb24ndCBleGlzdCBjYW4gcHJvZHVjZSBhbiBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHQgc2V0LiBUbyB1cGRhdGUgb3VyIGxvY2FsIGNhY2hlLCB3ZSBzeW50aGVzaXplIGEgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGlmIHdlIGhhdmUgbm90IHByZXZpb3VzbHkgcmVjZWl2ZWQgdGhlIGRvY3VtZW50LiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBsaW1ibyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIHJlbW92aW5nIGl0IGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gbGltYm9Eb2N1bWVudFJlZnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWRlYWxseSB3ZSB3b3VsZCBoYXZlIGFuIGV4cGxpY2l0IGxvb2t1cCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCByZXN1bHRpbmcgaW4gYW4gZXhwbGljaXQgZGVsZXRlIG1lc3NhZ2UgYW5kIHdlIGNvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIHNwZWNpYWwgbG9naWMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgaHQoaS50YXJnZXQucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHRoaXMuanQuZ2V0KGUpIHx8IHRoaXMuYWUocywgZSkgfHwgdGhpcy5ZdChzLCBlLCBhbi5uZXdOb0RvY3VtZW50KGUsIHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbi5NdCAmJiAoZS5zZXQocywgbi5PdCgpKSwgbi5GdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBsZXQgbiA9IGdzKCk7XG4gICAgICAgIC8vIFdlIGV4dHJhY3QgdGhlIHNldCBvZiBsaW1iby1vbmx5IGRvY3VtZW50IHVwZGF0ZXMgYXMgdGhlIEdDIGxvZ2ljXG4gICAgICAgIC8vIHNwZWNpYWwtY2FzZXMgZG9jdW1lbnRzIHRoYXQgZG8gbm90IGFwcGVhciBpbiB0aGUgdGFyZ2V0IGNhY2hlLlxuICAgICAgICBcbiAgICAgICAgLy8gVE9ETyhnc29sdGlzKTogRXhwYW5kIG9uIHRoaXMgY29tbWVudCBvbmNlIEdDIGlzIGF2YWlsYWJsZSBpbiB0aGUgSlNcbiAgICAgICAgLy8gY2xpZW50LlxuICAgICAgICAgICAgICAgIHRoaXMuenQuZm9yRWFjaCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGxldCBzID0gITA7XG4gICAgICAgICAgICBlLmZvckVhY2hXaGlsZSgodCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuc2UodCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFlIHx8IFwiVGFyZ2V0UHVycG9zZUxpbWJvUmVzb2x1dGlvblwiIC8qIFRhcmdldFB1cnBvc2UuTGltYm9SZXNvbHV0aW9uICovID09PSBlLnB1cnBvc2UgfHwgKHMgPSAhMSwgXG4gICAgICAgICAgICAgICAgITEpO1xuICAgICAgICAgICAgfSkpLCBzICYmIChuID0gbi5hZGQodCkpO1xuICAgICAgICB9KSksIHRoaXMuanQuZm9yRWFjaCgoKGUsIG4pID0+IG4uc2V0UmVhZFRpbWUodCkpKTtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBtaSh0LCBlLCB0aGlzLld0LCB0aGlzLmp0LCBuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuanQgPSBjcygpLCB0aGlzLnp0ID0gQWkoKSwgdGhpcy5XdCA9IG5ldyBwZShldCksIHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHByb3ZpZGVkIGRvY3VtZW50IHRvIHRoZSBpbnRlcm5hbCBsaXN0IG9mIGRvY3VtZW50IHVwZGF0ZXMgYW5kXG4gICAgICogaXRzIGRvY3VtZW50IGtleSB0byB0aGUgZ2l2ZW4gdGFyZ2V0J3MgbWFwcGluZy5cbiAgICAgKi9cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIEp0KHQsIGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRlKHQpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmFlKHQsIGUua2V5KSA/IDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA6IDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLztcbiAgICAgICAgdGhpcy5adCh0KS5CdChlLmtleSwgbiksIHRoaXMuanQgPSB0aGlzLmp0Lmluc2VydChlLmtleSwgZSksIHRoaXMuenQgPSB0aGlzLnp0Lmluc2VydChlLmtleSwgdGhpcy5oZShlLmtleSkuYWRkKHQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgZnJvbSB0aGUgdGFyZ2V0IG1hcHBpbmcuIElmIHRoZVxuICAgICAqIGRvY3VtZW50IG5vIGxvbmdlciBtYXRjaGVzIHRoZSB0YXJnZXQsIGJ1dCB0aGUgZG9jdW1lbnQncyBzdGF0ZSBpcyBzdGlsbFxuICAgICAqIGtub3duIChlLmcuIHdlIGtub3cgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIGRlbGV0ZWQgb3Igd2UgcmVjZWl2ZWQgdGhlIGNoYW5nZVxuICAgICAqIHRoYXQgY2F1c2VkIHRoZSBmaWx0ZXIgbWlzbWF0Y2gpLCB0aGUgbmV3IGRvY3VtZW50IGNhbiBiZSBwcm92aWRlZFxuICAgICAqIHRvIHVwZGF0ZSB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLlxuICAgICAqL1xuICAgIC8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAgWXQodCwgZSwgbikge1xuICAgICAgICBpZiAoIXRoaXMudGUodCkpIHJldHVybjtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuWnQodCk7XG4gICAgICAgIHRoaXMuYWUodCwgZSkgPyBzLkJ0KGUsIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovKSA6IFxuICAgICAgICAvLyBUaGUgZG9jdW1lbnQgbWF5IGhhdmUgZW50ZXJlZCBhbmQgbGVmdCB0aGUgdGFyZ2V0IGJlZm9yZSB3ZSByYWlzZWQgYVxuICAgICAgICAvLyBzbmFwc2hvdCwgc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBjaGFuZ2UuXG4gICAgICAgIHMuTHQoZSksIHRoaXMuenQgPSB0aGlzLnp0Lmluc2VydChlLCB0aGlzLmhlKGUpLmRlbGV0ZSh0KSksIG4gJiYgKHRoaXMuanQgPSB0aGlzLmp0Lmluc2VydChlLCBuKSk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldCh0KSB7XG4gICAgICAgIHRoaXMuUXQuZGVsZXRlKHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvdW50IG9mIGRvY3VtZW50cyBpbiB0aGUgdGFyZ2V0LiBUaGlzIGluY2x1ZGVzIGJvdGhcbiAgICAgKiB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IHRoZSBMb2NhbFN0b3JlIGNvbnNpZGVycyB0byBiZSBwYXJ0IG9mIHRoZVxuICAgICAqIHRhcmdldCBhcyB3ZWxsIGFzIGFueSBhY2N1bXVsYXRlZCBjaGFuZ2VzLlxuICAgICAqLyAgICBpZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLlp0KHQpLk90KCk7XG4gICAgICAgIHJldHVybiB0aGlzLkd0LmdldFJlbW90ZUtleXNGb3JUYXJnZXQodCkuc2l6ZSArIGUuYWRkZWREb2N1bWVudHMuc2l6ZSAtIGUucmVtb3ZlZERvY3VtZW50cy5zaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgdGhlIG51bWJlciBvZiBhY2tzIG5lZWRlZCBmcm9tIHdhdGNoIGJlZm9yZSB3ZSBjYW4gY29uc2lkZXIgdGhlXG4gICAgICogc2VydmVyIHRvIGJlICdpbi1zeW5jJyB3aXRoIHRoZSBjbGllbnQncyBhY3RpdmUgdGFyZ2V0cy5cbiAgICAgKi8gICAgcXQodCkge1xuICAgICAgICB0aGlzLlp0KHQpLnF0KCk7XG4gICAgfVxuICAgIFp0KHQpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzLlF0LmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGUgPSBuZXcgVGksIHRoaXMuUXQuc2V0KHQsIGUpKSwgZTtcbiAgICB9XG4gICAgaGUodCkge1xuICAgICAgICBsZXQgZSA9IHRoaXMuenQuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IG5ldyBFZShldCksIHRoaXMuenQgPSB0aGlzLnp0Lmluc2VydCh0LCBlKSksIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIHVzZXIgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldCAoYnkgY2FsbGluZ1xuICAgICAqIGBnZXRUYXJnZXREYXRhRm9yVGFyZ2V0KClgKSBhbmQgdGhhdCB3ZSBhcmUgbm90IHdhaXRpbmcgZm9yIHBlbmRpbmcgQUREc1xuICAgICAqIGZyb20gd2F0Y2guXG4gICAgICovICAgIHRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG51bGwgIT09IHRoaXMuc2UodCk7XG4gICAgICAgIHJldHVybiBlIHx8IE4oXCJXYXRjaENoYW5nZUFnZ3JlZ2F0b3JcIiwgXCJEZXRlY3RlZCBpbmFjdGl2ZSB0YXJnZXRcIiwgdCksIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFRhcmdldERhdGEgZm9yIGFuIGFjdGl2ZSB0YXJnZXQgKGkuZS4gYSB0YXJnZXQgdGhhdCB0aGUgdXNlclxuICAgICAqIGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhhdCBoYXMgbm8gb3V0c3RhbmRpbmcgdGFyZ2V0IGNoYW5nZSByZXF1ZXN0cykuXG4gICAgICovICAgIHNlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuUXQuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSAmJiBlLmt0ID8gbnVsbCA6IHRoaXMuR3QubGUodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgc3RhdGUgb2YgYSBXYXRjaCB0YXJnZXQgdG8gaXRzIGluaXRpYWwgc3RhdGUgKGUuZy4gc2V0c1xuICAgICAqICdjdXJyZW50JyB0byBmYWxzZSwgY2xlYXJzIHRoZSByZXN1bWUgdG9rZW4gYW5kIHJlbW92ZXMgaXRzIHRhcmdldCBtYXBwaW5nXG4gICAgICogZnJvbSBhbGwgZG9jdW1lbnRzKS5cbiAgICAgKi8gICAgZWUodCkge1xuICAgICAgICB0aGlzLlF0LnNldCh0LCBuZXcgVGkpO1xuICAgICAgICB0aGlzLkd0LmdldFJlbW90ZUtleXNGb3JUYXJnZXQodCkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLll0KHQsIGUsIC8qdXBkYXRlZERvY3VtZW50PSovIG51bGwpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdGhlIGRvY3VtZW50IHRvIGJlIHBhcnQgb2YgdGhlXG4gICAgICogc3BlY2lmaWVkIHRhcmdldC5cbiAgICAgKi8gICAgYWUodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5HdC5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHQpLmhhcyhlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEFpKCkge1xuICAgIHJldHVybiBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG59XG5cbmZ1bmN0aW9uIHZpKCkge1xuICAgIHJldHVybiBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG59XG5cbmNvbnN0IFJpID0gKCgpID0+IHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgICBhc2M6IFwiQVNDRU5ESU5HXCIsXG4gICAgICAgIGRlc2M6IFwiREVTQ0VORElOR1wiXG4gICAgfTtcbiAgICByZXR1cm4gdDtcbn0pKCksIFBpID0gKCgpID0+IHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgICBcIjxcIjogXCJMRVNTX1RIQU5cIixcbiAgICAgICAgXCI8PVwiOiBcIkxFU1NfVEhBTl9PUl9FUVVBTFwiLFxuICAgICAgICBcIj5cIjogXCJHUkVBVEVSX1RIQU5cIixcbiAgICAgICAgXCI+PVwiOiBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFwiLFxuICAgICAgICBcIj09XCI6IFwiRVFVQUxcIixcbiAgICAgICAgXCIhPVwiOiBcIk5PVF9FUVVBTFwiLFxuICAgICAgICBcImFycmF5LWNvbnRhaW5zXCI6IFwiQVJSQVlfQ09OVEFJTlNcIixcbiAgICAgICAgaW46IFwiSU5cIixcbiAgICAgICAgXCJub3QtaW5cIjogXCJOT1RfSU5cIixcbiAgICAgICAgXCJhcnJheS1jb250YWlucy1hbnlcIjogXCJBUlJBWV9DT05UQUlOU19BTllcIlxuICAgIH07XG4gICAgcmV0dXJuIHQ7XG59KSgpLCBiaSA9ICgoKSA9PiB7XG4gICAgY29uc3QgdCA9IHtcbiAgICAgICAgYW5kOiBcIkFORFwiLFxuICAgICAgICBvcjogXCJPUlwiXG4gICAgfTtcbiAgICByZXR1cm4gdDtcbn0pKCk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBnZW5lcmF0ZXMgSnNvbk9iamVjdCB2YWx1ZXMgZm9yIHRoZSBEYXRhc3RvcmUgQVBJIHN1aXRhYmxlIGZvclxuICogc2VuZGluZyB0byBlaXRoZXIgR1JQQyBzdHViIG1ldGhvZHMgb3IgdmlhIHRoZSBKU09OL0hUVFAgUkVTVCBBUEkuXG4gKlxuICogVGhlIHNlcmlhbGl6ZXIgc3VwcG9ydHMgYm90aCBQcm90b2J1Zi5qcyBhbmQgUHJvdG8zIEpTT04gZm9ybWF0cy4gQnlcbiAqIHNldHRpbmcgYHVzZVByb3RvM0pzb25gIHRvIHRydWUsIHRoZSBzZXJpYWxpemVyIHdpbGwgdXNlIHRoZSBQcm90bzMgSlNPTlxuICogZm9ybWF0LlxuICpcbiAqIEZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBQcm90bzMgSlNPTiBmb3JtYXQgY2hlY2tcbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb3RvY29sLWJ1ZmZlcnMvZG9jcy9wcm90bzMjanNvblxuICpcbiAqIFRPRE8oa2xpbXQpOiBXZSBjYW4gcmVtb3ZlIHRoZSBkYXRhYmFzZUlkIGFyZ3VtZW50IGlmIHdlIGtlZXAgdGhlIGZ1bGxcbiAqIHJlc291cmNlIG5hbWUgaW4gZG9jdW1lbnRzLlxuICovXG5jbGFzcyBWaSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSB0LCB0aGlzLnVzZVByb3RvM0pzb24gPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgbnVtYmVyIChvciBudWxsKSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG9cbiAqIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXG4gKiBETyBOT1QgVVNFIFRISVMgRk9SIEFOWVRISU5HIEVMU0UuXG4gKiBUaGlzIG1ldGhvZCBjaGVhdHMuIEl0J3MgdHlwZWQgYXMgcmV0dXJuaW5nIFwibnVtYmVyXCIgYmVjYXVzZSB0aGF0J3Mgd2hhdFxuICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUuIEJ1dCBHUlBDIGFjdHVhbGx5XG4gKiBleHBlY3RzIGEgeyB2YWx1ZTogPG51bWJlcj4gfSBzdHJ1Y3QuXG4gKi9cbmZ1bmN0aW9uIFNpKHQsIGUpIHtcbiAgICByZXR1cm4gdC51c2VQcm90bzNKc29uIHx8IEZ0KGUpID8gZSA6IHtcbiAgICAgICAgdmFsdWU6IGVcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgKG9yIG51bGwpIGZyb20gYSBnb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSBwcm90by5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgRGF0ZSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG8gYSBwcm90by5cbiAqL1xuZnVuY3Rpb24gRGkodCwgZSkge1xuICAgIGlmICh0LnVzZVByb3RvM0pzb24pIHtcbiAgICAgICAgcmV0dXJuIGAke25ldyBEYXRlKDFlMyAqIGUuc2Vjb25kcykudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqLywgXCJcIikucmVwbGFjZShcIlpcIiwgXCJcIil9LiR7KFwiMDAwMDAwMDAwXCIgKyBlLm5hbm9zZWNvbmRzKS5zbGljZSgtOSl9WmA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IFwiXCIgKyBlLnNlY29uZHMsXG4gICAgICAgIG5hbm9zOiBlLm5hbm9zZWNvbmRzXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGJ5dGVzIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW4gYSBwcm90by5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5mdW5jdGlvbiBDaSh0LCBlKSB7XG4gICAgcmV0dXJuIHQudXNlUHJvdG8zSnNvbiA/IGUudG9CYXNlNjQoKSA6IGUudG9VaW50OEFycmF5KCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIEJ5dGVTdHJpbmcgYmFzZWQgb24gdGhlIHByb3RvIHN0cmluZyB2YWx1ZS5cbiAqLyBmdW5jdGlvbiB4aSh0LCBlKSB7XG4gICAgcmV0dXJuIERpKHQsIGUudG9UaW1lc3RhbXAoKSk7XG59XG5cbmZ1bmN0aW9uIE5pKHQpIHtcbiAgICByZXR1cm4gRighIXQpLCBydC5mcm9tVGltZXN0YW1wKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IERlKHQpO1xuICAgICAgICByZXR1cm4gbmV3IGl0KGUuc2Vjb25kcywgZS5uYW5vcyk7XG4gICAgfSh0KSk7XG59XG5cbmZ1bmN0aW9uIGtpKHQsIGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IHV0KFsgXCJwcm9qZWN0c1wiLCB0LnByb2plY3RJZCwgXCJkYXRhYmFzZXNcIiwgdC5kYXRhYmFzZSBdKTtcbiAgICB9KHQpLmNoaWxkKFwiZG9jdW1lbnRzXCIpLmNoaWxkKGUpLmNhbm9uaWNhbFN0cmluZygpO1xufVxuXG5mdW5jdGlvbiBNaSh0KSB7XG4gICAgY29uc3QgZSA9IHV0LmZyb21TdHJpbmcodCk7XG4gICAgcmV0dXJuIEYodXIoZSkpLCBlO1xufVxuXG5mdW5jdGlvbiAkaSh0LCBlKSB7XG4gICAgcmV0dXJuIGtpKHQuZGF0YWJhc2VJZCwgZS5wYXRoKTtcbn1cblxuZnVuY3Rpb24gT2kodCwgZSkge1xuICAgIGNvbnN0IG4gPSBNaShlKTtcbiAgICBpZiAobi5nZXQoMSkgIT09IHQuZGF0YWJhc2VJZC5wcm9qZWN0SWQpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUcmllZCB0byBkZXNlcmlhbGl6ZSBrZXkgZnJvbSBkaWZmZXJlbnQgcHJvamVjdDogXCIgKyBuLmdldCgxKSArIFwiIHZzIFwiICsgdC5kYXRhYmFzZUlkLnByb2plY3RJZCk7XG4gICAgaWYgKG4uZ2V0KDMpICE9PSB0LmRhdGFiYXNlSWQuZGF0YWJhc2UpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUcmllZCB0byBkZXNlcmlhbGl6ZSBrZXkgZnJvbSBkaWZmZXJlbnQgZGF0YWJhc2U6IFwiICsgbi5nZXQoMykgKyBcIiB2cyBcIiArIHQuZGF0YWJhc2VJZC5kYXRhYmFzZSk7XG4gICAgcmV0dXJuIG5ldyBodChxaShuKSk7XG59XG5cbmZ1bmN0aW9uIEZpKHQsIGUpIHtcbiAgICByZXR1cm4ga2kodC5kYXRhYmFzZUlkLCBlKTtcbn1cblxuZnVuY3Rpb24gQmkodCkge1xuICAgIGNvbnN0IGUgPSBNaSh0KTtcbiAgICAvLyBJbiB2MWJldGExIHF1ZXJpZXMgZm9yIGNvbGxlY3Rpb25zIGF0IHRoZSByb290IGRpZCBub3QgaGF2ZSBhIHRyYWlsaW5nXG4gICAgLy8gXCIvZG9jdW1lbnRzXCIuIEluIHYxIGFsbCByZXNvdXJjZSBwYXRocyBjb250YWluIFwiL2RvY3VtZW50c1wiLiBQcmVzZXJ2ZSB0aGVcbiAgICAvLyBhYmlsaXR5IHRvIHJlYWQgdGhlIHYxYmV0YTEgZm9ybSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHF1ZXJpZXMgcGVyc2lzdGVkXG4gICAgLy8gaW4gdGhlIGxvY2FsIHRhcmdldCBjYWNoZS5cbiAgICAgICAgcmV0dXJuIDQgPT09IGUubGVuZ3RoID8gdXQuZW1wdHlQYXRoKCkgOiBxaShlKTtcbn1cblxuZnVuY3Rpb24gTGkodCkge1xuICAgIHJldHVybiBuZXcgdXQoWyBcInByb2plY3RzXCIsIHQuZGF0YWJhc2VJZC5wcm9qZWN0SWQsIFwiZGF0YWJhc2VzXCIsIHQuZGF0YWJhc2VJZC5kYXRhYmFzZSBdKS5jYW5vbmljYWxTdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gcWkodCkge1xuICAgIHJldHVybiBGKHQubGVuZ3RoID4gNCAmJiBcImRvY3VtZW50c1wiID09PSB0LmdldCg0KSksIHQucG9wRmlyc3QoNSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgRG9jdW1lbnQgcHJvdG8gZnJvbSBrZXkgYW5kIGZpZWxkcyAoYnV0IG5vIGNyZWF0ZS91cGRhdGUgdGltZSkgKi8gZnVuY3Rpb24gVWkodCwgZSwgbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICRpKHQsIGUpLFxuICAgICAgICBmaWVsZHM6IG4udmFsdWUubWFwVmFsdWUuZmllbGRzXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gS2kodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBPaSh0LCBlLm5hbWUpLCBpID0gTmkoZS51cGRhdGVUaW1lKSwgciA9IGUuY3JlYXRlVGltZSA/IE5pKGUuY3JlYXRlVGltZSkgOiBydC5taW4oKSwgbyA9IG5ldyB1bih7XG4gICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICBmaWVsZHM6IGUuZmllbGRzXG4gICAgICAgIH1cbiAgICB9KSwgdSA9IGFuLm5ld0ZvdW5kRG9jdW1lbnQocywgaSwgciwgbyk7XG4gICAgcmV0dXJuIG4gJiYgdS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKSwgbiA/IHUuc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCkgOiB1O1xufVxuXG5mdW5jdGlvbiBHaSh0LCBlKSB7XG4gICAgcmV0dXJuIFwiZm91bmRcIiBpbiBlID8gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBGKCEhZS5mb3VuZCksIGUuZm91bmQubmFtZSwgZS5mb3VuZC51cGRhdGVUaW1lO1xuICAgICAgICBjb25zdCBuID0gT2kodCwgZS5mb3VuZC5uYW1lKSwgcyA9IE5pKGUuZm91bmQudXBkYXRlVGltZSksIGkgPSBlLmZvdW5kLmNyZWF0ZVRpbWUgPyBOaShlLmZvdW5kLmNyZWF0ZVRpbWUpIDogcnQubWluKCksIHIgPSBuZXcgdW4oe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGUuZm91bmQuZmllbGRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYW4ubmV3Rm91bmREb2N1bWVudChuLCBzLCBpLCByKTtcbiAgICB9KHQsIGUpIDogXCJtaXNzaW5nXCIgaW4gZSA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgRighIWUubWlzc2luZyksIEYoISFlLnJlYWRUaW1lKTtcbiAgICAgICAgY29uc3QgbiA9IE9pKHQsIGUubWlzc2luZyksIHMgPSBOaShlLnJlYWRUaW1lKTtcbiAgICAgICAgcmV0dXJuIGFuLm5ld05vRG9jdW1lbnQobiwgcyk7XG4gICAgfSh0LCBlKSA6IE8oKTtcbn1cblxuZnVuY3Rpb24gUWkodCwgZSkge1xuICAgIGxldCBuO1xuICAgIGlmIChcInRhcmdldENoYW5nZVwiIGluIGUpIHtcbiAgICAgICAgZS50YXJnZXRDaGFuZ2U7XG4gICAgICAgIC8vIHByb3RvMyBkZWZhdWx0IHZhbHVlIGlzIHVuc2V0IGluIEpTT04gKHVuZGVmaW5lZCksIHNvIHVzZSAnTk9fQ0hBTkdFJ1xuICAgICAgICAvLyBpZiB1bnNldFxuICAgICAgICBjb25zdCBzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiTk9fQ0hBTkdFXCIgPT09IHQgPyAwIC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuTm9DaGFuZ2UgKi8gOiBcIkFERFwiID09PSB0ID8gMSAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkFkZGVkICovIDogXCJSRU1PVkVcIiA9PT0gdCA/IDIgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZW1vdmVkICovIDogXCJDVVJSRU5UXCIgPT09IHQgPyAzIC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuQ3VycmVudCAqLyA6IFwiUkVTRVRcIiA9PT0gdCA/IDQgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZXNldCAqLyA6IE8oKTtcbiAgICAgICAgfShlLnRhcmdldENoYW5nZS50YXJnZXRDaGFuZ2VUeXBlIHx8IFwiTk9fQ0hBTkdFXCIpLCBpID0gZS50YXJnZXRDaGFuZ2UudGFyZ2V0SWRzIHx8IFtdLCByID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQudXNlUHJvdG8zSnNvbiA/IChGKHZvaWQgMCA9PT0gZSB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBlKSwgVmUuZnJvbUJhc2U2NFN0cmluZyhlIHx8IFwiXCIpKSA6IChGKHZvaWQgMCA9PT0gZSB8fCBlIGluc3RhbmNlb2YgVWludDhBcnJheSksIFxuICAgICAgICAgICAgVmUuZnJvbVVpbnQ4QXJyYXkoZSB8fCBuZXcgVWludDhBcnJheSkpO1xuICAgICAgICB9KHQsIGUudGFyZ2V0Q2hhbmdlLnJlc3VtZVRva2VuKSwgbyA9IGUudGFyZ2V0Q2hhbmdlLmNhdXNlLCB1ID0gbyAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdm9pZCAwID09PSB0LmNvZGUgPyBxLlVOS05PV04gOiB1aSh0LmNvZGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVKGUsIHQubWVzc2FnZSB8fCBcIlwiKTtcbiAgICAgICAgfShvKTtcbiAgICAgICAgbiA9IG5ldyBJaShzLCBpLCByLCB1IHx8IG51bGwpO1xuICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudENoYW5nZVwiIGluIGUpIHtcbiAgICAgICAgZS5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgY29uc3QgcyA9IGUuZG9jdW1lbnRDaGFuZ2U7XG4gICAgICAgIHMuZG9jdW1lbnQsIHMuZG9jdW1lbnQubmFtZSwgcy5kb2N1bWVudC51cGRhdGVUaW1lO1xuICAgICAgICBjb25zdCBpID0gT2kodCwgcy5kb2N1bWVudC5uYW1lKSwgciA9IE5pKHMuZG9jdW1lbnQudXBkYXRlVGltZSksIG8gPSBzLmRvY3VtZW50LmNyZWF0ZVRpbWUgPyBOaShzLmRvY3VtZW50LmNyZWF0ZVRpbWUpIDogcnQubWluKCksIHUgPSBuZXcgdW4oe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHMuZG9jdW1lbnQuZmllbGRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBjID0gYW4ubmV3Rm91bmREb2N1bWVudChpLCByLCBvLCB1KSwgYSA9IHMudGFyZ2V0SWRzIHx8IFtdLCBoID0gcy5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xuICAgICAgICBuID0gbmV3IHlpKGEsIGgsIGMua2V5LCBjKTtcbiAgICB9IGVsc2UgaWYgKFwiZG9jdW1lbnREZWxldGVcIiBpbiBlKSB7XG4gICAgICAgIGUuZG9jdW1lbnREZWxldGU7XG4gICAgICAgIGNvbnN0IHMgPSBlLmRvY3VtZW50RGVsZXRlO1xuICAgICAgICBzLmRvY3VtZW50O1xuICAgICAgICBjb25zdCBpID0gT2kodCwgcy5kb2N1bWVudCksIHIgPSBzLnJlYWRUaW1lID8gTmkocy5yZWFkVGltZSkgOiBydC5taW4oKSwgbyA9IGFuLm5ld05vRG9jdW1lbnQoaSwgciksIHUgPSBzLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgIG4gPSBuZXcgeWkoW10sIHUsIG8ua2V5LCBvKTtcbiAgICB9IGVsc2UgaWYgKFwiZG9jdW1lbnRSZW1vdmVcIiBpbiBlKSB7XG4gICAgICAgIGUuZG9jdW1lbnRSZW1vdmU7XG4gICAgICAgIGNvbnN0IHMgPSBlLmRvY3VtZW50UmVtb3ZlO1xuICAgICAgICBzLmRvY3VtZW50O1xuICAgICAgICBjb25zdCBpID0gT2kodCwgcy5kb2N1bWVudCksIHIgPSBzLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgIG4gPSBuZXcgeWkoW10sIHIsIGksIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghKFwiZmlsdGVyXCIgaW4gZSkpIHJldHVybiBPKCk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGUuZmlsdGVyO1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuZmlsdGVyO1xuICAgICAgICAgICAgdC50YXJnZXRJZDtcbiAgICAgICAgICAgIGNvbnN0IHtjb3VudDogcyA9IDAsIHVuY2hhbmdlZE5hbWVzOiBpfSA9IHQsIHIgPSBuZXcgc2kocywgaSksIG8gPSB0LnRhcmdldElkO1xuICAgICAgICAgICAgbiA9IG5ldyBwaShvLCByKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gamkodCwgZSkge1xuICAgIGxldCBuO1xuICAgIGlmIChlIGluc3RhbmNlb2YganMpIG4gPSB7XG4gICAgICAgIHVwZGF0ZTogVWkodCwgZS5rZXksIGUudmFsdWUpXG4gICAgfTsgZWxzZSBpZiAoZSBpbnN0YW5jZW9mIFlzKSBuID0ge1xuICAgICAgICBkZWxldGU6ICRpKHQsIGUua2V5KVxuICAgIH07IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiB6cykgbiA9IHtcbiAgICAgICAgdXBkYXRlOiBVaSh0LCBlLmtleSwgZS5kYXRhKSxcbiAgICAgICAgdXBkYXRlTWFzazogb3IoZS5maWVsZE1hc2spXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBYcykpIHJldHVybiBPKCk7XG4gICAgICAgIG4gPSB7XG4gICAgICAgICAgICB2ZXJpZnk6ICRpKHQsIGUua2V5KVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZS5maWVsZFRyYW5zZm9ybXMubGVuZ3RoID4gMCAmJiAobi51cGRhdGVUcmFuc2Zvcm1zID0gZS5maWVsZFRyYW5zZm9ybXMubWFwKCh0ID0+IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUudHJhbnNmb3JtO1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIGJzKSByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGRQYXRoOiBlLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpLFxuICAgICAgICAgICAgc2V0VG9TZXJ2ZXJWYWx1ZTogXCJSRVFVRVNUX1RJTUVcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIFZzKSByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGRQYXRoOiBlLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpLFxuICAgICAgICAgICAgYXBwZW5kTWlzc2luZ0VsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBuLmVsZW1lbnRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgRHMpIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICByZW1vdmVBbGxGcm9tQXJyYXk6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IG4uZWxlbWVudHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiB4cykgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkUGF0aDogZS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSxcbiAgICAgICAgICAgIGluY3JlbWVudDogbi5ndFxuICAgICAgICB9O1xuICAgICAgICB0aHJvdyBPKCk7XG4gICAgfSgwLCB0KSkpKSwgZS5wcmVjb25kaXRpb24uaXNOb25lIHx8IChuLmN1cnJlbnREb2N1bWVudCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZS51cGRhdGVUaW1lID8ge1xuICAgICAgICAgICAgdXBkYXRlVGltZTogeGkodCwgZS51cGRhdGVUaW1lKVxuICAgICAgICB9IDogdm9pZCAwICE9PSBlLmV4aXN0cyA/IHtcbiAgICAgICAgICAgIGV4aXN0czogZS5leGlzdHNcbiAgICAgICAgfSA6IE8oKTtcbiAgICB9KHQsIGUucHJlY29uZGl0aW9uKSksIG47XG59XG5cbmZ1bmN0aW9uIHppKHQsIGUpIHtcbiAgICBjb25zdCBuID0gZS5jdXJyZW50RG9jdW1lbnQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQudXBkYXRlVGltZSA/IEZzLnVwZGF0ZVRpbWUoTmkodC51cGRhdGVUaW1lKSkgOiB2b2lkIDAgIT09IHQuZXhpc3RzID8gRnMuZXhpc3RzKHQuZXhpc3RzKSA6IEZzLm5vbmUoKTtcbiAgICB9KGUuY3VycmVudERvY3VtZW50KSA6IEZzLm5vbmUoKSwgcyA9IGUudXBkYXRlVHJhbnNmb3JtcyA/IGUudXBkYXRlVHJhbnNmb3Jtcy5tYXAoKGUgPT4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBsZXQgbiA9IG51bGw7XG4gICAgICAgIGlmIChcInNldFRvU2VydmVyVmFsdWVcIiBpbiBlKSBGKFwiUkVRVUVTVF9USU1FXCIgPT09IGUuc2V0VG9TZXJ2ZXJWYWx1ZSksIG4gPSBuZXcgYnM7IGVsc2UgaWYgKFwiYXBwZW5kTWlzc2luZ0VsZW1lbnRzXCIgaW4gZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuYXBwZW5kTWlzc2luZ0VsZW1lbnRzLnZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgIG4gPSBuZXcgVnModCk7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJyZW1vdmVBbGxGcm9tQXJyYXlcIiBpbiBlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZS5yZW1vdmVBbGxGcm9tQXJyYXkudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgbiA9IG5ldyBEcyh0KTtcbiAgICAgICAgfSBlbHNlIFwiaW5jcmVtZW50XCIgaW4gZSA/IG4gPSBuZXcgeHModCwgZS5pbmNyZW1lbnQpIDogTygpO1xuICAgICAgICBjb25zdCBzID0gYXQuZnJvbVNlcnZlckZvcm1hdChlLmZpZWxkUGF0aCk7XG4gICAgICAgIHJldHVybiBuZXcgTXMocywgbik7XG4gICAgfSh0LCBlKSkpIDogW107XG4gICAgaWYgKGUudXBkYXRlKSB7XG4gICAgICAgIGUudXBkYXRlLm5hbWU7XG4gICAgICAgIGNvbnN0IGkgPSBPaSh0LCBlLnVwZGF0ZS5uYW1lKSwgciA9IG5ldyB1bih7XG4gICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgIGZpZWxkczogZS51cGRhdGUuZmllbGRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZS51cGRhdGVNYXNrKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmZpZWxkUGF0aHMgfHwgW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZShlLm1hcCgodCA9PiBhdC5mcm9tU2VydmVyRm9ybWF0KHQpKSkpO1xuICAgICAgICAgICAgfShlLnVwZGF0ZU1hc2spO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB6cyhpLCByLCB0LCBuLCBzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGpzKGksIHIsIG4sIHMpO1xuICAgIH1cbiAgICBpZiAoZS5kZWxldGUpIHtcbiAgICAgICAgY29uc3QgcyA9IE9pKHQsIGUuZGVsZXRlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBZcyhzLCBuKTtcbiAgICB9XG4gICAgaWYgKGUudmVyaWZ5KSB7XG4gICAgICAgIGNvbnN0IHMgPSBPaSh0LCBlLnZlcmlmeSk7XG4gICAgICAgIHJldHVybiBuZXcgWHMocywgbik7XG4gICAgfVxuICAgIHJldHVybiBPKCk7XG59XG5cbmZ1bmN0aW9uIFdpKHQsIGUpIHtcbiAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA+IDAgPyAoRih2b2lkIDAgIT09IGUpLCB0Lm1hcCgodCA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIE5PVEU6IERlbGV0ZXMgZG9uJ3QgaGF2ZSBhbiB1cGRhdGVUaW1lLlxuICAgICAgICBsZXQgbiA9IHQudXBkYXRlVGltZSA/IE5pKHQudXBkYXRlVGltZSkgOiBOaShlKTtcbiAgICAgICAgcmV0dXJuIG4uaXNFcXVhbChydC5taW4oKSkgJiYgKFxuICAgICAgICAvLyBUaGUgRmlyZXN0b3JlIEVtdWxhdG9yIGN1cnJlbnRseSByZXR1cm5zIGFuIHVwZGF0ZSB0aW1lIG9mIDAgZm9yXG4gICAgICAgIC8vIGRlbGV0ZXMgb2Ygbm9uLWV4aXN0aW5nIGRvY3VtZW50cyAocmF0aGVyIHRoYW4gbnVsbCkuIFRoaXMgYnJlYWtzIHRoZVxuICAgICAgICAvLyB0ZXN0IFwiZ2V0IGRlbGV0ZWQgZG9jIHdoaWxlIG9mZmxpbmUgd2l0aCBzb3VyY2U9Y2FjaGVcIiBhcyBOb0RvY3VtZW50c1xuICAgICAgICAvLyB3aXRoIHZlcnNpb24gMCBhcmUgZmlsdGVyZWQgYnkgSW5kZXhlZERiJ3MgUmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAgICAgICAgLy8gVE9ETygjMjE0OSk6IFJlbW92ZSB0aGlzIHdoZW4gRW11bGF0b3IgaXMgZml4ZWRcbiAgICAgICAgbiA9IE5pKGUpKSwgbmV3IE9zKG4sIHQudHJhbnNmb3JtUmVzdWx0cyB8fCBbXSk7XG4gICAgfSh0LCBlKSkpKSA6IFtdO1xufVxuXG5mdW5jdGlvbiBIaSh0LCBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZG9jdW1lbnRzOiBbIEZpKHQsIGUucGF0aCkgXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIEppKHQsIGUpIHtcbiAgICAvLyBEaXNzZWN0IHRoZSBwYXRoIGludG8gcGFyZW50LCBjb2xsZWN0aW9uSWQsIGFuZCBvcHRpb25hbCBrZXkgZmlsdGVyLlxuICAgIGNvbnN0IG4gPSB7XG4gICAgICAgIHN0cnVjdHVyZWRRdWVyeToge31cbiAgICB9LCBzID0gZS5wYXRoO1xuICAgIG51bGwgIT09IGUuY29sbGVjdGlvbkdyb3VwID8gKG4ucGFyZW50ID0gRmkodCwgcyksIG4uc3RydWN0dXJlZFF1ZXJ5LmZyb20gPSBbIHtcbiAgICAgICAgY29sbGVjdGlvbklkOiBlLmNvbGxlY3Rpb25Hcm91cCxcbiAgICAgICAgYWxsRGVzY2VuZGFudHM6ICEwXG4gICAgfSBdKSA6IChuLnBhcmVudCA9IEZpKHQsIHMucG9wTGFzdCgpKSwgbi5zdHJ1Y3R1cmVkUXVlcnkuZnJvbSA9IFsge1xuICAgICAgICBjb2xsZWN0aW9uSWQ6IHMubGFzdFNlZ21lbnQoKVxuICAgIH0gXSk7XG4gICAgY29uc3QgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKDAgPT09IHQubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIHJldHVybiBycihnbi5jcmVhdGUodCwgXCJhbmRcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5BTkQgKi8pKTtcbiAgICB9KGUuZmlsdGVycyk7XG4gICAgaSAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkud2hlcmUgPSBpKTtcbiAgICBjb25zdCByID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoMCA9PT0gdC5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHQubWFwKCh0ID0+IFxuICAgICAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IHNyKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogdHIodC5kaXIpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHQpKSk7XG4gICAgfShlLm9yZGVyQnkpO1xuICAgIHIgJiYgKG4uc3RydWN0dXJlZFF1ZXJ5Lm9yZGVyQnkgPSByKTtcbiAgICBjb25zdCBvID0gU2kodCwgZS5saW1pdCk7XG4gICAgdmFyIHU7XG4gICAgcmV0dXJuIG51bGwgIT09IG8gJiYgKG4uc3RydWN0dXJlZFF1ZXJ5LmxpbWl0ID0gbyksIGUuc3RhcnRBdCAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkuc3RhcnRBdCA9IHtcbiAgICAgICAgYmVmb3JlOiAodSA9IGUuc3RhcnRBdCkuaW5jbHVzaXZlLFxuICAgICAgICB2YWx1ZXM6IHUucG9zaXRpb25cbiAgICB9KSwgZS5lbmRBdCAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkuZW5kQXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWZvcmU6ICF0LmluY2x1c2l2ZSxcbiAgICAgICAgICAgIHZhbHVlczogdC5wb3NpdGlvblxuICAgICAgICB9O1xuICAgIH0oZS5lbmRBdCkpLCBuO1xufVxuXG5mdW5jdGlvbiBZaSh0KSB7XG4gICAgbGV0IGUgPSBCaSh0LnBhcmVudCk7XG4gICAgY29uc3QgbiA9IHQuc3RydWN0dXJlZFF1ZXJ5LCBzID0gbi5mcm9tID8gbi5mcm9tLmxlbmd0aCA6IDA7XG4gICAgbGV0IGkgPSBudWxsO1xuICAgIGlmIChzID4gMCkge1xuICAgICAgICBGKDEgPT09IHMpO1xuICAgICAgICBjb25zdCB0ID0gbi5mcm9tWzBdO1xuICAgICAgICB0LmFsbERlc2NlbmRhbnRzID8gaSA9IHQuY29sbGVjdGlvbklkIDogZSA9IGUuY2hpbGQodC5jb2xsZWN0aW9uSWQpO1xuICAgIH1cbiAgICBsZXQgciA9IFtdO1xuICAgIG4ud2hlcmUgJiYgKHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBaaSh0KTtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBnbiAmJiBJbihlKSkgcmV0dXJuIGUuZ2V0RmlsdGVycygpO1xuICAgICAgICByZXR1cm4gWyBlIF07XG4gICAgfShuLndoZXJlKSk7XG4gICAgbGV0IG8gPSBbXTtcbiAgICBuLm9yZGVyQnkgJiYgKG8gPSBuLm9yZGVyQnkubWFwKCh0ID0+IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkbihpcih0LmZpZWxkKSwgXG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJBU0NFTkRJTkdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJERVNDRU5ESU5HXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgKHQuZGlyZWN0aW9uKSk7XG4gICAgfVxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAodCkpKSk7XG4gICAgbGV0IHUgPSBudWxsO1xuICAgIG4ubGltaXQgJiYgKHUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBlO1xuICAgICAgICByZXR1cm4gZSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgPyB0LnZhbHVlIDogdCwgRnQoZSkgPyBudWxsIDogZTtcbiAgICB9KG4ubGltaXQpKTtcbiAgICBsZXQgYyA9IG51bGw7XG4gICAgbi5zdGFydEF0ICYmIChjID0gZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gISF0LmJlZm9yZSwgbiA9IHQudmFsdWVzIHx8IFtdO1xuICAgICAgICByZXR1cm4gbmV3IGhuKG4sIGUpO1xuICAgIH0obi5zdGFydEF0KSk7XG4gICAgbGV0IGEgPSBudWxsO1xuICAgIHJldHVybiBuLmVuZEF0ICYmIChhID0gZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gIXQuYmVmb3JlLCBuID0gdC52YWx1ZXMgfHwgW107XG4gICAgICAgIHJldHVybiBuZXcgaG4obiwgZSk7XG4gICAgfVxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAobi5lbmRBdCkpLCBLbihlLCBpLCBvLCByLCB1LCBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8gLCBjLCBhKTtcbn1cblxuZnVuY3Rpb24gWGkodCwgZSkge1xuICAgIGNvbnN0IG4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgIGNhc2UgXCJUYXJnZXRQdXJwb3NlTGlzdGVuXCIgLyogVGFyZ2V0UHVycG9zZS5MaXN0ZW4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICBjYXNlIFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoXCIgLyogVGFyZ2V0UHVycG9zZS5FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gXCJleGlzdGVuY2UtZmlsdGVyLW1pc21hdGNoXCI7XG5cbiAgICAgICAgICBjYXNlIFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb21cIiAvKiBUYXJnZXRQdXJwb3NlLkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb20gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXhpc3RlbmNlLWZpbHRlci1taXNtYXRjaC1ibG9vbVwiO1xuXG4gICAgICAgICAgY2FzZSBcIlRhcmdldFB1cnBvc2VMaW1ib1Jlc29sdXRpb25cIiAvKiBUYXJnZXRQdXJwb3NlLkxpbWJvUmVzb2x1dGlvbiAqLyA6XG4gICAgICAgICAgICByZXR1cm4gXCJsaW1iby1kb2N1bWVudFwiO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgIH1cbiAgICB9KGUucHVycG9zZSk7XG4gICAgcmV0dXJuIG51bGwgPT0gbiA/IG51bGwgOiB7XG4gICAgICAgIFwiZ29vZy1saXN0ZW4tdGFnc1wiOiBuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gWmkodCkge1xuICAgIHJldHVybiB2b2lkIDAgIT09IHQudW5hcnlGaWx0ZXIgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodC51bmFyeUZpbHRlci5vcCkge1xuICAgICAgICAgIGNhc2UgXCJJU19OQU5cIjpcbiAgICAgICAgICAgIGNvbnN0IGUgPSBpcih0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgICAgIHJldHVybiBtbi5jcmVhdGUoZSwgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovICwge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBcIklTX05VTExcIjpcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpcih0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgICAgIHJldHVybiBtbi5jcmVhdGUobiwgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovICwge1xuICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBcIklTX05PVF9OQU5cIjpcbiAgICAgICAgICAgIGNvbnN0IHMgPSBpcih0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgICAgIHJldHVybiBtbi5jcmVhdGUocywgXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyAsIHtcbiAgICAgICAgICAgICAgICBkb3VibGVWYWx1ZTogTmFOXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgXCJJU19OT1RfTlVMTFwiOlxuICAgICAgICAgICAgY29uc3QgaSA9IGlyKHQudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIG1uLmNyZWF0ZShpLCBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovICwge1xuICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgIH1cbiAgICB9KHQpIDogdm9pZCAwICE9PSB0LmZpZWxkRmlsdGVyID8gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbW4uY3JlYXRlKGlyKHQuZmllbGRGaWx0ZXIuZmllbGQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIkVRVUFMXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiTk9UX0VRVUFMXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIkdSRUFURVJfVEhBTlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIj5cIiAvKiBPcGVyYXRvci5HUkVBVEVSX1RIQU4gKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIj49XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOX09SX0VRVUFMICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJMRVNTX1RIQU5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8XCIgLyogT3BlcmF0b3IuTEVTU19USEFOICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJMRVNTX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8PVwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTl9PUl9FUVVBTCAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiQVJSQVlfQ09OVEFJTlNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJJTlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImluXCIgLyogT3BlcmF0b3IuSU4gKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIk5PVF9JTlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiQVJSQVlfQ09OVEFJTlNfQU5ZXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSh0LmZpZWxkRmlsdGVyLm9wKSwgdC5maWVsZEZpbHRlci52YWx1ZSk7XG4gICAgfSh0KSA6IHZvaWQgMCAhPT0gdC5jb21wb3NpdGVGaWx0ZXIgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBnbi5jcmVhdGUodC5jb21wb3NpdGVGaWx0ZXIuZmlsdGVycy5tYXAoKHQgPT4gWmkodCkpKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJBTkRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhbmRcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5BTkQgKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIk9SXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3JcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5PUiAqLztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0odC5jb21wb3NpdGVGaWx0ZXIub3ApKTtcbiAgICB9KHQpIDogTygpO1xufVxuXG5mdW5jdGlvbiB0cih0KSB7XG4gICAgcmV0dXJuIFJpW3RdO1xufVxuXG5mdW5jdGlvbiBlcih0KSB7XG4gICAgcmV0dXJuIFBpW3RdO1xufVxuXG5mdW5jdGlvbiBucih0KSB7XG4gICAgcmV0dXJuIGJpW3RdO1xufVxuXG5mdW5jdGlvbiBzcih0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGRQYXRoOiB0LmNhbm9uaWNhbFN0cmluZygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXIodCkge1xuICAgIHJldHVybiBhdC5mcm9tU2VydmVyRm9ybWF0KHQuZmllbGRQYXRoKTtcbn1cblxuZnVuY3Rpb24gcnIodCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgbW4gPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmIChcIj09XCIgLyogT3BlcmF0b3IuRVFVQUwgKi8gPT09IHQub3ApIHtcbiAgICAgICAgICAgIGlmIChYZSh0LnZhbHVlKSkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1bmFyeUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc3IodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05BTlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChZZSh0LnZhbHVlKSkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1bmFyeUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc3IodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05VTExcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA9PT0gdC5vcCkge1xuICAgICAgICAgICAgaWYgKFhlKHQudmFsdWUpKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzcih0LmZpZWxkKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiSVNfTk9UX05BTlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChZZSh0LnZhbHVlKSkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1bmFyeUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc3IodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05PVF9OVUxMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZEZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGZpZWxkOiBzcih0LmZpZWxkKSxcbiAgICAgICAgICAgICAgICBvcDogZXIodC5vcCksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHQudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KHQpIDogdCBpbnN0YW5jZW9mIGduID8gZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gdC5nZXRGaWx0ZXJzKCkubWFwKCh0ID0+IHJyKHQpKSk7XG4gICAgICAgIGlmICgxID09PSBlLmxlbmd0aCkgcmV0dXJuIGVbMF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wb3NpdGVGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBvcDogbnIodC5vcCksXG4gICAgICAgICAgICAgICAgZmlsdGVyczogZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0odCkgOiBPKCk7XG59XG5cbmZ1bmN0aW9uIG9yKHQpIHtcbiAgICBjb25zdCBlID0gW107XG4gICAgcmV0dXJuIHQuZmllbGRzLmZvckVhY2goKHQgPT4gZS5wdXNoKHQuY2Fub25pY2FsU3RyaW5nKCkpKSksIHtcbiAgICAgICAgZmllbGRQYXRoczogZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHVyKHQpIHtcbiAgICAvLyBSZXNvdXJjZSBuYW1lcyBoYXZlIGF0IGxlYXN0IDQgY29tcG9uZW50cyAocHJvamVjdCBJRCwgZGF0YWJhc2UgSUQpXG4gICAgcmV0dXJuIHQubGVuZ3RoID49IDQgJiYgXCJwcm9qZWN0c1wiID09PSB0LmdldCgwKSAmJiBcImRhdGFiYXNlc1wiID09PSB0LmdldCgyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW1tdXRhYmxlIHNldCBvZiBtZXRhZGF0YSB0aGF0IHRoZSBsb2NhbCBzdG9yZSB0cmFja3MgZm9yIGVhY2ggdGFyZ2V0LlxuICovIGNsYXNzIGNyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHRhcmdldCBiZWluZyBsaXN0ZW5lZCB0by4gKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IElEIHRvIHdoaWNoIHRoZSB0YXJnZXQgY29ycmVzcG9uZHM7IEFzc2lnbmVkIGJ5IHRoZVxuICAgICAqIExvY2FsU3RvcmUgZm9yIHVzZXIgbGlzdGVucyBhbmQgYnkgdGhlIFN5bmNFbmdpbmUgZm9yIGxpbWJvIHdhdGNoZXMuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSBwdXJwb3NlIG9mIHRoZSB0YXJnZXQuICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGFzdCB0cmFuc2FjdGlvbiBkdXJpbmcgd2hpY2ggdGhpcyB0YXJnZXQgZGF0YVxuICAgICAqIHdhcyBtb2RpZmllZC5cbiAgICAgKi9cbiAgICBzLCBcbiAgICAvKiogVGhlIGxhdGVzdCBzbmFwc2hvdCB2ZXJzaW9uIHNlZW4gZm9yIHRoaXMgdGFyZ2V0LiAqL1xuICAgIGkgPSBydC5taW4oKVxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHNuYXBzaG90IHZlcnNpb24gYXQgd2hpY2ggdGhlIGFzc29jaWF0ZWQgdmlld1xuICAgICAqIGNvbnRhaW5lZCBubyBsaW1ibyBkb2N1bWVudHMuXG4gICAgICovICwgciA9IHJ0Lm1pbigpXG4gICAgLyoqXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSB0YXJnZXQgdG8gYmVcbiAgICAgKiByZXN1bWVkIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdFxuICAgICAqIG1hdGNoZXMgdGhlIHRhcmdldC4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW5cbiAgICAgKiB0aW1lIGZyb20gd2hpY2ggdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKi8gLCBvID0gVmUuRU1QVFlfQllURV9TVFJJTkdcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IGxhc3QgbWF0Y2hlZCB0aGUgcXVlcnkgYXQgdGhlIHJlc3VtZSB0b2tlbiBvclxuICAgICAqIHJlYWQgdGltZS4gRG9jdW1lbnRzIGFyZSBjb3VudGVkIG9ubHkgd2hlbiBtYWtpbmcgYSBsaXN0ZW4gcmVxdWVzdCB3aXRoXG4gICAgICogcmVzdW1lIHRva2VuIG9yIHJlYWQgdGltZSwgb3RoZXJ3aXNlLCBrZWVwIGl0IG51bGwuXG4gICAgICovICwgdSA9IG51bGwpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0LCB0aGlzLnRhcmdldElkID0gZSwgdGhpcy5wdXJwb3NlID0gbiwgdGhpcy5zZXF1ZW5jZU51bWJlciA9IHMsIHRoaXMuc25hcHNob3RWZXJzaW9uID0gaSwgXG4gICAgICAgIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA9IHIsIHRoaXMucmVzdW1lVG9rZW4gPSBvLCB0aGlzLmV4cGVjdGVkQ291bnQgPSB1O1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgc2VxdWVuY2UgbnVtYmVyLiAqLyAgICB3aXRoU2VxdWVuY2VOdW1iZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IGNyKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHQsIHRoaXMuc25hcHNob3RWZXJzaW9uLCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIHRoaXMucmVzdW1lVG9rZW4sIHRoaXMuZXhwZWN0ZWRDb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIHJlc3VtZSB0b2tlbiBhbmRcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uLlxuICAgICAqLyAgICB3aXRoUmVzdW1lVG9rZW4odCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IGNyKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIGUsIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgdCwgXG4gICAgICAgIC8qIGV4cGVjdGVkQ291bnQ9ICovIG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBleHBlY3RlZCBjb3VudC5cbiAgICAgKi8gICAgd2l0aEV4cGVjdGVkQ291bnQodCkge1xuICAgICAgICByZXR1cm4gbmV3IGNyKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIHRoaXMuc25hcHNob3RWZXJzaW9uLCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIHRoaXMucmVzdW1lVG9rZW4sIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBsYXN0IGxpbWJvIGZyZWVcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uIG51bWJlci5cbiAgICAgKi8gICAgd2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IGNyKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIHRoaXMuc25hcHNob3RWZXJzaW9uLCB0LCB0aGlzLnJlc3VtZVRva2VuLCB0aGlzLmV4cGVjdGVkQ291bnQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBTZXJpYWxpemVyIGZvciB2YWx1ZXMgc3RvcmVkIGluIHRoZSBMb2NhbFN0b3JlLiAqLyBjbGFzcyBhciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmZlID0gdDtcbiAgICB9XG59XG5cbi8qKiBEZWNvZGVzIGEgcmVtb3RlIGRvY3VtZW50IGZyb20gc3RvcmFnZSBsb2NhbGx5IHRvIGEgRG9jdW1lbnQuICovIGZ1bmN0aW9uIGhyKHQsIGUpIHtcbiAgICBsZXQgbjtcbiAgICBpZiAoZS5kb2N1bWVudCkgbiA9IEtpKHQuZmUsIGUuZG9jdW1lbnQsICEhZS5oYXNDb21taXR0ZWRNdXRhdGlvbnMpOyBlbHNlIGlmIChlLm5vRG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3QgdCA9IGh0LmZyb21TZWdtZW50cyhlLm5vRG9jdW1lbnQucGF0aCksIHMgPSB3cihlLm5vRG9jdW1lbnQucmVhZFRpbWUpO1xuICAgICAgICBuID0gYW4ubmV3Tm9Eb2N1bWVudCh0LCBzKSwgZS5oYXNDb21taXR0ZWRNdXRhdGlvbnMgJiYgbi5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWUudW5rbm93bkRvY3VtZW50KSByZXR1cm4gTygpO1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ID0gaHQuZnJvbVNlZ21lbnRzKGUudW5rbm93bkRvY3VtZW50LnBhdGgpLCBzID0gd3IoZS51bmtub3duRG9jdW1lbnQudmVyc2lvbik7XG4gICAgICAgICAgICBuID0gYW4ubmV3VW5rbm93bkRvY3VtZW50KHQsIHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlLnJlYWRUaW1lICYmIG4uc2V0UmVhZFRpbWUoZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IGl0KHRbMF0sIHRbMV0pO1xuICAgICAgICByZXR1cm4gcnQuZnJvbVRpbWVzdGFtcChlKTtcbiAgICB9KGUucmVhZFRpbWUpKSwgbjtcbn1cblxuLyoqIEVuY29kZXMgYSBkb2N1bWVudCBmb3Igc3RvcmFnZSBsb2NhbGx5LiAqLyBmdW5jdGlvbiBscih0LCBlKSB7XG4gICAgY29uc3QgbiA9IGUua2V5LCBzID0ge1xuICAgICAgICBwcmVmaXhQYXRoOiBuLmdldENvbGxlY3Rpb25QYXRoKCkucG9wTGFzdCgpLnRvQXJyYXkoKSxcbiAgICAgICAgY29sbGVjdGlvbkdyb3VwOiBuLmNvbGxlY3Rpb25Hcm91cCxcbiAgICAgICAgZG9jdW1lbnRJZDogbi5wYXRoLmxhc3RTZWdtZW50KCksXG4gICAgICAgIHJlYWRUaW1lOiBmcihlLnJlYWRUaW1lKSxcbiAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiBlLmhhc0NvbW1pdHRlZE11dGF0aW9uc1xuICAgIH07XG4gICAgaWYgKGUuaXNGb3VuZERvY3VtZW50KCkpIHMuZG9jdW1lbnQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiAkaSh0LCBlLmtleSksXG4gICAgICAgICAgICBmaWVsZHM6IGUuZGF0YS52YWx1ZS5tYXBWYWx1ZS5maWVsZHMsXG4gICAgICAgICAgICB1cGRhdGVUaW1lOiBEaSh0LCBlLnZlcnNpb24udG9UaW1lc3RhbXAoKSksXG4gICAgICAgICAgICBjcmVhdGVUaW1lOiBEaSh0LCBlLmNyZWF0ZVRpbWUudG9UaW1lc3RhbXAoKSlcbiAgICAgICAgfTtcbiAgICB9KHQuZmUsIGUpOyBlbHNlIGlmIChlLmlzTm9Eb2N1bWVudCgpKSBzLm5vRG9jdW1lbnQgPSB7XG4gICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgIHJlYWRUaW1lOiBkcihlLnZlcnNpb24pXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGlmICghZS5pc1Vua25vd25Eb2N1bWVudCgpKSByZXR1cm4gTygpO1xuICAgICAgICBzLnVua25vd25Eb2N1bWVudCA9IHtcbiAgICAgICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgICAgICB2ZXJzaW9uOiBkcihlLnZlcnNpb24pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBmcih0KSB7XG4gICAgY29uc3QgZSA9IHQudG9UaW1lc3RhbXAoKTtcbiAgICByZXR1cm4gWyBlLnNlY29uZHMsIGUubmFub3NlY29uZHMgXTtcbn1cblxuZnVuY3Rpb24gZHIodCkge1xuICAgIGNvbnN0IGUgPSB0LnRvVGltZXN0YW1wKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogZS5zZWNvbmRzLFxuICAgICAgICBuYW5vc2Vjb25kczogZS5uYW5vc2Vjb25kc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdyKHQpIHtcbiAgICBjb25zdCBlID0gbmV3IGl0KHQuc2Vjb25kcywgdC5uYW5vc2Vjb25kcyk7XG4gICAgcmV0dXJuIHJ0LmZyb21UaW1lc3RhbXAoZSk7XG59XG5cbi8qKiBFbmNvZGVzIGEgYmF0Y2ggb2YgbXV0YXRpb25zIGludG8gYSBEYk11dGF0aW9uQmF0Y2ggZm9yIGxvY2FsIHN0b3JhZ2UuICovXG4vKiogRGVjb2RlcyBhIERiTXV0YXRpb25CYXRjaCBpbnRvIGEgTXV0YXRpb25CYXRjaCAqL1xuZnVuY3Rpb24gX3IodCwgZSkge1xuICAgIGNvbnN0IG4gPSAoZS5iYXNlTXV0YXRpb25zIHx8IFtdKS5tYXAoKGUgPT4gemkodC5mZSwgZSkpKTtcbiAgICAvLyBTcXVhc2ggb2xkIHRyYW5zZm9ybSBtdXRhdGlvbnMgaW50byBleGlzdGluZyBwYXRjaCBvciBzZXQgbXV0YXRpb25zLlxuICAgIC8vIFRoZSByZXBsYWNlbWVudCBvZiByZXByZXNlbnRpbmcgYHRyYW5zZm9ybXNgIHdpdGggYHVwZGF0ZV90cmFuc2Zvcm1zYFxuICAgIC8vIG9uIHRoZSBTREsgbWVhbnMgdGhhdCBvbGQgYHRyYW5zZm9ybWAgbXV0YXRpb25zIHN0b3JlZCBpbiBJbmRleGVkREIgbmVlZFxuICAgIC8vIHRvIGJlIHVwZGF0ZWQgdG8gYHVwZGF0ZV90cmFuc2Zvcm1zYC5cbiAgICAvLyBUT0RPKGIvMTc0NjA4Mzc0KTogUmVtb3ZlIHRoaXMgY29kZSBvbmNlIHdlIHBlcmZvcm0gYSBzY2hlbWEgbWlncmF0aW9uLlxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGUubXV0YXRpb25zLmxlbmd0aCAtIDE7ICsrdCkge1xuICAgICAgICBjb25zdCBuID0gZS5tdXRhdGlvbnNbdF07XG4gICAgICAgIGlmICh0ICsgMSA8IGUubXV0YXRpb25zLmxlbmd0aCAmJiB2b2lkIDAgIT09IGUubXV0YXRpb25zW3QgKyAxXS50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLm11dGF0aW9uc1t0ICsgMV07XG4gICAgICAgICAgICBuLnVwZGF0ZVRyYW5zZm9ybXMgPSBzLnRyYW5zZm9ybS5maWVsZFRyYW5zZm9ybXMsIGUubXV0YXRpb25zLnNwbGljZSh0ICsgMSwgMSksIFxuICAgICAgICAgICAgKyt0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHMgPSBlLm11dGF0aW9ucy5tYXAoKGUgPT4gemkodC5mZSwgZSkpKSwgaSA9IGl0LmZyb21NaWxsaXMoZS5sb2NhbFdyaXRlVGltZU1zKTtcbiAgICByZXR1cm4gbmV3IFpzKGUuYmF0Y2hJZCwgaSwgbiwgcyk7XG59XG5cbi8qKiBEZWNvZGVzIGEgRGJUYXJnZXQgaW50byBUYXJnZXREYXRhICovIGZ1bmN0aW9uIG1yKHQpIHtcbiAgICBjb25zdCBlID0gd3IodC5yZWFkVGltZSksIG4gPSB2b2lkIDAgIT09IHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA/IHdyKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbikgOiBydC5taW4oKTtcbiAgICBsZXQgcztcbiAgICB2YXIgaTtcbiAgICByZXR1cm4gdm9pZCAwICE9PSB0LnF1ZXJ5LmRvY3VtZW50cyA/IChGKDEgPT09IChpID0gdC5xdWVyeSkuZG9jdW1lbnRzLmxlbmd0aCksIFxuICAgIHMgPSBKbihHbihCaShpLmRvY3VtZW50c1swXSkpKSkgOiBzID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gSm4oWWkodCkpO1xuICAgIH0odC5xdWVyeSksIG5ldyBjcihzLCB0LnRhcmdldElkLCBcIlRhcmdldFB1cnBvc2VMaXN0ZW5cIiAvKiBUYXJnZXRQdXJwb3NlLkxpc3RlbiAqLyAsIHQubGFzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBlLCBuLCBWZS5mcm9tQmFzZTY0U3RyaW5nKHQucmVzdW1lVG9rZW4pKTtcbn1cblxuLyoqIEVuY29kZXMgVGFyZ2V0RGF0YSBpbnRvIGEgRGJUYXJnZXQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi8gZnVuY3Rpb24gZ3IodCwgZSkge1xuICAgIGNvbnN0IG4gPSBkcihlLnNuYXBzaG90VmVyc2lvbiksIHMgPSBkcihlLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24pO1xuICAgIGxldCBpO1xuICAgIGkgPSBGbihlLnRhcmdldCkgPyBIaSh0LmZlLCBlLnRhcmdldCkgOiBKaSh0LmZlLCBlLnRhcmdldCk7XG4gICAgLy8gV2UgY2FuJ3Qgc3RvcmUgdGhlIHJlc3VtZVRva2VuIGFzIGEgQnl0ZVN0cmluZyBpbiBJbmRleGVkRGIsIHNvIHdlXG4gICAgLy8gY29udmVydCBpdCB0byBhIGJhc2U2NCBzdHJpbmcgZm9yIHN0b3JhZ2UuXG4gICAgICAgIGNvbnN0IHIgPSBlLnJlc3VtZVRva2VuLnRvQmFzZTY0KCk7XG4gICAgLy8gbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIGFsd2F5cyAwIHVudGlsIHdlIGRvIHJlYWwgR0MuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldElkOiBlLnRhcmdldElkLFxuICAgICAgICBjYW5vbmljYWxJZDogJG4oZS50YXJnZXQpLFxuICAgICAgICByZWFkVGltZTogbixcbiAgICAgICAgcmVzdW1lVG9rZW46IHIsXG4gICAgICAgIGxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjogZS5zZXF1ZW5jZU51bWJlcixcbiAgICAgICAgbGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbjogcyxcbiAgICAgICAgcXVlcnk6IGlcbiAgICB9O1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciBmaWd1cmluZyBvdXQgd2hhdCBraW5kIG9mIHF1ZXJ5IGhhcyBiZWVuIHN0b3JlZC5cbiAqL1xuLyoqXG4gKiBFbmNvZGVzIGEgYEJ1bmRsZWRRdWVyeWAgZnJvbSBidW5kbGUgcHJvdG8gdG8gYSBRdWVyeSBvYmplY3QuXG4gKlxuICogVGhpcyByZWNvbnN0cnVjdHMgdGhlIG9yaWdpbmFsIHF1ZXJ5IHVzZWQgdG8gYnVpbGQgdGhlIGJ1bmRsZSBiZWluZyBsb2FkZWQsXG4gKiBpbmNsdWRpbmcgZmVhdHVyZXMgZXhpc3RzIG9ubHkgaW4gU0RLcyAoZm9yIGV4YW1wbGU6IGxpbWl0LXRvLWxhc3QpLlxuICovXG5mdW5jdGlvbiB5cih0KSB7XG4gICAgY29uc3QgZSA9IFlpKHtcbiAgICAgICAgcGFyZW50OiB0LnBhcmVudCxcbiAgICAgICAgc3RydWN0dXJlZFF1ZXJ5OiB0LnN0cnVjdHVyZWRRdWVyeVxuICAgIH0pO1xuICAgIHJldHVybiBcIkxBU1RcIiA9PT0gdC5saW1pdFR5cGUgPyBYbihlLCBlLmxpbWl0LCBcIkxcIiAvKiBMaW1pdFR5cGUuTGFzdCAqLykgOiBlO1xufVxuXG4vKiogRW5jb2RlcyBhIE5hbWVkUXVlcnkgcHJvdG8gb2JqZWN0IHRvIGEgTmFtZWRRdWVyeSBtb2RlbCBvYmplY3QuICovXG4vKiogRW5jb2RlcyBhIERiRG9jdW1lbnRPdmVybGF5IG9iamVjdCB0byBhbiBPdmVybGF5IG1vZGVsIG9iamVjdC4gKi9cbmZ1bmN0aW9uIHByKHQsIGUpIHtcbiAgICByZXR1cm4gbmV3IGVpKGUubGFyZ2VzdEJhdGNoSWQsIHppKHQuZmUsIGUub3ZlcmxheU11dGF0aW9uKSk7XG59XG5cbi8qKiBEZWNvZGVzIGFuIE92ZXJsYXkgbW9kZWwgb2JqZWN0IGludG8gYSBEYkRvY3VtZW50T3ZlcmxheSBvYmplY3QuICovXG4vKipcbiAqIFJldHVybnMgdGhlIERiRG9jdW1lbnRPdmVybGF5S2V5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHVzZXIgYW5kXG4gKiBkb2N1bWVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIElyKHQsIGUpIHtcbiAgICBjb25zdCBuID0gZS5wYXRoLmxhc3RTZWdtZW50KCk7XG4gICAgcmV0dXJuIFsgdCwgcXQoZS5wYXRoLnBvcExhc3QoKSksIG4gXTtcbn1cblxuZnVuY3Rpb24gVHIodCwgZSwgbiwgcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4SWQ6IHQsXG4gICAgICAgIHVpZDogZS51aWQgfHwgXCJcIixcbiAgICAgICAgc2VxdWVuY2VOdW1iZXI6IG4sXG4gICAgICAgIHJlYWRUaW1lOiBkcihzLnJlYWRUaW1lKSxcbiAgICAgICAgZG9jdW1lbnRLZXk6IHF0KHMuZG9jdW1lbnRLZXkucGF0aCksXG4gICAgICAgIGxhcmdlc3RCYXRjaElkOiBzLmxhcmdlc3RCYXRjaElkXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgRXIge1xuICAgIGdldEJ1bmRsZU1ldGFkYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEFyKHQpLmdldChlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGlmICh0KSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiAoZSA9IHQpLmJ1bmRsZUlkLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IHdyKGUuY3JlYXRlVGltZSksXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogZS52ZXJzaW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqIEVuY29kZXMgYSBEYkJ1bmRsZSB0byBhIEJ1bmRsZU1ldGFkYXRhIG9iamVjdC4gKi9cbiAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgLyoqIEVuY29kZXMgYSBCdW5kbGVNZXRhZGF0YSB0byBhIERiQnVuZGxlLiAqLyAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzYXZlQnVuZGxlTWV0YWRhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gQXIodCkucHV0KHtcbiAgICAgICAgICAgIGJ1bmRsZUlkOiAobiA9IGUpLmlkLFxuICAgICAgICAgICAgY3JlYXRlVGltZTogZHIoTmkobi5jcmVhdGVUaW1lKSksXG4gICAgICAgICAgICB2ZXJzaW9uOiBuLnZlcnNpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBuO1xuICAgICAgICAvKiogRW5jb2RlcyBhIERiTmFtZWRRdWVyeSB0byBhIE5hbWVkUXVlcnkuICovICAgIH1cbiAgICBnZXROYW1lZFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZyKHQpLmdldChlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGlmICh0KSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IChlID0gdCkubmFtZSxcbiAgICAgICAgICAgICAgICBxdWVyeTogeXIoZS5idW5kbGVkUXVlcnkpLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiB3cihlLnJlYWRUaW1lKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgLyoqIEVuY29kZXMgYSBOYW1lZFF1ZXJ5IGZyb20gYSBidW5kbGUgcHJvdG8gdG8gYSBEYk5hbWVkUXVlcnkuICovICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNhdmVOYW1lZFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZyKHQpLnB1dChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHQubmFtZSxcbiAgICAgICAgICAgICAgICByZWFkVGltZTogZHIoTmkodC5yZWFkVGltZSkpLFxuICAgICAgICAgICAgICAgIGJ1bmRsZWRRdWVyeTogdC5idW5kbGVkUXVlcnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGJ1bmRsZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIEFyKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJidW5kbGVzXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbmFtZWRRdWVyaWVzIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiB2cih0KSB7XG4gICAgcmV0dXJuIF9lKHQsIFwibmFtZWRRdWVyaWVzXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBEb2N1bWVudE92ZXJsYXlDYWNoZSB1c2luZyBJbmRleGVkRGIuXG4gKi8gY2xhc3MgUnIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyIC0gVGhlIGRvY3VtZW50IHNlcmlhbGl6ZXIuXG4gICAgICogQHBhcmFtIHVzZXJJZCAtIFRoZSB1c2VySWQgZm9yIHdoaWNoIHdlIGFyZSBhY2Nlc3Npbmcgb3ZlcmxheXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSB0LCB0aGlzLnVzZXJJZCA9IGU7XG4gICAgfVxuICAgIHN0YXRpYyBkZSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnVpZCB8fCBcIlwiO1xuICAgICAgICByZXR1cm4gbmV3IFJyKHQsIG4pO1xuICAgIH1cbiAgICBnZXRPdmVybGF5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFByKHQpLmdldChJcih0aGlzLnVzZXJJZCwgZSkpLm5leHQoKHQgPT4gdCA/IHByKHRoaXMuc2VyaWFsaXplciwgdCkgOiBudWxsKSk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGZzKCk7XG4gICAgICAgIHJldHVybiBSdC5mb3JFYWNoKGUsIChlID0+IHRoaXMuZ2V0T3ZlcmxheSh0LCBlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIG51bGwgIT09IHQgJiYgbi5zZXQoZSwgdCk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgc2F2ZU92ZXJsYXlzKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICByZXR1cm4gbi5mb3JFYWNoKCgobiwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IG5ldyBlaShlLCBpKTtcbiAgICAgICAgICAgIHMucHVzaCh0aGlzLndlKHQsIHIpKTtcbiAgICAgICAgfSkpLCBSdC53YWl0Rm9yKHMpO1xuICAgIH1cbiAgICByZW1vdmVPdmVybGF5c0ZvckJhdGNoSWQodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IFNldDtcbiAgICAgICAgLy8gR2V0IHRoZSBzZXQgb2YgdW5pcXVlIGNvbGxlY3Rpb24gcGF0aHMuXG4gICAgICAgICAgICAgICAgZS5mb3JFYWNoKCh0ID0+IHMuYWRkKHF0KHQuZ2V0Q29sbGVjdGlvblBhdGgoKSkpKSk7XG4gICAgICAgIGNvbnN0IGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgZSwgbiBdLCBbIHRoaXMudXNlcklkLCBlLCBuICsgMSBdLCBcbiAgICAgICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgICAgIGkucHVzaChQcih0KS5KKFwiY29sbGVjdGlvblBhdGhPdmVybGF5SW5kZXhcIiwgcykpO1xuICAgICAgICB9KSksIFJ0LndhaXRGb3IoaSk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBmcygpLCBpID0gcXQoZSksIHIgPSBJREJLZXlSYW5nZS5ib3VuZChbIHRoaXMudXNlcklkLCBpLCBuIF0sIFsgdGhpcy51c2VySWQsIGksIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITApO1xuICAgICAgICByZXR1cm4gUHIodCkuaihcImNvbGxlY3Rpb25QYXRoT3ZlcmxheUluZGV4XCIsIHIpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gcHIodGhpcy5zZXJpYWxpemVyLCBlKTtcbiAgICAgICAgICAgICAgICBzLnNldCh0LmdldEtleSgpLCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IGZzKCk7XG4gICAgICAgIGxldCByO1xuICAgICAgICAvLyBXZSB3YW50IGJhdGNoIElEcyBsYXJnZXIgdGhhbiBgc2luY2VCYXRjaElkYCwgYW5kIHNvIHRoZSBsb3dlciBib3VuZFxuICAgICAgICAvLyBpcyBub3QgaW5jbHVzaXZlLlxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBJREJLZXlSYW5nZS5ib3VuZChbIHRoaXMudXNlcklkLCBlLCBuIF0sIFsgdGhpcy51c2VySWQsIGUsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITApO1xuICAgICAgICByZXR1cm4gUHIodCkuWCh7XG4gICAgICAgICAgICBpbmRleDogXCJjb2xsZWN0aW9uR3JvdXBPdmVybGF5SW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBvXG4gICAgICAgIH0sICgodCwgZSwgbikgPT4ge1xuICAgICAgICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdG8gcmV0dXJuIHBhcnRpYWwgYmF0Y2ggb3ZlcmxheXMsIGV2ZW4gaWYgdGhlIHNpemVcbiAgICAgICAgICAgIC8vIG9mIHRoZSByZXN1bHQgc2V0IGV4Y2VlZHMgdGhlIGdpdmVuIGBjb3VudGAgYXJndW1lbnQuIFRoZXJlZm9yZSwgd2VcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlIHRvIGFnZ3JlZ2F0ZSByZXN1bHRzIGV2ZW4gYWZ0ZXIgdGhlIHJlc3VsdCBzaXplIGV4Y2VlZHNcbiAgICAgICAgICAgIC8vIGBjb3VudGAgaWYgdGhlcmUgYXJlIG1vcmUgb3ZlcmxheXMgZnJvbSB0aGUgYGN1cnJlbnRCYXRjaElkYC5cbiAgICAgICAgICAgIGNvbnN0IG8gPSBwcih0aGlzLnNlcmlhbGl6ZXIsIGUpO1xuICAgICAgICAgICAgaS5zaXplKCkgPCBzIHx8IG8ubGFyZ2VzdEJhdGNoSWQgPT09IHIgPyAoaS5zZXQoby5nZXRLZXkoKSwgbyksIHIgPSBvLmxhcmdlc3RCYXRjaElkKSA6IG4uZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICB3ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBQcih0KS5wdXQoZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgY29uc3QgW3MsIGksIHJdID0gSXIoZSwgbi5tdXRhdGlvbi5rZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvblBhdGg6IGksXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRJZDogcixcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IG4ubXV0YXRpb24ua2V5LmdldENvbGxlY3Rpb25Hcm91cCgpLFxuICAgICAgICAgICAgICAgIGxhcmdlc3RCYXRjaElkOiBuLmxhcmdlc3RCYXRjaElkLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlNdXRhdGlvbjogamkodC5mZSwgbi5tdXRhdGlvbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0odGhpcy5zZXJpYWxpemVyLCB0aGlzLnVzZXJJZCwgZSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGRvY3VtZW50IG92ZXJsYXkgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIFByKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJkb2N1bWVudE92ZXJsYXlzXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gTm90ZTogVGhpcyBjb2RlIGlzIGNvcGllZCBmcm9tIHRoZSBiYWNrZW5kLiBDb2RlIHRoYXQgaXMgbm90IHVzZWQgYnlcbi8vIEZpcmVzdG9yZSB3YXMgcmVtb3ZlZC5cbi8qKiBGaXJlc3RvcmUgaW5kZXggdmFsdWUgd3JpdGVyLiAgKi9cbmNsYXNzIGJyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHt9XG4gICAgLy8gVGhlIHdyaXRlIG1ldGhvZHMgYmVsb3cgc2hvcnQtY2lyY3VpdCB3cml0aW5nIHRlcm1pbmF0b3JzIGZvciB2YWx1ZXNcbiAgICAvLyBjb250YWluaW5nIGEgKHRlcm1pbmF0aW5nKSB0cnVuY2F0ZWQgdmFsdWUuXG4gICAgLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIHJlc3VsdGluZyBlbmNvZGluZyBmb3I6XG4gICAgLy8gW1wiYmFyXCIsIFsyLCBcImZvb1wiXV0gLT4gKFNUUklORywgXCJiYXJcIiwgVEVSTSwgQVJSQVksIE5VTUJFUiwgMiwgU1RSSU5HLCBcImZvb1wiLCBURVJNLCBURVJNLCBURVJNKVxuICAgIC8vIFtcImJhclwiLCBbMiwgdHJ1bmNhdGVkKFwiZm9vXCIpXV0gLT4gKFNUUklORywgXCJiYXJcIiwgVEVSTSwgQVJSQVksIE5VTUJFUiwgMiwgU1RSSU5HLCBcImZvb1wiLCBUUlVOQylcbiAgICAvLyBbXCJiYXJcIiwgdHJ1bmNhdGVkKFtcImZvb1wiXSldIC0+IChTVFJJTkcsIFwiYmFyXCIsIFRFUk0sIEFSUkFZLiBTVFJJTkcsIFwiZm9vXCIsIFRFUk0sIFRSVU5DKVxuICAgIC8qKiBXcml0ZXMgYW4gaW5kZXggdmFsdWUuICAqL1xuICAgIF9lKHQsIGUpIHtcbiAgICAgICAgdGhpcy5tZSh0LCBlKSwgXG4gICAgICAgIC8vIFdyaXRlIHNlcGFyYXRvciB0byBzcGxpdCBpbmRleCB2YWx1ZXNcbiAgICAgICAgLy8gKHNlZSBnby9maXJlc3RvcmUtc3RvcmFnZS1mb3JtYXQjZW5jb2RpbmdzKS5cbiAgICAgICAgZS5nZSgpO1xuICAgIH1cbiAgICBtZSh0LCBlKSB7XG4gICAgICAgIGlmIChcIm51bGxWYWx1ZVwiIGluIHQpIHRoaXMueWUoZSwgNSk7IGVsc2UgaWYgKFwiYm9vbGVhblZhbHVlXCIgaW4gdCkgdGhpcy55ZShlLCAxMCksIFxuICAgICAgICBlLnBlKHQuYm9vbGVhblZhbHVlID8gMSA6IDApOyBlbHNlIGlmIChcImludGVnZXJWYWx1ZVwiIGluIHQpIHRoaXMueWUoZSwgMTUpLCBlLnBlKENlKHQuaW50ZWdlclZhbHVlKSk7IGVsc2UgaWYgKFwiZG91YmxlVmFsdWVcIiBpbiB0KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gQ2UodC5kb3VibGVWYWx1ZSk7XG4gICAgICAgICAgICBpc05hTihuKSA/IHRoaXMueWUoZSwgMTMpIDogKHRoaXMueWUoZSwgMTUpLCBCdChuKSA/IFxuICAgICAgICAgICAgLy8gLTAuMCwgMCBhbmQgMC4wIGFyZSBhbGwgY29uc2lkZXJlZCB0aGUgc2FtZVxuICAgICAgICAgICAgZS5wZSgwKSA6IGUucGUobikpO1xuICAgICAgICB9IGVsc2UgaWYgKFwidGltZXN0YW1wVmFsdWVcIiBpbiB0KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC50aW1lc3RhbXBWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMueWUoZSwgMjApLCBcInN0cmluZ1wiID09IHR5cGVvZiBuID8gZS5JZShuKSA6IChlLkllKGAke24uc2Vjb25kcyB8fCBcIlwifWApLCBlLnBlKG4ubmFub3MgfHwgMCkpO1xuICAgICAgICB9IGVsc2UgaWYgKFwic3RyaW5nVmFsdWVcIiBpbiB0KSB0aGlzLlRlKHQuc3RyaW5nVmFsdWUsIGUpLCB0aGlzLkVlKGUpOyBlbHNlIGlmIChcImJ5dGVzVmFsdWVcIiBpbiB0KSB0aGlzLnllKGUsIDMwKSwgXG4gICAgICAgIGUuQWUoeGUodC5ieXRlc1ZhbHVlKSksIHRoaXMuRWUoZSk7IGVsc2UgaWYgKFwicmVmZXJlbmNlVmFsdWVcIiBpbiB0KSB0aGlzLnZlKHQucmVmZXJlbmNlVmFsdWUsIGUpOyBlbHNlIGlmIChcImdlb1BvaW50VmFsdWVcIiBpbiB0KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5nZW9Qb2ludFZhbHVlO1xuICAgICAgICAgICAgdGhpcy55ZShlLCA0NSksIGUucGUobi5sYXRpdHVkZSB8fCAwKSwgZS5wZShuLmxvbmdpdHVkZSB8fCAwKTtcbiAgICAgICAgfSBlbHNlIFwibWFwVmFsdWVcIiBpbiB0ID8gZW4odCkgPyB0aGlzLnllKGUsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSA6ICh0aGlzLlJlKHQubWFwVmFsdWUsIGUpLCBcbiAgICAgICAgdGhpcy5FZShlKSkgOiBcImFycmF5VmFsdWVcIiBpbiB0ID8gKHRoaXMuUGUodC5hcnJheVZhbHVlLCBlKSwgdGhpcy5FZShlKSkgOiBPKCk7XG4gICAgfVxuICAgIFRlKHQsIGUpIHtcbiAgICAgICAgdGhpcy55ZShlLCAyNSksIHRoaXMuYmUodCwgZSk7XG4gICAgfVxuICAgIGJlKHQsIGUpIHtcbiAgICAgICAgZS5JZSh0KTtcbiAgICB9XG4gICAgUmUodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdC5maWVsZHMgfHwge307XG4gICAgICAgIHRoaXMueWUoZSwgNTUpO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgT2JqZWN0LmtleXMobikpIHRoaXMuVGUodCwgZSksIHRoaXMubWUoblt0XSwgZSk7XG4gICAgfVxuICAgIFBlKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHQudmFsdWVzIHx8IFtdO1xuICAgICAgICB0aGlzLnllKGUsIDUwKTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHRoaXMubWUodCwgZSk7XG4gICAgfVxuICAgIHZlKHQsIGUpIHtcbiAgICAgICAgdGhpcy55ZShlLCAzNyk7XG4gICAgICAgIGh0LmZyb21OYW1lKHQpLnBhdGguZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLnllKGUsIDYwKSwgdGhpcy5iZSh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICB5ZSh0LCBlKSB7XG4gICAgICAgIHQucGUoZSk7XG4gICAgfVxuICAgIEVlKHQpIHtcbiAgICAgICAgLy8gV2hpbGUgdGhlIFNESyBkb2VzIG5vdCBpbXBsZW1lbnQgdHJ1bmNhdGlvbiwgdGhlIHRydW5jYXRpb24gbWFya2VyIGlzXG4gICAgICAgIC8vIHVzZWQgdG8gdGVybWluYXRlIGFsbCB2YXJpYWJsZSBsZW5ndGggdmFsdWVzICh3aGljaCBhcmUgc3RyaW5ncywgYnl0ZXMsXG4gICAgICAgIC8vIHJlZmVyZW5jZXMsIGFycmF5cyBhbmQgbWFwcykuXG4gICAgICAgIHQucGUoMik7XG4gICAgfVxufVxuXG5ici5WZSA9IG5ldyBicjtcblxuLyoqXG4gKiBDb3VudHMgdGhlIG51bWJlciBvZiB6ZXJvcyBpbiBhIGJ5dGUuXG4gKlxuICogVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAqL1xuZnVuY3Rpb24gVnIodCkge1xuICAgIGlmICgwID09PSB0KSByZXR1cm4gODtcbiAgICBsZXQgZSA9IDA7XG4gICAgcmV0dXJuIHQgPj4gNCA9PSAwICYmIChcbiAgICAvLyBUZXN0IGlmIHRoZSBmaXJzdCBmb3VyIGJpdHMgYXJlIHplcm8uXG4gICAgZSArPSA0LCB0IDw8PSA0KSwgdCA+PiA2ID09IDAgJiYgKFxuICAgIC8vIFRlc3QgaWYgdGhlIGZpcnN0IHR3byAob3IgbmV4dCB0d28pIGJpdHMgYXJlIHplcm8uXG4gICAgZSArPSAyLCB0IDw8PSAyKSwgdCA+PiA3ID09IDAgJiYgKFxuICAgIC8vIFRlc3QgaWYgdGhlIHJlbWFpbmluZyBiaXQgaXMgemVyby5cbiAgICBlICs9IDEpLCBlO1xufVxuXG4vKiogQ291bnRzIHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBpbiB0aGUgZ2l2ZW4gYnl0ZSBhcnJheS4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFwidmFsdWVcIi4gTGVhZGluZyB6ZXJvIGJ5dGVzXG4gKiBhcmUgc2tpcHBlZC5cbiAqL1xuZnVuY3Rpb24gU3IodCkge1xuICAgIC8vIFRoaXMgaXMganVzdCB0aGUgbnVtYmVyIG9mIGJ5dGVzIGZvciB0aGUgdW5zaWduZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAgICBjb25zdCBlID0gNjQgLSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBlID0gMDtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCA4OyArK24pIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBWcigyNTUgJiB0W25dKTtcbiAgICAgICAgICAgIGlmIChlICs9IHMsIDggIT09IHMpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0odCk7XG4gICAgcmV0dXJuIE1hdGguY2VpbChlIC8gOCk7XG59XG5cbi8qKlxuICogT3JkZXJlZENvZGVXcml0ZXIgaXMgYSBtaW5pbWFsLWFsbG9jYXRpb24gaW1wbGVtZW50YXRpb24gb2YgdGhlIHdyaXRpbmdcbiAqIGJlaGF2aW9yIGRlZmluZWQgYnkgdGhlIGJhY2tlbmQuXG4gKlxuICogVGhlIGNvZGUgaXMgcG9ydGVkIGZyb20gaXRzIEphdmEgY291bnRlcnBhcnQuXG4gKi8gY2xhc3MgRHIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEwMjQpLCB0aGlzLnBvc2l0aW9uID0gMDtcbiAgICB9XG4gICAgU2UodCkge1xuICAgICAgICBjb25zdCBlID0gdFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIGxldCBuID0gZS5uZXh0KCk7XG4gICAgICAgIGZvciAoOyFuLmRvbmU7ICkgdGhpcy5EZShuLnZhbHVlKSwgbiA9IGUubmV4dCgpO1xuICAgICAgICB0aGlzLkNlKCk7XG4gICAgfVxuICAgIHhlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBsZXQgbiA9IGUubmV4dCgpO1xuICAgICAgICBmb3IgKDshbi5kb25lOyApIHRoaXMuTmUobi52YWx1ZSksIG4gPSBlLm5leHQoKTtcbiAgICAgICAgdGhpcy5rZSgpO1xuICAgIH1cbiAgICAvKiogV3JpdGVzIHV0ZjggYnl0ZXMgaW50byB0aGlzIGJ5dGUgc2VxdWVuY2UsIGFzY2VuZGluZy4gKi8gICAgTWUodCkge1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGlmICh0IDwgMTI4KSB0aGlzLkRlKHQpOyBlbHNlIGlmICh0IDwgMjA0OCkgdGhpcy5EZSg5NjAgfCB0ID4+PiA2KSwgdGhpcy5EZSgxMjggfCA2MyAmIHQpOyBlbHNlIGlmIChlIDwgXCJcXHVkODAwXCIgfHwgXCJcXHVkYmZmXCIgPCBlKSB0aGlzLkRlKDQ4MCB8IHQgPj4+IDEyKSwgXG4gICAgICAgICAgICB0aGlzLkRlKDEyOCB8IDYzICYgdCA+Pj4gNiksIHRoaXMuRGUoMTI4IHwgNjMgJiB0KTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuY29kZVBvaW50QXQoMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5EZSgyNDAgfCB0ID4+PiAxOCksIHRoaXMuRGUoMTI4IHwgNjMgJiB0ID4+PiAxMiksIHRoaXMuRGUoMTI4IHwgNjMgJiB0ID4+PiA2KSwgXG4gICAgICAgICAgICAgICAgdGhpcy5EZSgxMjggfCA2MyAmIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuQ2UoKTtcbiAgICB9XG4gICAgLyoqIFdyaXRlcyB1dGY4IGJ5dGVzIGludG8gdGhpcyBieXRlIHNlcXVlbmNlLCBkZXNjZW5kaW5nICovICAgICRlKHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBpZiAodCA8IDEyOCkgdGhpcy5OZSh0KTsgZWxzZSBpZiAodCA8IDIwNDgpIHRoaXMuTmUoOTYwIHwgdCA+Pj4gNiksIHRoaXMuTmUoMTI4IHwgNjMgJiB0KTsgZWxzZSBpZiAoZSA8IFwiXFx1ZDgwMFwiIHx8IFwiXFx1ZGJmZlwiIDwgZSkgdGhpcy5OZSg0ODAgfCB0ID4+PiAxMiksIFxuICAgICAgICAgICAgdGhpcy5OZSgxMjggfCA2MyAmIHQgPj4+IDYpLCB0aGlzLk5lKDEyOCB8IDYzICYgdCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNvZGVQb2ludEF0KDApO1xuICAgICAgICAgICAgICAgIHRoaXMuTmUoMjQwIHwgdCA+Pj4gMTgpLCB0aGlzLk5lKDEyOCB8IDYzICYgdCA+Pj4gMTIpLCB0aGlzLk5lKDEyOCB8IDYzICYgdCA+Pj4gNiksIFxuICAgICAgICAgICAgICAgIHRoaXMuTmUoMTI4IHwgNjMgJiB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtlKCk7XG4gICAgfVxuICAgIE9lKHQpIHtcbiAgICAgICAgLy8gVmFsdWVzIGFyZSBlbmNvZGVkIHdpdGggYSBzaW5nbGUgYnl0ZSBsZW5ndGggcHJlZml4LCBmb2xsb3dlZCBieSB0aGVcbiAgICAgICAgLy8gYWN0dWFsIHZhbHVlIGluIGJpZy1lbmRpYW4gZm9ybWF0IHdpdGggbGVhZGluZyAwIGJ5dGVzIGRyb3BwZWQuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLkZlKHQpLCBuID0gU3IoZSk7XG4gICAgICAgIHRoaXMuQmUoMSArIG4pLCB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gMjU1ICYgbjtcbiAgICAgICAgLy8gV3JpdGUgdGhlIGxlbmd0aFxuICAgICAgICBmb3IgKGxldCB0ID0gZS5sZW5ndGggLSBuOyB0IDwgZS5sZW5ndGg7ICsrdCkgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IDI1NSAmIGVbdF07XG4gICAgfVxuICAgIExlKHQpIHtcbiAgICAgICAgLy8gVmFsdWVzIGFyZSBlbmNvZGVkIHdpdGggYSBzaW5nbGUgYnl0ZSBsZW5ndGggcHJlZml4LCBmb2xsb3dlZCBieSB0aGVcbiAgICAgICAgLy8gaW52ZXJ0ZWQgdmFsdWUgaW4gYmlnLWVuZGlhbiBmb3JtYXQgd2l0aCBsZWFkaW5nIDAgYnl0ZXMgZHJvcHBlZC5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMuRmUodCksIG4gPSBTcihlKTtcbiAgICAgICAgdGhpcy5CZSgxICsgbiksIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSB+KDI1NSAmIG4pO1xuICAgICAgICAvLyBXcml0ZSB0aGUgbGVuZ3RoXG4gICAgICAgIGZvciAobGV0IHQgPSBlLmxlbmd0aCAtIG47IHQgPCBlLmxlbmd0aDsgKyt0KSB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gfigyNTUgJiBlW3RdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIHRoZSBcImluZmluaXR5XCIgYnl0ZSBzZXF1ZW5jZSB0aGF0IHNvcnRzIGFmdGVyIGFsbCBvdGhlciBieXRlXG4gICAgICogc2VxdWVuY2VzIHdyaXR0ZW4gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqLyAgICBxZSgpIHtcbiAgICAgICAgdGhpcy5VZSgyNTUpLCB0aGlzLlVlKDI1NSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0aGUgXCJpbmZpbml0eVwiIGJ5dGUgc2VxdWVuY2UgdGhhdCBzb3J0cyBiZWZvcmUgYWxsIG90aGVyIGJ5dGVcbiAgICAgKiBzZXF1ZW5jZXMgd3JpdHRlbiBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqLyAgICBLZSgpIHtcbiAgICAgICAgdGhpcy5HZSgyNTUpLCB0aGlzLkdlKDI1NSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYnVmZmVyIHN1Y2ggdGhhdCBpdCBpcyB0aGUgc2FtZSBhcyB3aGVuIGl0IHdhcyBuZXdseVxuICAgICAqIGNvbnN0cnVjdGVkLlxuICAgICAqLyAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDA7XG4gICAgfVxuICAgIHNlZWQodCkge1xuICAgICAgICB0aGlzLkJlKHQubGVuZ3RoKSwgdGhpcy5idWZmZXIuc2V0KHQsIHRoaXMucG9zaXRpb24pLCB0aGlzLnBvc2l0aW9uICs9IHQubGVuZ3RoO1xuICAgIH1cbiAgICAvKiogTWFrZXMgYSBjb3B5IG9mIHRoZSBlbmNvZGVkIGJ5dGVzIGluIHRoaXMgYnVmZmVyLiAgKi8gICAgUWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zbGljZSgwLCB0aGlzLnBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlcyBgdmFsYCBpbnRvIGFuIGVuY29kaW5nIHNvIHRoYXQgdGhlIG9yZGVyIG1hdGNoZXMgdGhlIElFRUUgNzU0XG4gICAgICogZmxvYXRpbmctcG9pbnQgY29tcGFyaXNvbiByZXN1bHRzIHdpdGggdGhlIGZvbGxvd2luZyBleGNlcHRpb25zOlxuICAgICAqICAgLTAuMCA8IDAuMFxuICAgICAqICAgYWxsIG5vbi1OYU4gPCBOYU5cbiAgICAgKiAgIE5hTiA9IE5hTlxuICAgICAqLyAgICBGZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBcbiAgICAgICAgLyoqIENvbnZlcnRzIGEgSmF2YVNjcmlwdCBudW1iZXIgdG8gYSBieXRlIGFycmF5ICh1c2luZyBiaWcgZW5kaWFuIGVuY29kaW5nKS4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOCkpO1xuICAgICAgICAgICAgcmV0dXJuIGUuc2V0RmxvYXQ2NCgwLCB0LCAvKiBsaXR0bGVFbmRpYW49ICovICExKSwgbmV3IFVpbnQ4QXJyYXkoZS5idWZmZXIpO1xuICAgICAgICB9KHQpLCBuID0gMCAhPSAoMTI4ICYgZVswXSk7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaXJzdCBiaXQgaXMgc2V0LiBXZSB1c2UgYSBiaXQgbWFzayBzaW5jZSB2YWx1ZVswXSBpc1xuICAgICAgICAvLyBlbmNvZGVkIGFzIGEgbnVtYmVyIGZyb20gMCB0byAyNTUuXG4gICAgICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSB0d28gY29tcGxlbWVudCB0byBnZXQgbmF0dXJhbCBvcmRlcmluZ1xuICAgICAgICBlWzBdIF49IG4gPyAyNTUgOiAxMjg7XG4gICAgICAgIGZvciAobGV0IHQgPSAxOyB0IDwgZS5sZW5ndGg7ICsrdCkgZVt0XSBePSBuID8gMjU1IDogMDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIC8qKiBXcml0ZXMgYSBzaW5nbGUgYnl0ZSBhc2NlbmRpbmcgdG8gdGhlIGJ1ZmZlci4gKi8gICAgRGUodCkge1xuICAgICAgICBjb25zdCBlID0gMjU1ICYgdDtcbiAgICAgICAgMCA9PT0gZSA/ICh0aGlzLlVlKDApLCB0aGlzLlVlKDI1NSkpIDogMjU1ID09PSBlID8gKHRoaXMuVWUoMjU1KSwgdGhpcy5VZSgwKSkgOiB0aGlzLlVlKGUpO1xuICAgIH1cbiAgICAvKiogV3JpdGVzIGEgc2luZ2xlIGJ5dGUgZGVzY2VuZGluZyB0byB0aGUgYnVmZmVyLiAgKi8gICAgTmUodCkge1xuICAgICAgICBjb25zdCBlID0gMjU1ICYgdDtcbiAgICAgICAgMCA9PT0gZSA/ICh0aGlzLkdlKDApLCB0aGlzLkdlKDI1NSkpIDogMjU1ID09PSBlID8gKHRoaXMuR2UoMjU1KSwgdGhpcy5HZSgwKSkgOiB0aGlzLkdlKHQpO1xuICAgIH1cbiAgICBDZSgpIHtcbiAgICAgICAgdGhpcy5VZSgwKSwgdGhpcy5VZSgxKTtcbiAgICB9XG4gICAga2UoKSB7XG4gICAgICAgIHRoaXMuR2UoMCksIHRoaXMuR2UoMSk7XG4gICAgfVxuICAgIFVlKHQpIHtcbiAgICAgICAgdGhpcy5CZSgxKSwgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IHQ7XG4gICAgfVxuICAgIEdlKHQpIHtcbiAgICAgICAgdGhpcy5CZSgxKSwgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IH50O1xuICAgIH1cbiAgICBCZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0ICsgdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgaWYgKGUgPD0gdGhpcy5idWZmZXIubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIC8vIFRyeSBkb3VibGluZy5cbiAgICAgICAgICAgICAgICBsZXQgbiA9IDIgKiB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIC8vIFN0aWxsIG5vdCBiaWcgZW5vdWdoPyBKdXN0IGFsbG9jYXRlIHRoZSByaWdodCBzaXplLlxuICAgICAgICAgICAgICAgIG4gPCBlICYmIChuID0gZSk7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgbmV3IGJ1ZmZlci5cbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICAgIHMuc2V0KHRoaXMuYnVmZmVyKSwgLy8gY29weSBvbGQgZGF0YVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IHM7XG4gICAgfVxufVxuXG5jbGFzcyBDciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmplID0gdDtcbiAgICB9XG4gICAgQWUodCkge1xuICAgICAgICB0aGlzLmplLlNlKHQpO1xuICAgIH1cbiAgICBJZSh0KSB7XG4gICAgICAgIHRoaXMuamUuTWUodCk7XG4gICAgfVxuICAgIHBlKHQpIHtcbiAgICAgICAgdGhpcy5qZS5PZSh0KTtcbiAgICB9XG4gICAgZ2UoKSB7XG4gICAgICAgIHRoaXMuamUucWUoKTtcbiAgICB9XG59XG5cbmNsYXNzIHhyIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuamUgPSB0O1xuICAgIH1cbiAgICBBZSh0KSB7XG4gICAgICAgIHRoaXMuamUueGUodCk7XG4gICAgfVxuICAgIEllKHQpIHtcbiAgICAgICAgdGhpcy5qZS4kZSh0KTtcbiAgICB9XG4gICAgcGUodCkge1xuICAgICAgICB0aGlzLmplLkxlKHQpO1xuICAgIH1cbiAgICBnZSgpIHtcbiAgICAgICAgdGhpcy5qZS5LZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGBEaXJlY3Rpb25hbEluZGV4Qnl0ZUVuY29kZXJgIHVzaW5nIGBPcmRlcmVkQ29kZVdyaXRlcmAgZm9yIHRoZVxuICogYWN0dWFsIGVuY29kaW5nLlxuICovIGNsYXNzIE5yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5qZSA9IG5ldyBEciwgdGhpcy56ZSA9IG5ldyBDcih0aGlzLmplKSwgdGhpcy5XZSA9IG5ldyB4cih0aGlzLmplKTtcbiAgICB9XG4gICAgc2VlZCh0KSB7XG4gICAgICAgIHRoaXMuamUuc2VlZCh0KTtcbiAgICB9XG4gICAgSGUodCkge1xuICAgICAgICByZXR1cm4gMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovID09PSB0ID8gdGhpcy56ZSA6IHRoaXMuV2U7XG4gICAgfVxuICAgIFFlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qZS5RZSgpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5qZS5yZXNldCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBSZXByZXNlbnRzIGFuIGluZGV4IGVudHJ5IHNhdmVkIGJ5IHRoZSBTREsgaW4gcGVyc2lzdGVkIHN0b3JhZ2UuICovIGNsYXNzIGtyIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMuaW5kZXhJZCA9IHQsIHRoaXMuZG9jdW1lbnRLZXkgPSBlLCB0aGlzLmFycmF5VmFsdWUgPSBuLCB0aGlzLmRpcmVjdGlvbmFsVmFsdWUgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEluZGV4RW50cnkgZW50cnkgdGhhdCBzb3J0cyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY3VycmVudFxuICAgICAqIGRpcmVjdGlvbmFsIHZhbHVlLlxuICAgICAqLyAgICBKZSgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZGlyZWN0aW9uYWxWYWx1ZS5sZW5ndGgsIGUgPSAwID09PSB0IHx8IDI1NSA9PT0gdGhpcy5kaXJlY3Rpb25hbFZhbHVlW3QgLSAxXSA/IHQgKyAxIDogdCwgbiA9IG5ldyBVaW50OEFycmF5KGUpO1xuICAgICAgICByZXR1cm4gbi5zZXQodGhpcy5kaXJlY3Rpb25hbFZhbHVlLCAwKSwgZSAhPT0gdCA/IG4uc2V0KFsgMCBdLCB0aGlzLmRpcmVjdGlvbmFsVmFsdWUubGVuZ3RoKSA6ICsrbltuLmxlbmd0aCAtIDFdLCBcbiAgICAgICAgbmV3IGtyKHRoaXMuaW5kZXhJZCwgdGhpcy5kb2N1bWVudEtleSwgdGhpcy5hcnJheVZhbHVlLCBuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIE1yKHQsIGUpIHtcbiAgICBsZXQgbiA9IHQuaW5kZXhJZCAtIGUuaW5kZXhJZDtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiAobiA9ICRyKHQuYXJyYXlWYWx1ZSwgZS5hcnJheVZhbHVlKSwgMCAhPT0gbiA/IG4gOiAobiA9ICRyKHQuZGlyZWN0aW9uYWxWYWx1ZSwgZS5kaXJlY3Rpb25hbFZhbHVlKSwgXG4gICAgMCAhPT0gbiA/IG4gOiBodC5jb21wYXJhdG9yKHQuZG9jdW1lbnRLZXksIGUuZG9jdW1lbnRLZXkpKSk7XG59XG5cbmZ1bmN0aW9uICRyKHQsIGUpIHtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubGVuZ3RoICYmIG4gPCBlLmxlbmd0aDsgKytuKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0W25dIC0gZVtuXTtcbiAgICAgICAgaWYgKDAgIT09IHMpIHJldHVybiBzO1xuICAgIH1cbiAgICByZXR1cm4gdC5sZW5ndGggLSBlLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBsaWdodCBxdWVyeSBwbGFubmVyIGZvciBGaXJlc3RvcmUuXG4gKlxuICogVGhpcyBjbGFzcyBtYXRjaGVzIGEgYEZpZWxkSW5kZXhgIGFnYWluc3QgYSBGaXJlc3RvcmUgUXVlcnkgYFRhcmdldGAuIEl0XG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBnaXZlbiBpbmRleCBjYW4gYmUgdXNlZCB0byBzZXJ2ZSB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3djYXNlcyBzb21lIHBvc3NpYmxlIGluZGV4IGNvbmZpZ3VyYXRpb25zOlxuICpcbiAqIFF1ZXJ5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEluZGV4XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0MsIGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz09JywgJ2EnKS53aGVyZSgnYicsICc9PScsICdiJykgICAgICAgICB8IGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKSAgICAgICAgICAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz49JywgJ2EnKS5vcmRlckJ5KCdhJywgJ2Rlc2MnKSAgICAgICAgICB8IGEgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKS5vcmRlckJ5KCdiJykgICAgIHwgYSBBU0MsIGIgQVNDXG4gKiB3aGVyZSgnYScsICc+PScsICdhJykub3JkZXJCeSgnYScpLm9yZGVyQnkoJ2InKSAgICAgfCBhIEFTQ1xuICogd2hlcmUoJ2EnLCAnYXJyYXktY29udGFpbnMnLCAnYScpLm9yZGVyQnkoJ2InKSAgICAgIHwgYSBDT05UQUlOUywgYiBBU0NFTkRJTkdcbiAqIHdoZXJlKCdhJywgJ2FycmF5LWNvbnRhaW5zJywgJ2EnKS5vcmRlckJ5KCdiJykgICAgICB8IGEgQ09OVEFJTlNcbiAqLyBjbGFzcyBPciB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZCA9IG51bGwgIT0gdC5jb2xsZWN0aW9uR3JvdXAgPyB0LmNvbGxlY3Rpb25Hcm91cCA6IHQucGF0aC5sYXN0U2VnbWVudCgpLCBcbiAgICAgICAgdGhpcy5ZZSA9IHQub3JkZXJCeSwgdGhpcy5YZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5maWx0ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZTtcbiAgICAgICAgICAgIHQuaXNJbmVxdWFsaXR5KCkgPyB0aGlzLlplID0gdCA6IHRoaXMuWGUucHVzaCh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGluZGV4IGNhbiBiZSB1c2VkIHRvIHNlcnZlIHRoZSBUYXJnZXRJbmRleE1hdGNoZXInc1xuICAgICAqIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEFuIGluZGV4IGlzIGNvbnNpZGVyZWQgY2FwYWJsZSBvZiBzZXJ2aW5nIHRoZSB0YXJnZXQgd2hlbjpcbiAgICAgKiAtIFRoZSB0YXJnZXQgdXNlcyBhbGwgaW5kZXggc2VnbWVudHMgZm9yIGl0cyBmaWx0ZXJzIGFuZCBvcmRlckJ5IGNsYXVzZXMuXG4gICAgICogICBUaGUgdGFyZ2V0IGNhbiBoYXZlIGFkZGl0aW9uYWwgZmlsdGVyIGFuZCBvcmRlckJ5IGNsYXVzZXMsIGJ1dCBub3RcbiAgICAgKiAgIGZld2VyLlxuICAgICAqIC0gSWYgYW4gQXJyYXlDb250YWlucy9BcnJheUNvbnRhaW5zQW55ZmlsdGVyIGlzIHVzZWQsIHRoZSBpbmRleCBtdXN0IGFsc29cbiAgICAgKiAgIGhhdmUgYSBjb3JyZXNwb25kaW5nIGBDT05UQUlOU2Agc2VnbWVudC5cbiAgICAgKiAtIEFsbCBkaXJlY3Rpb25hbCBpbmRleCBzZWdtZW50cyBjYW4gYmUgbWFwcGVkIHRvIHRoZSB0YXJnZXQgYXMgYSBzZXJpZXMgb2ZcbiAgICAgKiAgIGVxdWFsaXR5IGZpbHRlcnMsIGEgc2luZ2xlIGluZXF1YWxpdHkgZmlsdGVyIGFuZCBhIHNlcmllcyBvZiBvcmRlckJ5XG4gICAgICogICBjbGF1c2VzLlxuICAgICAqIC0gVGhlIHNlZ21lbnRzIHRoYXQgcmVwcmVzZW50IHRoZSBlcXVhbGl0eSBmaWx0ZXJzIG1heSBhcHBlYXIgb3V0IG9mIG9yZGVyLlxuICAgICAqIC0gVGhlIG9wdGlvbmFsIHNlZ21lbnQgZm9yIHRoZSBpbmVxdWFsaXR5IGZpbHRlciBtdXN0IGFwcGVhciBhZnRlciBhbGxcbiAgICAgKiAgIGVxdWFsaXR5IHNlZ21lbnRzLlxuICAgICAqIC0gVGhlIHNlZ21lbnRzIHRoYXQgcmVwcmVzZW50IHRoYXQgb3JkZXJCeSBjbGF1c2Ugb2YgdGhlIHRhcmdldCBtdXN0IGFwcGVhclxuICAgICAqICAgaW4gb3JkZXIgYWZ0ZXIgYWxsIGVxdWFsaXR5IGFuZCBpbmVxdWFsaXR5IHNlZ21lbnRzLiBTaW5nbGUgb3JkZXJCeVxuICAgICAqICAgY2xhdXNlcyBjYW5ub3QgYmUgc2tpcHBlZCwgYnV0IGEgY29udGludW91cyBvcmRlckJ5IHN1ZmZpeCBtYXkgYmVcbiAgICAgKiAgIG9taXR0ZWQuXG4gICAgICovICAgIHRuKHQpIHtcbiAgICAgICAgRih0LmNvbGxlY3Rpb25Hcm91cCA9PT0gdGhpcy5jb2xsZWN0aW9uSWQpO1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhcnJheSBlbGVtZW50LCBmaW5kIGEgbWF0Y2hpbmcgZmlsdGVyLlxuICAgICAgICBjb25zdCBlID0gZnQodCk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGUgJiYgIXRoaXMuZW4oZSkpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgbiA9IGR0KHQpO1xuICAgICAgICBsZXQgcyA9IG5ldyBTZXQsIGkgPSAwLCByID0gMDtcbiAgICAgICAgLy8gUHJvY2VzcyBhbGwgZXF1YWxpdGllcyBmaXJzdC4gRXF1YWxpdGllcyBjYW4gYXBwZWFyIG91dCBvZiBvcmRlci5cbiAgICAgICAgZm9yICg7aSA8IG4ubGVuZ3RoICYmIHRoaXMuZW4obltpXSk7ICsraSkgcyA9IHMuYWRkKG5baV0uZmllbGRQYXRoLmNhbm9uaWNhbFN0cmluZygpKTtcbiAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHByb2Nlc3NlZCBhbGwgc2VnbWVudHMsIGFsbCBzZWdtZW50cyBhcmUgdXNlZCB0byBzZXJ2ZVxuICAgICAgICAvLyB0aGUgZXF1YWxpdHkgZmlsdGVycyBhbmQgd2UgZG8gbm90IG5lZWQgdG8gbWFwIGFueSBzZWdtZW50cyB0byB0aGVcbiAgICAgICAgLy8gdGFyZ2V0J3MgaW5lcXVhbGl0eSBhbmQgb3JkZXJCeSBjbGF1c2VzLlxuICAgICAgICAgICAgICAgIGlmIChpID09PSBuLmxlbmd0aCkgcmV0dXJuICEwO1xuICAgICAgICBpZiAodm9pZCAwICE9PSB0aGlzLlplKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbmVxdWFsaXR5IGZpbHRlciBhbmQgdGhlIGZpZWxkIHdhcyBub3QgaW4gb25lIG9mIHRoZVxuICAgICAgICAgICAgLy8gZXF1YWxpdHkgZmlsdGVycyBhYm92ZSwgdGhlIG5leHQgc2VnbWVudCBtdXN0IG1hdGNoIGJvdGggdGhlIGZpbHRlclxuICAgICAgICAgICAgLy8gYW5kIHRoZSBmaXJzdCBvcmRlckJ5IGNsYXVzZS5cbiAgICAgICAgICAgIGlmICghcy5oYXModGhpcy5aZS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubm4odGhpcy5aZSwgdCkgfHwgIXRoaXMuc24odGhpcy5ZZVtyKytdLCB0KSkgcmV0dXJuICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsbCByZW1haW5pbmcgc2VnbWVudHMgbmVlZCB0byByZXByZXNlbnQgdGhlIHByZWZpeCBvZiB0aGUgdGFyZ2V0J3NcbiAgICAgICAgLy8gb3JkZXJCeS5cbiAgICAgICAgICAgICAgICBmb3IgKDtpIDwgbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5baV07XG4gICAgICAgICAgICBpZiAociA+PSB0aGlzLlllLmxlbmd0aCB8fCAhdGhpcy5zbih0aGlzLlllW3IrK10sIHQpKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBlbih0KSB7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLlhlKSBpZiAodGhpcy5ubihlLCB0KSkgcmV0dXJuICEwO1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIG5uKHQsIGUpIHtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCB8fCAhdC5maWVsZC5pc0VxdWFsKGUuZmllbGRQYXRoKSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBuID0gXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovID09PSB0Lm9wIHx8IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSB0Lm9wO1xuICAgICAgICByZXR1cm4gMiAvKiBJbmRleEtpbmQuQ09OVEFJTlMgKi8gPT09IGUua2luZCA9PT0gbjtcbiAgICB9XG4gICAgc24odCwgZSkge1xuICAgICAgICByZXR1cm4gISF0LmZpZWxkLmlzRXF1YWwoZS5maWVsZFBhdGgpICYmICgwIC8qIEluZGV4S2luZC5BU0NFTkRJTkcgKi8gPT09IGUua2luZCAmJiBcImFzY1wiIC8qIERpcmVjdGlvbi5BU0NFTkRJTkcgKi8gPT09IHQuZGlyIHx8IDEgLyogSW5kZXhLaW5kLkRFU0NFTkRJTkcgKi8gPT09IGUua2luZCAmJiBcImRlc2NcIiAvKiBEaXJlY3Rpb24uREVTQ0VORElORyAqLyA9PT0gdC5kaXIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgdXRpbGl0eSBmdW5jdGlvbnMgdGhhdCBoZWxwIHdpdGggYm9vbGVhbiBsb2dpYyB0cmFuc2Zvcm1hdGlvbnMgbmVlZGVkIGZvciBoYW5kbGluZ1xuICogY29tcGxleCBmaWx0ZXJzIHVzZWQgaW4gcXVlcmllcy5cbiAqL1xuLyoqXG4gKiBUaGUgYGluYCBmaWx0ZXIgaXMgb25seSBhIHN5bnRhY3RpYyBzdWdhciBvdmVyIGEgZGlzanVuY3Rpb24gb2YgZXF1YWxpdGllcy4gRm9yIGluc3RhbmNlOiBgYSBpblxuICogWzEsMiwzXWAgaXMgaW4gZmFjdCBgYT09MSB8fCBhPT0yIHx8IGE9PTNgLiBUaGlzIG1ldGhvZCBleHBhbmRzIGFueSBgaW5gIGZpbHRlciBpbiB0aGUgZ2l2ZW5cbiAqIGlucHV0IGludG8gYSBkaXNqdW5jdGlvbiBvZiBlcXVhbGl0eSBmaWx0ZXJzIGFuZCByZXR1cm5zIHRoZSBleHBhbmRlZCBmaWx0ZXIuXG4gKi8gZnVuY3Rpb24gRnIodCkge1xuICAgIHZhciBlLCBuO1xuICAgIGlmIChGKHQgaW5zdGFuY2VvZiBtbiB8fCB0IGluc3RhbmNlb2YgZ24pLCB0IGluc3RhbmNlb2YgbW4pIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBDbikge1xuICAgICAgICAgICAgY29uc3QgcyA9IChudWxsID09PSAobiA9IG51bGwgPT09IChlID0gdC52YWx1ZS5hcnJheVZhbHVlKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLnZhbHVlcykgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5tYXAoKGUgPT4gbW4uY3JlYXRlKHQuZmllbGQsIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyAsIGUpKSkpIHx8IFtdO1xuICAgICAgICAgICAgcmV0dXJuIGduLmNyZWF0ZShzLCBcIm9yXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuT1IgKi8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgcmVhY2hlZCBvdGhlciBraW5kcyBvZiBmaWVsZCBmaWx0ZXJzLlxuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBhIGNvbXBvc2l0ZSBmaWx0ZXIuXG4gICAgICAgIGNvbnN0IHMgPSB0LmZpbHRlcnMubWFwKCh0ID0+IEZyKHQpKSk7XG4gICAgcmV0dXJuIGduLmNyZWF0ZShzLCB0Lm9wKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGNvbXBvc2l0ZSBmaWx0ZXIsIHJldHVybnMgdGhlIGxpc3Qgb2YgdGVybXMgaW4gaXRzIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtLlxuICpcbiAqIDxwPkVhY2ggZWxlbWVudCBpbiB0aGUgcmV0dXJuIHZhbHVlIGlzIG9uZSB0ZXJtIG9mIHRoZSByZXN1bHRpbmcgRE5GLiBGb3IgaW5zdGFuY2U6IEZvciB0aGVcbiAqIGlucHV0OiAoQSB8fCBCKSAmJiBDLCB0aGUgRE5GIGZvcm0gaXM6IChBICYmIEMpIHx8IChCICYmIEMpLCBhbmQgdGhlIHJldHVybiB2YWx1ZSBpcyBhIGxpc3RcbiAqIHdpdGggdHdvIGVsZW1lbnRzOiBhIGNvbXBvc2l0ZSBmaWx0ZXIgdGhhdCBwZXJmb3JtcyAoQSAmJiBDKSwgYW5kIGEgY29tcG9zaXRlIGZpbHRlciB0aGF0XG4gKiBwZXJmb3JtcyAoQiAmJiBDKS5cbiAqXG4gKiBAcGFyYW0gZmlsdGVyIHRoZSBjb21wb3NpdGUgZmlsdGVyIHRvIGNhbGN1bGF0ZSBETkYgdHJhbnNmb3JtIGZvci5cbiAqIEByZXR1cm4gdGhlIHRlcm1zIGluIHRoZSBETkYgdHJhbnNmb3JtLlxuICovIGZ1bmN0aW9uIEJyKHQpIHtcbiAgICBpZiAoMCA9PT0gdC5nZXRGaWx0ZXJzKCkubGVuZ3RoKSByZXR1cm4gW107XG4gICAgY29uc3QgZSA9IEtyKEZyKHQpKTtcbiAgICByZXR1cm4gRihVcihlKSksIExyKGUpIHx8IHFyKGUpID8gWyBlIF0gOiBlLmdldEZpbHRlcnMoKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZmlsdGVyIGlzIGEgc2luZ2xlIGZpZWxkIGZpbHRlci4gZS5nLiAoYSA9PSAxMCkuICovIGZ1bmN0aW9uIExyKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG1uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZmlsdGVyIGlzIHRoZSBjb25qdW5jdGlvbiBvZiBvbmUgb3IgbW9yZSBmaWVsZCBmaWx0ZXJzLiBlLmcuIChhID09IDEwXG4gKiAmJiBiID09IDIwKVxuICovIGZ1bmN0aW9uIHFyKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIGduICYmIEluKHQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGZpbHRlciBpcyBpbiBkaXNqdW5jdGl2ZSBub3JtYWwgZm9ybSAoRE5GKS5cbiAqXG4gKiA8cD5JbiBib29sZWFuIGxvZ2ljLCBhIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtIChETkYpIGlzIGEgY2Fub25pY2FsIG5vcm1hbCBmb3JtIG9mIGEgbG9naWNhbFxuICogZm9ybXVsYSBjb25zaXN0aW5nIG9mIGEgZGlzanVuY3Rpb24gb2YgY29uanVuY3Rpb25zOyBpdCBjYW4gYWxzbyBiZSBkZXNjcmliZWQgYXMgYW4gT1Igb2YgQU5Ecy5cbiAqXG4gKiA8cD5Gb3IgbW9yZSBpbmZvLCB2aXNpdDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzanVuY3RpdmVfbm9ybWFsX2Zvcm1cbiAqLyBmdW5jdGlvbiBVcih0KSB7XG4gICAgcmV0dXJuIExyKHQpIHx8IHFyKHQpIHx8IFxuICAgIC8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBmaWx0ZXIgaXMgdGhlIGRpc2p1bmN0aW9uIG9mIG9uZSBvciBtb3JlIFwiZmxhdCBjb25qdW5jdGlvbnNcIiBhbmRcbiAqIGZpZWxkIGZpbHRlcnMuIGUuZy4gKGEgPT0gMTApIHx8IChiPT0yMCAmJiBjPT0zMClcbiAqL1xuICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBnbiAmJiBwbih0KSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQuZ2V0RmlsdGVycygpKSBpZiAoIUxyKGUpICYmICFxcihlKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9KHQpO1xufVxuXG5mdW5jdGlvbiBLcih0KSB7XG4gICAgaWYgKEYodCBpbnN0YW5jZW9mIG1uIHx8IHQgaW5zdGFuY2VvZiBnbiksIHQgaW5zdGFuY2VvZiBtbikgcmV0dXJuIHQ7XG4gICAgaWYgKDEgPT09IHQuZmlsdGVycy5sZW5ndGgpIHJldHVybiBLcih0LmZpbHRlcnNbMF0pO1xuICAgIC8vIENvbXB1dGUgRE5GIGZvciBlYWNoIG9mIHRoZSBzdWJmaWx0ZXJzIGZpcnN0XG4gICAgICAgIGNvbnN0IGUgPSB0LmZpbHRlcnMubWFwKCh0ID0+IEtyKHQpKSk7XG4gICAgbGV0IG4gPSBnbi5jcmVhdGUoZSwgdC5vcCk7XG4gICAgcmV0dXJuIG4gPSBqcihuKSwgVXIobikgPyBuIDogKEYobiBpbnN0YW5jZW9mIGduKSwgRih5bihuKSksIEYobi5maWx0ZXJzLmxlbmd0aCA+IDEpLCBcbiAgICBuLmZpbHRlcnMucmVkdWNlKCgodCwgZSkgPT4gR3IodCwgZSkpKSk7XG59XG5cbmZ1bmN0aW9uIEdyKHQsIGUpIHtcbiAgICBsZXQgbjtcbiAgICByZXR1cm4gRih0IGluc3RhbmNlb2YgbW4gfHwgdCBpbnN0YW5jZW9mIGduKSwgRihlIGluc3RhbmNlb2YgbW4gfHwgZSBpbnN0YW5jZW9mIGduKSwgXG4gICAgLy8gRmllbGRGaWx0ZXIgRmllbGRGaWx0ZXJcbiAgICBuID0gdCBpbnN0YW5jZW9mIG1uID8gZSBpbnN0YW5jZW9mIG1uID8gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBDb25qdW5jdGlvbiBkaXN0cmlidXRpb24gZm9yIHR3byBmaWVsZCBmaWx0ZXJzIGlzIHRoZSBjb25qdW5jdGlvbiBvZiB0aGVtLlxuICAgICAgICByZXR1cm4gZ24uY3JlYXRlKFsgdCwgZSBdLCBcImFuZFwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLkFORCAqLyk7XG4gICAgfSh0LCBlKSA6IFFyKHQsIGUpIDogZSBpbnN0YW5jZW9mIG1uID8gUXIoZSwgdCkgOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBmb3VyIGNhc2VzOlxuICAgICAgICAvLyAoQSAmIEIpICYgKEMgJiBEKSAtLT4gKEEgJiBCICYgQyAmIEQpXG4gICAgICAgIC8vIChBICYgQikgJiAoQyB8IEQpIC0tPiAoQSAmIEIgJiBDKSB8IChBICYgQiAmIEQpXG4gICAgICAgIC8vIChBIHwgQikgJiAoQyAmIEQpIC0tPiAoQyAmIEQgJiBBKSB8IChDICYgRCAmIEIpXG4gICAgICAgIC8vIChBIHwgQikgJiAoQyB8IEQpIC0tPiAoQSAmIEMpIHwgKEEgJiBEKSB8IChCICYgQykgfCAoQiAmIEQpXG4gICAgICAgIC8vIENhc2UgMSBpcyBhIG1lcmdlLlxuICAgICAgICBpZiAoRih0LmZpbHRlcnMubGVuZ3RoID4gMCAmJiBlLmZpbHRlcnMubGVuZ3RoID4gMCksIHluKHQpICYmIHluKGUpKSByZXR1cm4gdm4odCwgZS5nZXRGaWx0ZXJzKCkpO1xuICAgICAgICAvLyBDYXNlIDIsMyw0IGFsbCBoYXZlIGF0IGxlYXN0IG9uZSBzaWRlIChsaHMgb3IgcmhzKSB0aGF0IGlzIGEgZGlzanVuY3Rpb24uIEluIGFsbCB0aHJlZSBjYXNlc1xuICAgICAgICAvLyB3ZSBzaG91bGQgdGFrZSBlYWNoIGVsZW1lbnQgb2YgdGhlIGRpc2p1bmN0aW9uIGFuZCBkaXN0cmlidXRlIGl0IG92ZXIgdGhlIG90aGVyIHNpZGUsIGFuZFxuICAgICAgICAvLyByZXR1cm4gdGhlIGRpc2p1bmN0aW9uIG9mIHRoZSBkaXN0cmlidXRpb24gcmVzdWx0cy5cbiAgICAgICAgICAgICAgICBjb25zdCBuID0gcG4odCkgPyB0IDogZSwgcyA9IHBuKHQpID8gZSA6IHQsIGkgPSBuLmZpbHRlcnMubWFwKCh0ID0+IEdyKHQsIHMpKSk7XG4gICAgICAgIHJldHVybiBnbi5jcmVhdGUoaSwgXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovKTtcbiAgICB9KHQsIGUpLCBqcihuKTtcbn1cblxuZnVuY3Rpb24gUXIodCwgZSkge1xuICAgIC8vIFRoZXJlIGFyZSB0d28gY2FzZXM6XG4gICAgLy8gQSAmIChCICYgQykgLS0+IChBICYgQiAmIEMpXG4gICAgLy8gQSAmIChCIHwgQykgLS0+IChBICYgQikgfCAoQSAmIEMpXG4gICAgaWYgKHluKGUpKSBcbiAgICAvLyBDYXNlIDFcbiAgICByZXR1cm4gdm4oZSwgdC5nZXRGaWx0ZXJzKCkpO1xuICAgIHtcbiAgICAgICAgLy8gQ2FzZSAyXG4gICAgICAgIGNvbnN0IG4gPSBlLmZpbHRlcnMubWFwKChlID0+IEdyKHQsIGUpKSk7XG4gICAgICAgIHJldHVybiBnbi5jcmVhdGUobiwgXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovKTtcbiAgICB9XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgYXNzb2NpYXRpdml0eSBwcm9wZXJ0eSB0byB0aGUgZ2l2ZW4gZmlsdGVyIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgZmlsdGVyLlxuICpcbiAqIDx1bD5cbiAqICAgPGxpPkEgfCAoQiB8IEMpID09IChBIHwgQikgfCBDID09IChBIHwgQiB8IEMpXG4gKiAgIDxsaT5BICYgKEIgJiBDKSA9PSAoQSAmIEIpICYgQyA9PSAoQSAmIEIgJiBDKVxuICogPC91bD5cbiAqXG4gKiA8cD5Gb3IgbW9yZSBpbmZvLCB2aXNpdDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXNzb2NpYXRpdmVfcHJvcGVydHkjUHJvcG9zaXRpb25hbF9sb2dpY1xuICovIGZ1bmN0aW9uIGpyKHQpIHtcbiAgICBpZiAoRih0IGluc3RhbmNlb2YgbW4gfHwgdCBpbnN0YW5jZW9mIGduKSwgdCBpbnN0YW5jZW9mIG1uKSByZXR1cm4gdDtcbiAgICBjb25zdCBlID0gdC5nZXRGaWx0ZXJzKCk7XG4gICAgLy8gSWYgdGhlIGNvbXBvc2l0ZSBmaWx0ZXIgb25seSBjb250YWlucyAxIGZpbHRlciwgYXBwbHkgYXNzb2NpYXRpdml0eSB0byBpdC5cbiAgICAgICAgaWYgKDEgPT09IGUubGVuZ3RoKSByZXR1cm4ganIoZVswXSk7XG4gICAgLy8gQXNzb2NpYXRpdml0eSBhcHBsaWVkIHRvIGEgZmxhdCBjb21wb3NpdGUgZmlsdGVyIHJlc3VsdHMgaXMgaXRzZWxmLlxuICAgICAgICBpZiAoVG4odCkpIHJldHVybiB0O1xuICAgIC8vIEZpcnN0IGFwcGx5IGFzc29jaWF0aXZpdHkgdG8gYWxsIHN1YmZpbHRlcnMuIFRoaXMgd2lsbCBpbiB0dXJuIHJlY3Vyc2l2ZWx5IGFwcGx5XG4gICAgLy8gYXNzb2NpYXRpdml0eSB0byBhbGwgbmVzdGVkIGNvbXBvc2l0ZSBmaWx0ZXJzIGFuZCBmaWVsZCBmaWx0ZXJzLlxuICAgICAgICBjb25zdCBuID0gZS5tYXAoKHQgPT4ganIodCkpKSwgcyA9IFtdO1xuICAgIC8vIEZvciBjb21wb3NpdGUgc3ViZmlsdGVycyB0aGF0IHBlcmZvcm0gdGhlIHNhbWUga2luZCBvZiBsb2dpY2FsIG9wZXJhdGlvbiBhcyBgY29tcG9zaXRlRmlsdGVyYFxuICAgIC8vIHRha2Ugb3V0IHRoZWlyIGZpbHRlcnMgYW5kIGFkZCB0aGVtIHRvIGBjb21wb3NpdGVGaWx0ZXJgLiBGb3IgZXhhbXBsZTpcbiAgICAvLyBjb21wb3NpdGVGaWx0ZXIgPSAoQSB8IChCIHwgQyB8IEQpKVxuICAgIC8vIGNvbXBvc2l0ZVN1YmZpbHRlciA9IChCIHwgQyB8IEQpXG4gICAgLy8gUmVzdWx0OiAoQSB8IEIgfCBDIHwgRClcbiAgICAvLyBOb3RlIHRoYXQgdGhlIGBjb21wb3NpdGVTdWJmaWx0ZXJgIGhhcyBiZWVuIGVsaW1pbmF0ZWQsIGFuZCBpdHMgZmlsdGVycyAoQiwgQywgRCkgaGF2ZSBiZWVuXG4gICAgLy8gYWRkZWQgdG8gdGhlIHRvcC1sZXZlbCBcImNvbXBvc2l0ZUZpbHRlclwiLlxuICAgICAgICByZXR1cm4gbi5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZSBpbnN0YW5jZW9mIG1uID8gcy5wdXNoKGUpIDogZSBpbnN0YW5jZW9mIGduICYmIChlLm9wID09PSB0Lm9wID8gXG4gICAgICAgIC8vIGNvbXBvc2l0ZUZpbHRlcjogKEEgfCAoQiB8IEMpKVxuICAgICAgICAvLyBjb21wb3NpdGVTdWJmaWx0ZXI6IChCIHwgQylcbiAgICAgICAgLy8gUmVzdWx0OiAoQSB8IEIgfCBDKVxuICAgICAgICBzLnB1c2goLi4uZS5maWx0ZXJzKSA6IFxuICAgICAgICAvLyBjb21wb3NpdGVGaWx0ZXI6IChBIHwgKEIgJiBDKSlcbiAgICAgICAgLy8gY29tcG9zaXRlU3ViZmlsdGVyOiAoQiAmIEMpXG4gICAgICAgIC8vIFJlc3VsdDogKEEgfCAoQiAmIEMpKVxuICAgICAgICBzLnB1c2goZSkpO1xuICAgIH0pKSwgMSA9PT0gcy5sZW5ndGggPyBzWzBdIDogZ24uY3JlYXRlKHMsIHQub3ApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbi1tZW1vcnkgaW1wbGVtZW50YXRpb24gb2YgSW5kZXhNYW5hZ2VyLlxuICovIGNsYXNzIHpyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ybiA9IG5ldyBXcjtcbiAgICB9XG4gICAgYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ybi5hZGQoZSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0Q29sbGVjdGlvblBhcmVudHModCwgZSkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSh0aGlzLnJuLmdldEVudHJpZXMoZSkpO1xuICAgIH1cbiAgICBhZGRGaWVsZEluZGV4KHQsIGUpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgZGVsZXRlRmllbGRJbmRleCh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGdldEluZGV4VHlwZSh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKDAgLyogSW5kZXhUeXBlLk5PTkUgKi8pO1xuICAgIH1cbiAgICBnZXRGaWVsZEluZGV4ZXModCwgZSkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShbXSk7XG4gICAgfVxuICAgIGdldE5leHRDb2xsZWN0aW9uR3JvdXBUb1VwZGF0ZSh0KSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXQodCwgZSkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShJdC5taW4oKSk7XG4gICAgfVxuICAgIGdldE1pbk9mZnNldEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShJdC5taW4oKSk7XG4gICAgfVxuICAgIHVwZGF0ZUNvbGxlY3Rpb25Hcm91cCh0LCBlLCBuKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4RW50cmllcyh0LCBlKSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBjb2xsZWN0aW9uLXBhcmVudCBpbmRleCBleHBvc2VkIGJ5IE1lbW9yeUluZGV4TWFuYWdlci5cbiAqIEFsc28gdXNlZCBmb3IgaW4tbWVtb3J5IGNhY2hpbmcgYnkgSW5kZXhlZERiSW5kZXhNYW5hZ2VyIGFuZCBpbml0aWFsIGluZGV4IHBvcHVsYXRpb25cbiAqIGluIGluZGV4ZWRkYl9zY2hlbWEudHNcbiAqLyBjbGFzcyBXciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSB7fTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBmYWxzZSBpZiB0aGUgZW50cnkgYWxyZWFkeSBleGlzdGVkLlxuICAgIGFkZCh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0Lmxhc3RTZWdtZW50KCksIG4gPSB0LnBvcExhc3QoKSwgcyA9IHRoaXMuaW5kZXhbZV0gfHwgbmV3IEVlKHV0LmNvbXBhcmF0b3IpLCBpID0gIXMuaGFzKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleFtlXSA9IHMuYWRkKG4pLCBpO1xuICAgIH1cbiAgICBoYXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5sYXN0U2VnbWVudCgpLCBuID0gdC5wb3BMYXN0KCksIHMgPSB0aGlzLmluZGV4W2VdO1xuICAgICAgICByZXR1cm4gcyAmJiBzLmhhcyhuKTtcbiAgICB9XG4gICAgZ2V0RW50cmllcyh0KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5pbmRleFt0XSB8fCBuZXcgRWUodXQuY29tcGFyYXRvcikpLnRvQXJyYXkoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IEhyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5cbi8qKlxuICogQSBwZXJzaXN0ZWQgaW1wbGVtZW50YXRpb24gb2YgSW5kZXhNYW5hZ2VyLlxuICpcbiAqIFBPUlRJTkcgTk9URTogVW5saWtlIGlPUyBhbmQgQW5kcm9pZCwgdGhlIFdlYiBTREsgZG9lcyBub3QgbWVtb2l6ZSBpbmRleFxuICogZGF0YSBhcyBpdCBzdXBwb3J0cyBtdWx0aS10YWIgYWNjZXNzLlxuICovXG5jbGFzcyBKciB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnVzZXIgPSB0LCB0aGlzLmRhdGFiYXNlSWQgPSBlLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGluLW1lbW9yeSBjb3B5IG9mIHRoZSBpbmRleCBlbnRyaWVzIHdlJ3ZlIGFscmVhZHkgd3JpdHRlbiBzaW5jZSB0aGUgU0RLXG4gICAgICAgICAqIGxhdW5jaGVkLiBVc2VkIHRvIGF2b2lkIHJlLXdyaXRpbmcgdGhlIHNhbWUgZW50cnkgcmVwZWF0ZWRseS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyAqTk9UKiBhIGNvbXBsZXRlIGNhY2hlIG9mIHdoYXQncyBpbiBwZXJzaXN0ZW5jZSBhbmQgc28gY2FuIG5ldmVyIGJlXG4gICAgICAgICAqIHVzZWQgdG8gc2F0aXNmeSByZWFkcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub24gPSBuZXcgV3IsIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBmcm9tIGEgdGFyZ2V0IHRvIGl0cyBlcXVpdmFsZW50IGxpc3Qgb2Ygc3ViLXRhcmdldHMuIEVhY2ggc3ViLXRhcmdldFxuICAgICAgICAgKiBjb250YWlucyBvbmx5IG9uZSB0ZXJtIGZyb20gdGhlIHRhcmdldCdzIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtIChETkYpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51biA9IG5ldyBvcygodCA9PiAkbih0KSksICgodCwgZSkgPT4gT24odCwgZSkpKSwgdGhpcy51aWQgPSB0LnVpZCB8fCBcIlwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGVudHJ5IHRvIHRoZSBjb2xsZWN0aW9uIHBhcmVudCBpbmRleC5cbiAgICAgKlxuICAgICAqIFJlcGVhdGVkIGNhbGxzIGZvciB0aGUgc2FtZSBjb2xsZWN0aW9uUGF0aCBzaG91bGQgYmUgYXZvaWRlZCB3aXRoaW4gYVxuICAgICAqIHRyYW5zYWN0aW9uIGFzIEluZGV4ZWREYkluZGV4TWFuYWdlciBvbmx5IGNhY2hlcyB3cml0ZXMgb25jZSBhIHRyYW5zYWN0aW9uXG4gICAgICogaGFzIGJlZW4gY29tbWl0dGVkLlxuICAgICAqLyAgICBhZGRUb0NvbGxlY3Rpb25QYXJlbnRJbmRleCh0LCBlKSB7XG4gICAgICAgIGlmICghdGhpcy5vbi5oYXMoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmxhc3RTZWdtZW50KCksIHMgPSBlLnBvcExhc3QoKTtcbiAgICAgICAgICAgIHQuYWRkT25Db21taXR0ZWRMaXN0ZW5lcigoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY29sbGVjdGlvbiB0byB0aGUgaW4gbWVtb3J5IGNhY2hlIG9ubHkgaWYgdGhlIHRyYW5zYWN0aW9uIHdhc1xuICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NmdWxseSBjb21taXR0ZWQuXG4gICAgICAgICAgICAgICAgdGhpcy5vbi5hZGQoZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBpID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogbixcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHF0KHMpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFlyKHQpLnB1dChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRDb2xsZWN0aW9uUGFyZW50cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXSwgcyA9IElEQktleVJhbmdlLmJvdW5kKFsgZSwgXCJcIiBdLCBbIHN0KGUpLCBcIlwiIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIFlyKHQpLmoocykubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY29sbGVjdGlvbklkIGd1YXJkIHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgKGFuZCBpc24ndCBhcyBsb25nXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UncmUgcnVubmluZyBpbiBhIHJlYWwgYnJvd3NlciksIGJ1dCB0aGVyZSdzIGEgYnVnIGluXG4gICAgICAgICAgICAgICAgLy8gaW5kZXhlZGRic2hpbSB0aGF0IGJyZWFrcyBvdXIgcmFuZ2UgaW4gb3VyIHRlc3RzIHJ1bm5pbmcgaW4gbm9kZTpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0vaXNzdWVzLzMzNFxuICAgICAgICAgICAgICAgIGlmIChzLmNvbGxlY3Rpb25JZCAhPT0gZSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgbi5wdXNoKEd0KHMucGFyZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBhZGRGaWVsZEluZGV4KHQsIGUpIHtcbiAgICAgICAgLy8gVE9ETyhpbmRleGluZyk6IFZlcmlmeSB0aGF0IHRoZSBhdXRvLWluY3JlbWVudGluZyBpbmRleCBJRCB3b3JrcyBpblxuICAgICAgICAvLyBTYWZhcmkgJiBGaXJlZm94LlxuICAgICAgICBjb25zdCBuID0gWnIodCksIHMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGluZGV4SWQ6IHQuaW5kZXhJZCxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IHQuY29sbGVjdGlvbkdyb3VwLFxuICAgICAgICAgICAgICAgIGZpZWxkczogdC5maWVsZHMubWFwKCh0ID0+IFsgdC5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIHQua2luZCBdKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSk7XG4gICAgICAgIGRlbGV0ZSBzLmluZGV4SWQ7XG4gICAgICAgIC8vIGBpbmRleElkYCBpcyBhdXRvLXBvcHVsYXRlZCBieSBJbmRleGVkRGJcbiAgICAgICAgY29uc3QgaSA9IG4uYWRkKHMpO1xuICAgICAgICBpZiAoZS5pbmRleFN0YXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdG8odCk7XG4gICAgICAgICAgICByZXR1cm4gaS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICBuLnB1dChUcih0LCB0aGlzLnVzZXIsIGUuaW5kZXhTdGF0ZS5zZXF1ZW5jZU51bWJlciwgZS5pbmRleFN0YXRlLm9mZnNldCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpLm5leHQoKTtcbiAgICB9XG4gICAgZGVsZXRlRmllbGRJbmRleCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBacih0KSwgcyA9IHRvKHQpLCBpID0gWHIodCk7XG4gICAgICAgIHJldHVybiBuLmRlbGV0ZShlLmluZGV4SWQpLm5leHQoKCgpID0+IHMuZGVsZXRlKElEQktleVJhbmdlLmJvdW5kKFsgZS5pbmRleElkIF0sIFsgZS5pbmRleElkICsgMSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCkpKSkubmV4dCgoKCkgPT4gaS5kZWxldGUoSURCS2V5UmFuZ2UuYm91bmQoWyBlLmluZGV4SWQgXSwgWyBlLmluZGV4SWQgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKSkpKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdUYXJnZXQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gWHIodCk7XG4gICAgICAgIGxldCBzID0gITA7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcgTWFwO1xuICAgICAgICByZXR1cm4gUnQuZm9yRWFjaCh0aGlzLmNuKGUpLCAoZSA9PiB0aGlzLmFuKHQsIGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgcyAmJiAocyA9ICEhdCksIGkuc2V0KGUsIHQpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gZ3MoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2goaSwgKChpLCByKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvO1xuICAgICAgICAgICAgICAgICAgICBOKFwiSW5kZXhlZERiSW5kZXhNYW5hZ2VyXCIsIGBVc2luZyBpbmRleCAke28gPSBpLCBgaWQ9JHtvLmluZGV4SWR9fGNnPSR7by5jb2xsZWN0aW9uR3JvdXB9fGY9JHtvLmZpZWxkcy5tYXAoKHQgPT4gYCR7dC5maWVsZFBhdGh9OiR7dC5raW5kfWApKS5qb2luKFwiLFwiKX1gfSB0byBleGVjdXRlICR7JG4oZSl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZnQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBuKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBCbih0LCBuLmZpZWxkUGF0aCkpIHN3aXRjaCAoZS5vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS52YWx1ZS5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXktY29udGFpbnNcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOUyAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgZS52YWx1ZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGFyZSBub3QgYXJyYXkgZmlsdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyB0aGUgbGlzdCBvZiB2YWx1ZXMgdGhhdCBhcmUgdXNlZCBpbiAhPSBvciBOT1RfSU4gZmlsdGVycy4gUmV0dXJuc1xuICogYG51bGxgIGlmIHRoZXJlIGFyZSBubyBzdWNoIGZpbHRlcnMuXG4gKi8gKHIsIGkpLCBjID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBNYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgZHQoZSkpIGZvciAoY29uc3QgZSBvZiBCbih0LCBzLmZpZWxkUGF0aCkpIHN3aXRjaCAoZS5vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpblwiIC8qIE9wZXJhdG9yLklOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmNvZGUgZXF1YWxpdHkgcHJlZml4LCB3aGljaCBpcyBlbmNvZGVkIGluIHRoZSBpbmRleCB2YWx1ZSBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgaW5lcXVhbGl0eSAoZS5nLiBgYSA9PSAnYScgJiYgYiAhPSAnYidgIGlzIGVuY29kZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBgdmFsdWUgIT0gJ2FiJ2ApLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0KHMuZmllbGRQYXRoLmNhbm9uaWNhbFN0cmluZygpLCBlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RJbi9Ob3RFcXVhbCBpcyBhbHdheXMgYSBzdWZmaXguIFRoZXJlIGNhbm5vdCBiZSBhbnkgcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VnbWVudHMgYW5kIGhlbmNlIHdlIGNhbiByZXR1cm4gZWFybHkgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZXQocy5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIGUudmFsdWUpLCBBcnJheS5mcm9tKG4udmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIG5vdEluIGJvdW5kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyBhIGxvd2VyIGJvdW5kIG9mIGZpZWxkIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQgdG9cbiAqIHNjYW4gdGhlIGluZGV4IGRlZmluZWQgYnkgYGZpZWxkSW5kZXhgLiBSZXR1cm5zIGBNSU5fVkFMVUVgIGlmIG5vIGxvd2VyIGJvdW5kXG4gKiBleGlzdHMuXG4gKi8gKHIsIGkpLCBhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHNlZ21lbnQsIHJldHJpZXZlIGEgbG93ZXIgYm91bmQgaWYgdGhlcmUgaXMgYSBzdWl0YWJsZSBmaWx0ZXIgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0QXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZHQoZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovID09PSBpLmtpbmQgPyBMbih0LCBpLmZpZWxkUGF0aCwgdC5zdGFydEF0KSA6IHFuKHQsIGkuZmllbGRQYXRoLCB0LnN0YXJ0QXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaChlLnZhbHVlKSwgcyAmJiAocyA9IGUuaW5jbHVzaXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaG4obiwgcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gKiBSZXR1cm5zIGFuIHVwcGVyIGJvdW5kIG9mIGZpZWxkIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIGVuZGluZyBwb2ludFxuICogd2hlbiBzY2FubmluZyB0aGUgaW5kZXggZGVmaW5lZCBieSBgZmllbGRJbmRleGAuIFJldHVybnMgYE1BWF9WQUxVRWAgaWYgbm9cbiAqIHVwcGVyIGJvdW5kIGV4aXN0cy5cbiAqLyAociwgaSksIGggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGVhY2ggc2VnbWVudCwgcmV0cmlldmUgYW4gdXBwZXIgYm91bmQgaWYgdGhlcmUgaXMgYSBzdWl0YWJsZSBmaWx0ZXIgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuZEF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGR0KGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IDAgLyogSW5kZXhLaW5kLkFTQ0VORElORyAqLyA9PT0gaS5raW5kID8gcW4odCwgaS5maWVsZFBhdGgsIHQuZW5kQXQpIDogTG4odCwgaS5maWVsZFBhdGgsIHQuZW5kQXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaChlLnZhbHVlKSwgcyAmJiAocyA9IGUuaW5jbHVzaXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaG4obiwgcyk7XG4gICAgICAgICAgICAgICAgICAgIH0ociwgaSksIGwgPSB0aGlzLmhuKGksIHIsIGEpLCBmID0gdGhpcy5obihpLCByLCBoKSwgZCA9IHRoaXMubG4oaSwgciwgYyksIHcgPSB0aGlzLmZuKGkuaW5kZXhJZCwgdSwgbCwgYS5pbmNsdXNpdmUsIGYsIGguaW5jbHVzaXZlLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2godywgKGkgPT4gbi5IKGksIGUubGltaXQpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaHQuZnJvbVNlZ21lbnRzKGUuZG9jdW1lbnRLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGFzKG4pIHx8ICh0ID0gdC5hZGQobiksIHMucHVzaChuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiBzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjbih0KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy51bi5nZXQodCk7XG4gICAgICAgIGlmIChlKSByZXR1cm4gZTtcbiAgICAgICAgaWYgKDAgPT09IHQuZmlsdGVycy5sZW5ndGgpIGUgPSBbIHQgXTsgZWxzZSB7XG4gICAgICAgICAgICBlID0gQnIoZ24uY3JlYXRlKHQuZmlsdGVycywgXCJhbmRcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5BTkQgKi8pKS5tYXAoKGUgPT4gTW4odC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5vcmRlckJ5LCBlLmdldEZpbHRlcnMoKSwgdC5saW1pdCwgdC5zdGFydEF0LCB0LmVuZEF0KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVuLnNldCh0LCBlKSwgZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIGtleSByYW5nZSBxdWVyeSBvbiBgRGJJbmRleEVudHJ5U3RvcmVgIHRoYXQgdW5pb25zIGFsbFxuICAgICAqIGJvdW5kcy5cbiAgICAgKi8gICAgZm4odCwgZSwgbiwgcywgaSwgciwgbykge1xuICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHRvdGFsIGluZGV4IHNjYW5zIHdlIHVuaW9uIHRvZ2V0aGVyLiBUaGlzIGlzIHNpbWlsYXIgdG8gYVxuICAgICAgICAvLyBkaXN0cmlidXRlZCBub3JtYWwgZm9ybSwgYnV0IGFkYXB0ZWQgZm9yIGFycmF5IHZhbHVlcy4gV2UgY3JlYXRlIGEgc2luZ2xlXG4gICAgICAgIC8vIGluZGV4IHJhbmdlIHBlciB2YWx1ZSBpbiBhbiBBUlJBWV9DT05UQUlOUyBvciBBUlJBWV9DT05UQUlOU19BTlkgZmlsdGVyXG4gICAgICAgIC8vIGNvbWJpbmVkIHdpdGggdGhlIHZhbHVlcyBmcm9tIHRoZSBxdWVyeSBib3VuZHMuXG4gICAgICAgIGNvbnN0IHUgPSAobnVsbCAhPSBlID8gZS5sZW5ndGggOiAxKSAqIE1hdGgubWF4KG4ubGVuZ3RoLCBpLmxlbmd0aCksIGMgPSB1IC8gKG51bGwgIT0gZSA/IGUubGVuZ3RoIDogMSksIGEgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaCA9IDA7IGggPCB1OyArK2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBlID8gdGhpcy5kbihlW2ggLyBjXSkgOiBIciwgbCA9IHRoaXMud24odCwgdSwgbltoICUgY10sIHMpLCBmID0gdGhpcy5fbih0LCB1LCBpW2ggJSBjXSwgciksIGQgPSBvLm1hcCgoZSA9PiB0aGlzLnduKHQsIHUsIGUsIFxuICAgICAgICAgICAgLyogaW5jbHVzaXZlPSAqLyAhMCkpKTtcbiAgICAgICAgICAgIGEucHVzaCguLi50aGlzLmNyZWF0ZVJhbmdlKGwsIGYsIGQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgLyoqIEdlbmVyYXRlcyB0aGUgbG93ZXIgYm91bmQgZm9yIGBhcnJheVZhbHVlYCBhbmQgYGRpcmVjdGlvbmFsVmFsdWVgLiAqLyAgICB3bih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcga3IodCwgaHQuZW1wdHkoKSwgZSwgbik7XG4gICAgICAgIHJldHVybiBzID8gaSA6IGkuSmUoKTtcbiAgICB9XG4gICAgLyoqIEdlbmVyYXRlcyB0aGUgdXBwZXIgYm91bmQgZm9yIGBhcnJheVZhbHVlYCBhbmQgYGRpcmVjdGlvbmFsVmFsdWVgLiAqLyAgICBfbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcga3IodCwgaHQuZW1wdHkoKSwgZSwgbik7XG4gICAgICAgIHJldHVybiBzID8gaS5KZSgpIDogaTtcbiAgICB9XG4gICAgYW4odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IE9yKGUpLCBzID0gbnVsbCAhPSBlLmNvbGxlY3Rpb25Hcm91cCA/IGUuY29sbGVjdGlvbkdyb3VwIDogZS5wYXRoLmxhc3RTZWdtZW50KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZpZWxkSW5kZXhlcyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5kZXggd2l0aCB0aGUgbW9zdCBudW1iZXIgb2Ygc2VnbWVudHMuXG4gICAgICAgICAgICBsZXQgZSA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdCkge1xuICAgICAgICAgICAgICAgIG4udG4ocykgJiYgKCFlIHx8IHMuZmllbGRzLmxlbmd0aCA+IGUuZmllbGRzLmxlbmd0aCkgJiYgKGUgPSBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldEluZGV4VHlwZSh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gMiAvKiBJbmRleFR5cGUuRlVMTCAqLztcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuY24oZSk7XG4gICAgICAgIHJldHVybiBSdC5mb3JFYWNoKHMsIChlID0+IHRoaXMuYW4odCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB0ID8gMCAvKiBJbmRleFR5cGUuTk9ORSAqLyAhPT0gbiAmJiB0LmZpZWxkcy5sZW5ndGggPCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGUgPSBuZXcgRWUoYXQuY29tcGFyYXRvciksIG4gPSAhMTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdC5maWx0ZXJzKSBmb3IgKGNvbnN0IHQgb2Ygcy5nZXRGbGF0dGVuZWRGaWx0ZXJzKCkpIFxuICAgICAgICAgICAgICAgIC8vIF9fbmFtZV9fIGlzIG5vdCBhbiBleHBsaWNpdCBzZWdtZW50IG9mIGFueSBpbmRleCwgc28gd2UgZG9uJ3QgbmVlZCB0b1xuICAgICAgICAgICAgICAgIC8vIGNvdW50IGl0LlxuICAgICAgICAgICAgICAgIHQuZmllbGQuaXNLZXlGaWVsZCgpIHx8IChcbiAgICAgICAgICAgICAgICAvLyBBUlJBWV9DT05UQUlOUyBvciBBUlJBWV9DT05UQUlOU19BTlkgZmlsdGVycyBtdXN0IGJlIGNvdW50ZWQgc2VwYXJhdGVseS5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2UsIGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgYW4gaW5kZXggZm9yIFwiYSBBUlJBWSBhIEFTQ1wiLiBFdmVuXG4gICAgICAgICAgICAgICAgLy8gdGhvdWdoIHRoZXNlIGFyZSBvbiB0aGUgc2FtZSBmaWVsZCwgdGhleSBzaG91bGQgYmUgY291bnRlZCBhcyB0d29cbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0ZSBzZWdtZW50cyBpbiBhbiBpbmRleC5cbiAgICAgICAgICAgICAgICBcImFycmF5LWNvbnRhaW5zXCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlMgKi8gPT09IHQub3AgfHwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IHQub3AgPyBuID0gITAgOiBlID0gZS5hZGQodC5maWVsZCkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0Lm9yZGVyQnkpIFxuICAgICAgICAgICAgICAgIC8vIF9fbmFtZV9fIGlzIG5vdCBhbiBleHBsaWNpdCBzZWdtZW50IG9mIGFueSBpbmRleCwgc28gd2UgZG9uJ3QgbmVlZCB0b1xuICAgICAgICAgICAgICAgIC8vIGNvdW50IGl0LlxuICAgICAgICAgICAgICAgIG4uZmllbGQuaXNLZXlGaWVsZCgpIHx8IChlID0gZS5hZGQobi5maWVsZCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnNpemUgKyAobiA/IDEgOiAwKTtcbiAgICAgICAgICAgIH0oZSkgJiYgKG4gPSAxIC8qIEluZGV4VHlwZS5QQVJUSUFMICovKSA6IG4gPSAwIC8qIEluZGV4VHlwZS5OT05FICovO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBcbiAgICAgICAgLy8gT1IgcXVlcmllcyBoYXZlIG1vcmUgdGhhbiBvbmUgc3ViLXRhcmdldCAob25lIHN1Yi10YXJnZXQgcGVyIERORiB0ZXJtKS4gV2UgY3VycmVudGx5IGNvbnNpZGVyXG4gICAgICAgIC8vIE9SIHF1ZXJpZXMgdGhhdCBoYXZlIGEgYGxpbWl0YCB0byBoYXZlIGEgcGFydGlhbCBpbmRleC4gRm9yIHN1Y2ggcXVlcmllcyB3ZSBwZXJmb3JtIHNvcnRpbmdcbiAgICAgICAgLy8gYW5kIGFwcGx5IHRoZSBsaW1pdCBpbiBtZW1vcnkgYXMgYSBwb3N0LXByb2Nlc3Npbmcgc3RlcC5cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IHQubGltaXQ7XG4gICAgICAgIH0oZSkgJiYgcy5sZW5ndGggPiAxICYmIDIgLyogSW5kZXhUeXBlLkZVTEwgKi8gPT09IG4gPyAxIC8qIEluZGV4VHlwZS5QQVJUSUFMICovIDogbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBieXRlIGVuY29kZWQgZm9ybSBvZiB0aGUgZGlyZWN0aW9uYWwgdmFsdWVzIGluIHRoZSBmaWVsZCBpbmRleC5cbiAgICAgKiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgaGF2ZSBhbGwgZmllbGRzIHNwZWNpZmllZCBpbiB0aGVcbiAgICAgKiBpbmRleC5cbiAgICAgKi8gICAgbW4odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IE5yO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgZHQodCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmRhdGEuZmllbGQocy5maWVsZFBhdGgpO1xuICAgICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5IZShzLmtpbmQpO1xuICAgICAgICAgICAgYnIuVmUuX2UodCwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG4uUWUoKTtcbiAgICB9XG4gICAgLyoqIEVuY29kZXMgYSBzaW5nbGUgdmFsdWUgdG8gdGhlIGFzY2VuZGluZyBpbmRleCBmb3JtYXQuICovICAgIGRuKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBOcjtcbiAgICAgICAgcmV0dXJuIGJyLlZlLl9lKHQsIGUuSGUoMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovKSksIGUuUWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbmNvZGVkIGZvcm0gb2YgdGhlIGRvY3VtZW50IGtleSB0aGF0IHNvcnRzIGJhc2VkIG9uIHRoZSBrZXlcbiAgICAgKiBvcmRlcmluZyBvZiB0aGUgZmllbGQgaW5kZXguXG4gICAgICovICAgIGduKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBOcjtcbiAgICAgICAgcmV0dXJuIGJyLlZlLl9lKFdlKHRoaXMuZGF0YWJhc2VJZCwgZSksIG4uSGUoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IGR0KHQpO1xuICAgICAgICAgICAgcmV0dXJuIDAgPT09IGUubGVuZ3RoID8gMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovIDogZVtlLmxlbmd0aCAtIDFdLmtpbmQ7XG4gICAgICAgIH0odCkpKSwgbi5RZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBmaWVsZCB2YWx1ZXMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLlxuICAgICAqIEZvciBJTiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBsbih0LCBlLCBuKSB7XG4gICAgICAgIGlmIChudWxsID09PSBuKSByZXR1cm4gW107XG4gICAgICAgIGxldCBzID0gW107XG4gICAgICAgIHMucHVzaChuZXcgTnIpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgciBvZiBkdCh0KSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5baSsrXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBzKSBpZiAodGhpcy55bihlLCByLmZpZWxkUGF0aCkgJiYgSmUodCkpIHMgPSB0aGlzLnBuKHMsIHIsIHQpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbi5IZShyLmtpbmQpO1xuICAgICAgICAgICAgICAgIGJyLlZlLl9lKHQsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLkluKHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBib3VuZHMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLiBGb3IgSU5cbiAgICAgKiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBobih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxuKHQsIGUsIG4ucG9zaXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgYnl0ZSByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGVuY29kZXJzLiAqLyAgICBJbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgKytuKSBlW25dID0gdFtuXS5RZSgpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNlcGFyYXRlIGVuY29kZXIgZm9yIGVhY2ggZWxlbWVudCBvZiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBtZXRob2QgYXBwZW5kcyBlYWNoIHZhbHVlIHRvIGFsbCBleGlzdGluZyBlbmNvZGVycyAoZS5nLiBmaWx0ZXIoXCJhXCIsXG4gICAgICogXCI9PVwiLCBcImExXCIpLmZpbHRlcihcImJcIiwgXCJpblwiLCBbXCJiMVwiLCBcImIyXCJdKSBiZWNvbWVzIFtcImExLGIxXCIsIFwiYTEsYjJcIl0pLiBBXG4gICAgICogbGlzdCBvZiBuZXcgZW5jb2RlcnMgaXMgcmV0dXJuZWQuXG4gICAgICovICAgIHBuKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IFsgLi4udCBdLCBpID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBuLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdKSBmb3IgKGNvbnN0IG4gb2Ygcykge1xuICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBOcjtcbiAgICAgICAgICAgIHMuc2VlZChuLlFlKCkpLCBici5WZS5fZSh0LCBzLkhlKGUua2luZCkpLCBpLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHluKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICEhdC5maWx0ZXJzLmZpbmQoKHQgPT4gdCBpbnN0YW5jZW9mIG1uICYmIHQuZmllbGQuaXNFcXVhbChlKSAmJiAoXCJpblwiIC8qIE9wZXJhdG9yLklOICovID09PSB0Lm9wIHx8IFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovID09PSB0Lm9wKSkpO1xuICAgIH1cbiAgICBnZXRGaWVsZEluZGV4ZXModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gWnIodCksIHMgPSB0byh0KTtcbiAgICAgICAgcmV0dXJuIChlID8gbi5qKFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgSURCS2V5UmFuZ2UuYm91bmQoZSwgZSkpIDogbi5qKCkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2godCwgKHQgPT4gcy5nZXQoWyB0LmluZGV4SWQsIHRoaXMudWlkIF0pLm5leHQoKG4gPT4ge1xuICAgICAgICAgICAgICAgIGUucHVzaChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlID8gbmV3IGd0KGUuc2VxdWVuY2VOdW1iZXIsIG5ldyBJdCh3cihlLnJlYWRUaW1lKSwgbmV3IGh0KEd0KGUuZG9jdW1lbnRLZXkpKSwgZS5sYXJnZXN0QmF0Y2hJZCkpIDogZ3QuZW1wdHkoKSwgcyA9IHQuZmllbGRzLm1hcCgoKFt0LCBlXSkgPT4gbmV3IF90KGF0LmZyb21TZXJ2ZXJGb3JtYXQodCksIGUpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbHQodC5pbmRleElkLCB0LmNvbGxlY3Rpb25Hcm91cCwgcywgbik7XG4gICAgICAgICAgICAgICAgfSh0LCBuKSk7XG4gICAgICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGRJbmRleGVzKHQpLm5leHQoKHQgPT4gMCA9PT0gdC5sZW5ndGggPyBudWxsIDogKHQuc29ydCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmluZGV4U3RhdGUuc2VxdWVuY2VOdW1iZXIgLSBlLmluZGV4U3RhdGUuc2VxdWVuY2VOdW1iZXI7XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiBldCh0LmNvbGxlY3Rpb25Hcm91cCwgZS5jb2xsZWN0aW9uR3JvdXApO1xuICAgICAgICB9KSksIHRbMF0uY29sbGVjdGlvbkdyb3VwKSkpO1xuICAgIH1cbiAgICB1cGRhdGVDb2xsZWN0aW9uR3JvdXAodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gWnIodCksIGkgPSB0byh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVG4odCkubmV4dCgodCA9PiBzLmooXCJjb2xsZWN0aW9uR3JvdXBJbmRleFwiLCBJREJLZXlSYW5nZS5ib3VuZChlLCBlKSkubmV4dCgoZSA9PiBSdC5mb3JFYWNoKGUsIChlID0+IGkucHV0KFRyKGUuaW5kZXhJZCwgdGhpcy51c2VyLCB0LCBuKSkpKSkpKSk7XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4RW50cmllcyh0LCBlKSB7XG4gICAgICAgIC8vIFBvcnRpbmcgTm90ZTogYGdldEZpZWxkSW5kZXhlcygpYCBvbiBXZWIgZG9lcyBub3QgY2FjaGUgaW5kZXggbG9va3VwcyBhc1xuICAgICAgICAvLyBpdCBjb3VsZCBiZSB1c2VkIGFjcm9zcyBkaWZmZXJlbnQgSW5kZXhlZERCIHRyYW5zYWN0aW9ucy4gQXMgYW55IGNhY2hlZFxuICAgICAgICAvLyBkYXRhIG1pZ2h0IGJlIGludmFsaWRhdGVkIGJ5IG90aGVyIG11bHRpLXRhYiBjbGllbnRzLCB3ZSBjYW4gb25seSB0cnVzdFxuICAgICAgICAvLyBkYXRhIHdpdGhpbiBhIHNpbmdsZSBJbmRleGVkREIgdHJhbnNhY3Rpb24uIFdlIHRoZXJlZm9yZSBhZGQgYSBjYWNoZVxuICAgICAgICAvLyBoZXJlLlxuICAgICAgICBjb25zdCBuID0gbmV3IE1hcDtcbiAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2goZSwgKChlLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5nZXQoZS5jb2xsZWN0aW9uR3JvdXApO1xuICAgICAgICAgICAgcmV0dXJuIChpID8gUnQucmVzb2x2ZShpKSA6IHRoaXMuZ2V0RmllbGRJbmRleGVzKHQsIGUuY29sbGVjdGlvbkdyb3VwKSkubmV4dCgoaSA9PiAobi5zZXQoZS5jb2xsZWN0aW9uR3JvdXAsIGkpLCBcbiAgICAgICAgICAgIFJ0LmZvckVhY2goaSwgKG4gPT4gdGhpcy5Fbih0LCBlLCBuKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5BbihzLCBuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5pc0VxdWFsKGkpID8gUnQucmVzb2x2ZSgpIDogdGhpcy52bih0LCBzLCBuLCBlLCBpKTtcbiAgICAgICAgICAgIH0pKSkpKSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFJuKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgcmV0dXJuIFhyKHQpLnB1dCh7XG4gICAgICAgICAgICBpbmRleElkOiBzLmluZGV4SWQsXG4gICAgICAgICAgICB1aWQ6IHRoaXMudWlkLFxuICAgICAgICAgICAgYXJyYXlWYWx1ZTogcy5hcnJheVZhbHVlLFxuICAgICAgICAgICAgZGlyZWN0aW9uYWxWYWx1ZTogcy5kaXJlY3Rpb25hbFZhbHVlLFxuICAgICAgICAgICAgb3JkZXJlZERvY3VtZW50S2V5OiB0aGlzLmduKG4sIGUua2V5KSxcbiAgICAgICAgICAgIGRvY3VtZW50S2V5OiBlLmtleS5wYXRoLnRvQXJyYXkoKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgUG4odCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4gWHIodCkuZGVsZXRlKFsgcy5pbmRleElkLCB0aGlzLnVpZCwgcy5hcnJheVZhbHVlLCBzLmRpcmVjdGlvbmFsVmFsdWUsIHRoaXMuZ24obiwgZS5rZXkpLCBlLmtleS5wYXRoLnRvQXJyYXkoKSBdKTtcbiAgICB9XG4gICAgRW4odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gWHIodCk7XG4gICAgICAgIGxldCBpID0gbmV3IEVlKE1yKTtcbiAgICAgICAgcmV0dXJuIHMuWCh7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2Uub25seShbIG4uaW5kZXhJZCwgdGhpcy51aWQsIHRoaXMuZ24obiwgZSkgXSlcbiAgICAgICAgfSwgKCh0LCBzKSA9PiB7XG4gICAgICAgICAgICBpID0gaS5hZGQobmV3IGtyKG4uaW5kZXhJZCwgZSwgcy5hcnJheVZhbHVlLCBzLmRpcmVjdGlvbmFsVmFsdWUpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgdGhlIGluZGV4IGVudHJpZXMgZm9yIHRoZSBnaXZlbiBkb2N1bWVudC4gKi8gICAgQW4odCwgZSkge1xuICAgICAgICBsZXQgbiA9IG5ldyBFZShNcik7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLm1uKGUsIHQpO1xuICAgICAgICBpZiAobnVsbCA9PSBzKSByZXR1cm4gbjtcbiAgICAgICAgY29uc3QgaSA9IGZ0KGUpO1xuICAgICAgICBpZiAobnVsbCAhPSBpKSB7XG4gICAgICAgICAgICBjb25zdCByID0gdC5kYXRhLmZpZWxkKGkuZmllbGRQYXRoKTtcbiAgICAgICAgICAgIGlmIChKZShyKSkgZm9yIChjb25zdCBpIG9mIHIuYXJyYXlWYWx1ZS52YWx1ZXMgfHwgW10pIG4gPSBuLmFkZChuZXcga3IoZS5pbmRleElkLCB0LmtleSwgdGhpcy5kbihpKSwgcykpO1xuICAgICAgICB9IGVsc2UgbiA9IG4uYWRkKG5ldyBrcihlLmluZGV4SWQsIHQua2V5LCBIciwgcykpO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgaW5kZXggZW50cmllcyBmb3IgdGhlIHByb3ZpZGVkIGRvY3VtZW50IGJ5IGRlbGV0aW5nIGVudHJpZXNcbiAgICAgKiB0aGF0IGFyZSBubyBsb25nZXIgcmVmZXJlbmNlZCBpbiBgbmV3RW50cmllc2AgYW5kIGFkZGluZyBhbGwgbmV3bHkgYWRkZWRcbiAgICAgKiBlbnRyaWVzLlxuICAgICAqLyAgICB2bih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIE4oXCJJbmRleGVkRGJJbmRleE1hbmFnZXJcIiwgXCJVcGRhdGluZyBpbmRleCBlbnRyaWVzIGZvciBkb2N1bWVudCAnJXMnXCIsIGUua2V5KTtcbiAgICAgICAgY29uc3QgciA9IFtdO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbiwgcywgaSkge1xuICAgICAgICAgICAgY29uc3QgciA9IHQuZ2V0SXRlcmF0b3IoKSwgbyA9IGUuZ2V0SXRlcmF0b3IoKTtcbiAgICAgICAgICAgIGxldCB1ID0gdmUociksIGMgPSB2ZShvKTtcbiAgICAgICAgICAgIC8vIFdhbGsgdGhyb3VnaCB0aGUgdHdvIHNldHMgYXQgdGhlIHNhbWUgdGltZSwgdXNpbmcgdGhlIG9yZGVyaW5nIGRlZmluZWQgYnlcbiAgICAgICAgICAgIC8vIGBjb21wYXJhdG9yYC5cbiAgICAgICAgICAgIGZvciAoO3UgfHwgYzsgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSAhMSwgZSA9ICExO1xuICAgICAgICAgICAgICAgIGlmICh1ICYmIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG4odSwgYyk7XG4gICAgICAgICAgICAgICAgICAgIHMgPCAwID8gXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IHdhcyByZW1vdmVkIGlmIHRoZSBuZXh0IGVsZW1lbnQgaW4gb3VyIG9yZGVyZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Fsa3Rocm91Z2ggaXMgb25seSBpbiBgYmVmb3JlYC5cbiAgICAgICAgICAgICAgICAgICAgZSA9ICEwIDogcyA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCB3YXMgYWRkZWQgaWYgdGhlIG5leHQgZWxlbWVudCBpbiBvdXIgb3JkZXJlZCB3YWxrdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBvbmx5IGluIGBhZnRlcmAuXG4gICAgICAgICAgICAgICAgICAgIHQgPSAhMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG51bGwgIT0gdSA/IGUgPSAhMCA6IHQgPSAhMDtcbiAgICAgICAgICAgICAgICB0ID8gKHMoYyksIGMgPSB2ZShvKSkgOiBlID8gKGkodSksIHUgPSB2ZShyKSkgOiAodSA9IHZlKHIpLCBjID0gdmUobykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KHMsIGksIE1yLCAoXG4gICAgICAgIC8qIG9uQWRkPSAqLyBzID0+IHtcbiAgICAgICAgICAgIHIucHVzaCh0aGlzLlJuKHQsIGUsIG4sIHMpKTtcbiAgICAgICAgfSksIChcbiAgICAgICAgLyogb25SZW1vdmU9ICovIHMgPT4ge1xuICAgICAgICAgICAgci5wdXNoKHRoaXMuUG4odCwgZSwgbiwgcykpO1xuICAgICAgICB9KSksIFJ0LndhaXRGb3Iocik7XG4gICAgfVxuICAgIFRuKHQpIHtcbiAgICAgICAgbGV0IGUgPSAxO1xuICAgICAgICByZXR1cm4gdG8odCkuWCh7XG4gICAgICAgICAgICBpbmRleDogXCJzZXF1ZW5jZU51bWJlckluZGV4XCIsXG4gICAgICAgICAgICByZXZlcnNlOiAhMCxcbiAgICAgICAgICAgIHJhbmdlOiBJREJLZXlSYW5nZS51cHBlckJvdW5kKFsgdGhpcy51aWQsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIF0pXG4gICAgICAgIH0sICgodCwgbiwgcykgPT4ge1xuICAgICAgICAgICAgcy5kb25lKCksIGUgPSBuLnNlcXVlbmNlTnVtYmVyICsgMTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBzZXQgb2YgSURCIHJhbmdlcyB0aGF0IHNwbGl0cyB0aGUgZXhpc3RpbmcgcmFuZ2UgYW5kIGV4Y2x1ZGVzXG4gICAgICogYW55IHZhbHVlcyB0aGF0IG1hdGNoIHRoZSBgbm90SW5WYWx1ZWAgZnJvbSB0aGVzZSByYW5nZXMuIEFzIGFuIGV4YW1wbGUsXG4gICAgICogJ1tmb28gPiAyICYmIGZvbyAhPSAzXWAgYmVjb21lcyAgYFtmb28gPiAyICYmIDwgMywgZm9vID4gM11gLlxuICAgICAqLyAgICBjcmVhdGVSYW5nZSh0LCBlLCBuKSB7XG4gICAgICAgIC8vIFRoZSBub3RJbiB2YWx1ZXMgbmVlZCB0byBiZSBzb3J0ZWQgYW5kIHVuaXF1ZSBzbyB0aGF0IHdlIGNhbiByZXR1cm4gYVxuICAgICAgICAvLyBzb3J0ZWQgc2V0IG9mIG5vbi1vdmVybGFwcGluZyByYW5nZXMuXG4gICAgICAgIG4gPSBuLnNvcnQoKCh0LCBlKSA9PiBNcih0LCBlKSkpLmZpbHRlcigoKHQsIGUsIG4pID0+ICFlIHx8IDAgIT09IE1yKHQsIG5bZSAtIDFdKSkpO1xuICAgICAgICBjb25zdCBzID0gW107XG4gICAgICAgIHMucHVzaCh0KTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBNcihpLCB0KSwgciA9IE1yKGksIGUpO1xuICAgICAgICAgICAgaWYgKDAgPT09IG4pIFxuICAgICAgICAgICAgLy8gYG5vdEluVmFsdWVgIGlzIHRoZSBsb3dlciBib3VuZC4gV2UgdGhlcmVmb3JlIG5lZWQgdG8gcmFpc2UgdGhlIGJvdW5kXG4gICAgICAgICAgICAvLyB0byB0aGUgbmV4dCB2YWx1ZS5cbiAgICAgICAgICAgIHNbMF0gPSB0LkplKCk7IGVsc2UgaWYgKG4gPiAwICYmIHIgPCAwKSBcbiAgICAgICAgICAgIC8vIGBub3RJblZhbHVlYCBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSByYW5nZVxuICAgICAgICAgICAgcy5wdXNoKGkpLCBzLnB1c2goaS5KZSgpKTsgZWxzZSBpZiAociA+IDApIFxuICAgICAgICAgICAgLy8gYG5vdEluVmFsdWVgIChhbmQgYWxsIGZvbGxvd2luZyB2YWx1ZXMpIGFyZSBvdXQgb2YgdGhlIHJhbmdlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzLnB1c2goZSk7XG4gICAgICAgIGNvbnN0IGkgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBzLmxlbmd0aDsgdCArPSAyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgdHdvIGJvdW5kcyB0aGF0IHdpbGwgY3JlYXRlIGFuIHVubWF0Y2hhYmxlIGtleSByYW5nZSxcbiAgICAgICAgICAgIC8vIHRoZW4gd2UgcmV0dXJuIGFuIGVtcHR5IHNldCBvZiBrZXkgcmFuZ2VzLlxuICAgICAgICAgICAgaWYgKHRoaXMuYm4oc1t0XSwgc1t0ICsgMV0pKSByZXR1cm4gW107XG4gICAgICAgICAgICBjb25zdCBlID0gWyBzW3RdLmluZGV4SWQsIHRoaXMudWlkLCBzW3RdLmFycmF5VmFsdWUsIHNbdF0uZGlyZWN0aW9uYWxWYWx1ZSwgSHIsIFtdIF0sIG4gPSBbIHNbdCArIDFdLmluZGV4SWQsIHRoaXMudWlkLCBzW3QgKyAxXS5hcnJheVZhbHVlLCBzW3QgKyAxXS5kaXJlY3Rpb25hbFZhbHVlLCBIciwgW10gXTtcbiAgICAgICAgICAgIGkucHVzaChJREJLZXlSYW5nZS5ib3VuZChlLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIGJuKHQsIGUpIHtcbiAgICAgICAgLy8gSWYgbG93ZXIgYm91bmQgaXMgZ3JlYXRlciB0aGFuIHRoZSB1cHBlciBib3VuZCwgdGhlbiB0aGUga2V5XG4gICAgICAgIC8vIHJhbmdlIGNhbiBuZXZlciBiZSBtYXRjaGVkLlxuICAgICAgICByZXR1cm4gTXIodCwgZSkgPiAwO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXRGcm9tQ29sbGVjdGlvbkdyb3VwKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGRJbmRleGVzKHQsIGUpLm5leHQoZW8pO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXQodCwgZSkge1xuICAgICAgICByZXR1cm4gUnQubWFwQXJyYXkodGhpcy5jbihlKSwgKGUgPT4gdGhpcy5hbih0LCBlKS5uZXh0KCh0ID0+IHQgfHwgTygpKSkpKS5uZXh0KGVvKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjb2xsZWN0aW9uUGFyZW50c1xuICogZG9jdW1lbnQgc3RvcmUuXG4gKi8gZnVuY3Rpb24gWXIodCkge1xuICAgIHJldHVybiBfZSh0LCBcImNvbGxlY3Rpb25QYXJlbnRzXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgaW5kZXggZW50cnkgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIFhyKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJpbmRleEVudHJpZXNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBpbmRleCBjb25maWd1cmF0aW9uIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBacih0KSB7XG4gICAgcmV0dXJuIF9lKHQsIFwiaW5kZXhDb25maWd1cmF0aW9uXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgaW5kZXggc3RhdGUgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHRvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJpbmRleFN0YXRlXCIpO1xufVxuXG5mdW5jdGlvbiBlbyh0KSB7XG4gICAgRigwICE9PSB0Lmxlbmd0aCk7XG4gICAgbGV0IGUgPSB0WzBdLmluZGV4U3RhdGUub2Zmc2V0LCBuID0gZS5sYXJnZXN0QmF0Y2hJZDtcbiAgICBmb3IgKGxldCBzID0gMTsgcyA8IHQubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgY29uc3QgaSA9IHRbc10uaW5kZXhTdGF0ZS5vZmZzZXQ7XG4gICAgICAgIFR0KGksIGUpIDwgMCAmJiAoZSA9IGkpLCBuIDwgaS5sYXJnZXN0QmF0Y2hJZCAmJiAobiA9IGkubGFyZ2VzdEJhdGNoSWQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEl0KGUucmVhZFRpbWUsIGUuZG9jdW1lbnRLZXksIG4pO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBubyA9IHtcbiAgICBkaWRSdW46ICExLFxuICAgIHNlcXVlbmNlTnVtYmVyc0NvbGxlY3RlZDogMCxcbiAgICB0YXJnZXRzUmVtb3ZlZDogMCxcbiAgICBkb2N1bWVudHNSZW1vdmVkOiAwXG59O1xuXG5jbGFzcyBzbyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8gV2hlbiB3ZSBhdHRlbXB0IHRvIGNvbGxlY3QsIHdlIHdpbGwgb25seSBkbyBzbyBpZiB0aGUgY2FjaGUgc2l6ZSBpcyBncmVhdGVyIHRoYW4gdGhpc1xuICAgIC8vIHRocmVzaG9sZC4gUGFzc2luZyBgQ09MTEVDVElPTl9ESVNBQkxFRGAgaGVyZSB3aWxsIGNhdXNlIGNvbGxlY3Rpb24gdG8gYWx3YXlzIGJlIHNraXBwZWQuXG4gICAgdCwgXG4gICAgLy8gVGhlIHBlcmNlbnRhZ2Ugb2Ygc2VxdWVuY2UgbnVtYmVycyB0aGF0IHdlIHdpbGwgYXR0ZW1wdCB0byBjb2xsZWN0XG4gICAgZSwgXG4gICAgLy8gQSBjYXAgb24gdGhlIHRvdGFsIG51bWJlciBvZiBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgd2lsbCBiZSBjb2xsZWN0ZWQuIFRoaXMgcHJldmVudHNcbiAgICAvLyB1cyBmcm9tIGNvbGxlY3RpbmcgYSBodWdlIG51bWJlciBvZiBzZXF1ZW5jZSBudW1iZXJzIGlmIHRoZSBjYWNoZSBoYXMgZ3Jvd24gdmVyeSBsYXJnZS5cbiAgICBuKSB7XG4gICAgICAgIHRoaXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCA9IHQsIHRoaXMucGVyY2VudGlsZVRvQ29sbGVjdCA9IGUsIHRoaXMubWF4aW11bVNlcXVlbmNlTnVtYmVyc1RvQ29sbGVjdCA9IG47XG4gICAgfVxuICAgIHN0YXRpYyB3aXRoQ2FjaGVTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzbyh0LCBzby5ERUZBVUxUX0NPTExFQ1RJT05fUEVSQ0VOVElMRSwgc28uREVGQVVMVF9NQVhfU0VRVUVOQ0VfTlVNQkVSU19UT19DT0xMRUNUKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERlbGV0ZSBhIG11dGF0aW9uIGJhdGNoIGFuZCB0aGUgYXNzb2NpYXRlZCBkb2N1bWVudCBtdXRhdGlvbnMuXG4gKiBAcmV0dXJucyBBIFBlcnNpc3RlbmNlUHJvbWlzZSBvZiB0aGUgZG9jdW1lbnQgbXV0YXRpb25zIHRoYXQgd2VyZSByZW1vdmVkLlxuICovXG5mdW5jdGlvbiBpbyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IHQuc3RvcmUoXCJtdXRhdGlvbnNcIiksIGkgPSB0LnN0b3JlKFwiZG9jdW1lbnRNdXRhdGlvbnNcIiksIHIgPSBbXSwgbyA9IElEQktleVJhbmdlLm9ubHkobi5iYXRjaElkKTtcbiAgICBsZXQgdSA9IDA7XG4gICAgY29uc3QgYyA9IHMuWCh7XG4gICAgICAgIHJhbmdlOiBvXG4gICAgfSwgKCh0LCBlLCBuKSA9PiAodSsrLCBuLmRlbGV0ZSgpKSkpO1xuICAgIHIucHVzaChjLm5leHQoKCgpID0+IHtcbiAgICAgICAgRigxID09PSB1KTtcbiAgICB9KSkpO1xuICAgIGNvbnN0IGEgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHQgb2Ygbi5tdXRhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcyA9IHp0KGUsIHQua2V5LnBhdGgsIG4uYmF0Y2hJZCk7XG4gICAgICAgIHIucHVzaChpLmRlbGV0ZShzKSksIGEucHVzaCh0LmtleSk7XG4gICAgfVxuICAgIHJldHVybiBSdC53YWl0Rm9yKHIpLm5leHQoKCgpID0+IGEpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFwcHJveGltYXRlIHNpemUgZm9yIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAqLyBmdW5jdGlvbiBybyh0KSB7XG4gICAgaWYgKCF0KSByZXR1cm4gMDtcbiAgICBsZXQgZTtcbiAgICBpZiAodC5kb2N1bWVudCkgZSA9IHQuZG9jdW1lbnQ7IGVsc2UgaWYgKHQudW5rbm93bkRvY3VtZW50KSBlID0gdC51bmtub3duRG9jdW1lbnQ7IGVsc2Uge1xuICAgICAgICBpZiAoIXQubm9Eb2N1bWVudCkgdGhyb3cgTygpO1xuICAgICAgICBlID0gdC5ub0RvY3VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkubGVuZ3RoO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIEEgbXV0YXRpb24gcXVldWUgZm9yIGEgc3BlY2lmaWMgdXNlciwgYmFja2VkIGJ5IEluZGV4ZWREQi4gKi8gc28uREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUgPSAxMCwgXG5zby5ERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QgPSAxZTMsIHNvLkRFRkFVTFQgPSBuZXcgc28oNDE5NDMwNDAsIHNvLkRFRkFVTFRfQ09MTEVDVElPTl9QRVJDRU5USUxFLCBzby5ERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QpLCBcbnNvLkRJU0FCTEVEID0gbmV3IHNvKC0xLCAwLCAwKTtcblxuY2xhc3Mgb28ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXJJZCAoZS5nLiBudWxsIFVJRCA9PiBcIlwiIHVzZXJJZCkgdXNlZCB0byBzdG9yZSAvXG4gICAgICogcmV0cmlldmUgbXV0YXRpb25zLlxuICAgICAqL1xuICAgIHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy51c2VySWQgPSB0LCB0aGlzLnNlcmlhbGl6ZXIgPSBlLCB0aGlzLmluZGV4TWFuYWdlciA9IG4sIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBzLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlcyB0aGUgZG9jdW1lbnQga2V5cyBmb3IgcGVuZGluZyBtdXRhdGlvbiBiYXRjaGVzLiBJZiB0aGUgbXV0YXRpb25cbiAgICAgICAgICogaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIEluZGV4ZWREYiwgdGhlIGNhY2hlZCB2YWx1ZSBtYXkgY29udGludWUgdG9cbiAgICAgICAgICogYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgYmF0Y2gncyBkb2N1bWVudCBrZXlzLiBUbyByZW1vdmUgYSBjYWNoZWQgdmFsdWVcbiAgICAgICAgICogbG9jYWxseSwgYHJlbW92ZUNhY2hlZE11dGF0aW9uS2V5cygpYCBzaG91bGQgYmUgaW52b2tlZCBlaXRoZXIgZGlyZWN0bHlcbiAgICAgICAgICogb3IgdGhyb3VnaCBgcmVtb3ZlTXV0YXRpb25CYXRjaGVzKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaXRoIG11bHRpLXRhYiwgd2hlbiB0aGUgcHJpbWFyeSBjbGllbnQgYWNrbm93bGVkZ2VzIG9yIHJlamVjdHMgYSBtdXRhdGlvbixcbiAgICAgICAgICogdGhpcyBjYWNoZSBpcyB1c2VkIGJ5IHNlY29uZGFyeSBjbGllbnRzIHRvIGludmFsaWRhdGUgdGhlIGxvY2FsXG4gICAgICAgICAqIHZpZXcgb2YgdGhlIGRvY3VtZW50cyB0aGF0IHdlcmUgcHJldmlvdXNseSBhZmZlY3RlZCBieSB0aGUgbXV0YXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgICAgICB0aGlzLlZuID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyLlxuICAgICAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhIG11dGF0aW9uIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemVyIC0gVGhlIHNlcmlhbGl6ZXIgdG8gdXNlIHdoZW4gcGVyc2lzdGluZyB0byBJbmRleGVkRGIuXG4gICAgICovICAgIHN0YXRpYyBkZSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIC8vIFRPRE8obWNnKTogRmlndXJlIG91dCB3aGF0IGNvbnN0cmFpbnRzIHRoZXJlIGFyZSBvbiB1c2VySURzXG4gICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIGFyZSB0aGVyZSBhbnkgcmVzZXJ2ZWQgY2hhcmFjdGVycz8gYXJlIGVtcHR5IGlkcyBhbGxvd2VkP1xuICAgICAgICAvLyBGb3IgdGhlIG1vbWVudCBzdG9yZSB0aGVzZSB0b2dldGhlciBpbiB0aGUgc2FtZSBtdXRhdGlvbnMgdGFibGUgYXNzdW1pbmdcbiAgICAgICAgLy8gdGhhdCBlbXB0eSB1c2VySURzIGFyZW4ndCBhbGxvd2VkLlxuICAgICAgICBGKFwiXCIgIT09IHQudWlkKTtcbiAgICAgICAgY29uc3QgaSA9IHQuaXNBdXRoZW50aWNhdGVkKCkgPyB0LnVpZCA6IFwiXCI7XG4gICAgICAgIHJldHVybiBuZXcgb28oaSwgZSwgbiwgcyk7XG4gICAgfVxuICAgIGNoZWNrRW1wdHkodCkge1xuICAgICAgICBsZXQgZSA9ICEwO1xuICAgICAgICBjb25zdCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIF0sIFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgcmV0dXJuIGNvKHQpLlgoe1xuICAgICAgICAgICAgaW5kZXg6IFwidXNlck11dGF0aW9uc0luZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogblxuICAgICAgICB9LCAoKHQsIG4sIHMpID0+IHtcbiAgICAgICAgICAgIGUgPSAhMSwgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgfVxuICAgIGFkZE11dGF0aW9uQmF0Y2godCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gYW8odCksIHIgPSBjbyh0KTtcbiAgICAgICAgLy8gVGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWUgKGFuZCBGaXJlZm94KSBkb2VzIG5vdCBoYW5kbGVcbiAgICAgICAgLy8gY29tcG91bmQgaW5kaWNlcyB0aGF0IGluY2x1ZGUgYXV0by1nZW5lcmF0ZWQga2V5cyBjb3JyZWN0bHkuIFRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBpbmRleCBlbnRyeSBpcyBhZGRlZCBjb3JyZWN0bHkgaW4gYWxsIGJyb3dzZXJzLCB3ZSBwZXJmb3JtIHR3b1xuICAgICAgICAvLyB3cml0ZXM6IFRoZSBmaXJzdCB3cml0ZSBpcyB1c2VkIHRvIHJldHJpZXZlIHRoZSBuZXh0IGF1dG8tZ2VuZXJhdGVkIEJhdGNoXG4gICAgICAgIC8vIElELCBhbmQgdGhlIHNlY29uZCB3cml0ZSBwb3B1bGF0ZXMgdGhlIGluZGV4IGFuZCBzdG9yZXMgdGhlIGFjdHVhbFxuICAgICAgICAvLyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03MDE5NzJcbiAgICAgICAgLy8gV2Ugd3JpdGUgYW4gZW1wdHkgb2JqZWN0IHRvIG9idGFpbiBrZXlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHIuYWRkKHt9KS5uZXh0KChvID0+IHtcbiAgICAgICAgICAgIEYoXCJudW1iZXJcIiA9PSB0eXBlb2Ygbyk7XG4gICAgICAgICAgICBjb25zdCB1ID0gbmV3IFpzKG8sIGUsIG4sIHMpLCBjID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLmJhc2VNdXRhdGlvbnMubWFwKChlID0+IGppKHQuZmUsIGUpKSksIGkgPSBuLm11dGF0aW9ucy5tYXAoKGUgPT4gamkodC5mZSwgZSkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIGJhdGNoSWQ6IG4uYmF0Y2hJZCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxXcml0ZVRpbWVNczogbi5sb2NhbFdyaXRlVGltZS50b01pbGxpcygpLFxuICAgICAgICAgICAgICAgICAgICBiYXNlTXV0YXRpb25zOiBzLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbnM6IGlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSh0aGlzLnNlcmlhbGl6ZXIsIHRoaXMudXNlcklkLCB1KSwgYSA9IFtdO1xuICAgICAgICAgICAgbGV0IGggPSBuZXcgRWUoKCh0LCBlKSA9PiBldCh0LmNhbm9uaWNhbFN0cmluZygpLCBlLmNhbm9uaWNhbFN0cmluZygpKSkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0genQodGhpcy51c2VySWQsIHQua2V5LnBhdGgsIG8pO1xuICAgICAgICAgICAgICAgIGggPSBoLmFkZCh0LmtleS5wYXRoLnBvcExhc3QoKSksIGEucHVzaChyLnB1dChjKSksIGEucHVzaChpLnB1dChlLCBXdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGguZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgYS5wdXNoKHRoaXMuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KHQsIGUpKTtcbiAgICAgICAgICAgIH0pKSwgdC5hZGRPbkNvbW1pdHRlZExpc3RlbmVyKCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5WbltvXSA9IHUua2V5cygpO1xuICAgICAgICAgICAgfSkpLCBSdC53YWl0Rm9yKGEpLm5leHQoKCgpID0+IHUpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBsb29rdXBNdXRhdGlvbkJhdGNoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGNvKHQpLmdldChlKS5uZXh0KCh0ID0+IHQgPyAoRih0LnVzZXJJZCA9PT0gdGhpcy51c2VySWQpLCBfcih0aGlzLnNlcmlhbGl6ZXIsIHQpKSA6IG51bGwpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG9jdW1lbnQga2V5cyBmb3IgdGhlIG11dGF0aW9uIGJhdGNoIHdpdGggdGhlIGdpdmVuIGJhdGNoSWQuXG4gICAgICogRm9yIHByaW1hcnkgY2xpZW50cywgdGhpcyBtZXRob2QgcmV0dXJucyBgbnVsbGAgYWZ0ZXJcbiAgICAgKiBgcmVtb3ZlTXV0YXRpb25CYXRjaGVzKClgIGhhcyBiZWVuIGNhbGxlZC4gU2Vjb25kYXJ5IGNsaWVudHMgcmV0dXJuIGFcbiAgICAgKiBjYWNoZWQgcmVzdWx0IHVudGlsIGByZW1vdmVDYWNoZWRNdXRhdGlvbktleXMoKWAgaXMgaW52b2tlZC5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgIFNuKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVm5bZV0gPyBSdC5yZXNvbHZlKHRoaXMuVm5bZV0pIDogdGhpcy5sb29rdXBNdXRhdGlvbkJhdGNoKHQsIGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5rZXlzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVm5bZV0gPSBuLCBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0TmV4dE11dGF0aW9uQmF0Y2hBZnRlckJhdGNoSWQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZSArIDEsIHMgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKFsgdGhpcy51c2VySWQsIG4gXSk7XG4gICAgICAgIGxldCBpID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNvKHQpLlgoe1xuICAgICAgICAgICAgaW5kZXg6IFwidXNlck11dGF0aW9uc0luZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogc1xuICAgICAgICB9LCAoKHQsIGUsIHMpID0+IHtcbiAgICAgICAgICAgIGUudXNlcklkID09PSB0aGlzLnVzZXJJZCAmJiAoRihlLmJhdGNoSWQgPj0gbiksIGkgPSBfcih0aGlzLnNlcmlhbGl6ZXIsIGUpKSwgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIGdldEhpZ2hlc3RVbmFja25vd2xlZGdlZEJhdGNoSWQodCkge1xuICAgICAgICBjb25zdCBlID0gSURCS2V5UmFuZ2UudXBwZXJCb3VuZChbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIGxldCBuID0gLTE7XG4gICAgICAgIHJldHVybiBjbyh0KS5YKHtcbiAgICAgICAgICAgIGluZGV4OiBcInVzZXJNdXRhdGlvbnNJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IGUsXG4gICAgICAgICAgICByZXZlcnNlOiAhMFxuICAgICAgICB9LCAoKHQsIGUsIHMpID0+IHtcbiAgICAgICAgICAgIG4gPSBlLmJhdGNoSWQsIHMuZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXModCkge1xuICAgICAgICBjb25zdCBlID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgLTEgXSwgWyB0aGlzLnVzZXJJZCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIF0pO1xuICAgICAgICByZXR1cm4gY28odCkuaihcInVzZXJNdXRhdGlvbnNJbmRleFwiLCBlKS5uZXh0KCh0ID0+IHQubWFwKCh0ID0+IF9yKHRoaXMuc2VyaWFsaXplciwgdCkpKSkpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleSh0LCBlKSB7XG4gICAgICAgIC8vIFNjYW4gdGhlIGRvY3VtZW50LW11dGF0aW9uIGluZGV4IHN0YXJ0aW5nIHdpdGggYSBwcmVmaXggc3RhcnRpbmcgd2l0aFxuICAgICAgICAvLyB0aGUgZ2l2ZW4gZG9jdW1lbnRLZXkuXG4gICAgICAgIGNvbnN0IG4gPSBqdCh0aGlzLnVzZXJJZCwgZS5wYXRoKSwgcyA9IElEQktleVJhbmdlLmxvd2VyQm91bmQobiksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIGFvKHQpLlgoe1xuICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgfSwgKChuLCBzLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbbywgdSwgY10gPSBuLCBhID0gR3QodSk7XG4gICAgICAgICAgICAvLyBPbmx5IGNvbnNpZGVyIHJvd3MgbWF0Y2hpbmcgZXhhY3RseSB0aGUgc3BlY2lmaWMga2V5IG9mXG4gICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAvLyBvcmRlciB0ZXJtaW5hdG9ycyBiZWZvcmUgcGF0aCBzZXBhcmF0b3JzLCB3ZSdsbCBlbmNvdW50ZXIgYWxsXG4gICAgICAgICAgICAvLyB0aGUgaW5kZXggcm93cyBmb3IgZG9jdW1lbnRLZXkgY29udGlndW91c2x5LiBJbiBwYXJ0aWN1bGFyLCBhbGxcbiAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgIC8vIGRvY3VtZW50cyBuZXN0ZWQgaW4gYSBzdWJjb2xsZWN0aW9uIGJlbmVhdGggZG9jdW1lbnRLZXkgc28gd2VcbiAgICAgICAgICAgIC8vIGNhbiBzdG9wIGFzIHNvb24gYXMgd2UgaGl0IGFueSBzdWNoIHJvdy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSB0aGlzLnVzZXJJZCAmJiBlLnBhdGguaXNFcXVhbChhKSkgXG4gICAgICAgICAgICAvLyBMb29rIHVwIHRoZSBtdXRhdGlvbiBiYXRjaCBpbiB0aGUgc3RvcmUuXG4gICAgICAgICAgICByZXR1cm4gY28odCkuZ2V0KGMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdCkgdGhyb3cgTygpO1xuICAgICAgICAgICAgICAgIEYodC51c2VySWQgPT09IHRoaXMudXNlcklkKSwgaS5wdXNoKF9yKHRoaXMuc2VyaWFsaXplciwgdCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgci5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gbmV3IEVlKGV0KTtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBqdCh0aGlzLnVzZXJJZCwgZS5wYXRoKSwgciA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoaSksIG8gPSBhbyh0KS5YKHtcbiAgICAgICAgICAgICAgICByYW5nZTogclxuICAgICAgICAgICAgfSwgKCh0LCBzLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3IsIG8sIHVdID0gdCwgYyA9IEd0KG8pO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID09PSB0aGlzLnVzZXJJZCAmJiBlLnBhdGguaXNFcXVhbChjKSA/IG4gPSBuLmFkZCh1KSA6IGkuZG9uZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcy5wdXNoKG8pO1xuICAgICAgICB9KSksIFJ0LndhaXRGb3IocykubmV4dCgoKCkgPT4gdGhpcy5Ebih0LCBuKSkpO1xuICAgIH1cbiAgICBnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdRdWVyeSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnBhdGgsIHMgPSBuLmxlbmd0aCArIDEsIGkgPSBqdCh0aGlzLnVzZXJJZCwgbiksIHIgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKGkpO1xuICAgICAgICAvLyBDb2xsZWN0IHVwIHVuaXF1ZSBiYXRjaElEcyBlbmNvdW50ZXJlZCBkdXJpbmcgYSBzY2FuIG9mIHRoZSBpbmRleC4gVXNlIGFcbiAgICAgICAgLy8gU29ydGVkU2V0IHRvIGFjY3VtdWxhdGUgYmF0Y2ggSURzIHNvIHRoZXkgY2FuIGJlIHRyYXZlcnNlZCBpbiBvcmRlciBpbiBhXG4gICAgICAgIC8vIHNjYW4gb2YgdGhlIG1haW4gdGFibGUuXG4gICAgICAgIGxldCBvID0gbmV3IEVlKGV0KTtcbiAgICAgICAgcmV0dXJuIGFvKHQpLlgoe1xuICAgICAgICAgICAgcmFuZ2U6IHJcbiAgICAgICAgfSwgKCh0LCBlLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbciwgdSwgY10gPSB0LCBhID0gR3QodSk7XG4gICAgICAgICAgICByID09PSB0aGlzLnVzZXJJZCAmJiBuLmlzUHJlZml4T2YoYSkgPyBcbiAgICAgICAgICAgIC8vIFJvd3Mgd2l0aCBkb2N1bWVudCBrZXlzIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGVcbiAgICAgICAgICAgIC8vIHF1ZXJ5IHBhdGggY2FuJ3QgYmUgbWF0Y2hlcy4gRm9yIGV4YW1wbGUsIGEgcXVlcnkgb24gJ3Jvb21zJ1xuICAgICAgICAgICAgLy8gY2FuJ3QgbWF0Y2ggdGhlIGRvY3VtZW50IC9yb29tcy9hYmMvbWVzc2FnZXMveHl4LlxuICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiB3ZSdsbCBuZWVkIGEgZGlmZmVyZW50IHNjYW5uZXIgd2hlbiB3ZSBpbXBsZW1lbnRcbiAgICAgICAgICAgIC8vIGFuY2VzdG9yIHF1ZXJpZXMuXG4gICAgICAgICAgICBhLmxlbmd0aCA9PT0gcyAmJiAobyA9IG8uYWRkKGMpKSA6IGkuZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gdGhpcy5Ebih0LCBvKSkpO1xuICAgIH1cbiAgICBEbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXSwgcyA9IFtdO1xuICAgICAgICAvLyBUT0RPKHJvY2t3b29kKTogSW1wbGVtZW50IHRoaXMgdXNpbmcgaXRlcmF0ZS5cbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBzLnB1c2goY28odCkuZ2V0KGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0KSB0aHJvdyBPKCk7XG4gICAgICAgICAgICAgICAgRih0LnVzZXJJZCA9PT0gdGhpcy51c2VySWQpLCBuLnB1c2goX3IodGhpcy5zZXJpYWxpemVyLCB0KSk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSksIFJ0LndhaXRGb3IocykubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICByZW1vdmVNdXRhdGlvbkJhdGNoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGlvKHQuaHQsIHRoaXMudXNlcklkLCBlKS5uZXh0KChuID0+ICh0LmFkZE9uQ29tbWl0dGVkTGlzdGVuZXIoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuQ24oZS5iYXRjaElkKTtcbiAgICAgICAgfSkpLCBSdC5mb3JFYWNoKG4sIChlID0+IHRoaXMucmVmZXJlbmNlRGVsZWdhdGUubWFya1BvdGVudGlhbGx5T3JwaGFuZWQodCwgZSkpKSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBjYWNoZWQga2V5cyBmb3IgYSBtdXRhdGlvbiBiYXRjaC4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlXG4gICAgICogY2FsbGVkIGJ5IHNlY29uZGFyeSBjbGllbnRzIGFmdGVyIHRoZXkgcHJvY2VzcyBtdXRhdGlvbiB1cGRhdGVzLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGRvZXMgbm90IGhhdmUgdG8gYmUgY2FsbGVkIGZyb20gcHJpbWFyeSBjbGllbnRzIGFzXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgY2FjaGUgZW50cmllcyBhcmUgY2xlYXJlZCB3aGVuIGFuIGFja25vd2xlZGdlZCBvclxuICAgICAqIHJlamVjdGVkIGJhdGNoIGlzIHJlbW92ZWQgZnJvbSB0aGUgbXV0YXRpb24gcXVldWUuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seVxuICAgIENuKHQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuVm5bdF07XG4gICAgfVxuICAgIHBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tFbXB0eSh0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGlmICghZSkgcmV0dXJuIFJ0LnJlc29sdmUoKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZXJlIGFyZSBubyBlbnRyaWVzIGluIHRoZSBkb2N1bWVudE11dGF0aW9ucyBpbmRleCBpZlxuICAgICAgICAgICAgLy8gdGhlIHF1ZXVlIGlzIGVtcHR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyB0aGlzLnVzZXJJZCBdKTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBhbyh0KS5YKHtcbiAgICAgICAgICAgICAgICByYW5nZTogblxuICAgICAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRbMF0gPT09IHRoaXMudXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBHdCh0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgcy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBuLmRvbmUoKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgRigwID09PSBzLmxlbmd0aCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkodCwgZSkge1xuICAgICAgICByZXR1cm4gdW8odCwgdGhpcy51c2VySWQsIGUpO1xuICAgIH1cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5IChzdGF0ZSBpcyBoZWxkIGluIG1lbW9yeSBpbiBvdGhlciBjbGllbnRzKS5cbiAgICAvKiogUmV0dXJucyB0aGUgbXV0YXRpb24gcXVldWUncyBtZXRhZGF0YSBmcm9tIEluZGV4ZWREYi4gKi9cbiAgICB4bih0KSB7XG4gICAgICAgIHJldHVybiBobyh0KS5nZXQodGhpcy51c2VySWQpLm5leHQoKHQgPT4gdCB8fCB7XG4gICAgICAgICAgICB1c2VySWQ6IHRoaXMudXNlcklkLFxuICAgICAgICAgICAgbGFzdEFja25vd2xlZGdlZEJhdGNoSWQ6IC0xLFxuICAgICAgICAgICAgbGFzdFN0cmVhbVRva2VuOiBcIlwiXG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyIGNvbnRhaW5zIGEgcGVuZGluZ1xuICogICAgICAgICBtdXRhdGlvbiBmb3IgdGhlIGdpdmVuIGtleS5cbiAqLyBmdW5jdGlvbiB1byh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IGp0KGUsIG4ucGF0aCksIGkgPSBzWzFdLCByID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChzKTtcbiAgICBsZXQgbyA9ICExO1xuICAgIHJldHVybiBhbyh0KS5YKHtcbiAgICAgICAgcmFuZ2U6IHIsXG4gICAgICAgIFk6ICEwXG4gICAgfSwgKCh0LCBuLCBzKSA9PiB7XG4gICAgICAgIGNvbnN0IFtyLCB1LCAvKmJhdGNoSUQqLyBjXSA9IHQ7XG4gICAgICAgIHIgPT09IGUgJiYgdSA9PT0gaSAmJiAobyA9ICEwKSwgcy5kb25lKCk7XG4gICAgfSkpLm5leHQoKCgpID0+IG8pKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbXV0YXRpb24gcXVldWUgY29udGFpbnMgdGhlIGdpdmVuIGRvY3VtZW50LiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9ucyBvYmplY3Qgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIGNvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJtdXRhdGlvbnNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBtdXRhdGlvblF1ZXVlcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gYW8odCkge1xuICAgIHJldHVybiBfZSh0LCBcImRvY3VtZW50TXV0YXRpb25zXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25RdWV1ZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIGhvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJtdXRhdGlvblF1ZXVlc1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBPZmZzZXQgdG8gZW5zdXJlIG5vbi1vdmVybGFwcGluZyB0YXJnZXQgaWRzLiAqL1xuLyoqXG4gKiBHZW5lcmF0ZXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIHRhcmdldCBJRHMgZm9yIHNlbmRpbmcgdGFyZ2V0cyB0byB0aGVcbiAqIHdhdGNoIHN0cmVhbS5cbiAqXG4gKiBUaGUgY2xpZW50IGNvbnN0cnVjdHMgdHdvIGdlbmVyYXRvcnMsIG9uZSBmb3IgdGhlIHRhcmdldCBjYWNoZSwgYW5kIG9uZSBmb3JcbiAqIGZvciB0aGUgc3luYyBlbmdpbmUgKHRvIGdlbmVyYXRlIGxpbWJvIGRvY3VtZW50cyB0YXJnZXRzKS4gVGhlc2VcbiAqIGdlbmVyYXRvcnMgcHJvZHVjZSBub24tb3ZlcmxhcHBpbmcgSURzIChieSB1c2luZyBldmVuIGFuZCBvZGQgSURzXG4gKiByZXNwZWN0aXZlbHkpLlxuICpcbiAqIEJ5IHNlcGFyYXRpbmcgdGhlIHRhcmdldCBJRCBzcGFjZSwgdGhlIHF1ZXJ5IGNhY2hlIGNhbiBnZW5lcmF0ZSB0YXJnZXQgSURzXG4gKiB0aGF0IHBlcnNpc3QgYWNyb3NzIGNsaWVudCByZXN0YXJ0cywgd2hpbGUgc3luYyBlbmdpbmUgY2FuIGluZGVwZW5kZW50bHlcbiAqIGdlbmVyYXRlIGluLW1lbW9yeSB0YXJnZXQgSURzIHRoYXQgYXJlIHRyYW5zaWVudCBhbmQgY2FuIGJlIHJldXNlZCBhZnRlciBhXG4gKiByZXN0YXJ0LlxuICovXG5jbGFzcyBsbyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLk5uID0gdDtcbiAgICB9XG4gICAgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTm4gKz0gMiwgdGhpcy5ObjtcbiAgICB9XG4gICAgc3RhdGljIGtuKCkge1xuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNhY2hlIGdlbmVyYXRvciBtdXN0IHJldHVybiAnMicgaW4gaXRzIGZpcnN0IGNhbGwgdG8gYG5leHQoKWBcbiAgICAgICAgLy8gYXMgdGhlcmUgaXMgbm8gZGlmZmVyZW50aWF0aW9uIGluIHRoZSBwcm90b2NvbCBsYXllciBiZXR3ZWVuIGFuIHVuc2V0XG4gICAgICAgIC8vIG51bWJlciBhbmQgdGhlIG51bWJlciAnMCcuIElmIHdlIHdlcmUgdG8gc2VudCBhIHRhcmdldCB3aXRoIHRhcmdldCBJRFxuICAgICAgICAvLyAnMCcsIHRoZSBiYWNrZW5kIHdvdWxkIGNvbnNpZGVyIGl0IHVuc2V0IGFuZCByZXBsYWNlIGl0IHdpdGggaXRzIG93biBJRC5cbiAgICAgICAgcmV0dXJuIG5ldyBsbygwKTtcbiAgICB9XG4gICAgc3RhdGljIE1uKCkge1xuICAgICAgICAvLyBTeW5jIGVuZ2luZSBhc3NpZ25zIHRhcmdldCBJRHMgZm9yIGxpbWJvIGRvY3VtZW50IGRldGVjdGlvbi5cbiAgICAgICAgcmV0dXJuIG5ldyBsbygtMSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBmbyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gdCwgdGhpcy5zZXJpYWxpemVyID0gZTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBXZSBkb24ndCBjYWNoZSBnbG9iYWwgbWV0YWRhdGEgZm9yIHRoZSB0YXJnZXQgY2FjaGUsIHNpbmNlXG4gICAgLy8gc29tZSBvZiBpdCAoaW4gcGFydGljdWxhciBgaGlnaGVzdFRhcmdldElkYCkgY2FuIGJlIG1vZGlmaWVkIGJ5IHNlY29uZGFyeVxuICAgIC8vIHRhYnMuIFdlIGNvdWxkIHBlcmhhcHMgYmUgbW9yZSBncmFudWxhciAoYW5kIGUuZy4gc3RpbGwgY2FjaGVcbiAgICAvLyBgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbmAgaW4gbWVtb3J5KSBidXQgZm9yIHNpbXBsaWNpdHkgd2UgY3VycmVudGx5IGdvXG4gICAgLy8gdG8gSW5kZXhlZERiIHdoZW5ldmVyIHdlIG5lZWQgdG8gcmVhZCBtZXRhZGF0YS4gV2UgY2FuIHJldmlzaXQgaWYgaXQgdHVybnNcbiAgICAvLyBvdXQgdG8gaGF2ZSBhIG1lYW5pbmdmdWwgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICAgIGFsbG9jYXRlVGFyZ2V0SWQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kbih0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgbG8oZS5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIGUuaGlnaGVzdFRhcmdldElkID0gbi5uZXh0KCksIHRoaXMuT24odCwgZSkubmV4dCgoKCkgPT4gZS5oaWdoZXN0VGFyZ2V0SWQpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG4odCkubmV4dCgodCA9PiBydC5mcm9tVGltZXN0YW1wKG5ldyBpdCh0Lmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24uc2Vjb25kcywgdC5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uLm5hbm9zZWNvbmRzKSkpKTtcbiAgICB9XG4gICAgZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG4odCkubmV4dCgodCA9PiB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcikpO1xuICAgIH1cbiAgICBzZXRUYXJnZXRzTWV0YWRhdGEodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy4kbih0KS5uZXh0KChzID0+IChzLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUsIG4gJiYgKHMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IG4udG9UaW1lc3RhbXAoKSksIFxuICAgICAgICBlID4gcy5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgJiYgKHMuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gZSksIHRoaXMuT24odCwgcykpKSk7XG4gICAgfVxuICAgIGFkZFRhcmdldERhdGEodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5Gbih0LCBlKS5uZXh0KCgoKSA9PiB0aGlzLiRuKHQpLm5leHQoKG4gPT4gKG4udGFyZ2V0Q291bnQgKz0gMSwgdGhpcy5CbihlLCBuKSwgXG4gICAgICAgIHRoaXMuT24odCwgbikpKSkpKTtcbiAgICB9XG4gICAgdXBkYXRlVGFyZ2V0RGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkZuKHQsIGUpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgZS50YXJnZXRJZCkubmV4dCgoKCkgPT4gd28odCkuZGVsZXRlKGUudGFyZ2V0SWQpKSkubmV4dCgoKCkgPT4gdGhpcy4kbih0KSkpLm5leHQoKGUgPT4gKEYoZS50YXJnZXRDb3VudCA+IDApLCBcbiAgICAgICAgZS50YXJnZXRDb3VudCAtPSAxLCB0aGlzLk9uKHQsIGUpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEcm9wcyBhbnkgdGFyZ2V0cyB3aXRoIHNlcXVlbmNlIG51bWJlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHVwcGVyIGJvdW5kLCBleGNlcHRpbmcgdGhvc2VcbiAgICAgKiBwcmVzZW50IGluIGBhY3RpdmVUYXJnZXRJZHNgLiBEb2N1bWVudCBhc3NvY2lhdGlvbnMgZm9yIHRoZSByZW1vdmVkIHRhcmdldHMgYXJlIGFsc28gcmVtb3ZlZC5cbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdGFyZ2V0cyByZW1vdmVkLlxuICAgICAqLyAgICByZW1vdmVUYXJnZXRzKHQsIGUsIG4pIHtcbiAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICBjb25zdCBpID0gW107XG4gICAgICAgIHJldHVybiB3byh0KS5YKCgociwgbykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdSA9IG1yKG8pO1xuICAgICAgICAgICAgdS5zZXF1ZW5jZU51bWJlciA8PSBlICYmIG51bGwgPT09IG4uZ2V0KHUudGFyZ2V0SWQpICYmIChzKyssIGkucHVzaCh0aGlzLnJlbW92ZVRhcmdldERhdGEodCwgdSkpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IFJ0LndhaXRGb3IoaSkpKS5uZXh0KCgoKSA9PiBzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgcHJvdmlkZWQgZnVuY3Rpb24gd2l0aCBlYWNoIGBUYXJnZXREYXRhYCB0aGF0IHdlIGhhdmUgY2FjaGVkLlxuICAgICAqLyAgICBmb3JFYWNoVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHdvKHQpLlgoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gbXIobik7XG4gICAgICAgICAgICBlKHMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgICRuKHQpIHtcbiAgICAgICAgcmV0dXJuIF9vKHQpLmdldChcInRhcmdldEdsb2JhbEtleVwiKS5uZXh0KCh0ID0+IChGKG51bGwgIT09IHQpLCB0KSkpO1xuICAgIH1cbiAgICBPbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBfbyh0KS5wdXQoXCJ0YXJnZXRHbG9iYWxLZXlcIiwgZSk7XG4gICAgfVxuICAgIEZuKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHdvKHQpLnB1dChncih0aGlzLnNlcmlhbGl6ZXIsIGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW4tcGxhY2UgdXBkYXRlcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEgdG8gYWNjb3VudCBmb3IgdmFsdWVzIGluIHRoZSBnaXZlblxuICAgICAqIFRhcmdldERhdGEuIFNhdmluZyBpcyBkb25lIHNlcGFyYXRlbHkuIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSB3ZXJlIGFueVxuICAgICAqIGNoYW5nZXMgdG8gdGhlIG1ldGFkYXRhLlxuICAgICAqLyAgICBCbih0LCBlKSB7XG4gICAgICAgIGxldCBuID0gITE7XG4gICAgICAgIHJldHVybiB0LnRhcmdldElkID4gZS5oaWdoZXN0VGFyZ2V0SWQgJiYgKGUuaGlnaGVzdFRhcmdldElkID0gdC50YXJnZXRJZCwgbiA9ICEwKSwgXG4gICAgICAgIHQuc2VxdWVuY2VOdW1iZXIgPiBlLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciAmJiAoZS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSB0LnNlcXVlbmNlTnVtYmVyLCBcbiAgICAgICAgbiA9ICEwKSwgbjtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0Q291bnQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kbih0KS5uZXh0KCh0ID0+IHQudGFyZ2V0Q291bnQpKTtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0RGF0YSh0LCBlKSB7XG4gICAgICAgIC8vIEl0ZXJhdGluZyBieSB0aGUgY2Fub25pY2FsSWQgbWF5IHlpZWxkIG1vcmUgdGhhbiBvbmUgcmVzdWx0IGJlY2F1c2VcbiAgICAgICAgLy8gY2Fub25pY2FsSWQgdmFsdWVzIGFyZSBub3QgcmVxdWlyZWQgdG8gYmUgdW5pcXVlIHBlciB0YXJnZXQuIFRoaXMgcXVlcnlcbiAgICAgICAgLy8gZGVwZW5kcyBvbiB0aGUgcXVlcnlUYXJnZXRzIGluZGV4IHRvIGJlIGVmZmljaWVudC5cbiAgICAgICAgY29uc3QgbiA9ICRuKGUpLCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyBuLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgXSwgWyBuLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIGxldCBpID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHdvKHQpLlgoe1xuICAgICAgICAgICAgcmFuZ2U6IHMsXG4gICAgICAgICAgICBpbmRleDogXCJxdWVyeVRhcmdldHNJbmRleFwiXG4gICAgICAgIH0sICgodCwgbiwgcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IG1yKG4pO1xuICAgICAgICAgICAgLy8gQWZ0ZXIgZmluZGluZyBhIHBvdGVudGlhbCBtYXRjaCwgY2hlY2sgdGhhdCB0aGUgdGFyZ2V0IGlzXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBlcXVhbCB0byB0aGUgcmVxdWVzdGVkIHRhcmdldC5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9uKGUsIHIudGFyZ2V0KSAmJiAoaSA9IHIsIHMuZG9uZSgpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgYWRkTWF0Y2hpbmdLZXlzKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxuICAgICAgICAvLyBJbmRleGVkRGIuXG4gICAgICAgIGNvbnN0IHMgPSBbXSwgaSA9IG1vKHQpO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBxdChlLnBhdGgpO1xuICAgICAgICAgICAgcy5wdXNoKGkucHV0KHtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZDogbixcbiAgICAgICAgICAgICAgICBwYXRoOiByXG4gICAgICAgICAgICB9KSksIHMucHVzaCh0aGlzLnJlZmVyZW5jZURlbGVnYXRlLmFkZFJlZmVyZW5jZSh0LCBuLCBlKSk7XG4gICAgICAgIH0pKSwgUnQud2FpdEZvcihzKTtcbiAgICB9XG4gICAgcmVtb3ZlTWF0Y2hpbmdLZXlzKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxuICAgICAgICAvLyBJbmRleGVkRGIuXG4gICAgICAgIGNvbnN0IHMgPSBtbyh0KTtcbiAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2goZSwgKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IHF0KGUucGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gUnQud2FpdEZvcihbIHMuZGVsZXRlKFsgbiwgaSBdKSwgdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZS5yZW1vdmVSZWZlcmVuY2UodCwgbiwgZSkgXSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbW8odCksIHMgPSBJREJLZXlSYW5nZS5ib3VuZChbIGUgXSwgWyBlICsgMSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCk7XG4gICAgICAgIHJldHVybiBuLmRlbGV0ZShzKTtcbiAgICB9XG4gICAgZ2V0TWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlIF0sIFsgZSArIDEgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApLCBzID0gbW8odCk7XG4gICAgICAgIGxldCBpID0gZ3MoKTtcbiAgICAgICAgcmV0dXJuIHMuWCh7XG4gICAgICAgICAgICByYW5nZTogbixcbiAgICAgICAgICAgIFk6ICEwXG4gICAgICAgIH0sICgodCwgZSwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IEd0KHRbMV0pLCByID0gbmV3IGh0KHMpO1xuICAgICAgICAgICAgaSA9IGkuYWRkKHIpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICBjb250YWluc0tleSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBxdChlLnBhdGgpLCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyBuIF0sIFsgc3QobikgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHJldHVybiBtbyh0KS5YKHtcbiAgICAgICAgICAgIGluZGV4OiBcImRvY3VtZW50VGFyZ2V0c0luZGV4XCIsXG4gICAgICAgICAgICBZOiAhMCxcbiAgICAgICAgICAgIHJhbmdlOiBzXG4gICAgICAgIH0sICgoW3QsIGVdLCBuLCBzKSA9PiB7XG4gICAgICAgICAgICAvLyBIYXZpbmcgYSBzZW50aW5lbCByb3cgZm9yIGEgZG9jdW1lbnQgZG9lcyBub3QgY291bnQgYXMgY29udGFpbmluZyB0aGF0IGRvY3VtZW50O1xuICAgICAgICAgICAgLy8gRm9yIHRoZSB0YXJnZXQgY2FjaGUsIGNvbnRhaW5pbmcgdGhlIGRvY3VtZW50IG1lYW5zIHRoZSBkb2N1bWVudCBpcyBwYXJ0IG9mIHNvbWVcbiAgICAgICAgICAgIC8vIHRhcmdldC5cbiAgICAgICAgICAgIDAgIT09IHQgJiYgKGkrKywgcy5kb25lKCkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSA+IDApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgYSBUYXJnZXREYXRhIGVudHJ5IGJ5IHRhcmdldCBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXRJZCAtIFRoZSB0YXJnZXQgSUQgb2YgdGhlIFRhcmdldERhdGEgZW50cnkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2FjaGVkIFRhcmdldERhdGEgZW50cnksIG9yIG51bGwgaWYgdGhlIGNhY2hlIGhhcyBubyBlbnRyeSBmb3JcbiAgICAgKiB0aGUgdGFyZ2V0LlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgbGUodCwgZSkge1xuICAgICAgICByZXR1cm4gd28odCkuZ2V0KGUpLm5leHQoKHQgPT4gdCA/IG1yKHQpIDogbnVsbCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHF1ZXJpZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHdvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJ0YXJnZXRzXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgdGFyZ2V0IGdsb2JhbHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9vKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJ0YXJnZXRHbG9iYWxcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBkb2N1bWVudCB0YXJnZXQgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIG1vKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJ0YXJnZXREb2N1bWVudHNcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIGdvKFt0LCBlXSwgW24sIHNdKSB7XG4gICAgY29uc3QgaSA9IGV0KHQsIG4pO1xuICAgIHJldHVybiAwID09PSBpID8gZXQoZSwgcykgOiBpO1xufVxuXG4vKipcbiAqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBudGggc2VxdWVuY2UgbnVtYmVyLiBLZWVwcyBhIHJvbGxpbmcgYnVmZmVyIG9mIHRoZVxuICogbG93ZXN0IG4gdmFsdWVzIHBhc3NlZCB0byBgYWRkRWxlbWVudGAsIGFuZCBmaW5hbGx5IHJlcG9ydHMgdGhlIGxhcmdlc3Qgb2ZcbiAqIHRoZW0gaW4gYG1heFZhbHVlYC5cbiAqLyBjbGFzcyB5byB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLkxuID0gdCwgdGhpcy5idWZmZXIgPSBuZXcgRWUoZ28pLCB0aGlzLnFuID0gMDtcbiAgICB9XG4gICAgVW4oKSB7XG4gICAgICAgIHJldHVybiArK3RoaXMucW47XG4gICAgfVxuICAgIEtuKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFsgdCwgdGhpcy5VbigpIF07XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5zaXplIDwgdGhpcy5MbikgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5hZGQoZSk7IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuYnVmZmVyLmxhc3QoKTtcbiAgICAgICAgICAgIGdvKGUsIHQpIDwgMCAmJiAodGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5kZWxldGUodCkuYWRkKGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIC8vIEd1YXJhbnRlZWQgdG8gYmUgbm9uLWVtcHR5LiBJZiB3ZSBkZWNpZGUgd2UgYXJlIG5vdCBjb2xsZWN0aW5nIGFueVxuICAgICAgICAvLyBzZXF1ZW5jZSBudW1iZXJzLCBudGhTZXF1ZW5jZU51bWJlciBiZWxvdyBzaG9ydC1jaXJjdWl0cy4gSWYgd2UgaGF2ZVxuICAgICAgICAvLyBkZWNpZGVkIHRoYXQgd2UgYXJlIGNvbGxlY3RpbmcgbiBzZXF1ZW5jZSBudW1iZXJzLCBpdCdzIGJlY2F1c2UgbiBpcyBzb21lXG4gICAgICAgIC8vIHBlcmNlbnRhZ2Ugb2YgdGhlIGV4aXN0aW5nIHNlcXVlbmNlIG51bWJlcnMuIFRoYXQgbWVhbnMgd2Ugc2hvdWxkIG5ldmVyXG4gICAgICAgIC8vIGJlIGluIGEgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSBjb2xsZWN0aW5nIHNlcXVlbmNlIG51bWJlcnMgYnV0IGRvbid0XG4gICAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYW55LlxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGFzdCgpWzBdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2NoZWR1bGluZyBvZiBMUlUgZ2FyYmFnZSBjb2xsZWN0aW9uLiBJdCBoYW5kbGVzIGNoZWNraW5nXG4gKiB3aGV0aGVyIG9yIG5vdCBHQyBpcyBlbmFibGVkLCBhcyB3ZWxsIGFzIHdoaWNoIGRlbGF5IHRvIHVzZSBiZWZvcmUgdGhlIG5leHQgcnVuLlxuICovIGNsYXNzIHBvIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IHQsIHRoaXMuYXN5bmNRdWV1ZSA9IGUsIHRoaXMubG9jYWxTdG9yZSA9IG4sIHRoaXMuR24gPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgLTEgIT09IHRoaXMuZ2FyYmFnZUNvbGxlY3Rvci5wYXJhbXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCAmJiB0aGlzLlFuKDZlNCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuR24gJiYgKHRoaXMuR24uY2FuY2VsKCksIHRoaXMuR24gPSBudWxsKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLkduO1xuICAgIH1cbiAgICBRbih0KSB7XG4gICAgICAgIE4oXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIGBHYXJiYWdlIGNvbGxlY3Rpb24gc2NoZWR1bGVkIGluICR7dH1tc2ApLCB0aGlzLkduID0gdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBZnRlckRlbGF5KFwibHJ1X2dhcmJhZ2VfY29sbGVjdGlvblwiIC8qIFRpbWVySWQuTHJ1R2FyYmFnZUNvbGxlY3Rpb24gKi8gLCB0LCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5HbiA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9jYWxTdG9yZS5jb2xsZWN0R2FyYmFnZSh0aGlzLmdhcmJhZ2VDb2xsZWN0b3IpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIER0KHQpID8gTihcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgXCJJZ25vcmluZyBJbmRleGVkREIgZXJyb3IgZHVyaW5nIGdhcmJhZ2UgY29sbGVjdGlvbjogXCIsIHQpIDogYXdhaXQgdnQodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLlFuKDNlNSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgc3RlcHMgZm9yIExSVSBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gKi8gY2xhc3MgSW8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5qbiA9IHQsIHRoaXMucGFyYW1zID0gZTtcbiAgICB9XG4gICAgY2FsY3VsYXRlVGFyZ2V0Q291bnQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5qbi56bih0KS5uZXh0KCh0ID0+IE1hdGguZmxvb3IoZSAvIDEwMCAqIHQpKSk7XG4gICAgfVxuICAgIG50aFNlcXVlbmNlTnVtYmVyKHQsIGUpIHtcbiAgICAgICAgaWYgKDAgPT09IGUpIHJldHVybiBSdC5yZXNvbHZlKE90LmN0KTtcbiAgICAgICAgY29uc3QgbiA9IG5ldyB5byhlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuam4uZm9yRWFjaFRhcmdldCh0LCAodCA9PiBuLktuKHQuc2VxdWVuY2VOdW1iZXIpKSkubmV4dCgoKCkgPT4gdGhpcy5qbi5Xbih0LCAodCA9PiBuLktuKHQpKSkpKS5uZXh0KCgoKSA9PiBuLm1heFZhbHVlKSk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldHModCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5qbi5yZW1vdmVUYXJnZXRzKHQsIGUsIG4pO1xuICAgIH1cbiAgICByZW1vdmVPcnBoYW5lZERvY3VtZW50cyh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpuLnJlbW92ZU9ycGhhbmVkRG9jdW1lbnRzKHQsIGUpO1xuICAgIH1cbiAgICBjb2xsZWN0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIC0xID09PSB0aGlzLnBhcmFtcy5jYWNoZVNpemVDb2xsZWN0aW9uVGhyZXNob2xkID8gKE4oXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IGRpc2FibGVkXCIpLCBcbiAgICAgICAgUnQucmVzb2x2ZShubykpIDogdGhpcy5nZXRDYWNoZVNpemUodCkubmV4dCgobiA9PiBuIDwgdGhpcy5wYXJhbXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCA/IChOKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IENhY2hlIHNpemUgJHtufSBpcyBsb3dlciB0aGFuIHRocmVzaG9sZCAke3RoaXMucGFyYW1zLmNhY2hlU2l6ZUNvbGxlY3Rpb25UaHJlc2hvbGR9YCksIFxuICAgICAgICBubykgOiB0aGlzLkhuKHQsIGUpKSk7XG4gICAgfVxuICAgIGdldENhY2hlU2l6ZSh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpuLmdldENhY2hlU2l6ZSh0KTtcbiAgICB9XG4gICAgSG4odCwgZSkge1xuICAgICAgICBsZXQgbiwgcywgaSwgciwgbywgYywgYTtcbiAgICAgICAgY29uc3QgaCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVRhcmdldENvdW50KHQsIHRoaXMucGFyYW1zLnBlcmNlbnRpbGVUb0NvbGxlY3QpLm5leHQoKGUgPT4gKFxuICAgICAgICAvLyBDYXAgYXQgdGhlIGNvbmZpZ3VyZWQgbWF4XG4gICAgICAgIGUgPiB0aGlzLnBhcmFtcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0ID8gKE4oXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIGBDYXBwaW5nIHNlcXVlbmNlIG51bWJlcnMgdG8gY29sbGVjdCBkb3duIHRvIHRoZSBtYXhpbXVtIG9mICR7dGhpcy5wYXJhbXMubWF4aW11bVNlcXVlbmNlTnVtYmVyc1RvQ29sbGVjdH0gZnJvbSAke2V9YCksIFxuICAgICAgICBzID0gdGhpcy5wYXJhbXMubWF4aW11bVNlcXVlbmNlTnVtYmVyc1RvQ29sbGVjdCkgOiBzID0gZSwgciA9IERhdGUubm93KCksIHRoaXMubnRoU2VxdWVuY2VOdW1iZXIodCwgcykpKSkubmV4dCgocyA9PiAobiA9IHMsIFxuICAgICAgICBvID0gRGF0ZS5ub3coKSwgdGhpcy5yZW1vdmVUYXJnZXRzKHQsIG4sIGUpKSkpLm5leHQoKGUgPT4gKGkgPSBlLCBjID0gRGF0ZS5ub3coKSwgXG4gICAgICAgIHRoaXMucmVtb3ZlT3JwaGFuZWREb2N1bWVudHModCwgbikpKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBpZiAoYSA9IERhdGUubm93KCksIEMoKSA8PSBMb2dMZXZlbC5ERUJVRykge1xuICAgICAgICAgICAgICAgIE4oXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIGBMUlUgR2FyYmFnZSBDb2xsZWN0aW9uXFxuXFx0Q291bnRlZCB0YXJnZXRzIGluICR7ciAtIGh9bXNcXG5cXHREZXRlcm1pbmVkIGxlYXN0IHJlY2VudGx5IHVzZWQgJHtzfSBpbiBgICsgKG8gLSByKSArIFwibXNcXG5cIiArIGBcXHRSZW1vdmVkICR7aX0gdGFyZ2V0cyBpbiBgICsgKGMgLSBvKSArIFwibXNcXG5cIiArIGBcXHRSZW1vdmVkICR7dH0gZG9jdW1lbnRzIGluIGAgKyAoYSAtIGMpICsgXCJtc1xcblwiICsgYFRvdGFsIER1cmF0aW9uOiAke2EgLSBofW1zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgZGlkUnVuOiAhMCxcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZU51bWJlcnNDb2xsZWN0ZWQ6IHMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0c1JlbW92ZWQ6IGksXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRzUmVtb3ZlZDogdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFRvKHQsIGUpIHtcbiAgICByZXR1cm4gbmV3IElvKHQsIGUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFByb3ZpZGVzIExSVSBmdW5jdGlvbmFsaXR5IGZvciBJbmRleGVkREIgcGVyc2lzdGVuY2UuICovIGNsYXNzIEVvIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuZGIgPSB0LCB0aGlzLmdhcmJhZ2VDb2xsZWN0b3IgPSBUbyh0aGlzLCBlKTtcbiAgICB9XG4gICAgem4odCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5Kbih0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0VGFyZ2V0Q2FjaGUoKS5nZXRUYXJnZXRDb3VudCh0KS5uZXh0KCh0ID0+IGUubmV4dCgoZSA9PiB0ICsgZSkpKSk7XG4gICAgfVxuICAgIEpuKHQpIHtcbiAgICAgICAgbGV0IGUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5Xbih0LCAodCA9PiB7XG4gICAgICAgICAgICBlKys7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlKSk7XG4gICAgfVxuICAgIGZvckVhY2hUYXJnZXQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRUYXJnZXRDYWNoZSgpLmZvckVhY2hUYXJnZXQodCwgZSk7XG4gICAgfVxuICAgIFduKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWW4odCwgKCh0LCBuKSA9PiBlKG4pKSk7XG4gICAgfVxuICAgIGFkZFJlZmVyZW5jZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBBbyh0LCBuKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIEFvKHQsIG4pO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0VGFyZ2V0Q2FjaGUoKS5yZW1vdmVUYXJnZXRzKHQsIGUsIG4pO1xuICAgIH1cbiAgICBtYXJrUG90ZW50aWFsbHlPcnBoYW5lZCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBBbyh0LCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGFueXRoaW5nIHdvdWxkIHByZXZlbnQgdGhpcyBkb2N1bWVudCBmcm9tIGJlaW5nIGdhcmJhZ2VcbiAgICAgKiBjb2xsZWN0ZWQsIGdpdmVuIHRoYXQgdGhlIGRvY3VtZW50IGluIHF1ZXN0aW9uIGlzIG5vdCBwcmVzZW50IGluIGFueVxuICAgICAqIHRhcmdldHMgYW5kIGhhcyBhIHNlcXVlbmNlIG51bWJlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHVwcGVyIGJvdW5kIGZvclxuICAgICAqIHRoZSBjb2xsZWN0aW9uIHJ1bi5cbiAgICAgKi8gICAgWG4odCwgZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgbGV0IG4gPSAhMTtcbiAgICAgICAgICAgIHJldHVybiBobyh0KS5aKChzID0+IHVvKHQsIHMsIGUpLm5leHQoKHQgPT4gKHQgJiYgKG4gPSAhMCksIFJ0LnJlc29sdmUoIXQpKSkpKSkubmV4dCgoKCkgPT4gbikpO1xuICAgICAgICB9KHQsIGUpO1xuICAgIH1cbiAgICByZW1vdmVPcnBoYW5lZERvY3VtZW50cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRiLmdldFJlbW90ZURvY3VtZW50Q2FjaGUoKS5uZXdDaGFuZ2VCdWZmZXIoKSwgcyA9IFtdO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLlluKHQsICgociwgbykgPT4ge1xuICAgICAgICAgICAgaWYgKG8gPD0gZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLlhuKHQsIHIpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWUpIFxuICAgICAgICAgICAgICAgICAgICAvLyBPdXIgc2l6ZSBhY2NvdW50aW5nIHJlcXVpcmVzIHVzIHRvIHJlYWQgYWxsIGRvY3VtZW50cyBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkrKywgbi5nZXRFbnRyeSh0LCByKS5uZXh0KCgoKSA9PiAobi5yZW1vdmVFbnRyeShyLCBydC5taW4oKSksIG1vKHQpLmRlbGV0ZShbIDAsIHF0KHIucGF0aCkgXSkpKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHMucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLm5leHQoKCgpID0+IFJ0LndhaXRGb3IocykpKS5uZXh0KCgoKSA9PiBuLmFwcGx5KHQpKSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZS53aXRoU2VxdWVuY2VOdW1iZXIodC5jdXJyZW50U2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRUYXJnZXRDYWNoZSgpLnVwZGF0ZVRhcmdldERhdGEodCwgbik7XG4gICAgfVxuICAgIHVwZGF0ZUxpbWJvRG9jdW1lbnQodCwgZSkge1xuICAgICAgICByZXR1cm4gQW8odCwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgcHJvdmlkZWQgZnVuY3Rpb24gZm9yIGVhY2ggZG9jdW1lbnQgaW4gdGhlIGNhY2hlIHRoYXQgaXMgJ29ycGhhbmVkJy4gT3JwaGFuZWRcbiAgICAgKiBtZWFucyBub3QgYSBwYXJ0IG9mIGFueSB0YXJnZXQsIHNvIHRoZSBvbmx5IGVudHJ5IGluIHRoZSB0YXJnZXQtZG9jdW1lbnQgaW5kZXggZm9yXG4gICAgICogdGhhdCBkb2N1bWVudCB3aWxsIGJlIHRoZSBzZW50aW5lbCByb3cgKHRhcmdldElkIDApLCB3aGljaCB3aWxsIGFsc28gaGF2ZSB0aGUgc2VxdWVuY2VcbiAgICAgKiBudW1iZXIgZm9yIHRoZSBsYXN0IHRpbWUgdGhlIGRvY3VtZW50IHdhcyBhY2Nlc3NlZC5cbiAgICAgKi8gICAgWW4odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbW8odCk7XG4gICAgICAgIGxldCBzLCBpID0gT3QuY3Q7XG4gICAgICAgIHJldHVybiBuLlgoe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIlxuICAgICAgICB9LCAoKFt0LCBuXSwge3BhdGg6IHIsIHNlcXVlbmNlTnVtYmVyOiBvfSkgPT4ge1xuICAgICAgICAgICAgMCA9PT0gdCA/IChcbiAgICAgICAgICAgIC8vIGlmIG5leHRUb1JlcG9ydCBpcyB2YWxpZCwgcmVwb3J0IGl0LCB0aGlzIGlzIGEgbmV3IGtleSBzbyB0aGVcbiAgICAgICAgICAgIC8vIGxhc3Qgb25lIG11c3Qgbm90IGJlIGEgbWVtYmVyIG9mIGFueSB0YXJnZXRzLlxuICAgICAgICAgICAgaSAhPT0gT3QuY3QgJiYgZShuZXcgaHQoR3QocykpLCBpKSwgXG4gICAgICAgICAgICAvLyBzZXQgbmV4dFRvUmVwb3J0IHRvIGJlIHRoaXMgc2VxdWVuY2UgbnVtYmVyLiBJdCdzIHRoZSBuZXh0IG9uZSB3ZVxuICAgICAgICAgICAgLy8gbWlnaHQgcmVwb3J0LCBpZiB3ZSBkb24ndCBmaW5kIGFueSB0YXJnZXRzIGZvciB0aGlzIGRvY3VtZW50LlxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoZSBzZXF1ZW5jZSBudW1iZXIgbXVzdCBiZSBkZWZpbmVkIHdoZW4gdGhlIHRhcmdldElkXG4gICAgICAgICAgICAvLyBpcyAwLlxuICAgICAgICAgICAgaSA9IG8sIHMgPSByKSA6IFxuICAgICAgICAgICAgLy8gc2V0IG5leHRUb1JlcG9ydCB0byBiZSBpbnZhbGlkLCB3ZSBrbm93IHdlIGRvbid0IG5lZWQgdG8gcmVwb3J0XG4gICAgICAgICAgICAvLyB0aGlzIG9uZSBzaW5jZSB3ZSBmb3VuZCBhIHRhcmdldCBmb3IgaXQuXG4gICAgICAgICAgICBpID0gT3QuY3Q7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSByZXBvcnQgc2VxdWVuY2UgbnVtYmVycyBhZnRlciBnZXR0aW5nIHRvIHRoZSBuZXh0IGtleSwgd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGxhc3Qga2V5IHdlIGl0ZXJhdGVkIG92ZXIgd2FzIGFuIG9ycGhhbmVkXG4gICAgICAgICAgICAvLyBkb2N1bWVudCBhbmQgcmVwb3J0IGl0LlxuICAgICAgICAgICAgaSAhPT0gT3QuY3QgJiYgZShuZXcgaHQoR3QocykpLCBpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRDYWNoZVNpemUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCkuZ2V0U2l6ZSh0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEFvKHQsIGUpIHtcbiAgICByZXR1cm4gbW8odCkucHV0KFxuICAgIC8qKlxuICogQHJldHVybnMgQSB2YWx1ZSBzdWl0YWJsZSBmb3Igd3JpdGluZyBhIHNlbnRpbmVsIHJvdyBpbiB0aGUgdGFyZ2V0LWRvY3VtZW50XG4gKiBzdG9yZS5cbiAqL1xuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhcmdldElkOiAwLFxuICAgICAgICAgICAgcGF0aDogcXQodC5wYXRoKSxcbiAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyOiBlXG4gICAgICAgIH07XG4gICAgfShlLCB0LmN1cnJlbnRTZXF1ZW5jZU51bWJlcikpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbi1tZW1vcnkgYnVmZmVyIG9mIGVudHJpZXMgdG8gYmUgd3JpdHRlbiB0byBhIFJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKiBJdCBjYW4gYmUgdXNlZCB0byBiYXRjaCB1cCBhIHNldCBvZiBjaGFuZ2VzIHRvIGJlIHdyaXR0ZW4gdG8gdGhlIGNhY2hlLCBidXRcbiAqIGFkZGl0aW9uYWxseSBzdXBwb3J0cyByZWFkaW5nIGVudHJpZXMgYmFjayB3aXRoIHRoZSBgZ2V0RW50cnkoKWAgbWV0aG9kLFxuICogZmFsbGluZyBiYWNrIHRvIHRoZSB1bmRlcmx5aW5nIFJlbW90ZURvY3VtZW50Q2FjaGUgaWYgbm8gZW50cnkgaXNcbiAqIGJ1ZmZlcmVkLlxuICpcbiAqIEVudHJpZXMgYWRkZWQgdG8gdGhlIGNhY2hlICptdXN0KiBiZSByZWFkIGZpcnN0LiBUaGlzIGlzIHRvIGZhY2lsaXRhdGVcbiAqIGNhbGN1bGF0aW5nIHRoZSBzaXplIGRlbHRhIG9mIHRoZSBwZW5kaW5nIGNoYW5nZXMuXG4gKlxuICogUE9SVElORyBOT1RFOiBUaGlzIGNsYXNzIHdhcyBpbXBsZW1lbnRlZCB0aGVuIHJlbW92ZWQgZnJvbSBvdGhlciBwbGF0Zm9ybXMuXG4gKiBJZiBieXRlLWNvdW50aW5nIGVuZHMgdXAgYmVpbmcgbmVlZGVkIG9uIHRoZSBvdGhlciBwbGF0Zm9ybXMsIGNvbnNpZGVyXG4gKiBwb3J0aW5nIHRoaXMgY2xhc3MgYXMgcGFydCBvZiB0aGF0IGltcGxlbWVudGF0aW9uIHdvcmsuXG4gKi8gY2xhc3Mgdm8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBBIG1hcHBpbmcgb2YgZG9jdW1lbnQga2V5IHRvIHRoZSBuZXcgY2FjaGUgZW50cnkgdGhhdCBzaG91bGQgYmUgd3JpdHRlbi5cbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gbmV3IG9zKCh0ID0+IHQudG9TdHJpbmcoKSksICgodCwgZSkgPT4gdC5pc0VxdWFsKGUpKSksIHRoaXMuY2hhbmdlc0FwcGxpZWQgPSAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhIGBSZW1vdGVEb2N1bWVudENhY2hlLmFkZEVudHJ5KClgIGNhbGwuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9ubHkgbW9kaWZ5IGRvY3VtZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCB2aWFcbiAgICAgKiBgZ2V0RW50cnkoKS9nZXRFbnRyaWVzKClgIChlbmZvcmNlZCB2aWEgSW5kZXhlZERicyBgYXBwbHkoKWApLlxuICAgICAqLyAgICBhZGRFbnRyeSh0KSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90QXBwbGllZCgpLCB0aGlzLmNoYW5nZXMuc2V0KHQua2V5LCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhIGBSZW1vdGVEb2N1bWVudENhY2hlLnJlbW92ZUVudHJ5KClgIGNhbGwuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9ubHkgcmVtb3ZlIGRvY3VtZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCB2aWFcbiAgICAgKiBgZ2V0RW50cnkoKS9nZXRFbnRyaWVzKClgIChlbmZvcmNlZCB2aWEgSW5kZXhlZERicyBgYXBwbHkoKWApLlxuICAgICAqLyAgICByZW1vdmVFbnRyeSh0LCBlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90QXBwbGllZCgpLCB0aGlzLmNoYW5nZXMuc2V0KHQsIGFuLm5ld0ludmFsaWREb2N1bWVudCh0KS5zZXRSZWFkVGltZShlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGFuIGVudHJ5IGluIHRoZSBjYWNoZS4gVGhlIGJ1ZmZlcmVkIGNoYW5nZXMgd2lsbCBmaXJzdCBiZSBjaGVja2VkLFxuICAgICAqIGFuZCBpZiBubyBidWZmZXJlZCBjaGFuZ2UgYXBwbGllcywgdGhpcyB3aWxsIGZvcndhcmQgdG9cbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiBpbiB3aGljaCB0byBwZXJmb3JtIGFueSBwZXJzaXN0ZW5jZVxuICAgICAqICAgICBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSAtIFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybnMgVGhlIGNhY2hlZCBkb2N1bWVudCBvciBhbiBpbnZhbGlkIGRvY3VtZW50IGlmIHdlIGhhdmUgbm90aGluZ1xuICAgICAqIGNhY2hlZC5cbiAgICAgKi8gICAgZ2V0RW50cnkodCwgZSkge1xuICAgICAgICB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKTtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuY2hhbmdlcy5nZXQoZSk7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IG4gPyBSdC5yZXNvbHZlKG4pIDogdGhpcy5nZXRGcm9tQ2FjaGUodCwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIHNldmVyYWwgZW50cmllcyBpbiB0aGUgY2FjaGUsIGZvcndhcmRpbmcgdG9cbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiBpbiB3aGljaCB0byBwZXJmb3JtIGFueSBwZXJzaXN0ZW5jZVxuICAgICAqICAgICBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleXMgLSBUaGUga2V5cyBvZiB0aGUgZW50cmllcyB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIEEgbWFwIG9mIGNhY2hlZCBkb2N1bWVudHMsIGluZGV4ZWQgYnkga2V5LiBJZiBhbiBlbnRyeSBjYW5ub3QgYmVcbiAgICAgKiAgICAgZm91bmQsIHRoZSBjb3JyZXNwb25kaW5nIGtleSB3aWxsIGJlIG1hcHBlZCB0byBhbiBpbnZhbGlkIGRvY3VtZW50LlxuICAgICAqLyAgICBnZXRFbnRyaWVzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsRnJvbUNhY2hlKHQsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGJ1ZmZlcmVkIGNoYW5nZXMgdG8gdGhlIHVuZGVybHlpbmcgUmVtb3RlRG9jdW1lbnRDYWNoZSwgdXNpbmdcbiAgICAgKiB0aGUgcHJvdmlkZWQgdHJhbnNhY3Rpb24uXG4gICAgICovICAgIGFwcGx5KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0Tm90QXBwbGllZCgpLCB0aGlzLmNoYW5nZXNBcHBsaWVkID0gITAsIHRoaXMuYXBwbHlDaGFuZ2VzKHQpO1xuICAgIH1cbiAgICAvKiogSGVscGVyIHRvIGFzc2VydCB0aGlzLmNoYW5nZXMgaXMgbm90IG51bGwgICovICAgIGFzc2VydE5vdEFwcGxpZWQoKSB7fVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgUmVtb3RlRG9jdW1lbnRDYWNoZSBmb3IgSW5kZXhlZERiLiBUbyBjb25zdHJ1Y3QsIGludm9rZVxuICogYG5ld0luZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUoKWAuXG4gKi8gY2xhc3MgUm8ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdDtcbiAgICB9XG4gICAgc2V0SW5kZXhNYW5hZ2VyKHQpIHtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBzdXBwbGllZCBlbnRyaWVzIHRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgYWRkRW50cnlgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAgdG8gZW5zdXJlIHByb3BlciBhY2NvdW50aW5nIG9mIG1ldGFkYXRhLlxuICAgICAqLyAgICBhZGRFbnRyeSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBTbyh0KS5wdXQobik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgICBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgIHRvIGVuc3VyZSBwcm9wZXIgYWNjb3VudGluZyBvZiBtZXRhZGF0YS5cbiAgICAgKi8gICAgcmVtb3ZlRW50cnkodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gU28odCkuZGVsZXRlKFxuICAgICAgICAvKipcbiAqIFJldHVybnMgYSBrZXkgdGhhdCBjYW4gYmUgdXNlZCBmb3IgZG9jdW1lbnQgbG9va3VwcyB2aWEgdGhlIHByaW1hcnkga2V5IG9mXG4gKiB0aGUgRGJSZW1vdGVEb2N1bWVudCBvYmplY3Qgc3RvcmUuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHQucGF0aC50b0FycmF5KCk7XG4gICAgICAgICAgICByZXR1cm4gWyBcbiAgICAgICAgICAgIC8qIHByZWZpeCBwYXRoICovIG4uc2xpY2UoMCwgbi5sZW5ndGggLSAyKSwgXG4gICAgICAgICAgICAvKiBjb2xsZWN0aW9uIGlkICovIG5bbi5sZW5ndGggLSAyXSwgZnIoZSksIFxuICAgICAgICAgICAgLyogZG9jdW1lbnQgaWQgKi8gbltuLmxlbmd0aCAtIDFdIF07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRvY3VtZW50IGxvb2t1cHMgb24gdGhlXG4gKiBgRGJSZW1vdGVEb2N1bWVudERvY3VtZW50Q29sbGVjdGlvbkdyb3VwSW5kZXhgIGluZGV4LlxuICovIChlLCBuKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgY2FjaGUgc2l6ZS5cbiAgICAgKlxuICAgICAqIENhbGxlcnMgdG8gYGFkZEVudHJ5KClgIGFuZCBgcmVtb3ZlRW50cnkoKWAgKm11c3QqIGNhbGwgdGhpcyBhZnRlcndhcmRzIHRvIHVwZGF0ZSB0aGVcbiAgICAgKiBjYWNoZSdzIG1ldGFkYXRhLlxuICAgICAqLyAgICB1cGRhdGVNZXRhZGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKHQpLm5leHQoKG4gPT4gKG4uYnl0ZVNpemUgKz0gZSwgdGhpcy5abih0LCBuKSkpKTtcbiAgICB9XG4gICAgZ2V0RW50cnkodCwgZSkge1xuICAgICAgICBsZXQgbiA9IGFuLm5ld0ludmFsaWREb2N1bWVudChlKTtcbiAgICAgICAgcmV0dXJuIFNvKHQpLlgoe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRLZXlJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IElEQktleVJhbmdlLm9ubHkoRG8oZSkpXG4gICAgICAgIH0sICgodCwgcykgPT4ge1xuICAgICAgICAgICAgbiA9IHRoaXMudHMoZSwgcyk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGFuIGVudHJ5IGluIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSAtIFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybnMgVGhlIGNhY2hlZCBkb2N1bWVudCBlbnRyeSBhbmQgaXRzIHNpemUuXG4gICAgICovICAgIGVzKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSB7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IGFuLm5ld0ludmFsaWREb2N1bWVudChlKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU28odCkuWCh7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2Uub25seShEbyhlKSlcbiAgICAgICAgfSwgKCh0LCBzKSA9PiB7XG4gICAgICAgICAgICBuID0ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50OiB0aGlzLnRzKGUsIHMpLFxuICAgICAgICAgICAgICAgIHNpemU6IHJvKHMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICBnZXRFbnRyaWVzKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSBjcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5ucyh0LCBlLCAoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnRzKHQsIGUpO1xuICAgICAgICAgICAgbiA9IG4uaW5zZXJ0KHQsIHMpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBzZXZlcmFsIGVudHJpZXMgaW4gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50S2V5cyAtIFRoZSBzZXQgb2Yga2V5cyBlbnRyaWVzIHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybnMgQSBtYXAgb2YgZG9jdW1lbnRzIGluZGV4ZWQgYnkga2V5IGFuZCBhIG1hcCBvZiBzaXplcyBpbmRleGVkIGJ5XG4gICAgICogICAgIGtleSAoemVybyBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QpLlxuICAgICAqLyAgICBzcyh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gY3MoKSwgcyA9IG5ldyBwZShodC5jb21wYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubnModCwgZSwgKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy50cyh0LCBlKTtcbiAgICAgICAgICAgIG4gPSBuLmluc2VydCh0LCBpKSwgcyA9IHMuaW5zZXJ0KHQsIHJvKGUpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+ICh7XG4gICAgICAgICAgICBkb2N1bWVudHM6IG4sXG4gICAgICAgICAgICByczogc1xuICAgICAgICB9KSkpO1xuICAgIH1cbiAgICBucyh0LCBlLCBuKSB7XG4gICAgICAgIGlmIChlLmlzRW1wdHkoKSkgcmV0dXJuIFJ0LnJlc29sdmUoKTtcbiAgICAgICAgbGV0IHMgPSBuZXcgRWUoeG8pO1xuICAgICAgICBlLmZvckVhY2goKHQgPT4gcyA9IHMuYWRkKHQpKSk7XG4gICAgICAgIGNvbnN0IGkgPSBJREJLZXlSYW5nZS5ib3VuZChEbyhzLmZpcnN0KCkpLCBEbyhzLmxhc3QoKSkpLCByID0gcy5nZXRJdGVyYXRvcigpO1xuICAgICAgICBsZXQgbyA9IHIuZ2V0TmV4dCgpO1xuICAgICAgICByZXR1cm4gU28odCkuWCh7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogaVxuICAgICAgICB9LCAoKHQsIGUsIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBodC5mcm9tU2VnbWVudHMoWyAuLi5lLnByZWZpeFBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBlLmRvY3VtZW50SWQgXSk7XG4gICAgICAgICAgICAvLyBHbyB0aHJvdWdoIGtleXMgbm90IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7byAmJiB4byhvLCBpKSA8IDA7ICkgbihvLCBudWxsKSwgbyA9IHIuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgbyAmJiBvLmlzRXF1YWwoaSkgJiYgKFxuICAgICAgICAgICAgLy8gS2V5IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgbihvLCBlKSwgbyA9IHIuaGFzTmV4dCgpID8gci5nZXROZXh0KCkgOiBudWxsKSwgXG4gICAgICAgICAgICAvLyBTa2lwIHRvIHRoZSBuZXh0IGtleSAoaWYgdGhlcmUgaXMgb25lKS5cbiAgICAgICAgICAgIG8gPyBzLkcoRG8obykpIDogcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUga2V5cyBhcmUgbm90IGluIHRoZSBjYWNoZS4gT25lIGNhc2Ugd2hlcmUgYGl0ZXJhdGVgXG4gICAgICAgICAgICAvLyBhYm92ZSB3b24ndCBnbyB0aHJvdWdoIHRoZW0gaXMgd2hlbiB0aGUgY2FjaGUgaXMgZW1wdHkuXG4gICAgICAgICAgICBmb3IgKDtvOyApIG4obywgbnVsbCksIG8gPSByLmhhc05leHQoKSA/IHIuZ2V0TmV4dCgpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IGUucGF0aCwgciA9IFsgaS5wb3BMYXN0KCkudG9BcnJheSgpLCBpLmxhc3RTZWdtZW50KCksIGZyKG4ucmVhZFRpbWUpLCBuLmRvY3VtZW50S2V5LnBhdGguaXNFbXB0eSgpID8gXCJcIiA6IG4uZG9jdW1lbnRLZXkucGF0aC5sYXN0U2VnbWVudCgpIF0sIG8gPSBbIGkucG9wTGFzdCgpLnRvQXJyYXkoKSwgaS5sYXN0U2VnbWVudCgpLCBbIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBdLCBcIlwiIF07XG4gICAgICAgIHJldHVybiBTbyh0KS5qKElEQktleVJhbmdlLmJvdW5kKHIsIG8sICEwKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBsZXQgbiA9IGNzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnRzKGh0LmZyb21TZWdtZW50cyhpLnByZWZpeFBhdGguY29uY2F0KGkuY29sbGVjdGlvbkdyb3VwLCBpLmRvY3VtZW50SWQpKSwgaSk7XG4gICAgICAgICAgICAgICAgdC5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAobnMoZSwgdCkgfHwgcy5oYXModC5rZXkpKSAmJiAoXG4gICAgICAgICAgICAgICAgLy8gRWl0aGVyIHRoZSBkb2N1bWVudCBtYXRjaGVzIHRoZSBnaXZlbiBxdWVyeSwgb3IgaXQgaXMgbXV0YXRlZC5cbiAgICAgICAgICAgICAgICBuID0gbi5pbnNlcnQodC5rZXksIHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAodCwgZSwgbiwgcykge1xuICAgICAgICBsZXQgaSA9IGNzKCk7XG4gICAgICAgIGNvbnN0IHIgPSBDbyhlLCBuKSwgbyA9IENvKGUsIEl0Lm1heCgpKTtcbiAgICAgICAgcmV0dXJuIFNvKHQpLlgoe1xuICAgICAgICAgICAgaW5kZXg6IFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiBJREJLZXlSYW5nZS5ib3VuZChyLCBvLCAhMClcbiAgICAgICAgfSwgKCh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy50cyhodC5mcm9tU2VnbWVudHMoZS5wcmVmaXhQYXRoLmNvbmNhdChlLmNvbGxlY3Rpb25Hcm91cCwgZS5kb2N1bWVudElkKSksIGUpO1xuICAgICAgICAgICAgaSA9IGkuaW5zZXJ0KHIua2V5LCByKSwgaS5zaXplID09PSBzICYmIG4uZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpO1xuICAgIH1cbiAgICBuZXdDaGFuZ2VCdWZmZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IGJvKHRoaXMsICEhdCAmJiB0LnRyYWNrUmVtb3ZhbHMpO1xuICAgIH1cbiAgICBnZXRTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEodCkubmV4dCgodCA9PiB0LmJ5dGVTaXplKSk7XG4gICAgfVxuICAgIGdldE1ldGFkYXRhKHQpIHtcbiAgICAgICAgcmV0dXJuIFZvKHQpLmdldChcInJlbW90ZURvY3VtZW50R2xvYmFsS2V5XCIpLm5leHQoKHQgPT4gKEYoISF0KSwgdCkpKTtcbiAgICB9XG4gICAgWm4odCwgZSkge1xuICAgICAgICByZXR1cm4gVm8odCkucHV0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIiwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYGRiUmVtb3RlRG9jYCBhbmQgcmV0dXJucyB0aGUgZG9jdW1lbnQgKG9yIGFuIGludmFsaWQgZG9jdW1lbnQgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIGZvcm1hdCB1c2VkIGZvciBzZW50aW5lbCBkZWxldGVzKS5cbiAgICAgKi8gICAgdHModCwgZSkge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGhyKHRoaXMuc2VyaWFsaXplciwgZSk7XG4gICAgICAgICAgICAvLyBXaGV0aGVyIHRoZSBkb2N1bWVudCBpcyBhIHNlbnRpbmVsIHJlbW92YWwgYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhlXG4gICAgICAgICAgICAvLyBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0LmlzTm9Eb2N1bWVudCgpICYmIHQudmVyc2lvbi5pc0VxdWFsKHJ0Lm1pbigpKSkpIHJldHVybiB0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbi5uZXdJbnZhbGlkRG9jdW1lbnQodCk7XG4gICAgfVxufVxuXG4vKiogQ3JlYXRlcyBhIG5ldyBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLiAqLyBmdW5jdGlvbiBQbyh0KSB7XG4gICAgcmV0dXJuIG5ldyBSbyh0KTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBkZXRhaWxzIG9mIGFkZGluZyBhbmQgdXBkYXRpbmcgZG9jdW1lbnRzIGluIHRoZSBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLlxuICpcbiAqIFVubGlrZSB0aGUgTWVtb3J5UmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIsIHRoZSBJbmRleGVkRGIgaW1wbGVtZW50YXRpb24gY29tcHV0ZXMgdGhlIHNpemVcbiAqIGRlbHRhIGZvciBhbGwgc3VibWl0dGVkIGNoYW5nZXMuIFRoaXMgYXZvaWRzIGhhdmluZyB0byByZS1yZWFkIGFsbCBkb2N1bWVudHMgZnJvbSBJbmRleGVkRGJcbiAqIHdoZW4gd2UgYXBwbHkgdGhlIGNoYW5nZXMuXG4gKi8gY2xhc3MgYm8gZXh0ZW5kcyB2byB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRvY3VtZW50Q2FjaGUgLSBUaGUgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSB0byBhcHBseSB0aGUgY2hhbmdlcyB0by5cbiAgICAgKiBAcGFyYW0gdHJhY2tSZW1vdmFscyAtIFdoZXRoZXIgdG8gY3JlYXRlIHNlbnRpbmVsIGRlbGV0ZXMgdGhhdCBjYW4gYmUgdHJhY2tlZCBieVxuICAgICAqIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLm9zID0gdCwgdGhpcy50cmFja1JlbW92YWxzID0gZSwgXG4gICAgICAgIC8vIEEgbWFwIG9mIGRvY3VtZW50IHNpemVzIGFuZCByZWFkIHRpbWVzIHByaW9yIHRvIGFwcGx5aW5nIHRoZSBjaGFuZ2VzIGluXG4gICAgICAgIC8vIHRoaXMgYnVmZmVyLlxuICAgICAgICB0aGlzLnVzID0gbmV3IG9zKCh0ID0+IHQudG9TdHJpbmcoKSksICgodCwgZSkgPT4gdC5pc0VxdWFsKGUpKSk7XG4gICAgfVxuICAgIGFwcGx5Q2hhbmdlcyh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgbGV0IG4gPSAwLCBzID0gbmV3IEVlKCgodCwgZSkgPT4gZXQodC5jYW5vbmljYWxTdHJpbmcoKSwgZS5jYW5vbmljYWxTdHJpbmcoKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5mb3JFYWNoKCgoaSwgcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMudXMuZ2V0KGkpO1xuICAgICAgICAgICAgaWYgKGUucHVzaCh0aGlzLm9zLnJlbW92ZUVudHJ5KHQsIGksIG8ucmVhZFRpbWUpKSwgci5pc1ZhbGlkRG9jdW1lbnQoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBscih0aGlzLm9zLnNlcmlhbGl6ZXIsIHIpO1xuICAgICAgICAgICAgICAgIHMgPSBzLmFkZChpLnBhdGgucG9wTGFzdCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gcm8odSk7XG4gICAgICAgICAgICAgICAgbiArPSBjIC0gby5zaXplLCBlLnB1c2godGhpcy5vcy5hZGRFbnRyeSh0LCBpLCB1KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gLT0gby5zaXplLCB0aGlzLnRyYWNrUmVtb3ZhbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBvcmRlciB0byB0cmFjayByZW1vdmFscywgd2Ugc3RvcmUgYSBcInNlbnRpbmVsIGRlbGV0ZVwiIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIFJlbW90ZURvY3VtZW50Q2FjaGUuIFRoaXMgZW50cnkgaXMgcmVwcmVzZW50ZWQgYnkgYSBOb0RvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gd2l0aCBhIHZlcnNpb24gb2YgMCBhbmQgaWdub3JlZCBieSBgbWF5YmVEZWNvZGVEb2N1bWVudCgpYCBidXRcbiAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZWQgaW4gYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbHIodGhpcy5vcy5zZXJpYWxpemVyLCByLmNvbnZlcnRUb05vRG9jdW1lbnQocnQubWluKCkpKTtcbiAgICAgICAgICAgICAgICBlLnB1c2godGhpcy5vcy5hZGRFbnRyeSh0LCBpLCBuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgcy5mb3JFYWNoKChuID0+IHtcbiAgICAgICAgICAgIGUucHVzaCh0aGlzLm9zLmluZGV4TWFuYWdlci5hZGRUb0NvbGxlY3Rpb25QYXJlbnRJbmRleCh0LCBuKSk7XG4gICAgICAgIH0pKSwgZS5wdXNoKHRoaXMub3MudXBkYXRlTWV0YWRhdGEodCwgbikpLCBSdC53YWl0Rm9yKGUpO1xuICAgIH1cbiAgICBnZXRGcm9tQ2FjaGUodCwgZSkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLm9zLmVzKHQsIGUpLm5leHQoKHQgPT4gKHRoaXMudXMuc2V0KGUsIHtcbiAgICAgICAgICAgIHNpemU6IHQuc2l6ZSxcbiAgICAgICAgICAgIHJlYWRUaW1lOiB0LmRvY3VtZW50LnJlYWRUaW1lXG4gICAgICAgIH0pLCB0LmRvY3VtZW50KSkpO1xuICAgIH1cbiAgICBnZXRBbGxGcm9tQ2FjaGUodCwgZSkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlXG4gICAgICAgIC8vIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLm9zLnNzKHQsIGUpLm5leHQoKCh7ZG9jdW1lbnRzOiB0LCByczogZX0pID0+IChcbiAgICAgICAgLy8gTm90ZTogYGdldEFsbEZyb21DYWNoZWAgcmV0dXJucyB0d28gbWFwcyBpbnN0ZWFkIG9mIGEgc2luZ2xlIG1hcCBmcm9tXG4gICAgICAgIC8vIGtleXMgdG8gYERvY3VtZW50U2l6ZUVudHJ5YHMuIFRoaXMgaXMgdG8gYWxsb3cgcmV0dXJuaW5nIHRoZVxuICAgICAgICAvLyBgTXV0YWJsZURvY3VtZW50TWFwYCBkaXJlY3RseSwgd2l0aG91dCBhIGNvbnZlcnNpb24uXG4gICAgICAgIGUuZm9yRWFjaCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIHRoaXMudXMuc2V0KGUsIHtcbiAgICAgICAgICAgICAgICBzaXplOiBuLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiB0LmdldChlKS5yZWFkVGltZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKSwgdCkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFZvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJyZW1vdGVEb2N1bWVudEdsb2JhbFwiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHJlbW90ZURvY3VtZW50cyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gU28odCkge1xuICAgIHJldHVybiBfZSh0LCBcInJlbW90ZURvY3VtZW50c1YxNFwiKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRvY3VtZW50IGxvb2t1cHMgb24gdGhlXG4gKiBgRGJSZW1vdGVEb2N1bWVudERvY3VtZW50S2V5SW5kZXhgIGluZGV4LlxuICovIGZ1bmN0aW9uIERvKHQpIHtcbiAgICBjb25zdCBlID0gdC5wYXRoLnRvQXJyYXkoKTtcbiAgICByZXR1cm4gWyBcbiAgICAvKiBwcmVmaXggcGF0aCAqLyBlLnNsaWNlKDAsIGUubGVuZ3RoIC0gMiksIFxuICAgIC8qIGNvbGxlY3Rpb24gaWQgKi8gZVtlLmxlbmd0aCAtIDJdLCBcbiAgICAvKiBkb2N1bWVudCBpZCAqLyBlW2UubGVuZ3RoIC0gMV0gXTtcbn1cblxuZnVuY3Rpb24gQ28odCwgZSkge1xuICAgIGNvbnN0IG4gPSBlLmRvY3VtZW50S2V5LnBhdGgudG9BcnJheSgpO1xuICAgIHJldHVybiBbIFxuICAgIC8qIGNvbGxlY3Rpb24gaWQgKi8gdCwgZnIoZS5yZWFkVGltZSksIFxuICAgIC8qIHByZWZpeCBwYXRoICovIG4uc2xpY2UoMCwgbi5sZW5ndGggLSAyKSwgXG4gICAgLyogZG9jdW1lbnQgaWQgKi8gbi5sZW5ndGggPiAwID8gbltuLmxlbmd0aCAtIDFdIDogXCJcIiBdO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgdGhhdCBjb21wYXJlcyBkb2N1bWVudCBrZXlzIGFjY29yZGluZyB0byB0aGUgcHJpbWFyeSBrZXkgc29ydGluZ1xuICogdXNlZCBieSB0aGUgYERiUmVtb3RlRG9jdW1lbnREb2N1bWVudGAgc3RvcmUgKGJ5IHByZWZpeCBwYXRoLCBjb2xsZWN0aW9uIGlkXG4gKiBhbmQgdGhlbiBkb2N1bWVudCBJRCkuXG4gKlxuICogVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAqLyBmdW5jdGlvbiB4byh0LCBlKSB7XG4gICAgY29uc3QgbiA9IHQucGF0aC50b0FycmF5KCksIHMgPSBlLnBhdGgudG9BcnJheSgpO1xuICAgIC8vIFRoZSBvcmRlcmluZyBpcyBiYXNlZCBvbiBodHRwczovL2Nocm9taXVtLmdvb2dsZXNvdXJjZS5jb20vY2hyb21pdW0vYmxpbmsvKy9mZTVjMjFmZWY5NGRhZTcxYzFjMzM0NDc3NWI4ZDhhN2Y3ZTZkOWVjL1NvdXJjZS9tb2R1bGVzL2luZGV4ZWRkYi9JREJLZXkuY3BwIzc0XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgbi5sZW5ndGggLSAyICYmIHQgPCBzLmxlbmd0aCAtIDI7ICsrdCkgaWYgKGkgPSBldChuW3RdLCBzW3RdKSwgXG4gICAgaSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIGkgPSBldChuLmxlbmd0aCwgcy5sZW5ndGgpLCBpIHx8IChpID0gZXQobltuLmxlbmd0aCAtIDJdLCBzW3MubGVuZ3RoIC0gMl0pLCBcbiAgICBpIHx8IGV0KG5bbi5sZW5ndGggLSAxXSwgc1tzLmxlbmd0aCAtIDFdKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNjaGVtYSBWZXJzaW9uIGZvciB0aGUgV2ViIGNsaWVudDpcbiAqIDEuICBJbml0aWFsIHZlcnNpb24gaW5jbHVkaW5nIE11dGF0aW9uIFF1ZXVlLCBRdWVyeSBDYWNoZSwgYW5kIFJlbW90ZVxuICogICAgIERvY3VtZW50IENhY2hlXG4gKiAyLiAgVXNlZCB0byBlbnN1cmUgYSB0YXJnZXRHbG9iYWwgb2JqZWN0IGV4aXN0cyBhbmQgYWRkIHRhcmdldENvdW50IHRvIGl0LiBOb1xuICogICAgIGxvbmdlciByZXF1aXJlZCBiZWNhdXNlIG1pZ3JhdGlvbiAzIHVuY29uZGl0aW9uYWxseSBjbGVhcnMgaXQuXG4gKiAzLiAgRHJvcHBlZCBhbmQgcmUtY3JlYXRlZCBRdWVyeSBDYWNoZSB0byBkZWFsIHdpdGggY2FjaGUgY29ycnVwdGlvbiByZWxhdGVkXG4gKiAgICAgdG8gbGltYm8gcmVzb2x1dGlvbi4gQWRkcmVzc2VzXG4gKiAgICAgaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWlvcy1zZGsvaXNzdWVzLzE1NDhcbiAqIDQuICBNdWx0aS1UYWIgU3VwcG9ydC5cbiAqIDUuICBSZW1vdmFsIG9mIGhlbGQgd3JpdGUgYWNrcy5cbiAqIDYuICBDcmVhdGUgZG9jdW1lbnQgZ2xvYmFsIGZvciB0cmFja2luZyBkb2N1bWVudCBjYWNoZSBzaXplLlxuICogNy4gIEVuc3VyZSBldmVyeSBjYWNoZWQgZG9jdW1lbnQgaGFzIGEgc2VudGluZWwgcm93IHdpdGggYSBzZXF1ZW5jZSBudW1iZXIuXG4gKiA4LiAgQWRkIGNvbGxlY3Rpb24tcGFyZW50IGluZGV4IGZvciBDb2xsZWN0aW9uIEdyb3VwIHF1ZXJpZXMuXG4gKiA5LiAgQ2hhbmdlIFJlbW90ZURvY3VtZW50Q2hhbmdlcyBzdG9yZSB0byBiZSBrZXllZCBieSByZWFkVGltZSByYXRoZXIgdGhhblxuICogICAgIGFuIGF1dG8taW5jcmVtZW50aW5nIElELiBUaGlzIGlzIHJlcXVpcmVkIGZvciBJbmRleC1GcmVlIHF1ZXJpZXMuXG4gKiAxMC4gUmV3cml0ZSB0aGUgY2Fub25pY2FsIElEcyB0byB0aGUgZXhwbGljaXQgUHJvdG9idWYtYmFzZWQgZm9ybWF0LlxuICogMTEuIEFkZCBidW5kbGVzIGFuZCBuYW1lZF9xdWVyaWVzIGZvciBidW5kbGUgc3VwcG9ydC5cbiAqIDEyLiBBZGQgZG9jdW1lbnQgb3ZlcmxheXMuXG4gKiAxMy4gUmV3cml0ZSB0aGUga2V5cyBvZiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlIHRvIGFsbG93IGZvciBlZmZpY2llbnRcbiAqICAgICBkb2N1bWVudCBsb29rdXAgdmlhIGBnZXRBbGwoKWAuXG4gKiAxNC4gQWRkIG92ZXJsYXlzLlxuICogMTUuIEFkZCBpbmRleGluZyBzdXBwb3J0LlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgbG9jYWwgdmlldyAob3ZlcmxheSkgb2YgYSBkb2N1bWVudCwgYW5kIHRoZSBmaWVsZHMgdGhhdCBhcmVcbiAqIGxvY2FsbHkgbXV0YXRlZC5cbiAqL1xuY2xhc3MgTm8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBmaWVsZHMgdGhhdCBhcmUgbG9jYWxseSBtdXRhdGVkIGJ5IHBhdGNoIG11dGF0aW9ucy5cbiAgICAgKlxuICAgICAqIElmIHRoZSBvdmVybGF5ZWRcdGRvY3VtZW50IGlzIGZyb20gc2V0IG9yIGRlbGV0ZSBtdXRhdGlvbnMsIHRoaXMgaXMgYG51bGxgLlxuICAgICAqIElmIHRoZXJlIGlzIG5vIG92ZXJsYXkgKG11dGF0aW9uKSBmb3IgdGhlIGRvY3VtZW50LCB0aGlzIGlzIGFuIGVtcHR5IGBGaWVsZE1hc2tgLlxuICAgICAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5ZWREb2N1bWVudCA9IHQsIHRoaXMubXV0YXRlZEZpZWxkcyA9IGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHJlYWRvbmx5IHZpZXcgb2YgdGhlIGxvY2FsIHN0YXRlIG9mIGFsbCBkb2N1bWVudHMgd2UncmUgdHJhY2tpbmcgKGkuZS4gd2VcbiAqIGhhdmUgYSBjYWNoZWQgdmVyc2lvbiBpbiByZW1vdGVEb2N1bWVudENhY2hlIG9yIGxvY2FsIG11dGF0aW9ucyBmb3IgdGhlXG4gKiBkb2N1bWVudCkuIFRoZSB2aWV3IGlzIGNvbXB1dGVkIGJ5IGFwcGx5aW5nIHRoZSBtdXRhdGlvbnMgaW4gdGhlXG4gKiBNdXRhdGlvblF1ZXVlIHRvIHRoZSBSZW1vdGVEb2N1bWVudENhY2hlLlxuICovIGNsYXNzIGtvIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZSA9IHQsIHRoaXMubXV0YXRpb25RdWV1ZSA9IGUsIHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUgPSBuLCBcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50IGlkZW50aWZpZWQgYnkgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBMb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudCBvciBudWxsIGlmIHdlIGRvbid0IGhhdmUgYW55IGNhY2hlZFxuICAgICAqIHN0YXRlIGZvciBpdC5cbiAgICAgKi8gICAgZ2V0RG9jdW1lbnQodCwgZSkge1xuICAgICAgICBsZXQgbiA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLmdldE92ZXJsYXkodCwgZSkubmV4dCgocyA9PiAobiA9IHMsIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSh0LCBlKSkpKS5uZXh0KCh0ID0+IChudWxsICE9PSBuICYmIEtzKG4ubXV0YXRpb24sIHQsIFJlLmVtcHR5KCksIGl0Lm5vdygpKSwgXG4gICAgICAgIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50cyBpZGVudGlmaWVkIGJ5IGBrZXlzYC5cbiAgICAgKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHN0YXRlIGZvciBhIGRvY3VtZW50IGluIGBrZXlzYCwgYSBOb0RvY3VtZW50IHdpbGxcbiAgICAgKiBiZSBzdG9yZWQgZm9yIHRoYXQga2V5IGluIHRoZSByZXN1bHRpbmcgc2V0LlxuICAgICAqLyAgICBnZXREb2N1bWVudHModCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJpZXModCwgZSkubmV4dCgoZSA9PiB0aGlzLmdldExvY2FsVmlld09mRG9jdW1lbnRzKHQsIGUsIGdzKCkpLm5leHQoKCgpID0+IGUpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaW1pbGFyIHRvIGBnZXREb2N1bWVudHNgLCBidXQgY3JlYXRlcyB0aGUgbG9jYWwgdmlldyBmcm9tIHRoZSBnaXZlblxuICAgICAqIGBiYXNlRG9jc2Agd2l0aG91dCByZXRyaWV2aW5nIGRvY3VtZW50cyBmcm9tIHRoZSBsb2NhbCBzdG9yZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiB0aGlzIG9wZXJhdGlvbiBpcyBzY29wZWQgdG8uXG4gICAgICogQHBhcmFtIGRvY3MgLSBUaGUgZG9jdW1lbnRzIHRvIGFwcGx5IGxvY2FsIG11dGF0aW9ucyB0byBnZXQgdGhlIGxvY2FsIHZpZXdzLlxuICAgICAqIEBwYXJhbSBleGlzdGVuY2VTdGF0ZUNoYW5nZWQgLSBUaGUgc2V0IG9mIGRvY3VtZW50IGtleXMgd2hvc2UgZXhpc3RlbmNlIHN0YXRlXG4gICAgICogICBpcyBjaGFuZ2VkLiBUaGlzIGlzIHVzZWZ1bCB0byBkZXRlcm1pbmUgaWYgc29tZSBkb2N1bWVudHMgb3ZlcmxheSBuZWVkc1xuICAgICAqICAgdG8gYmUgcmVjYWxjdWxhdGVkLlxuICAgICAqLyAgICBnZXRMb2NhbFZpZXdPZkRvY3VtZW50cyh0LCBlLCBuID0gZ3MoKSkge1xuICAgICAgICBjb25zdCBzID0gZnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9wdWxhdGVPdmVybGF5cyh0LCBzLCBlKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCBlLCBzLCBuKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGxldCBlID0gaHMoKTtcbiAgICAgICAgICAgIHJldHVybiB0LmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgZSA9IGUuaW5zZXJ0KHQsIG4ub3ZlcmxheWVkRG9jdW1lbnQpO1xuICAgICAgICAgICAgfSkpLCBlO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgb3ZlcmxheWVkIGRvY3VtZW50cyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IG1hcCwgd2hpY2ggd2lsbCBpbmNsdWRlXG4gICAgICogdGhlIGxvY2FsIHZpZXcgb2YgdGhvc2UgZG9jdW1lbnRzIGFuZCBhIGBGaWVsZE1hc2tgIGluZGljYXRpbmcgd2hpY2ggZmllbGRzXG4gICAgICogYXJlIG11dGF0ZWQgbG9jYWxseSwgYG51bGxgIGlmIG92ZXJsYXkgaXMgYSBTZXQgb3IgRGVsZXRlIG11dGF0aW9uLlxuICAgICAqLyAgICBnZXRPdmVybGF5ZWREb2N1bWVudHModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9wdWxhdGVPdmVybGF5cyh0LCBuLCBlKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCBlLCBuLCBncygpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBvdmVybGF5cyBmb3Ige0Bjb2RlIGRvY3N9IGFuZCBhZGRzIHRoZW0gdG8gcHJvdmlkZWQgb3ZlcmxheSBtYXBcbiAgICAgKiBpZiB0aGUgbWFwIGRvZXMgbm90IGFscmVhZHkgY29udGFpbiBhbiBlbnRyeSBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IGtleS5cbiAgICAgKi8gICAgcG9wdWxhdGVPdmVybGF5cyh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLmhhcyh0KSB8fCBzLnB1c2godCk7XG4gICAgICAgIH0pKSwgdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5cyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIHQuZm9yRWFjaCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBlLnNldCh0LCBuKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2NzIC0gVGhlIGRvY3VtZW50cyB0byBjb21wdXRlIHZpZXdzIGZvci4gSXQgYWxzbyBoYXMgdGhlIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gb3ZlcmxheXMgLSBUaGUgb3ZlcmxheXMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGdpdmVuIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gZXhpc3RlbmNlU3RhdGVDaGFuZ2VkIC0gQSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZXNcbiAgICAgKiAgIG1pZ2h0IGhhdmUgY2hhbmdlZC4gVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZVxuICAgICAqICAgb3ZlcmxheXMgZnJvbSBtdXRhdGlvbiBxdWV1ZXMuXG4gICAgICogQHJldHVybiBBIG1hcCByZXByZXNlbnRzIHRoZSBsb2NhbCBkb2N1bWVudHMgdmlldy5cbiAgICAgKi8gICAgY29tcHV0ZVZpZXdzKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgbGV0IGkgPSBjcygpO1xuICAgICAgICBjb25zdCByID0gd3MoKSwgbyA9IHdzKCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvID0gbi5nZXQoZS5rZXkpO1xuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgYW4gb3ZlcmxheSBpZiB0aGUgZG9jdW1lbnQncyBleGlzdGVuY2Ugc3RhdGUgY2hhbmdlZCBkdWUgdG9cbiAgICAgICAgICAgIC8vIGEgcmVtb3RlIGV2ZW50ICphbmQqIHRoZSBvdmVybGF5IGlzIGEgUGF0Y2hNdXRhdGlvbi4gVGhpcyBpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyBkb2N1bWVudCBleGlzdGVuY2Ugc3RhdGUgY2FuIGNoYW5nZSBpZiBzb21lIHBhdGNoIG11dGF0aW9uJ3NcbiAgICAgICAgICAgIC8vIHByZWNvbmRpdGlvbnMgYXJlIG1ldC5cbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIHJlY2FsY3VsYXRlIHdoZW4gYG92ZXJsYXlgIGlzIHVuZGVmaW5lZCBhcyB3ZWxsLCBiZWNhdXNlIHRoZXJlXG4gICAgICAgICAgICAvLyBtaWdodCBiZSBhIHBhdGNoIG11dGF0aW9uIHdob3NlIHByZWNvbmRpdGlvbiBkb2VzIG5vdCBtYXRjaCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAvLyBjaGFuZ2UgKGhlbmNlIG92ZXJsYXkgaXMgdW5kZWZpbmVkKSwgYnV0IHdvdWxkIG5vdyBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaGFzKGUua2V5KSAmJiAodm9pZCAwID09PSBvIHx8IG8ubXV0YXRpb24gaW5zdGFuY2VvZiB6cykgPyBpID0gaS5pbnNlcnQoZS5rZXksIGUpIDogdm9pZCAwICE9PSBvID8gKHIuc2V0KGUua2V5LCBvLm11dGF0aW9uLmdldEZpZWxkTWFzaygpKSwgXG4gICAgICAgICAgICBLcyhvLm11dGF0aW9uLCBlLCBvLm11dGF0aW9uLmdldEZpZWxkTWFzaygpLCBpdC5ub3coKSkpIDogXG4gICAgICAgICAgICAvLyBubyBvdmVybGF5IGV4aXN0c1xuICAgICAgICAgICAgLy8gVXNpbmcgRU1QVFkgdG8gaW5kaWNhdGUgdGhlcmUgaXMgbm8gb3ZlcmxheSBmb3IgdGhlIGRvY3VtZW50LlxuICAgICAgICAgICAgci5zZXQoZS5rZXksIFJlLmVtcHR5KCkpO1xuICAgICAgICB9KSksIHRoaXMucmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXModCwgaSkubmV4dCgodCA9PiAodC5mb3JFYWNoKCgodCwgZSkgPT4gci5zZXQodCwgZSkpKSwgXG4gICAgICAgIGUuZm9yRWFjaCgoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgcmV0dXJuIG8uc2V0KHQsIG5ldyBObyhlLCBudWxsICE9PSAobiA9IHIuZ2V0KHQpKSAmJiB2b2lkIDAgIT09IG4gPyBuIDogbnVsbCkpO1xuICAgICAgICB9KSksIG8pKSk7XG4gICAgfVxuICAgIHJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHdzKCk7XG4gICAgICAgIC8vIEEgcmV2ZXJzZSBsb29rdXAgbWFwIGZyb20gYmF0Y2ggaWQgdG8gdGhlIGRvY3VtZW50cyB3aXRoaW4gdGhhdCBiYXRjaC5cbiAgICAgICAgICAgICAgICBsZXQgcyA9IG5ldyBwZSgoKHQsIGUpID0+IHQgLSBlKSksIGkgPSBncygpO1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvblF1ZXVlLmdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyh0LCBlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSBpLmtleXMoKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZS5nZXQodCk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHIpIHJldHVybjtcbiAgICAgICAgICAgICAgICBsZXQgbyA9IG4uZ2V0KHQpIHx8IFJlLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgbyA9IGkuYXBwbHlUb0xvY2FsVmlldyhyLCBvKSwgbi5zZXQodCwgbyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdSA9IChzLmdldChpLmJhdGNoSWQpIHx8IGdzKCkpLmFkZCh0KTtcbiAgICAgICAgICAgICAgICBzID0gcy5pbnNlcnQoaS5iYXRjaElkLCB1KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBbXSwgbyA9IHMuZ2V0UmV2ZXJzZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIGluIGRlc2NlbmRpbmcgb3JkZXIgb2YgYmF0Y2ggSURzLCBhbmQgc2tpcCBkb2N1bWVudHMgdGhhdCBhcmVcbiAgICAgICAgICAgIC8vIGFscmVhZHkgc2F2ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDtvLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8uZ2V0TmV4dCgpLCB1ID0gcy5rZXksIGMgPSBzLnZhbHVlLCBhID0gZHMoKTtcbiAgICAgICAgICAgICAgICBjLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWkuaGFzKHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gcXMoZS5nZXQodCksIG4uZ2V0KHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHMgJiYgYS5zZXQodCwgcyksIGkgPSBpLmFkZCh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKSwgci5wdXNoKHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUuc2F2ZU92ZXJsYXlzKHQsIHUsIGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSdC53YWl0Rm9yKHIpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNhbGN1bGF0ZXMgb3ZlcmxheXMgYnkgcmVhZGluZyB0aGUgZG9jdW1lbnRzIGZyb20gcmVtb3RlIGRvY3VtZW50IGNhY2hlXG4gICAgICogZmlyc3QsIGFuZCBzYXZlcyB0aGVtIGFmdGVyIHRoZXkgYXJlIGNhbGN1bGF0ZWQuXG4gICAgICovICAgIHJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzRm9yRG9jdW1lbnRLZXlzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyaWVzKHQsIGUpLm5leHQoKGUgPT4gdGhpcy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5cyh0LCBlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHZpZXcgb2YgYWxsIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSBwZXJzaXN0ZW5jZSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgdG8gbWF0Y2ggZG9jdW1lbnRzIGFnYWluc3QuXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFJlYWQgdGltZSBhbmQga2V5IHRvIHN0YXJ0IHNjYW5uaW5nIGJ5IChleGNsdXNpdmUpLlxuICAgICAqLyAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4pIHtcbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHF1ZXJ5IG1hdGNoZXMgYSBzaW5nbGUgZG9jdW1lbnQgYnkgcGF0aCAocmF0aGVyIHRoYW4gYVxuICogY29sbGVjdGlvbikuXG4gKi9cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBodC5pc0RvY3VtZW50S2V5KHQucGF0aCkgJiYgbnVsbCA9PT0gdC5jb2xsZWN0aW9uR3JvdXAgJiYgMCA9PT0gdC5maWx0ZXJzLmxlbmd0aDtcbiAgICAgICAgfShlKSA/IHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdEb2N1bWVudFF1ZXJ5KHQsIGUucGF0aCkgOiBXbihlKSA/IHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uR3JvdXBRdWVyeSh0LCBlLCBuKSA6IHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uUXVlcnkodCwgZSwgbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgY29sbGVjdGlvbiBncm91cCwgcmV0dXJucyB0aGUgbmV4dCBkb2N1bWVudHMgdGhhdCBmb2xsb3cgdGhlIHByb3ZpZGVkIG9mZnNldCwgYWxvbmdcbiAgICAgKiB3aXRoIGFuIHVwZGF0ZWQgYmF0Y2ggSUQuXG4gICAgICpcbiAgICAgKiA8cD5UaGUgZG9jdW1lbnRzIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIGFyZSBvcmRlcmVkIGJ5IHJlbW90ZSB2ZXJzaW9uIGZyb20gdGhlIHByb3ZpZGVkXG4gICAgICogb2Zmc2V0LiBJZiB0aGVyZSBhcmUgbm8gbW9yZSByZW1vdGUgZG9jdW1lbnRzIGFmdGVyIHRoZSBwcm92aWRlZCBvZmZzZXQsIGRvY3VtZW50cyB3aXRoXG4gICAgICogbXV0YXRpb25zIGluIG9yZGVyIG9mIGJhdGNoIGlkIGZyb20gdGhlIG9mZnNldCBhcmUgcmV0dXJuZWQuIFNpbmNlIGFsbCBkb2N1bWVudHMgaW4gYSBiYXRjaCBhcmVcbiAgICAgKiByZXR1cm5lZCB0b2dldGhlciwgdGhlIHRvdGFsIG51bWJlciBvZiBkb2N1bWVudHMgcmV0dXJuZWQgY2FuIGV4Y2VlZCB7QGNvZGUgY291bnR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25Hcm91cCBUaGUgY29sbGVjdGlvbiBncm91cCBmb3IgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQgdG8gaW5kZXggaW50by5cbiAgICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiBkb2N1bWVudHMgdG8gcmV0dXJuXG4gICAgICogQHJldHVybiBBIExvY2FsV3JpdGVSZXN1bHQgd2l0aCB0aGUgZG9jdW1lbnRzIHRoYXQgZm9sbG93IHRoZSBwcm92aWRlZCBvZmZzZXQgYW5kIHRoZSBsYXN0IHByb2Nlc3NlZCBiYXRjaCBpZC5cbiAgICAgKi8gICAgZ2V0TmV4dERvY3VtZW50cyh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0QWxsRnJvbUNvbGxlY3Rpb25Hcm91cCh0LCBlLCBuLCBzKS5uZXh0KChpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBzIC0gaS5zaXplID4gMCA/IHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUuZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uR3JvdXAodCwgZSwgbi5sYXJnZXN0QmF0Y2hJZCwgcyAtIGkuc2l6ZSkgOiBSdC5yZXNvbHZlKGZzKCkpO1xuICAgICAgICAgICAgLy8gVGhlIGNhbGxzaXRlIHdpbGwgdXNlIHRoZSBsYXJnZXN0IGJhdGNoIElEIHRvZ2V0aGVyIHdpdGggdGhlIGxhdGVzdCByZWFkIHRpbWUgdG8gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5ldyBpbmRleCBvZmZzZXQuIFNpbmNlIHdlIG9ubHkgcHJvY2VzcyBiYXRjaCBJRHMgaWYgYWxsIHJlbW90ZSBkb2N1bWVudHMgaGF2ZSBiZWVuIHJlYWQsXG4gICAgICAgICAgICAvLyBubyBvdmVybGF5IHdpbGwgaW5jcmVhc2UgdGhlIG92ZXJhbGwgcmVhZCB0aW1lLiBUaGlzIGlzIHdoeSB3ZSBvbmx5IG5lZWQgdG8gc3BlY2lhbCBjYXNlXG4gICAgICAgICAgICAvLyB0aGUgYmF0Y2ggaWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IC0xLCB1ID0gaTtcbiAgICAgICAgICAgIHJldHVybiByLm5leHQoKGUgPT4gUnQuZm9yRWFjaChlLCAoKGUsIG4pID0+IChvIDwgbi5sYXJnZXN0QmF0Y2hJZCAmJiAobyA9IG4ubGFyZ2VzdEJhdGNoSWQpLCBcbiAgICAgICAgICAgIGkuZ2V0KGUpID8gUnQucmVzb2x2ZSgpIDogdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJ5KHQsIGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHUgPSB1Lmluc2VydChlLCB0KTtcbiAgICAgICAgICAgIH0pKSkpKS5uZXh0KCgoKSA9PiB0aGlzLnBvcHVsYXRlT3ZlcmxheXModCwgZSwgaSkpKS5uZXh0KCgoKSA9PiB0aGlzLmNvbXB1dGVWaWV3cyh0LCB1LCBlLCBncygpKSkpLm5leHQoKHQgPT4gKHtcbiAgICAgICAgICAgICAgICBiYXRjaElkOiBvLFxuICAgICAgICAgICAgICAgIGNoYW5nZXM6IGxzKHQpXG4gICAgICAgICAgICB9KSkpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdEb2N1bWVudFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgLy8gSnVzdCBkbyBhIHNpbXBsZSBkb2N1bWVudCBsb29rdXAuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50KHQsIG5ldyBodChlKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBsZXQgZSA9IGhzKCk7XG4gICAgICAgICAgICByZXR1cm4gdC5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAoZSA9IGUuaW5zZXJ0KHQua2V5LCB0KSksIGU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uR3JvdXBRdWVyeSh0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBlLmNvbGxlY3Rpb25Hcm91cDtcbiAgICAgICAgbGV0IGkgPSBocygpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hbmFnZXIuZ2V0Q29sbGVjdGlvblBhcmVudHModCwgcykubmV4dCgociA9PiBSdC5mb3JFYWNoKHIsIChyID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbihlLCBcbiAgICAgICAgICAgICAgICAvKmNvbGxlY3Rpb25Hcm91cD0qLyBudWxsLCB0LmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCB0LmZpbHRlcnMuc2xpY2UoKSwgdC5saW1pdCwgdC5saW1pdFR5cGUsIHQuc3RhcnRBdCwgdC5lbmRBdCk7XG4gICAgICAgICAgICB9KGUsIHIuY2hpbGQocykpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uUXVlcnkodCwgbywgbikubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpID0gaS5pbnNlcnQodCwgZSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaSkpKSk7XG4gICAgfVxuICAgIGdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5KHQsIGUsIG4pIHtcbiAgICAgICAgLy8gUXVlcnkgdGhlIHJlbW90ZSBkb2N1bWVudHMgYW5kIG92ZXJsYXkgbXV0YXRpb25zLlxuICAgICAgICBsZXQgcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUuZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uKHQsIGUucGF0aCwgbi5sYXJnZXN0QmF0Y2hJZCkubmV4dCgoaSA9PiAocyA9IGksIFxuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSh0LCBlLCBuLCBzKSkpKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIC8vIEFzIGRvY3VtZW50cyBtaWdodCBtYXRjaCB0aGUgcXVlcnkgYmVjYXVzZSBvZiB0aGVpciBvdmVybGF5IHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGluY2x1ZGUgZG9jdW1lbnRzIGZvciBhbGwgb3ZlcmxheXMgaW4gdGhlIGluaXRpYWwgZG9jdW1lbnQgc2V0LlxuICAgICAgICAgICAgcy5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLmdldEtleSgpO1xuICAgICAgICAgICAgICAgIG51bGwgPT09IHQuZ2V0KHMpICYmICh0ID0gdC5pbnNlcnQocywgYW4ubmV3SW52YWxpZERvY3VtZW50KHMpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgb3ZlcmxheXMgYW5kIG1hdGNoIGFnYWluc3QgdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgbGV0IG4gPSBocygpO1xuICAgICAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoKHQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gcy5nZXQodCk7XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSByICYmIEtzKHIubXV0YXRpb24sIGksIFJlLmVtcHR5KCksIGl0Lm5vdygpKSwgXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgaW5zZXJ0IHRoZSBkb2N1bWVudHMgdGhhdCBzdGlsbCBtYXRjaCB0aGUgcXVlcnlcbiAgICAgICAgICAgICAgICBucyhlLCBpKSAmJiAobiA9IG4uaW5zZXJ0KHQsIGkpKTtcbiAgICAgICAgICAgIH0pKSwgbjtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgTW8ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdCwgdGhpcy5jcyA9IG5ldyBNYXAsIHRoaXMuaHMgPSBuZXcgTWFwO1xuICAgIH1cbiAgICBnZXRCdW5kbGVNZXRhZGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKHRoaXMuY3MuZ2V0KGUpKTtcbiAgICB9XG4gICAgc2F2ZUJ1bmRsZU1ldGFkYXRhKHQsIGUpIHtcbiAgICAgICAgLyoqIERlY29kZXMgYSBCdW5kbGVNZXRhZGF0YSBwcm90byBpbnRvIGEgQnVuZGxlTWV0YWRhdGEgb2JqZWN0LiAqL1xuICAgICAgICB2YXIgbjtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3Muc2V0KGUuaWQsIHtcbiAgICAgICAgICAgIGlkOiAobiA9IGUpLmlkLFxuICAgICAgICAgICAgdmVyc2lvbjogbi52ZXJzaW9uLFxuICAgICAgICAgICAgY3JlYXRlVGltZTogTmkobi5jcmVhdGVUaW1lKVxuICAgICAgICB9KSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXROYW1lZFF1ZXJ5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUodGhpcy5ocy5nZXQoZSkpO1xuICAgIH1cbiAgICBzYXZlTmFtZWRRdWVyeSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhzLnNldChlLm5hbWUsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdC5uYW1lLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB5cih0LmJ1bmRsZWRRdWVyeSksXG4gICAgICAgICAgICAgICAgcmVhZFRpbWU6IE5pKHQucmVhZFRpbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KGUpKSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW4tbWVtb3J5IGltcGxlbWVudGF0aW9uIG9mIERvY3VtZW50T3ZlcmxheUNhY2hlLlxuICovIGNsYXNzICRvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQSBtYXAgc29ydGVkIGJ5IERvY3VtZW50S2V5LCB3aG9zZSB2YWx1ZSBpcyBhIHBhaXIgb2YgdGhlIGxhcmdlc3QgYmF0Y2ggaWRcbiAgICAgICAgLy8gZm9yIHRoZSBvdmVybGF5IGFuZCB0aGUgb3ZlcmxheSBpdHNlbGYuXG4gICAgICAgIHRoaXMub3ZlcmxheXMgPSBuZXcgcGUoaHQuY29tcGFyYXRvciksIHRoaXMubHMgPSBuZXcgTWFwO1xuICAgIH1cbiAgICBnZXRPdmVybGF5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUodGhpcy5vdmVybGF5cy5nZXQoZSkpO1xuICAgIH1cbiAgICBnZXRPdmVybGF5cyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBmcygpO1xuICAgICAgICByZXR1cm4gUnQuZm9yRWFjaChlLCAoZSA9PiB0aGlzLmdldE92ZXJsYXkodCwgZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBudWxsICE9PSB0ICYmIG4uc2V0KGUsIHQpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIHNhdmVPdmVybGF5cyh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuLmZvckVhY2goKChuLCBzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndlKHQsIGUsIHMpO1xuICAgICAgICB9KSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMubHMuZ2V0KG4pO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBzICYmIChzLmZvckVhY2goKHQgPT4gdGhpcy5vdmVybGF5cyA9IHRoaXMub3ZlcmxheXMucmVtb3ZlKHQpKSksIFxuICAgICAgICB0aGlzLmxzLmRlbGV0ZShuKSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IGZzKCksIGkgPSBlLmxlbmd0aCArIDEsIHIgPSBuZXcgaHQoZS5jaGlsZChcIlwiKSksIG8gPSB0aGlzLm92ZXJsYXlzLmdldEl0ZXJhdG9yRnJvbShyKTtcbiAgICAgICAgZm9yICg7by5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgdCA9IG8uZ2V0TmV4dCgpLnZhbHVlLCByID0gdC5nZXRLZXkoKTtcbiAgICAgICAgICAgIGlmICghZS5pc1ByZWZpeE9mKHIucGF0aCkpIGJyZWFrO1xuICAgICAgICAgICAgLy8gRG9jdW1lbnRzIGZyb20gc3ViLWNvbGxlY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICByLnBhdGgubGVuZ3RoID09PSBpICYmICh0Lmxhcmdlc3RCYXRjaElkID4gbiAmJiBzLnNldCh0LmdldEtleSgpLCB0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUocyk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgbGV0IGkgPSBuZXcgcGUoKCh0LCBlKSA9PiB0IC0gZSkpO1xuICAgICAgICBjb25zdCByID0gdGhpcy5vdmVybGF5cy5nZXRJdGVyYXRvcigpO1xuICAgICAgICBmb3IgKDtyLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gci5nZXROZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBpZiAodC5nZXRLZXkoKS5nZXRDb2xsZWN0aW9uR3JvdXAoKSA9PT0gZSAmJiB0Lmxhcmdlc3RCYXRjaElkID4gbikge1xuICAgICAgICAgICAgICAgIGxldCBlID0gaS5nZXQodC5sYXJnZXN0QmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gZSAmJiAoZSA9IGZzKCksIGkgPSBpLmluc2VydCh0Lmxhcmdlc3RCYXRjaElkLCBlKSksIGUuc2V0KHQuZ2V0S2V5KCksIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG8gPSBmcygpLCB1ID0gaS5nZXRJdGVyYXRvcigpO1xuICAgICAgICBmb3IgKDt1Lmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBpZiAodS5nZXROZXh0KCkudmFsdWUuZm9yRWFjaCgoKHQsIGUpID0+IG8uc2V0KHQsIGUpKSksIG8uc2l6ZSgpID49IHMpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKG8pO1xuICAgIH1cbiAgICB3ZSh0LCBlLCBuKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIG92ZXJsYXkgdG8gaXRzIGJhdGNoIGlkLlxuICAgICAgICBjb25zdCBzID0gdGhpcy5vdmVybGF5cy5nZXQobi5rZXkpO1xuICAgICAgICBpZiAobnVsbCAhPT0gcykge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubHMuZ2V0KHMubGFyZ2VzdEJhdGNoSWQpLmRlbGV0ZShuLmtleSk7XG4gICAgICAgICAgICB0aGlzLmxzLnNldChzLmxhcmdlc3RCYXRjaElkLCB0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm92ZXJsYXlzID0gdGhpcy5vdmVybGF5cy5pbnNlcnQobi5rZXksIG5ldyBlaShlLCBuKSk7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYXNzb2NpYXRpb24gb2YgdGhpcyBvdmVybGF5IHRvIHRoZSBnaXZlbiBsYXJnZXN0QmF0Y2hJZC5cbiAgICAgICAgbGV0IGkgPSB0aGlzLmxzLmdldChlKTtcbiAgICAgICAgdm9pZCAwID09PSBpICYmIChpID0gZ3MoKSwgdGhpcy5scy5zZXQoZSwgaSkpLCB0aGlzLmxzLnNldChlLCBpLmFkZChuLmtleSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBmcm9tIHNvbWUga2luZCBvZiBudW1iZXJlZCBlbnRpdHlcbiAqIChlaXRoZXIgYSB0YXJnZXQgSUQgb3IgYmF0Y2ggSUQpLiBBcyByZWZlcmVuY2VzIGFyZSBhZGRlZCB0byBvciByZW1vdmVkIGZyb21cbiAqIHRoZSBzZXQgY29ycmVzcG9uZGluZyBldmVudHMgYXJlIGVtaXR0ZWQgdG8gYSByZWdpc3RlcmVkIGdhcmJhZ2UgY29sbGVjdG9yLlxuICpcbiAqIEVhY2ggcmVmZXJlbmNlIGlzIHJlcHJlc2VudGVkIGJ5IGEgRG9jdW1lbnRSZWZlcmVuY2Ugb2JqZWN0LiBFYWNoIG9mIHRoZW1cbiAqIGNvbnRhaW5zIGVub3VnaCBpbmZvcm1hdGlvbiB0byB1bmlxdWVseSBpZGVudGlmeSB0aGUgcmVmZXJlbmNlLiBUaGV5IGFyZSBhbGxcbiAqIHN0b3JlZCBwcmltYXJpbHkgaW4gYSBzZXQgc29ydGVkIGJ5IGtleS4gQSBkb2N1bWVudCBpcyBjb25zaWRlcmVkIGdhcmJhZ2UgaWZcbiAqIHRoZXJlJ3Mgbm8gcmVmZXJlbmNlcyBpbiB0aGF0IHNldCAodGhpcyBjYW4gYmUgZWZmaWNpZW50bHkgY2hlY2tlZCB0aGFua3MgdG9cbiAqIHNvcnRpbmcgYnkga2V5KS5cbiAqXG4gKiBSZWZlcmVuY2VTZXQgYWxzbyBrZWVwcyBhIHNlY29uZGFyeSBzZXQgdGhhdCBjb250YWlucyByZWZlcmVuY2VzIHNvcnRlZCBieVxuICogSURzLiBUaGlzIG9uZSBpcyB1c2VkIHRvIGVmZmljaWVudGx5IGltcGxlbWVudCByZW1vdmFsIG9mIGFsbCByZWZlcmVuY2VzIGJ5XG4gKiBzb21lIHRhcmdldCBJRC5cbiAqLyBjbGFzcyBPbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkga2V5LlxuICAgICAgICB0aGlzLmZzID0gbmV3IEVlKEZvLmRzKSwgXG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkgdGFyZ2V0IGlkLlxuICAgICAgICB0aGlzLndzID0gbmV3IEVlKEZvLl9zKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIHNldCBjb250YWlucyBubyByZWZlcmVuY2VzLiAqLyAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcy5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXkgZm9yIHRoZSBnaXZlbiBJRC4gKi8gICAgYWRkUmVmZXJlbmNlKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBGbyh0LCBlKTtcbiAgICAgICAgdGhpcy5mcyA9IHRoaXMuZnMuYWRkKG4pLCB0aGlzLndzID0gdGhpcy53cy5hZGQobik7XG4gICAgfVxuICAgIC8qKiBBZGQgcmVmZXJlbmNlcyB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQga2V5cyBmb3IgdGhlIGdpdmVuIElELiAqLyAgICBncyh0LCBlKSB7XG4gICAgICAgIHQuZm9yRWFjaCgodCA9PiB0aGlzLmFkZFJlZmVyZW5jZSh0LCBlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXkgZm9yIHRoZSBnaXZlblxuICAgICAqIElELlxuICAgICAqLyAgICByZW1vdmVSZWZlcmVuY2UodCwgZSkge1xuICAgICAgICB0aGlzLnlzKG5ldyBGbyh0LCBlKSk7XG4gICAgfVxuICAgIHBzKHQsIGUpIHtcbiAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHRoaXMucmVtb3ZlUmVmZXJlbmNlKHQsIGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgcmVmZXJlbmNlcyB3aXRoIGEgZ2l2ZW4gSUQuIENhbGxzIHJlbW92ZVJlZigpIGZvciBlYWNoIGtleVxuICAgICAqIHJlbW92ZWQuXG4gICAgICovICAgIElzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBodChuZXcgdXQoW10pKSwgbiA9IG5ldyBGbyhlLCB0KSwgcyA9IG5ldyBGbyhlLCB0ICsgMSksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3MuZm9yRWFjaEluUmFuZ2UoWyBuLCBzIF0sICh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMueXModCksIGkucHVzaCh0LmtleSk7XG4gICAgICAgIH0pKSwgaTtcbiAgICB9XG4gICAgVHMoKSB7XG4gICAgICAgIHRoaXMuZnMuZm9yRWFjaCgodCA9PiB0aGlzLnlzKHQpKSk7XG4gICAgfVxuICAgIHlzKHQpIHtcbiAgICAgICAgdGhpcy5mcyA9IHRoaXMuZnMuZGVsZXRlKHQpLCB0aGlzLndzID0gdGhpcy53cy5kZWxldGUodCk7XG4gICAgfVxuICAgIEVzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBodChuZXcgdXQoW10pKSwgbiA9IG5ldyBGbyhlLCB0KSwgcyA9IG5ldyBGbyhlLCB0ICsgMSk7XG4gICAgICAgIGxldCBpID0gZ3MoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3MuZm9yRWFjaEluUmFuZ2UoWyBuLCBzIF0sICh0ID0+IHtcbiAgICAgICAgICAgIGkgPSBpLmFkZCh0LmtleSk7XG4gICAgICAgIH0pKSwgaTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkodCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IEZvKHQsIDApLCBuID0gdGhpcy5mcy5maXJzdEFmdGVyT3JFcXVhbChlKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IG4gJiYgdC5pc0VxdWFsKG4ua2V5KTtcbiAgICB9XG59XG5cbmNsYXNzIEZvIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMua2V5ID0gdCwgdGhpcy5BcyA9IGU7XG4gICAgfVxuICAgIC8qKiBDb21wYXJlIGJ5IGtleSB0aGVuIGJ5IElEICovICAgIHN0YXRpYyBkcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiBodC5jb21wYXJhdG9yKHQua2V5LCBlLmtleSkgfHwgZXQodC5BcywgZS5Bcyk7XG4gICAgfVxuICAgIC8qKiBDb21wYXJlIGJ5IElEIHRoZW4gYnkga2V5ICovICAgIHN0YXRpYyBfcyh0LCBlKSB7XG4gICAgICAgIHJldHVybiBldCh0LkFzLCBlLkFzKSB8fCBodC5jb21wYXJhdG9yKHQua2V5LCBlLmtleSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBCbyB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IHQsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBlLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzZXQgb2YgYWxsIG11dGF0aW9ucyB0aGF0IGhhdmUgYmVlbiBzZW50IGJ1dCBub3QgeWV0IGJlZW4gYXBwbGllZCB0b1xuICAgICAgICAgKiB0aGUgYmFja2VuZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IFtdLCBcbiAgICAgICAgLyoqIE5leHQgdmFsdWUgdG8gdXNlIHdoZW4gYXNzaWduaW5nIHNlcXVlbnRpYWwgSURzIHRvIGVhY2ggbXV0YXRpb24gYmF0Y2guICovXG4gICAgICAgIHRoaXMudnMgPSAxLCBcbiAgICAgICAgLyoqIEFuIG9yZGVyZWQgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIG11dGF0aW9ucyBiYXRjaCBJRHMuICovXG4gICAgICAgIHRoaXMuUnMgPSBuZXcgRWUoRm8uZHMpO1xuICAgIH1cbiAgICBjaGVja0VtcHR5KHQpIHtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUoMCA9PT0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCk7XG4gICAgfVxuICAgIGFkZE11dGF0aW9uQmF0Y2godCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gdGhpcy52cztcbiAgICAgICAgdGhpcy52cysrLCB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID4gMCAmJiB0aGlzLm11dGF0aW9uUXVldWVbdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCByID0gbmV3IFpzKGksIGUsIG4sIHMpO1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUucHVzaChyKTtcbiAgICAgICAgLy8gVHJhY2sgcmVmZXJlbmNlcyBieSBkb2N1bWVudCBrZXkgYW5kIGluZGV4IGNvbGxlY3Rpb24gcGFyZW50cy5cbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHMpIHRoaXMuUnMgPSB0aGlzLlJzLmFkZChuZXcgRm8oZS5rZXksIGkpKSwgdGhpcy5pbmRleE1hbmFnZXIuYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgodCwgZS5rZXkucGF0aC5wb3BMYXN0KCkpO1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShyKTtcbiAgICB9XG4gICAgbG9va3VwTXV0YXRpb25CYXRjaCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKHRoaXMuUHMoZSkpO1xuICAgIH1cbiAgICBnZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlICsgMSwgcyA9IHRoaXMuYnMobiksIGkgPSBzIDwgMCA/IDAgOiBzO1xuICAgICAgICAvLyBUaGUgcmVxdWVzdGVkIGJhdGNoSWQgbWF5IHN0aWxsIGJlIG91dCBvZiByYW5nZSBzbyBub3JtYWxpemUgaXQgdG8gdGhlXG4gICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSh0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID4gaSA/IHRoaXMubXV0YXRpb25RdWV1ZVtpXSA6IG51bGwpO1xuICAgIH1cbiAgICBnZXRIaWdoZXN0VW5hY2tub3dsZWRnZWRCYXRjaElkKCkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSgwID09PSB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoID8gLTEgOiB0aGlzLnZzIC0gMSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlcyh0KSB7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKHRoaXMubXV0YXRpb25RdWV1ZS5zbGljZSgpKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3IEZvKGUsIDApLCBzID0gbmV3IEZvKGUsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuUnMuZm9yRWFjaEluUmFuZ2UoWyBuLCBzIF0sICh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLlBzKHQuQXMpO1xuICAgICAgICAgICAgaS5wdXNoKGUpO1xuICAgICAgICB9KSksIFJ0LnJlc29sdmUoaSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gbmV3IEVlKGV0KTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBlID0gbmV3IEZvKHQsIDApLCBzID0gbmV3IEZvKHQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgICB0aGlzLlJzLmZvckVhY2hJblJhbmdlKFsgZSwgcyBdLCAodCA9PiB7XG4gICAgICAgICAgICAgICAgbiA9IG4uYWRkKHQuQXMpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIFJ0LnJlc29sdmUodGhpcy5WcyhuKSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ1F1ZXJ5KHQsIGUpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBxdWVyeSBwYXRoIGFzIGEgcHJlZml4IGZvciB0ZXN0aW5nIGlmIGEgZG9jdW1lbnQgbWF0Y2hlcyB0aGVcbiAgICAgICAgLy8gcXVlcnkuXG4gICAgICAgIGNvbnN0IG4gPSBlLnBhdGgsIHMgPSBuLmxlbmd0aCArIDE7XG4gICAgICAgIC8vIENvbnN0cnVjdCBhIGRvY3VtZW50IHJlZmVyZW5jZSBmb3IgYWN0dWFsbHkgc2Nhbm5pbmcgdGhlIGluZGV4LiBVbmxpa2VcbiAgICAgICAgLy8gdGhlIHByZWZpeCB0aGUgZG9jdW1lbnQga2V5IGluIHRoaXMgcmVmZXJlbmNlIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZlxuICAgICAgICAvLyBzZWdtZW50cy4gVGhlIGVtcHR5IHNlZ21lbnQgY2FuIGJlIHVzZWQgYSBzdWZmaXggb2YgdGhlIHF1ZXJ5IHBhdGhcbiAgICAgICAgLy8gYmVjYXVzZSBpdCBwcmVjZWRlcyBhbGwgb3RoZXIgc2VnbWVudHMgaW4gYW4gb3JkZXJlZCB0cmF2ZXJzYWwuXG4gICAgICAgIGxldCBpID0gbjtcbiAgICAgICAgaHQuaXNEb2N1bWVudEtleShpKSB8fCAoaSA9IGkuY2hpbGQoXCJcIikpO1xuICAgICAgICBjb25zdCByID0gbmV3IEZvKG5ldyBodChpKSwgMCk7XG4gICAgICAgIC8vIEZpbmQgdW5pcXVlIGJhdGNoSURzIHJlZmVyZW5jZWQgYnkgYWxsIGRvY3VtZW50cyBwb3RlbnRpYWxseSBtYXRjaGluZyB0aGVcbiAgICAgICAgLy8gcXVlcnkuXG4gICAgICAgICAgICAgICAgbGV0IG8gPSBuZXcgRWUoZXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5Scy5mb3JFYWNoV2hpbGUoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQua2V5LnBhdGg7XG4gICAgICAgICAgICByZXR1cm4gISFuLmlzUHJlZml4T2YoZSkgJiYgKFxuICAgICAgICAgICAgLy8gUm93cyB3aXRoIGRvY3VtZW50IGtleXMgbW9yZSB0aGFuIG9uZSBzZWdtZW50IGxvbmdlciB0aGFuIHRoZSBxdWVyeVxuICAgICAgICAgICAgLy8gcGF0aCBjYW4ndCBiZSBtYXRjaGVzLiBGb3IgZXhhbXBsZSwgYSBxdWVyeSBvbiAncm9vbXMnIGNhbid0IG1hdGNoXG4gICAgICAgICAgICAvLyB0aGUgZG9jdW1lbnQgL3Jvb21zL2FiYy9tZXNzYWdlcy94eXguXG4gICAgICAgICAgICAvLyBUT0RPKG1jZyk6IHdlJ2xsIG5lZWQgYSBkaWZmZXJlbnQgc2Nhbm5lciB3aGVuIHdlIGltcGxlbWVudFxuICAgICAgICAgICAgLy8gYW5jZXN0b3IgcXVlcmllcy5cbiAgICAgICAgICAgIGUubGVuZ3RoID09PSBzICYmIChvID0gby5hZGQodC5BcykpLCAhMCk7XG4gICAgICAgIH0pLCByKSwgUnQucmVzb2x2ZSh0aGlzLlZzKG8pKTtcbiAgICB9XG4gICAgVnModCkge1xuICAgICAgICAvLyBDb25zdHJ1Y3QgYW4gYXJyYXkgb2YgbWF0Y2hpbmcgYmF0Y2hlcywgc29ydGVkIGJ5IGJhdGNoSUQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gbXVsdGlwbGUgbXV0YXRpb25zIGFmZmVjdGluZyB0aGUgc2FtZSBkb2N1bWVudCBrZXkgYXJlIGFwcGxpZWQgaW4gb3JkZXIuXG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5Qcyh0KTtcbiAgICAgICAgICAgIG51bGwgIT09IG4gJiYgZS5wdXNoKG4pO1xuICAgICAgICB9KSksIGU7XG4gICAgfVxuICAgIHJlbW92ZU11dGF0aW9uQmF0Y2godCwgZSkge1xuICAgICAgICBGKDAgPT09IHRoaXMuU3MoZS5iYXRjaElkLCBcInJlbW92ZWRcIikpLCB0aGlzLm11dGF0aW9uUXVldWUuc2hpZnQoKTtcbiAgICAgICAgbGV0IG4gPSB0aGlzLlJzO1xuICAgICAgICByZXR1cm4gUnQuZm9yRWFjaChlLm11dGF0aW9ucywgKHMgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBGbyhzLmtleSwgZS5iYXRjaElkKTtcbiAgICAgICAgICAgIHJldHVybiBuID0gbi5kZWxldGUoaSksIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUubWFya1BvdGVudGlhbGx5T3JwaGFuZWQodCwgcy5rZXkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ScyA9IG47XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgQ24odCkge1xuICAgICAgICAvLyBOby1vcCBzaW5jZSB0aGUgbWVtb3J5IG11dGF0aW9uIHF1ZXVlIGRvZXMgbm90IG1haW50YWluIGEgc2VwYXJhdGUgY2FjaGUuXG4gICAgfVxuICAgIGNvbnRhaW5zS2V5KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBGbyhlLCAwKSwgcyA9IHRoaXMuUnMuZmlyc3RBZnRlck9yRXF1YWwobik7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKGUuaXNFcXVhbChzICYmIHMua2V5KSk7XG4gICAgfVxuICAgIHBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGgsIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZSBhbmQgYXNzZXJ0cyB0aGF0XG4gICAgICogdGhlIHJlc3VsdGluZyBpbmRleCBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCAtIFRoZSBiYXRjaElkIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gYWN0aW9uIC0gQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSBjYWxsZXIgaXMgZG9pbmcsIHBocmFzZWQgaW4gcGFzc2l2ZVxuICAgICAqIGZvcm0gKGUuZy4gXCJhY2tub3dsZWRnZWRcIiBpbiBhIHJvdXRpbmUgdGhhdCBhY2tub3dsZWRnZXMgYmF0Y2hlcykuXG4gICAgICovICAgIFNzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnModCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gYmF0Y2hJZCBpbiB0aGUgbXV0YXRpb24gcXVldWUuIFRoaXMgb3BlcmF0aW9uXG4gICAgICogaXMgTygxKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb21wdXRlZCBpbmRleCBvZiB0aGUgYmF0Y2ggd2l0aCB0aGUgZ2l2ZW4gYmF0Y2hJZCwgYmFzZWQgb25cbiAgICAgKiB0aGUgc3RhdGUgb2YgdGhlIHF1ZXVlLiBOb3RlIHRoaXMgaW5kZXggY2FuIGJlIG5lZ2F0aXZlIGlmIHRoZSByZXF1ZXN0ZWRcbiAgICAgKiBiYXRjaElkIGhhcyBhbHJlYWR5IGJlZW4gcmVtdm9lZCBmcm9tIHRoZSBxdWV1ZSBvciBwYXN0IHRoZSBlbmQgb2YgdGhlXG4gICAgICogcXVldWUgaWYgdGhlIGJhdGNoSWQgaXMgbGFyZ2VyIHRoYW4gdGhlIGxhc3QgYWRkZWQgYmF0Y2guXG4gICAgICovICAgIGJzKHQpIHtcbiAgICAgICAgaWYgKDAgPT09IHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGgpIFxuICAgICAgICAvLyBBcyBhbiBpbmRleCB0aGlzIGlzIHBhc3QgdGhlIGVuZCBvZiB0aGUgcXVldWVcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIC8vIEV4YW1pbmUgdGhlIGZyb250IG9mIHRoZSBxdWV1ZSB0byBmaWd1cmUgb3V0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlXG4gICAgICAgIC8vIGJhdGNoSWQgYW5kIGluZGV4ZXMgaW4gdGhlIGFycmF5LiBOb3RlIHRoYXQgc2luY2UgdGhlIHF1ZXVlIGlzIG9yZGVyZWRcbiAgICAgICAgLy8gYnkgYmF0Y2hJZCwgaWYgdGhlIGZpcnN0IGJhdGNoIGhhcyBhIGxhcmdlciBiYXRjaElkIHRoZW4gdGhlIHJlcXVlc3RlZFxuICAgICAgICAvLyBiYXRjaElkIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgIHJldHVybiB0IC0gdGhpcy5tdXRhdGlvblF1ZXVlWzBdLmJhdGNoSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgdmVyc2lvbiBvZiBsb29rdXBNdXRhdGlvbkJhdGNoIHRoYXQgZG9lc24ndCByZXR1cm4gYSBwcm9taXNlLCB0aGlzIG1ha2VzXG4gICAgICogb3RoZXIgZnVuY3Rpb25zIHRoYXQgdXNlcyB0aGlzIGNvZGUgZWFzaWVyIHRvIHJlYWQgYW5kIG1vcmUgZWZmaWNlbnQuXG4gICAgICovICAgIFBzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuYnModCk7XG4gICAgICAgIGlmIChlIDwgMCB8fCBlID49IHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvblF1ZXVlW2VdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIG1lbW9yeS1vbmx5IFJlbW90ZURvY3VtZW50Q2FjaGUgZm9yIEluZGV4ZWREYi4gVG8gY29uc3RydWN0LCBpbnZva2VcbiAqIGBuZXdNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlKClgLlxuICovXG5jbGFzcyBMbyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNpemVyIC0gVXNlZCB0byBhc3Nlc3MgdGhlIHNpemUgb2YgYSBkb2N1bWVudC4gRm9yIGVhZ2VyIEdDLCB0aGlzIGlzXG4gICAgICogZXhwZWN0ZWQgdG8ganVzdCByZXR1cm4gMCB0byBhdm9pZCB1bm5lY2Vzc2FyaWx5IGRvaW5nIHRoZSB3b3JrIG9mXG4gICAgICogY2FsY3VsYXRpbmcgdGhlIHNpemUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLkRzID0gdCwgXG4gICAgICAgIC8qKiBVbmRlcmx5aW5nIGNhY2hlIG9mIGRvY3VtZW50cyBhbmQgdGhlaXIgcmVhZCB0aW1lcy4gKi9cbiAgICAgICAgdGhpcy5kb2NzID0gbmV3IHBlKGh0LmNvbXBhcmF0b3IpLCBcbiAgICAgICAgLyoqIFNpemUgb2YgYWxsIGNhY2hlZCBkb2N1bWVudHMuICovXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIHNldEluZGV4TWFuYWdlcih0KSB7XG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3VwcGxpZWQgZW50cnkgdG8gdGhlIGNhY2hlIGFuZCB1cGRhdGVzIHRoZSBjYWNoZSBzaXplIGFzIGFwcHJvcHJpYXRlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovICAgIGFkZEVudHJ5KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUua2V5LCBzID0gdGhpcy5kb2NzLmdldChuKSwgaSA9IHMgPyBzLnNpemUgOiAwLCByID0gdGhpcy5EcyhlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jcyA9IHRoaXMuZG9jcy5pbnNlcnQobiwge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IGUubXV0YWJsZUNvcHkoKSxcbiAgICAgICAgICAgIHNpemU6IHJcbiAgICAgICAgfSksIHRoaXMuc2l6ZSArPSByIC0gaSwgdGhpcy5pbmRleE1hbmFnZXIuYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgodCwgbi5wYXRoLnBvcExhc3QoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBlbnRyeSBmcm9tIHRoZSBjYWNoZSBhbmQgdXBkYXRlcyB0aGUgY2FjaGUgc2l6ZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovICAgIHJlbW92ZUVudHJ5KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jcy5nZXQodCk7XG4gICAgICAgIGUgJiYgKHRoaXMuZG9jcyA9IHRoaXMuZG9jcy5yZW1vdmUodCksIHRoaXMuc2l6ZSAtPSBlLnNpemUpO1xuICAgIH1cbiAgICBnZXRFbnRyeSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRvY3MuZ2V0KGUpO1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShuID8gbi5kb2N1bWVudC5tdXRhYmxlQ29weSgpIDogYW4ubmV3SW52YWxpZERvY3VtZW50KGUpKTtcbiAgICB9XG4gICAgZ2V0RW50cmllcyh0LCBlKSB7XG4gICAgICAgIGxldCBuID0gY3MoKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy5kb2NzLmdldCh0KTtcbiAgICAgICAgICAgIG4gPSBuLmluc2VydCh0LCBlID8gZS5kb2N1bWVudC5tdXRhYmxlQ29weSgpIDogYW4ubmV3SW52YWxpZERvY3VtZW50KHQpKTtcbiAgICAgICAgfSkpLCBSdC5yZXNvbHZlKG4pO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4sIHMpIHtcbiAgICAgICAgbGV0IGkgPSBjcygpO1xuICAgICAgICAvLyBEb2N1bWVudHMgYXJlIG9yZGVyZWQgYnkga2V5LCBzbyB3ZSBjYW4gdXNlIGEgcHJlZml4IHNjYW4gdG8gbmFycm93IGRvd25cbiAgICAgICAgLy8gdGhlIGRvY3VtZW50cyB3ZSBuZWVkIHRvIG1hdGNoIHRoZSBxdWVyeSBhZ2FpbnN0LlxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlLnBhdGgsIG8gPSBuZXcgaHQoci5jaGlsZChcIlwiKSksIHUgPSB0aGlzLmRvY3MuZ2V0SXRlcmF0b3JGcm9tKG8pO1xuICAgICAgICBmb3IgKDt1Lmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCB7a2V5OiB0LCB2YWx1ZToge2RvY3VtZW50OiBvfX0gPSB1LmdldE5leHQoKTtcbiAgICAgICAgICAgIGlmICghci5pc1ByZWZpeE9mKHQucGF0aCkpIGJyZWFrO1xuICAgICAgICAgICAgdC5wYXRoLmxlbmd0aCA+IHIubGVuZ3RoICsgMSB8fCAoVHQocHQobyksIG4pIDw9IDAgfHwgKHMuaGFzKG8ua2V5KSB8fCBucyhlLCBvKSkgJiYgKGkgPSBpLmluc2VydChvLmtleSwgby5tdXRhYmxlQ29weSgpKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKGkpO1xuICAgIH1cbiAgICBnZXRBbGxGcm9tQ29sbGVjdGlvbkdyb3VwKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgLy8gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gdGhlIEluZGV4QmFja2ZpbGxlciBpZiBwZXJzaXN0ZW5jZVxuICAgICAgICAvLyBpcyBlbmFibGVkLlxuICAgICAgICBPKCk7XG4gICAgfVxuICAgIENzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFJ0LmZvckVhY2godGhpcy5kb2NzLCAodCA9PiBlKHQpKSk7XG4gICAgfVxuICAgIG5ld0NoYW5nZUJ1ZmZlcih0KSB7XG4gICAgICAgIC8vIGB0cmFja1JlbW92YWxzYCBpcyBpZ25vcmVzIHNpbmNlIHRoZSBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlIGtlZXBzXG4gICAgICAgIC8vIGEgc2VwYXJhdGUgY2hhbmdlbG9nIGFuZCBkb2VzIG5vdCBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHJlbW92YWxzLlxuICAgICAgICByZXR1cm4gbmV3IHFvKHRoaXMpO1xuICAgIH1cbiAgICBnZXRTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUodGhpcy5zaXplKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtZW1vcnktb25seSBSZW1vdGVEb2N1bWVudENhY2hlLlxuICpcbiAqIEBwYXJhbSBzaXplciAtIFVzZWQgdG8gYXNzZXNzIHRoZSBzaXplIG9mIGEgZG9jdW1lbnQuIEZvciBlYWdlciBHQywgdGhpcyBpc1xuICogZXhwZWN0ZWQgdG8ganVzdCByZXR1cm4gMCB0byBhdm9pZCB1bm5lY2Vzc2FyaWx5IGRvaW5nIHRoZSB3b3JrIG9mXG4gKiBjYWxjdWxhdGluZyB0aGUgc2l6ZS5cbiAqL1xuLyoqXG4gKiBIYW5kbGVzIHRoZSBkZXRhaWxzIG9mIGFkZGluZyBhbmQgdXBkYXRpbmcgZG9jdW1lbnRzIGluIHRoZSBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlLlxuICovXG5jbGFzcyBxbyBleHRlbmRzIHZvIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMub3MgPSB0O1xuICAgIH1cbiAgICBhcHBseUNoYW5nZXModCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZXMuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIHMuaXNWYWxpZERvY3VtZW50KCkgPyBlLnB1c2godGhpcy5vcy5hZGRFbnRyeSh0LCBzKSkgOiB0aGlzLm9zLnJlbW92ZUVudHJ5KG4pO1xuICAgICAgICB9KSksIFJ0LndhaXRGb3IoZSk7XG4gICAgfVxuICAgIGdldEZyb21DYWNoZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9zLmdldEVudHJ5KHQsIGUpO1xuICAgIH1cbiAgICBnZXRBbGxGcm9tQ2FjaGUodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcy5nZXRFbnRyaWVzKHQsIGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgVW8ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBhIHRhcmdldCB0byB0aGUgZGF0YSBhYm91dCB0aGF0IHRhcmdldFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54cyA9IG5ldyBvcygodCA9PiAkbih0KSksIE9uKSwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCByZWNlaXZlZCBzbmFwc2hvdCB2ZXJzaW9uLiAqL1xuICAgICAgICB0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBydC5taW4oKSwgXG4gICAgICAgIC8qKiBUaGUgaGlnaGVzdCBudW1iZXJlZCB0YXJnZXQgSUQgZW5jb3VudGVyZWQuICovXG4gICAgICAgIHRoaXMuaGlnaGVzdFRhcmdldElkID0gMCwgXG4gICAgICAgIC8qKiBUaGUgaGlnaGVzdCBzZXF1ZW5jZSBudW1iZXIgZW5jb3VudGVyZWQuICovXG4gICAgICAgIHRoaXMuTnMgPSAwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgb3JkZXJlZCBiaWRpcmVjdGlvbmFsIG1hcHBpbmcgYmV0d2VlbiBkb2N1bWVudHMgYW5kIHRoZSByZW1vdGUgdGFyZ2V0XG4gICAgICAgICAqIElEcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMua3MgPSBuZXcgT28sIHRoaXMudGFyZ2V0Q291bnQgPSAwLCB0aGlzLk1zID0gbG8ua24oKTtcbiAgICB9XG4gICAgZm9yRWFjaFRhcmdldCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnhzLmZvckVhY2goKCh0LCBuKSA9PiBlKG4pKSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbih0KSB7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbik7XG4gICAgfVxuICAgIGdldEhpZ2hlc3RTZXF1ZW5jZU51bWJlcih0KSB7XG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKHRoaXMuTnMpO1xuICAgIH1cbiAgICBhbGxvY2F0ZVRhcmdldElkKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaGVzdFRhcmdldElkID0gdGhpcy5Ncy5uZXh0KCksIFJ0LnJlc29sdmUodGhpcy5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgIH1cbiAgICBzZXRUYXJnZXRzTWV0YWRhdGEodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbiAmJiAodGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbiksIGUgPiB0aGlzLk5zICYmICh0aGlzLk5zID0gZSksIFxuICAgICAgICBSdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIEZuKHQpIHtcbiAgICAgICAgdGhpcy54cy5zZXQodC50YXJnZXQsIHQpO1xuICAgICAgICBjb25zdCBlID0gdC50YXJnZXRJZDtcbiAgICAgICAgZSA+IHRoaXMuaGlnaGVzdFRhcmdldElkICYmICh0aGlzLk1zID0gbmV3IGxvKGUpLCB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IGUpLCB0LnNlcXVlbmNlTnVtYmVyID4gdGhpcy5OcyAmJiAodGhpcy5OcyA9IHQuc2VxdWVuY2VOdW1iZXIpO1xuICAgIH1cbiAgICBhZGRUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRm4oZSksIHRoaXMudGFyZ2V0Q291bnQgKz0gMSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVUYXJnZXREYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRm4oZSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0RGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnhzLmRlbGV0ZShlLnRhcmdldCksIHRoaXMua3MuSXMoZS50YXJnZXRJZCksIHRoaXMudGFyZ2V0Q291bnQgLT0gMSwgXG4gICAgICAgIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0cyh0LCBlLCBuKSB7XG4gICAgICAgIGxldCBzID0gMDtcbiAgICAgICAgY29uc3QgaSA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy54cy5mb3JFYWNoKCgociwgbykgPT4ge1xuICAgICAgICAgICAgby5zZXF1ZW5jZU51bWJlciA8PSBlICYmIG51bGwgPT09IG4uZ2V0KG8udGFyZ2V0SWQpICYmICh0aGlzLnhzLmRlbGV0ZShyKSwgaS5wdXNoKHRoaXMucmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgby50YXJnZXRJZCkpLCBcbiAgICAgICAgICAgIHMrKyk7XG4gICAgICAgIH0pKSwgUnQud2FpdEZvcihpKS5uZXh0KCgoKSA9PiBzKSk7XG4gICAgfVxuICAgIGdldFRhcmdldENvdW50KHQpIHtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUodGhpcy50YXJnZXRDb3VudCk7XG4gICAgfVxuICAgIGdldFRhcmdldERhdGEodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy54cy5nZXQoZSkgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUobik7XG4gICAgfVxuICAgIGFkZE1hdGNoaW5nS2V5cyh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtzLmdzKGUsIG4pLCBSdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlbW92ZU1hdGNoaW5nS2V5cyh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMua3MucHMoZSwgbik7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlLCBpID0gW107XG4gICAgICAgIHJldHVybiBzICYmIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBpLnB1c2gocy5tYXJrUG90ZW50aWFsbHlPcnBoYW5lZCh0LCBlKSk7XG4gICAgICAgIH0pKSwgUnQud2FpdEZvcihpKTtcbiAgICB9XG4gICAgcmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5rcy5JcyhlKSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmtzLkVzKGUpO1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZShuKTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkodCwgZSkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSh0aGlzLmtzLmNvbnRhaW5zS2V5KGUpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgbWVtb3J5LWJhY2tlZCBpbnN0YW5jZSBvZiBQZXJzaXN0ZW5jZS4gRGF0YSBpcyBzdG9yZWQgb25seSBpbiBSQU0gYW5kXG4gKiBub3QgcGVyc2lzdGVkIGFjcm9zcyBzZXNzaW9ucy5cbiAqL1xuY2xhc3MgS28ge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBhY2NlcHRzIGEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2UgZGVsZWdhdGUuIFRoaXNcbiAgICAgKiBhbGxvd3MgYm90aCB0aGUgZGVsZWdhdGUgYW5kIHRoaXMgaW5zdGFuY2UgdG8gaGF2ZSBzdHJvbmcgcmVmZXJlbmNlcyB0b1xuICAgICAqIGVhY2ggb3RoZXIgd2l0aG91dCBoYXZpbmcgbnVsbGFibGUgZmllbGRzIHRoYXQgd291bGQgdGhlbiBuZWVkIHRvIGJlXG4gICAgICogY2hlY2tlZCBvciBhc3NlcnRlZCBvbiBldmVyeSBhY2Nlc3MuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICB0aGlzLiRzID0ge30sIHRoaXMub3ZlcmxheXMgPSB7fSwgdGhpcy5PcyA9IG5ldyBPdCgwKSwgdGhpcy5GcyA9ICExLCB0aGlzLkZzID0gITAsIFxuICAgICAgICB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gdCh0aGlzKSwgdGhpcy5CcyA9IG5ldyBVbyh0aGlzKTtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBuZXcgenIsIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG8odCk7XG4gICAgICAgIH0oKHQgPT4gdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZS5Mcyh0KSkpLCB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgYXIoZSksIHRoaXMucXMgPSBuZXcgTW8odGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIC8vIE5vIGR1cmFibGUgc3RhdGUgdG8gZW5zdXJlIGlzIGNsb3NlZCBvbiBzaHV0ZG93bi5cbiAgICAgICAgcmV0dXJuIHRoaXMuRnMgPSAhMSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5GcztcbiAgICB9XG4gICAgc2V0RGF0YWJhc2VEZWxldGVkTGlzdGVuZXIoKSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH1cbiAgICBzZXROZXR3b3JrRW5hYmxlZCgpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIGdldEluZGV4TWFuYWdlcih0KSB7XG4gICAgICAgIC8vIFdlIGRvIG5vdCBjdXJyZW50bHkgc3VwcG9ydCBpbmRpY2VzIGZvciBtZW1vcnkgcGVyc2lzdGVuY2UsIHNvIHdlIGNhblxuICAgICAgICAvLyByZXR1cm4gdGhlIHNhbWUgc2hhcmVkIGluc3RhbmNlIG9mIHRoZSBtZW1vcnkgaW5kZXggbWFuYWdlci5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhNYW5hZ2VyO1xuICAgIH1cbiAgICBnZXREb2N1bWVudE92ZXJsYXlDYWNoZSh0KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5vdmVybGF5c1t0LnRvS2V5KCldO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IG5ldyAkbywgdGhpcy5vdmVybGF5c1t0LnRvS2V5KCldID0gZSksIGU7XG4gICAgfVxuICAgIGdldE11dGF0aW9uUXVldWUodCwgZSkge1xuICAgICAgICBsZXQgbiA9IHRoaXMuJHNbdC50b0tleSgpXTtcbiAgICAgICAgcmV0dXJuIG4gfHwgKG4gPSBuZXcgQm8oZSwgdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZSksIHRoaXMuJHNbdC50b0tleSgpXSA9IG4pLCBuO1xuICAgIH1cbiAgICBnZXRUYXJnZXRDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuQnM7XG4gICAgfVxuICAgIGdldFJlbW90ZURvY3VtZW50Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGU7XG4gICAgfVxuICAgIGdldEJ1bmRsZUNhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xcztcbiAgICB9XG4gICAgcnVuVHJhbnNhY3Rpb24odCwgZSwgbikge1xuICAgICAgICBOKFwiTWVtb3J5UGVyc2lzdGVuY2VcIiwgXCJTdGFydGluZyB0cmFuc2FjdGlvbjpcIiwgdCk7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgR28odGhpcy5Pcy5uZXh0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZS5VcygpLCBuKHMpLm5leHQoKHQgPT4gdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZS5LcyhzKS5uZXh0KCgoKSA9PiB0KSkpKS50b1Byb21pc2UoKS50aGVuKCh0ID0+IChzLnJhaXNlT25Db21taXR0ZWRFdmVudCgpLCBcbiAgICAgICAgdCkpKTtcbiAgICB9XG4gICAgR3ModCwgZSkge1xuICAgICAgICByZXR1cm4gUnQub3IoT2JqZWN0LnZhbHVlcyh0aGlzLiRzKS5tYXAoKG4gPT4gKCkgPT4gbi5jb250YWluc0tleSh0LCBlKSkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogTWVtb3J5IHBlcnNpc3RlbmNlIGlzIG5vdCBhY3R1YWxseSB0cmFuc2FjdGlvbmFsLCBidXQgZnV0dXJlIGltcGxlbWVudGF0aW9uc1xuICogbWF5IGhhdmUgdHJhbnNhY3Rpb24tc2NvcGVkIHN0YXRlLlxuICovIGNsYXNzIEdvIGV4dGVuZHMgQXQge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5jdXJyZW50U2VxdWVuY2VOdW1iZXIgPSB0O1xuICAgIH1cbn1cblxuY2xhc3MgUW8ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IHQsIFxuICAgICAgICAvKiogVHJhY2tzIGFsbCBkb2N1bWVudHMgdGhhdCBhcmUgYWN0aXZlIGluIFF1ZXJ5IHZpZXdzLiAqL1xuICAgICAgICB0aGlzLlFzID0gbmV3IE9vLCBcbiAgICAgICAgLyoqIFRoZSBsaXN0IG9mIGRvY3VtZW50cyB0aGF0IGFyZSBwb3RlbnRpYWxseSBHQ2VkIGFmdGVyIGVhY2ggdHJhbnNhY3Rpb24uICovXG4gICAgICAgIHRoaXMuanMgPSBudWxsO1xuICAgIH1cbiAgICBzdGF0aWMgenModCkge1xuICAgICAgICByZXR1cm4gbmV3IFFvKHQpO1xuICAgIH1cbiAgICBnZXQgV3MoKSB7XG4gICAgICAgIGlmICh0aGlzLmpzKSByZXR1cm4gdGhpcy5qcztcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbiAgICBhZGRSZWZlcmVuY2UodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5Rcy5hZGRSZWZlcmVuY2UobiwgZSksIHRoaXMuV3MuZGVsZXRlKG4udG9TdHJpbmcoKSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUXMucmVtb3ZlUmVmZXJlbmNlKG4sIGUpLCB0aGlzLldzLmFkZChuLnRvU3RyaW5nKCkpLCBSdC5yZXNvbHZlKCk7XG4gICAgfVxuICAgIG1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuV3MuYWRkKGUudG9TdHJpbmcoKSksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5Rcy5JcyhlLnRhcmdldElkKS5mb3JFYWNoKCh0ID0+IHRoaXMuV3MuYWRkKHQudG9TdHJpbmcoKSkpKTtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKTtcbiAgICAgICAgcmV0dXJuIG4uZ2V0TWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgZS50YXJnZXRJZCkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB0LmZvckVhY2goKHQgPT4gdGhpcy5Xcy5hZGQodC50b1N0cmluZygpKSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbi5yZW1vdmVUYXJnZXREYXRhKHQsIGUpKSk7XG4gICAgfVxuICAgIFVzKCkge1xuICAgICAgICB0aGlzLmpzID0gbmV3IFNldDtcbiAgICB9XG4gICAgS3ModCkge1xuICAgICAgICAvLyBSZW1vdmUgbmV3bHkgb3JwaGFuZWQgZG9jdW1lbnRzLlxuICAgICAgICBjb25zdCBlID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCkubmV3Q2hhbmdlQnVmZmVyKCk7XG4gICAgICAgIHJldHVybiBSdC5mb3JFYWNoKHRoaXMuV3MsIChuID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBodC5mcm9tUGF0aChuKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhzKHQsIHMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHQgfHwgZS5yZW1vdmVFbnRyeShzLCBydC5taW4oKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiAodGhpcy5qcyA9IG51bGwsIGUuYXBwbHkodCkpKSk7XG4gICAgfVxuICAgIHVwZGF0ZUxpbWJvRG9jdW1lbnQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5Icyh0LCBlKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIHQgPyB0aGlzLldzLmRlbGV0ZShlLnRvU3RyaW5nKCkpIDogdGhpcy5Xcy5hZGQoZS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBMcyh0KSB7XG4gICAgICAgIC8vIEZvciBlYWdlciBHQywgd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgZG9jdW1lbnQgc2l6ZSwgdGhlcmUgYXJlIG5vIHNpemUgdGhyZXNob2xkcy5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIEhzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFJ0Lm9yKFsgKCkgPT4gUnQucmVzb2x2ZSh0aGlzLlFzLmNvbnRhaW5zS2V5KGUpKSwgKCkgPT4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLmNvbnRhaW5zS2V5KHQsIGUpLCAoKSA9PiB0aGlzLnBlcnNpc3RlbmNlLkdzKHQsIGUpIF0pO1xuICAgIH1cbn1cblxuY2xhc3Mgam8ge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IHQsIHRoaXMuSnMgPSBuZXcgb3MoKHQgPT4gcXQodC5wYXRoKSksICgodCwgZSkgPT4gdC5pc0VxdWFsKGUpKSksIFxuICAgICAgICB0aGlzLmdhcmJhZ2VDb2xsZWN0b3IgPSBUbyh0aGlzLCBlKTtcbiAgICB9XG4gICAgc3RhdGljIHpzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBqbyh0LCBlKTtcbiAgICB9XG4gICAgLy8gTm8tb3BzLCBwcmVzZW50IHNvIG1lbW9yeSBwZXJzaXN0ZW5jZSBkb2Vzbid0IGhhdmUgdG8gY2FyZSB3aGljaCBkZWxlZ2F0ZVxuICAgIC8vIGl0IGhhcy5cbiAgICBVcygpIHt9XG4gICAgS3ModCkge1xuICAgICAgICByZXR1cm4gUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBmb3JFYWNoVGFyZ2V0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKS5mb3JFYWNoVGFyZ2V0KHQsIGUpO1xuICAgIH1cbiAgICB6bih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLkpuKHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLmdldFRhcmdldENvdW50KHQpLm5leHQoKHQgPT4gZS5uZXh0KChlID0+IHQgKyBlKSkpKTtcbiAgICB9XG4gICAgSm4odCkge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLlduKHQsICh0ID0+IHtcbiAgICAgICAgICAgIGUrKztcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGUpKTtcbiAgICB9XG4gICAgV24odCwgZSkge1xuICAgICAgICByZXR1cm4gUnQuZm9yRWFjaCh0aGlzLkpzLCAoKG4sIHMpID0+IHRoaXMuWG4odCwgbiwgcykubmV4dCgodCA9PiB0ID8gUnQucmVzb2x2ZSgpIDogZShzKSkpKSk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldHModCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLnJlbW92ZVRhcmdldHModCwgZSwgbik7XG4gICAgfVxuICAgIHJlbW92ZU9ycGhhbmVkRG9jdW1lbnRzKHQsIGUpIHtcbiAgICAgICAgbGV0IG4gPSAwO1xuICAgICAgICBjb25zdCBzID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCksIGkgPSBzLm5ld0NoYW5nZUJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gcy5Dcyh0LCAocyA9PiB0aGlzLlhuKHQsIHMsIGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgdCB8fCAobisrLCBpLnJlbW92ZUVudHJ5KHMsIHJ0Lm1pbigpKSk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IGkuYXBwbHkodCkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIG1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSnMuc2V0KGUsIHQuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZS53aXRoU2VxdWVuY2VOdW1iZXIodC5jdXJyZW50U2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLnVwZGF0ZVRhcmdldERhdGEodCwgbik7XG4gICAgfVxuICAgIGFkZFJlZmVyZW5jZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkpzLnNldChuLCB0LmN1cnJlbnRTZXF1ZW5jZU51bWJlciksIFJ0LnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSnMuc2V0KG4sIHQuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVMaW1ib0RvY3VtZW50KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSnMuc2V0KGUsIHQuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgUnQucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBMcyh0KSB7XG4gICAgICAgIGxldCBlID0gdC5rZXkudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0LmlzRm91bmREb2N1bWVudCgpICYmIChlICs9IHplKHQuZGF0YS52YWx1ZSkpLCBlO1xuICAgIH1cbiAgICBYbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBSdC5vcihbICgpID0+IHRoaXMucGVyc2lzdGVuY2UuR3ModCwgZSksICgpID0+IHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKS5jb250YWluc0tleSh0LCBlKSwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuSnMuZ2V0KGUpO1xuICAgICAgICAgICAgcmV0dXJuIFJ0LnJlc29sdmUodm9pZCAwICE9PSB0ICYmIHQgPiBuKTtcbiAgICAgICAgfSBdKTtcbiAgICB9XG4gICAgZ2V0Q2FjaGVTaXplKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpLmdldFNpemUodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFBlcmZvcm1zIGRhdGFiYXNlIGNyZWF0aW9uIGFuZCBzY2hlbWEgdXBncmFkZXMuICovIGNsYXNzIHpvIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGRhdGFiYXNlIGNyZWF0aW9uIGFuZCBzY2hlbWEgdXBncmFkZXMuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgaW4gcHJvZHVjdGlvbiwgdGhpcyBtZXRob2QgaXMgb25seSBldmVyIHVzZWQgdG8gdXBncmFkZSB0aGUgc2NoZW1hXG4gICAgICogdG8gU0NIRU1BX1ZFUlNJT04uIERpZmZlcmVudCB2YWx1ZXMgb2YgdG9WZXJzaW9uIGFyZSBvbmx5IHVzZWQgZm9yIHRlc3RpbmdcbiAgICAgKiBhbmQgbG9jYWwgZmVhdHVyZSBkZXZlbG9wbWVudC5cbiAgICAgKi8gICAgTyh0LCBlLCBuLCBzKSB7XG4gICAgICAgIGNvbnN0IGkgPSBuZXcgUHQoXCJjcmVhdGVPclVwZ3JhZGVcIiwgZSk7XG4gICAgICAgIG4gPCAxICYmIHMgPj0gMSAmJiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm93bmVyXCIpO1xuICAgICAgICB9KHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25RdWV1ZXNcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IFwidXNlcklkXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm11dGF0aW9uc1wiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJiYXRjaElkXCIsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwidXNlck11dGF0aW9uc0luZGV4XCIsIFF0LCB7XG4gICAgICAgICAgICAgICAgdW5pcXVlOiAhMFxuICAgICAgICAgICAgfSksIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJkb2N1bWVudE11dGF0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFVwZ3JhZGUgZnVuY3Rpb24gdG8gbWlncmF0ZSB0aGUgJ211dGF0aW9ucycgc3RvcmUgZnJvbSBWMSB0byBWMy4gTG9hZHNcbiAqIGFuZCByZXdyaXRlcyBhbGwgZGF0YS5cbiAqLyAodCksIFdvKHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpO1xuICAgICAgICB9KHQpKTtcbiAgICAgICAgLy8gTWlncmF0aW9uIDIgdG8gcG9wdWxhdGUgdGhlIHRhcmdldEdsb2JhbCBvYmplY3Qgbm8gbG9uZ2VyIG5lZWRlZCBzaW5jZVxuICAgICAgICAvLyBtaWdyYXRpb24gMyB1bmNvbmRpdGlvbmFsbHkgY2xlYXJzIGl0LlxuICAgICAgICAgICAgICAgIGxldCByID0gUnQucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gbiA8IDMgJiYgcyA+PSAzICYmIChcbiAgICAgICAgLy8gQnJhbmQgbmV3IGNsaWVudHMgZG9uJ3QgbmVlZCB0byBkcm9wIGFuZCByZWNyZWF0ZS0tb25seSBjbGllbnRzIHRoYXRcbiAgICAgICAgLy8gcG90ZW50aWFsbHkgaGF2ZSBjb3JydXB0IGRhdGEuXG4gICAgICAgIDAgIT09IG4gJiYgKCFmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0RG9jdW1lbnRzXCIpLCB0LmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0c1wiKSwgdC5kZWxldGVPYmplY3RTdG9yZShcInRhcmdldEdsb2JhbFwiKTtcbiAgICAgICAgfSh0KSwgV28odCkpLCByID0gci5uZXh0KCgoKSA9PiBcbiAgICAgICAgLyoqXG4gKiBDcmVhdGVzIHRoZSB0YXJnZXQgZ2xvYmFsIHNpbmdsZXRvbiByb3cuXG4gKlxuICogQHBhcmFtIHR4biAtIFRoZSB2ZXJzaW9uIHVwZ3JhZGUgdHJhbnNhY3Rpb24gZm9yIGluZGV4ZWRkYlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnN0b3JlKFwidGFyZ2V0R2xvYmFsXCIpLCBuID0ge1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RUYXJnZXRJZDogMCxcbiAgICAgICAgICAgICAgICBoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXI6IDAsXG4gICAgICAgICAgICAgICAgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbjogcnQubWluKCkudG9UaW1lc3RhbXAoKSxcbiAgICAgICAgICAgICAgICB0YXJnZXRDb3VudDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBlLnB1dChcInRhcmdldEdsb2JhbEtleVwiLCBuKTtcbiAgICAgICAgfShpKSkpKSwgbiA8IDQgJiYgcyA+PSA0ICYmICgwICE9PSBuICYmIChcbiAgICAgICAgLy8gU2NoZW1hIHZlcnNpb24gMyB1c2VzIGF1dG8tZ2VuZXJhdGVkIGtleXMgdG8gZ2VuZXJhdGUgZ2xvYmFsbHkgdW5pcXVlXG4gICAgICAgIC8vIG11dGF0aW9uIGJhdGNoIElEcyAodGhpcyB3YXMgcHJldmlvdXNseSBlbnN1cmVkIGludGVybmFsbHkgYnkgdGhlXG4gICAgICAgIC8vIGNsaWVudCkuIFRvIG1pZ3JhdGUgdG8gdGhlIG5ldyBzY2hlbWEsIHdlIGhhdmUgdG8gcmVhZCBhbGwgbXV0YXRpb25zXG4gICAgICAgIC8vIGFuZCB3cml0ZSB0aGVtIGJhY2sgb3V0LiBXZSBwcmVzZXJ2ZSB0aGUgZXhpc3RpbmcgYmF0Y2ggSURzIHRvIGd1YXJhbnRlZVxuICAgICAgICAvLyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIG9iamVjdCBzdG9yZXMuIEFueSBmdXJ0aGVyIG11dGF0aW9uIGJhdGNoIElEcyB3aWxsXG4gICAgICAgIC8vIGJlIGF1dG8tZ2VuZXJhdGVkLlxuICAgICAgICByID0gci5uZXh0KCgoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zdG9yZShcIm11dGF0aW9uc1wiKS5qKCkubmV4dCgobiA9PiB7XG4gICAgICAgICAgICAgICAgdC5kZWxldGVPYmplY3RTdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25zXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJiYXRjaElkXCIsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9JbmNyZW1lbnQ6ICEwXG4gICAgICAgICAgICAgICAgfSkuY3JlYXRlSW5kZXgoXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgUXQsIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLnN0b3JlKFwibXV0YXRpb25zXCIpLCBpID0gbi5tYXAoKHQgPT4gcy5wdXQodCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUnQud2FpdEZvcihpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSh0LCBpKSkpKSwgciA9IHIubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwiY2xpZW50TWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBcImNsaWVudElkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0odCk7XG4gICAgICAgIH0pKSksIG4gPCA1ICYmIHMgPj0gNSAmJiAociA9IHIubmV4dCgoKCkgPT4gdGhpcy5ZcyhpKSkpKSwgbiA8IDYgJiYgcyA+PSA2ICYmIChyID0gci5uZXh0KCgoKSA9PiAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50R2xvYmFsXCIpO1xuICAgICAgICB9KHQpLCB0aGlzLlhzKGkpKSkpKSwgbiA8IDcgJiYgcyA+PSA3ICYmIChyID0gci5uZXh0KCgoKSA9PiB0aGlzLlpzKGkpKSkpLCBuIDwgOCAmJiBzID49IDggJiYgKHIgPSByLm5leHQoKCgpID0+IHRoaXMudGkodCwgaSkpKSksIFxuICAgICAgICBuIDwgOSAmJiBzID49IDkgJiYgKHIgPSByLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIE11bHRpLVRhYiB1c2VkIHRvIG1hbmFnZSBpdHMgb3duIGNoYW5nZWxvZywgYnV0IHRoaXMgaGFzIGJlZW4gbW92ZWRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBEYlJlbW90ZURvY3VtZW50IG9iamVjdCBzdG9yZSBpdHNlbGYuIFNpbmNlIHRoZSBwcmV2aW91cyBjaGFuZ2VcbiAgICAgICAgICAgIC8vIGxvZyBvbmx5IGNvbnRhaW5lZCB0cmFuc2llbnQgZGF0YSwgd2UgY2FuIGRyb3AgaXRzIG9iamVjdCBzdG9yZS5cbiAgICAgICAgICAgICFmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKFwicmVtb3RlRG9jdW1lbnRDaGFuZ2VzXCIpICYmIHQuZGVsZXRlT2JqZWN0U3RvcmUoXCJyZW1vdGVEb2N1bWVudENoYW5nZXNcIik7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICAgICAgLy8gTm90ZTogU2NoZW1hIHZlcnNpb24gOSB1c2VkIHRvIGNyZWF0ZSBhIHJlYWQgdGltZSBpbmRleCBmb3IgdGhlXG4gICAgICAgICAgICAvLyBSZW1vdGVEb2N1bWVudENhY2hlLiBUaGlzIGlzIG5vdyBkb25lIHdpdGggc2NoZW1hIHZlcnNpb24gMTMuXG4gICAgICAgICAgICAgICAgfSkpKSwgbiA8IDEwICYmIHMgPj0gMTAgJiYgKHIgPSByLm5leHQoKCgpID0+IHRoaXMuZWkoaSkpKSksIG4gPCAxMSAmJiBzID49IDExICYmIChyID0gci5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAhZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJidW5kbGVzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJidW5kbGVJZFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KHQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcIm5hbWVkUXVlcmllc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleVBhdGg6IFwibmFtZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICB9KSkpLCBuIDwgMTIgJiYgcyA+PSAxMiAmJiAociA9IHIubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jcmVhdGVPYmplY3RTdG9yZShcImRvY3VtZW50T3ZlcmxheXNcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBvZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uUGF0aE92ZXJsYXlJbmRleFwiLCB1ZSwge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICAgICAgfSksIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uR3JvdXBPdmVybGF5SW5kZXhcIiwgY2UsIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgfSkpKSwgbiA8IDEzICYmIHMgPj0gMTMgJiYgKHIgPSByLm5leHQoKCgpID0+IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNyZWF0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRzVjE0XCIsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBIdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlLmNyZWF0ZUluZGV4KFwiZG9jdW1lbnRLZXlJbmRleFwiLCBKdCksIGUuY3JlYXRlSW5kZXgoXCJjb2xsZWN0aW9uR3JvdXBJbmRleFwiLCBZdCk7XG4gICAgICAgIH0odCkpKS5uZXh0KCgoKSA9PiB0aGlzLm5pKHQsIGkpKSkubmV4dCgoKCkgPT4gdC5kZWxldGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50c1wiKSkpKSwgXG4gICAgICAgIG4gPCAxNCAmJiBzID49IDE0ICYmIChyID0gci5uZXh0KCgoKSA9PiB0aGlzLnNpKHQsIGkpKSkpLCBuIDwgMTUgJiYgcyA+PSAxNSAmJiAociA9IHIubmV4dCgoKCkgPT4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4Q29uZmlndXJhdGlvblwiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJpbmRleElkXCIsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4U3RhdGVcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IG5lXG4gICAgICAgICAgICB9KS5jcmVhdGVJbmRleChcInNlcXVlbmNlTnVtYmVySW5kZXhcIiwgc2UsIHtcbiAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJpbmRleEVudHJpZXNcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IGllXG4gICAgICAgICAgICB9KS5jcmVhdGVJbmRleChcImRvY3VtZW50S2V5SW5kZXhcIiwgcmUsIHtcbiAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSh0KSkpKSwgcjtcbiAgICB9XG4gICAgWHModCkge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpLlgoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBlICs9IHJvKG4pO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHtcbiAgICAgICAgICAgICAgICBieXRlU2l6ZTogZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIikucHV0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIiwgbik7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgWXModCkge1xuICAgICAgICBjb25zdCBlID0gdC5zdG9yZShcIm11dGF0aW9uUXVldWVzXCIpLCBuID0gdC5zdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgcmV0dXJuIGUuaigpLm5leHQoKGUgPT4gUnQuZm9yRWFjaChlLCAoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlLnVzZXJJZCwgLTEgXSwgWyBlLnVzZXJJZCwgZS5sYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCBdKTtcbiAgICAgICAgICAgIHJldHVybiBuLmooXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgcykubmV4dCgobiA9PiBSdC5mb3JFYWNoKG4sIChuID0+IHtcbiAgICAgICAgICAgICAgICBGKG4udXNlcklkID09PSBlLnVzZXJJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IF9yKHRoaXMuc2VyaWFsaXplciwgbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlvKHQsIGUudXNlcklkLCBzKS5uZXh0KCgoKSA9PiB7fSkpO1xuICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgIH0pKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgZXZlcnkgZG9jdW1lbnQgaW4gdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSBoYXMgYSBjb3JyZXNwb25kaW5nIHNlbnRpbmVsIHJvd1xuICAgICAqIHdpdGggYSBzZXF1ZW5jZSBudW1iZXIuIE1pc3Npbmcgcm93cyBhcmUgZ2l2ZW4gdGhlIG1vc3QgcmVjZW50bHkgdXNlZCBzZXF1ZW5jZSBudW1iZXIuXG4gICAgICovICAgIFpzKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuc3RvcmUoXCJ0YXJnZXREb2N1bWVudHNcIiksIG4gPSB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzXCIpO1xuICAgICAgICByZXR1cm4gdC5zdG9yZShcInRhcmdldEdsb2JhbFwiKS5nZXQoXCJ0YXJnZXRHbG9iYWxLZXlcIikubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gW107XG4gICAgICAgICAgICByZXR1cm4gbi5YKCgobiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgdXQobiksIG8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDAsIHF0KHQpIF07XG4gICAgICAgICAgICAgICAgfShyKTtcbiAgICAgICAgICAgICAgICBzLnB1c2goZS5nZXQobykubmV4dCgobiA9PiBuID8gUnQucmVzb2x2ZSgpIDogKG4gPT4gZS5wdXQoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogMCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcXQobiksXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyOiB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlclxuICAgICAgICAgICAgICAgIH0pKShyKSkpKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiBSdC53YWl0Rm9yKHMpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdGkodCwgZSkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGluZGV4LlxuICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwiY29sbGVjdGlvblBhcmVudHNcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogZWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG4gPSBlLnN0b3JlKFwiY29sbGVjdGlvblBhcmVudHNcIiksIHMgPSBuZXcgV3IsIGkgPSB0ID0+IHtcbiAgICAgICAgICAgIGlmIChzLmFkZCh0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lmxhc3RTZWdtZW50KCksIHMgPSB0LnBvcExhc3QoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5wdXQoe1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogcXQocylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gSGVscGVyIHRvIGFkZCBhbiBpbmRleCBlbnRyeSBpZmYgd2UgaGF2ZW4ndCBhbHJlYWR5IHdyaXR0ZW4gaXQuXG4gICAgICAgICAgICAgICAgLy8gSW5kZXggZXhpc3RpbmcgcmVtb3RlIGRvY3VtZW50cy5cbiAgICAgICAgcmV0dXJuIGUuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNcIikuWCh7XG4gICAgICAgICAgICBZOiAhMFxuICAgICAgICB9LCAoKHQsIGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgdXQodCk7XG4gICAgICAgICAgICByZXR1cm4gaShuLnBvcExhc3QoKSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBlLnN0b3JlKFwiZG9jdW1lbnRNdXRhdGlvbnNcIikuWCh7XG4gICAgICAgICAgICBZOiAhMFxuICAgICAgICB9LCAoKFt0LCBlLCBuXSwgcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IEd0KGUpO1xuICAgICAgICAgICAgcmV0dXJuIGkoci5wb3BMYXN0KCkpO1xuICAgICAgICB9KSkpKTtcbiAgICB9XG4gICAgZWkodCkge1xuICAgICAgICBjb25zdCBlID0gdC5zdG9yZShcInRhcmdldHNcIik7XG4gICAgICAgIHJldHVybiBlLlgoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gbXIobiksIGkgPSBncih0aGlzLnNlcmlhbGl6ZXIsIHMpO1xuICAgICAgICAgICAgcmV0dXJuIGUucHV0KGkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIG5pKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGUuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNcIiksIHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uWCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzVjE0XCIpLCByID0gKG8gPSBuLCBvLmRvY3VtZW50ID8gbmV3IGh0KHV0LmZyb21TdHJpbmcoby5kb2N1bWVudC5uYW1lKS5wb3BGaXJzdCg1KSkgOiBvLm5vRG9jdW1lbnQgPyBodC5mcm9tU2VnbWVudHMoby5ub0RvY3VtZW50LnBhdGgpIDogby51bmtub3duRG9jdW1lbnQgPyBodC5mcm9tU2VnbWVudHMoby51bmtub3duRG9jdW1lbnQucGF0aCkgOiBPKCkpLnBhdGgudG9BcnJheSgpO1xuICAgICAgICAgICAgdmFyIG87XG4gICAgICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAgICAgICAgICAgIGNvbnN0IHUgPSB7XG4gICAgICAgICAgICAgICAgcHJlZml4UGF0aDogci5zbGljZSgwLCByLmxlbmd0aCAtIDIpLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Hcm91cDogcltyLmxlbmd0aCAtIDJdLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50SWQ6IHJbci5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICByZWFkVGltZTogbi5yZWFkVGltZSB8fCBbIDAsIDAgXSxcbiAgICAgICAgICAgICAgICB1bmtub3duRG9jdW1lbnQ6IG4udW5rbm93bkRvY3VtZW50LFxuICAgICAgICAgICAgICAgIG5vRG9jdW1lbnQ6IG4ubm9Eb2N1bWVudCxcbiAgICAgICAgICAgICAgICBkb2N1bWVudDogbi5kb2N1bWVudCxcbiAgICAgICAgICAgICAgICBoYXNDb21taXR0ZWRNdXRhdGlvbnM6ICEhbi5oYXNDb21taXR0ZWRNdXRhdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzLnB1c2goaS5wdXQodSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gUnQud2FpdEZvcihzKSkpO1xuICAgIH1cbiAgICBzaSh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnN0b3JlKFwibXV0YXRpb25zXCIpLCBzID0gUG8odGhpcy5zZXJpYWxpemVyKSwgaSA9IG5ldyBLbyhRby56cywgdGhpcy5zZXJpYWxpemVyLmZlKTtcbiAgICAgICAgcmV0dXJuIG4uaigpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBNYXA7XG4gICAgICAgICAgICByZXR1cm4gdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICBsZXQgcyA9IG51bGwgIT09IChlID0gbi5nZXQodC51c2VySWQpKSAmJiB2b2lkIDAgIT09IGUgPyBlIDogZ3MoKTtcbiAgICAgICAgICAgICAgICBfcih0aGlzLnNlcmlhbGl6ZXIsIHQpLmtleXMoKS5mb3JFYWNoKCh0ID0+IHMgPSBzLmFkZCh0KSkpLCBuLnNldCh0LnVzZXJJZCwgcyk7XG4gICAgICAgICAgICB9KSksIFJ0LmZvckVhY2gobiwgKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBWKG4pLCBvID0gUnIuZGUodGhpcy5zZXJpYWxpemVyLCByKSwgdSA9IGkuZ2V0SW5kZXhNYW5hZ2VyKHIpLCBjID0gb28uZGUociwgdGhpcy5zZXJpYWxpemVyLCB1LCBpLnJlZmVyZW5jZURlbGVnYXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGtvKHMsIGMsIG8sIHUpLnJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzRm9yRG9jdW1lbnRLZXlzKG5ldyB3ZShlLCBPdC5jdCksIHQpLm5leHQoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gV28odCkge1xuICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoXCJ0YXJnZXREb2N1bWVudHNcIiwge1xuICAgICAgICBrZXlQYXRoOiBadFxuICAgIH0pLmNyZWF0ZUluZGV4KFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIiwgdGUsIHtcbiAgICAgICAgdW5pcXVlOiAhMFxuICAgIH0pO1xuICAgIC8vIE5PVEU6IFRoaXMgaXMgdW5pcXVlIG9ubHkgYmVjYXVzZSB0aGUgVGFyZ2V0SWQgaXMgdGhlIHN1ZmZpeC5cbiAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFwidGFyZ2V0c1wiLCB7XG4gICAgICAgIGtleVBhdGg6IFwidGFyZ2V0SWRcIlxuICAgIH0pLmNyZWF0ZUluZGV4KFwicXVlcnlUYXJnZXRzSW5kZXhcIiwgWHQsIHtcbiAgICAgICAgdW5pcXVlOiAhMFxuICAgIH0pLCB0LmNyZWF0ZU9iamVjdFN0b3JlKFwidGFyZ2V0R2xvYmFsXCIpO1xufVxuXG5jb25zdCBIbyA9IFwiRmFpbGVkIHRvIG9idGFpbiBleGNsdXNpdmUgYWNjZXNzIHRvIHRoZSBwZXJzaXN0ZW5jZSBsYXllci4gVG8gYWxsb3cgc2hhcmVkIGFjY2VzcywgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbiBoYXMgdG8gYmUgZW5hYmxlZCBpbiBhbGwgdGFicy4gSWYgeW91IGFyZSB1c2luZyBgZXhwZXJpbWVudGFsRm9yY2VPd25pbmdUYWI6dHJ1ZWAsIG1ha2Ugc3VyZSB0aGF0IG9ubHkgb25lIHRhYiBoYXMgcGVyc2lzdGVuY2UgZW5hYmxlZCBhdCBhbnkgZ2l2ZW4gdGltZS5cIjtcblxuLyoqXG4gKiBPbGRlc3QgYWNjZXB0YWJsZSBhZ2UgaW4gbWlsbGlzZWNvbmRzIGZvciBjbGllbnQgbWV0YWRhdGEgYmVmb3JlIHRoZSBjbGllbnRcbiAqIGlzIGNvbnNpZGVyZWQgaW5hY3RpdmUgYW5kIGl0cyBhc3NvY2lhdGVkIGRhdGEgaXMgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKi9cbi8qKlxuICogQW4gSW5kZXhlZERCLWJhY2tlZCBpbnN0YW5jZSBvZiBQZXJzaXN0ZW5jZS4gRGF0YSBpcyBzdG9yZWQgcGVyc2lzdGVudGx5XG4gKiBhY3Jvc3Mgc2Vzc2lvbnMuXG4gKlxuICogT24gV2ViIG9ubHksIHRoZSBGaXJlc3RvcmUgU0RLcyBzdXBwb3J0IHNoYXJlZCBhY2Nlc3MgdG8gaXRzIHBlcnNpc3RlbmNlXG4gKiBsYXllci4gVGhpcyBhbGxvd3MgbXVsdGlwbGUgYnJvd3NlciB0YWJzIHRvIHJlYWQgYW5kIHdyaXRlIHRvIEluZGV4ZWREYiBhbmRcbiAqIHRvIHN5bmNocm9uaXplIHN0YXRlIGV2ZW4gd2l0aG91dCBuZXR3b3JrIGNvbm5lY3Rpdml0eS4gU2hhcmVkIGFjY2VzcyBpc1xuICogY3VycmVudGx5IG9wdGlvbmFsIGFuZCBub3QgZW5hYmxlZCB1bmxlc3MgYWxsIGNsaWVudHMgaW52b2tlXG4gKiBgZW5hYmxlUGVyc2lzdGVuY2UoKWAgd2l0aCBge3N5bmNocm9uaXplVGFiczp0cnVlfWAuXG4gKlxuICogSW4gbXVsdGktdGFiIG1vZGUsIGlmIG11bHRpcGxlIGNsaWVudHMgYXJlIGFjdGl2ZSBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgU0RLXG4gKiB3aWxsIGRlc2lnbmF0ZSBvbmUgY2xpZW50IGFzIHRoZSDigJxwcmltYXJ5IGNsaWVudOKAnS4gQW4gZWZmb3J0IGlzIG1hZGUgdG8gcGlja1xuICogYSB2aXNpYmxlLCBuZXR3b3JrLWNvbm5lY3RlZCBhbmQgYWN0aXZlIGNsaWVudCwgYW5kIHRoaXMgY2xpZW50IGlzXG4gKiByZXNwb25zaWJsZSBmb3IgbGV0dGluZyBvdGhlciBjbGllbnRzIGtub3cgYWJvdXQgaXRzIHByZXNlbmNlLiBUaGUgcHJpbWFyeVxuICogY2xpZW50IHdyaXRlcyBhIHVuaXF1ZSBjbGllbnQtZ2VuZXJhdGVkIGlkZW50aWZpZXIgKHRoZSBjbGllbnQgSUQpIHRvXG4gKiBJbmRleGVkRGLigJlzIOKAnG93bmVy4oCdIHN0b3JlIGV2ZXJ5IDQgc2Vjb25kcy4gSWYgdGhlIHByaW1hcnkgY2xpZW50IGZhaWxzIHRvXG4gKiB1cGRhdGUgdGhpcyBlbnRyeSwgYW5vdGhlciBjbGllbnQgY2FuIGFjcXVpcmUgdGhlIGxlYXNlIGFuZCB0YWtlIG92ZXIgYXNcbiAqIHByaW1hcnkuXG4gKlxuICogU29tZSBwZXJzaXN0ZW5jZSBvcGVyYXRpb25zIGluIHRoZSBTREsgYXJlIGRlc2lnbmF0ZWQgYXMgcHJpbWFyeS1jbGllbnQgb25seVxuICogb3BlcmF0aW9ucy4gVGhpcyBpbmNsdWRlcyB0aGUgYWNrbm93bGVkZ21lbnQgb2YgbXV0YXRpb25zIGFuZCBhbGwgdXBkYXRlcyBvZlxuICogcmVtb3RlIGRvY3VtZW50cy4gVGhlIGVmZmVjdHMgb2YgdGhlc2Ugb3BlcmF0aW9ucyBhcmUgd3JpdHRlbiB0byBwZXJzaXN0ZW5jZVxuICogYW5kIHRoZW4gYnJvYWRjYXN0IHRvIG90aGVyIHRhYnMgdmlhIExvY2FsU3RvcmFnZSAoc2VlXG4gKiBgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlYCksIHdoaWNoIHRoZW4gcmVmcmVzaCB0aGVpciBzdGF0ZSBmcm9tXG4gKiBwZXJzaXN0ZW5jZS5cbiAqXG4gKiBTaW1pbGFybHksIHRoZSBwcmltYXJ5IGNsaWVudCBsaXN0ZW5zIHRvIG5vdGlmaWNhdGlvbnMgc2VudCBieSBzZWNvbmRhcnlcbiAqIGNsaWVudHMgdG8gZGlzY292ZXIgcGVyc2lzdGVuY2UgY2hhbmdlcyB3cml0dGVuIGJ5IHNlY29uZGFyeSBjbGllbnRzLCBzdWNoIGFzXG4gKiB0aGUgYWRkaXRpb24gb2YgbmV3IG11dGF0aW9ucyBhbmQgcXVlcnkgdGFyZ2V0cy5cbiAqXG4gKiBJZiBtdWx0aS10YWIgaXMgbm90IGVuYWJsZWQgYW5kIGFub3RoZXIgdGFiIGFscmVhZHkgb2J0YWluZWQgdGhlIHByaW1hcnlcbiAqIGxlYXNlLCBJbmRleGVkRGJQZXJzaXN0ZW5jZSBlbnRlcnMgYSBmYWlsZWQgc3RhdGUgYW5kIGFsbCBzdWJzZXF1ZW50XG4gKiBvcGVyYXRpb25zIHdpbGwgYXV0b21hdGljYWxseSBmYWlsLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhlcmUgaXMgYW4gb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiBhIHRhYiBpcyBjbG9zZWQsIHRoZVxuICogcHJpbWFyeSBsZWFzZSBpcyByZWxlYXNlZCBpbW1lZGlhdGVseSAodGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCB0byBtYWtlXG4gKiBzdXJlIHRoYXQgYSByZWZyZXNoZWQgdGFiIGlzIGFibGUgdG8gaW1tZWRpYXRlbHkgcmUtYWNxdWlyZSB0aGUgcHJpbWFyeVxuICogbGVhc2UpLiBVbmZvcnR1bmF0ZWx5LCBJbmRleGVkREIgY2Fubm90IGJlIHJlbGlhYmx5IHVzZWQgaW4gd2luZG93LnVubG9hZFxuICogc2luY2UgaXQgaXMgYW4gYXN5bmNocm9ub3VzIEFQSS4gU28gaW4gYWRkaXRpb24gdG8gYXR0ZW1wdGluZyB0byBnaXZlIHVwIHRoZVxuICogbGVhc2UsIHRoZSBsZWFzZWhvbGRlciB3cml0ZXMgaXRzIGNsaWVudCBJRCB0byBhIFwiem9tYmllZENsaWVudFwiIGVudHJ5IGluXG4gKiBMb2NhbFN0b3JhZ2Ugd2hpY2ggYWN0cyBhcyBhbiBpbmRpY2F0b3IgdGhhdCBhbm90aGVyIHRhYiBzaG91bGQgZ28gYWhlYWQgYW5kXG4gKiB0YWtlIHRoZSBwcmltYXJ5IGxlYXNlIGltbWVkaWF0ZWx5IHJlZ2FyZGxlc3Mgb2YgdGhlIGN1cnJlbnQgbGVhc2UgdGltZXN0YW1wLlxuICpcbiAqIFRPRE8oYi8xMTQyMjYyMzQpOiBSZW1vdmUgYHN5bmNocm9uaXplVGFic2Agc2VjdGlvbiB3aGVuIG11bHRpLXRhYiBpcyBub1xuICogbG9uZ2VyIG9wdGlvbmFsLlxuICovXG5jbGFzcyBKbyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzeW5jaHJvbml6ZSB0aGUgaW4tbWVtb3J5IHN0YXRlIG9mIG11bHRpcGxlIHRhYnMgYW5kIHNoYXJlXG4gICAgICogYWNjZXNzIHRvIGxvY2FsIHBlcnNpc3RlbmNlLlxuICAgICAqL1xuICAgIHQsIGUsIG4sIHMsIGksIHIsIG8sIHUsIGMsIFxuICAgIC8qKlxuICAgICAqIElmIHNldCB0byB0cnVlLCBmb3JjZWZ1bGx5IG9idGFpbnMgZGF0YWJhc2UgYWNjZXNzLiBFeGlzdGluZyB0YWJzIHdpbGxcbiAgICAgKiBubyBsb25nZXIgYmUgYWJsZSB0byBhY2Nlc3MgSW5kZXhlZERCLlxuICAgICAqL1xuICAgIGEsIGggPSAxNSkge1xuICAgICAgICBpZiAodGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiA9IHQsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBlLCB0aGlzLmNsaWVudElkID0gbiwgXG4gICAgICAgIHRoaXMuaWkgPSBpLCB0aGlzLndpbmRvdyA9IHIsIHRoaXMuZG9jdW1lbnQgPSBvLCB0aGlzLnJpID0gYywgdGhpcy5vaSA9IGEsIHRoaXMudWkgPSBoLCBcbiAgICAgICAgdGhpcy5PcyA9IG51bGwsIHRoaXMuRnMgPSAhMSwgdGhpcy5pc1ByaW1hcnkgPSAhMSwgdGhpcy5uZXR3b3JrRW5hYmxlZCA9ICEwLCBcbiAgICAgICAgLyoqIE91ciB3aW5kb3cudW5sb2FkIGhhbmRsZXIsIGlmIHJlZ2lzdGVyZWQuICovXG4gICAgICAgIHRoaXMuY2kgPSBudWxsLCB0aGlzLmluRm9yZWdyb3VuZCA9ICExLCBcbiAgICAgICAgLyoqIE91ciAndmlzaWJpbGl0eWNoYW5nZScgbGlzdGVuZXIgaWYgcmVnaXN0ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5haSA9IG51bGwsIFxuICAgICAgICAvKiogVGhlIGNsaWVudCBtZXRhZGF0YSByZWZyZXNoIHRhc2suICovXG4gICAgICAgIHRoaXMuaGkgPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IHRpbWUgd2UgZ2FyYmFnZSBjb2xsZWN0ZWQgdGhlIGNsaWVudCBtZXRhZGF0YSBvYmplY3Qgc3RvcmUuICovXG4gICAgICAgIHRoaXMubGkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIFxuICAgICAgICAvKiogQSBsaXN0ZW5lciB0byBub3RpZnkgb24gcHJpbWFyeSBzdGF0ZSBjaGFuZ2VzLiAqL1xuICAgICAgICB0aGlzLmZpID0gdCA9PiBQcm9taXNlLnJlc29sdmUoKSwgIUpvLkQoKSkgdGhyb3cgbmV3IFUocS5VTklNUExFTUVOVEVELCBcIlRoaXMgcGxhdGZvcm0gaXMgZWl0aGVyIG1pc3NpbmcgSW5kZXhlZERCIG9yIGlzIGtub3duIHRvIGhhdmUgYW4gaW5jb21wbGV0ZSBpbXBsZW1lbnRhdGlvbi4gT2ZmbGluZSBwZXJzaXN0ZW5jZSBoYXMgYmVlbiBkaXNhYmxlZC5cIik7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBuZXcgRW8odGhpcywgcyksIHRoaXMuZGkgPSBlICsgXCJtYWluXCIsIHRoaXMuc2VyaWFsaXplciA9IG5ldyBhcih1KSwgXG4gICAgICAgIHRoaXMud2kgPSBuZXcgYnQodGhpcy5kaSwgdGhpcy51aSwgbmV3IHpvKHRoaXMuc2VyaWFsaXplcikpLCB0aGlzLkJzID0gbmV3IGZvKHRoaXMucmVmZXJlbmNlRGVsZWdhdGUsIHRoaXMuc2VyaWFsaXplciksIFxuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUgPSBQbyh0aGlzLnNlcmlhbGl6ZXIpLCB0aGlzLnFzID0gbmV3IEVyLCB0aGlzLndpbmRvdyAmJiB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UgPyB0aGlzLl9pID0gdGhpcy53aW5kb3cubG9jYWxTdG9yYWdlIDogKHRoaXMuX2kgPSBudWxsLCBcbiAgICAgICAgITEgPT09IGEgJiYgayhcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiTG9jYWxTdG9yYWdlIGlzIHVuYXZhaWxhYmxlLiBBcyBhIHJlc3VsdCwgcGVyc2lzdGVuY2UgbWF5IG5vdCB3b3JrIHJlbGlhYmx5LiBJbiBwYXJ0aWN1bGFyIGVuYWJsZVBlcnNpc3RlbmNlKCkgY291bGQgZmFpbCBpbW1lZGlhdGVseSBhZnRlciByZWZyZXNoaW5nIHRoZSBwYWdlLlwiKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgdG8gc3RhcnQgSW5kZXhlZERiIHBlcnNpc3RlbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgV2hldGhlciBwZXJzaXN0ZW5jZSB3YXMgZW5hYmxlZC5cbiAgICAgKi8gICAgc3RhcnQoKSB7XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXhwZWN0ZWQgdG8gZmFpbCBzb21ldGltZXMgKGluIHRoZSBjYXNlIG9mIGFub3RoZXIgdGFiXG4gICAgICAgIC8vIGFscmVhZHkgaGF2aW5nIHRoZSBwZXJzaXN0ZW5jZSBsb2NrKSwgc28gaXQncyB0aGUgZmlyc3QgdGhpbmcgd2Ugc2hvdWxkXG4gICAgICAgIC8vIGRvLlxuICAgICAgICByZXR1cm4gdGhpcy5taSgpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ByaW1hcnkgJiYgIXRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIFxuICAgICAgICAgICAgLy8gRmFpbCBgc3RhcnQoKWAgaWYgYHN5bmNocm9uaXplVGFic2AgaXMgZGlzYWJsZWQgYW5kIHdlIGNhbm5vdFxuICAgICAgICAgICAgLy8gb2J0YWluIHRoZSBwcmltYXJ5IGxlYXNlLlxuICAgICAgICAgICAgdGhyb3cgbmV3IFUocS5GQUlMRURfUFJFQ09ORElUSU9OLCBIbyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5naSgpLCB0aGlzLnlpKCksIHRoaXMucGkoKSwgdGhpcy5ydW5UcmFuc2FjdGlvbihcImdldEhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlclwiLCBcInJlYWRvbmx5XCIsICh0ID0+IHRoaXMuQnMuZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyKHQpKSk7XG4gICAgICAgIH0pKS50aGVuKCh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuT3MgPSBuZXcgT3QodCwgdGhpcy5yaSk7XG4gICAgICAgIH0pKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLkZzID0gITA7XG4gICAgICAgIH0pKS5jYXRjaCgodCA9PiAodGhpcy53aSAmJiB0aGlzLndpLmNsb3NlKCksIFByb21pc2UucmVqZWN0KHQpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIHByaW1hcnkgc3RhdGUgb2YgdGhlXG4gICAgICogaW5zdGFuY2UgY2hhbmdlcy4gVXBvbiByZWdpc3RlcmluZywgdGhpcyBsaXN0ZW5lciBpcyBpbnZva2VkIGltbWVkaWF0ZWx5XG4gICAgICogd2l0aCB0aGUgY3VycmVudCBwcmltYXJ5IHN0YXRlLlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi8gICAgSWkodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maSA9IGFzeW5jIGUgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkgcmV0dXJuIHQoZSk7XG4gICAgICAgIH0sIHQodGhpcy5pc1ByaW1hcnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIGRhdGFiYXNlIHJlY2VpdmVzIGFcbiAgICAgKiB2ZXJzaW9uIGNoYW5nZSBldmVudCBpbmRpY2F0aW5nIHRoYXQgaXQgaGFzIGRlbGV0ZWQuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqLyAgICBzZXREYXRhYmFzZURlbGV0ZWRMaXN0ZW5lcih0KSB7XG4gICAgICAgIHRoaXMud2kuQigoYXN5bmMgZSA9PiB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbiBhdHRlbXB0IGlzIG1hZGUgdG8gZGVsZXRlIEluZGV4ZWREQi5cbiAgICAgICAgICAgIG51bGwgPT09IGUubmV3VmVyc2lvbiAmJiBhd2FpdCB0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXRlIGluIHRoZSBjbGllbnQncyBtZXRhZGF0YSwgcG90ZW50aWFsbHlcbiAgICAgKiBhZmZlY3RpbmcgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqLyAgICBzZXROZXR3b3JrRW5hYmxlZCh0KSB7XG4gICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgIT09IHQgJiYgKHRoaXMubmV0d29ya0VuYWJsZWQgPSB0LCBcbiAgICAgICAgLy8gU2NoZWR1bGUgYSBwcmltYXJ5IGxlYXNlIHJlZnJlc2ggZm9yIGltbWVkaWF0ZSBleGVjdXRpb24uIFRoZSBldmVudHVhbFxuICAgICAgICAvLyBsZWFzZSB1cGRhdGUgd2lsbCBiZSBwcm9wYWdhdGVkIHZpYSBgcHJpbWFyeVN0YXRlTGlzdGVuZXJgLlxuICAgICAgICB0aGlzLmlpLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCAmJiBhd2FpdCB0aGlzLm1pKCk7XG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNsaWVudCBtZXRhZGF0YSBpbiBJbmRleGVkRGIgYW5kIGF0dGVtcHRzIHRvIGVpdGhlciBvYnRhaW4gb3JcbiAgICAgKiBleHRlbmQgdGhlIHByaW1hcnkgbGVhc2UgZm9yIHRoZSBsb2NhbCBjbGllbnQuIEFzeW5jaHJvbm91c2x5IG5vdGlmaWVzIHRoZVxuICAgICAqIHByaW1hcnkgc3RhdGUgbGlzdGVuZXIgaWYgdGhlIGNsaWVudCBlaXRoZXIgbmV3bHkgb2J0YWluZWQgb3IgcmVsZWFzZWQgaXRzXG4gICAgICogcHJpbWFyeSBsZWFzZS5cbiAgICAgKi8gICAgbWkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwidXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5XCIsIFwicmVhZHdyaXRlXCIsICh0ID0+IFhvKHQpLnB1dCh7XG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIG5ldHdvcmtFbmFibGVkOiB0aGlzLm5ldHdvcmtFbmFibGVkLFxuICAgICAgICAgICAgaW5Gb3JlZ3JvdW5kOiB0aGlzLmluRm9yZWdyb3VuZFxuICAgICAgICB9KS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ByaW1hcnkpIHJldHVybiB0aGlzLlRpKHQpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgIHQgfHwgKHRoaXMuaXNQcmltYXJ5ID0gITEsIHRoaXMuaWkuZW5xdWV1ZVJldHJ5YWJsZSgoKCkgPT4gdGhpcy5maSghMSkpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB0aGlzLkVpKHQpKSkubmV4dCgoZSA9PiB0aGlzLmlzUHJpbWFyeSAmJiAhZSA/IHRoaXMuQWkodCkubmV4dCgoKCkgPT4gITEpKSA6ICEhZSAmJiB0aGlzLnZpKHQpLm5leHQoKCgpID0+ICEwKSkpKSkpLmNhdGNoKCh0ID0+IHtcbiAgICAgICAgICAgIGlmIChEdCh0KSkgXG4gICAgICAgICAgICAvLyBQcm9jZWVkIHdpdGggdGhlIGV4aXN0aW5nIHN0YXRlLiBBbnkgc3Vic2VxdWVudCBhY2Nlc3MgdG9cbiAgICAgICAgICAgIC8vIEluZGV4ZWREQiB3aWxsIHZlcmlmeSB0aGUgbGVhc2UuXG4gICAgICAgICAgICByZXR1cm4gTihcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiRmFpbGVkIHRvIGV4dGVuZCBvd25lciBsZWFzZTogXCIsIHQpLCB0aGlzLmlzUHJpbWFyeTtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikgdGhyb3cgdDtcbiAgICAgICAgICAgIHJldHVybiBOKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJSZWxlYXNpbmcgb3duZXIgbGVhc2UgYWZ0ZXIgZXJyb3IgZHVyaW5nIGxlYXNlIHJlZnJlc2hcIiwgdCksIFxuICAgICAgICAgICAgLyogaXNQcmltYXJ5PSAqLyAhMTtcbiAgICAgICAgfSkpLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc1ByaW1hcnkgIT09IHQgJiYgdGhpcy5paS5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiB0aGlzLmZpKHQpKSksIHRoaXMuaXNQcmltYXJ5ID0gdDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBUaSh0KSB7XG4gICAgICAgIHJldHVybiBZbyh0KS5nZXQoXCJvd25lclwiKS5uZXh0KCh0ID0+IFJ0LnJlc29sdmUodGhpcy5SaSh0KSkpKTtcbiAgICB9XG4gICAgUGkodCkge1xuICAgICAgICByZXR1cm4gWG8odCkuZGVsZXRlKHRoaXMuY2xpZW50SWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZ2FyYmFnZSBjb2xsZWN0aW9uIHRocmVzaG9sZCBoYXMgcGFzc2VkLCBwcnVuZXMgdGhlXG4gICAgICogUmVtb3RlRG9jdW1lbnRDaGFuZ2VzIGFuZCB0aGUgQ2xpZW50TWV0YWRhdGEgc3RvcmUgYmFzZWQgb24gdGhlIGxhc3QgdXBkYXRlXG4gICAgICogdGltZSBvZiBhbGwgY2xpZW50cy5cbiAgICAgKi8gICAgYXN5bmMgYmkoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUHJpbWFyeSAmJiAhdGhpcy5WaSh0aGlzLmxpLCAxOGU1KSkge1xuICAgICAgICAgICAgdGhpcy5saSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjb25zdCB0ID0gYXdhaXQgdGhpcy5ydW5UcmFuc2FjdGlvbihcIm1heWJlR2FyYmFnZUNvbGxlY3RNdWx0aUNsaWVudFN0YXRlXCIsIFwicmVhZHdyaXRlLXByaW1hcnlcIiwgKHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBfZSh0LCBcImNsaWVudE1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmooKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuU2kodCwgMThlNSksIHMgPSB0LmZpbHRlcigodCA9PiAtMSA9PT0gbi5pbmRleE9mKHQpKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBtZXRhZGF0YSBmb3IgY2xpZW50cyB0aGF0IGFyZSBubyBsb25nZXIgY29uc2lkZXJlZCBhY3RpdmUuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSdC5mb3JFYWNoKHMsICh0ID0+IGUuZGVsZXRlKHQuY2xpZW50SWQpKSkubmV4dCgoKCkgPT4gcykpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKS5jYXRjaCgoKCkgPT4gW10pKTtcbiAgICAgICAgICAgIC8vIERlbGV0ZSBwb3RlbnRpYWwgbGVmdG92ZXIgZW50cmllcyB0aGF0IG1heSBjb250aW51ZSB0byBtYXJrIHRoZVxuICAgICAgICAgICAgLy8gaW5hY3RpdmUgY2xpZW50cyBhcyB6b21iaWVkIGluIExvY2FsU3RvcmFnZS5cbiAgICAgICAgICAgIC8vIElkZWFsbHkgd2UnZCBkZWxldGUgdGhlIEluZGV4ZWREYiBhbmQgTG9jYWxTdG9yYWdlIHpvbWJpZSBlbnRyaWVzIGZvclxuICAgICAgICAgICAgLy8gdGhlIGNsaWVudCBhdG9taWNhbGx5LCBidXQgd2UgY2FuJ3QuIFNvIHdlIG9wdCB0byBkZWxldGUgdGhlIEluZGV4ZWREYlxuICAgICAgICAgICAgLy8gZW50cmllcyBmaXJzdCB0byBhdm9pZCBwb3RlbnRpYWxseSByZXZpdmluZyBhIHpvbWJpZWQgY2xpZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2kpIGZvciAoY29uc3QgZSBvZiB0KSB0aGlzLl9pLnJlbW92ZUl0ZW0odGhpcy5EaShlLmNsaWVudElkKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGEgcmVjdXJyaW5nIHRpbWVyIHRvIHVwZGF0ZSB0aGUgY2xpZW50IG1ldGFkYXRhIGFuZCB0byBlaXRoZXJcbiAgICAgKiBleHRlbmQgb3IgYWNxdWlyZSB0aGUgcHJpbWFyeSBsZWFzZSBpZiB0aGUgY2xpZW50IGlzIGVsaWdpYmxlLlxuICAgICAqLyAgICBwaSgpIHtcbiAgICAgICAgdGhpcy5oaSA9IHRoaXMuaWkuZW5xdWV1ZUFmdGVyRGVsYXkoXCJjbGllbnRfbWV0YWRhdGFfcmVmcmVzaFwiIC8qIFRpbWVySWQuQ2xpZW50TWV0YWRhdGFSZWZyZXNoICovICwgNGUzLCAoKCkgPT4gdGhpcy5taSgpLnRoZW4oKCgpID0+IHRoaXMuYmkoKSkpLnRoZW4oKCgpID0+IHRoaXMucGkoKSkpKSk7XG4gICAgfVxuICAgIC8qKiBDaGVja3Mgd2hldGhlciBgY2xpZW50YCBpcyB0aGUgbG9jYWwgY2xpZW50LiAqLyAgICBSaSh0KSB7XG4gICAgICAgIHJldHVybiAhIXQgJiYgdC5vd25lcklkID09PSB0aGlzLmNsaWVudElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZSB0aGUgc3RhdGUgb2YgYWxsIGFjdGl2ZSBjbGllbnRzIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGUgbG9jYWxcbiAgICAgKiBjbGllbnQgaXMgb3IgY2FuIGFjdCBhcyB0aGUgaG9sZGVyIG9mIHRoZSBwcmltYXJ5IGxlYXNlLiBSZXR1cm5zIHdoZXRoZXJcbiAgICAgKiB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGUgbGVhc2UsIGJ1dCBkb2VzIG5vdCBhY3R1YWxseSBhY3F1aXJlIGl0LlxuICAgICAqIE1heSByZXR1cm4gJ2ZhbHNlJyBldmVuIGlmIHRoZXJlIGlzIG5vIGFjdGl2ZSBsZWFzZWhvbGRlciBhbmQgYW5vdGhlclxuICAgICAqIChmb3JlZ3JvdW5kKSBjbGllbnQgc2hvdWxkIGJlY29tZSBsZWFzZWhvbGRlciBpbnN0ZWFkLlxuICAgICAqLyAgICBFaSh0KSB7XG4gICAgICAgIGlmICh0aGlzLm9pKSByZXR1cm4gUnQucmVzb2x2ZSghMCk7XG4gICAgICAgIHJldHVybiBZbyh0KS5nZXQoXCJvd25lclwiKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIC8vIEEgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGUgcHJpbWFyeSBsZWFzZSBpZjpcbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgdGhlIGNsaWVudCdzIHRhYiBpcyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxuICAgICAgICAgICAgLy8gICBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSBldmVyeSBjbGllbnRzIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIHRoZSBjbGllbnQncyB0YWIgaXMgaW4gdGhlXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXG4gICAgICAgICAgICAvLyAtIGV2ZXJ5IGNsaWVudHMgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluXG4gICAgICAgICAgICAvLyAgIHRoZSBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSB0aGUgYGZvcmNlT3duaW5nVGFiYCBzZXR0aW5nIHdhcyBwYXNzZWQgaW4uXG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZSAmJiB0aGlzLlZpKGUubGVhc2VUaW1lc3RhbXBNcywgNWUzKSAmJiAhdGhpcy5DaShlLm93bmVySWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuUmkoZSkgJiYgdGhpcy5uZXR3b3JrRW5hYmxlZCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5SaShlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsIHRoZSBgY2FuQWN0QXNQcmltYXJ5YCBjaGVjayBpZiB0aGUgY3VycmVudCBsZWFzZWhvbGRlciBoYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IG9wdGVkIGludG8gbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi4gSWYgdGhpcyBoYXBwZW5zIGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudCBzdGFydHVwLCB3ZSByZWplY3QgdGhlIFByb21pc2UgcmV0dXJuZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgLy8gYGVuYWJsZVBlcnNpc3RlbmNlKClgIGFuZCB0aGUgdXNlciBjYW4gY29udGludWUgdG8gdXNlIEZpcmVzdG9yZVxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGluLW1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscyBkdXJpbmcgYSBsZWFzZSByZWZyZXNoLCB3ZSB3aWxsIGluc3RlYWQgYmxvY2sgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgZnJvbSBleGVjdXRpbmcgZnVydGhlciBvcGVyYXRpb25zLiBOb3RlIHRoYXQgdGhpcyBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBhY2NlcHRhYmxlIHNpbmNlIG1peGluZyAmIG1hdGNoaW5nIGRpZmZlcmVudCBgc3luY2hyb25pemVUYWJzYFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR0aW5ncyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIGJlIHR1cm5lZCBvZmYuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVKHEuRkFJTEVEX1BSRUNPTkRJVElPTiwgSG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEoIXRoaXMubmV0d29ya0VuYWJsZWQgfHwgIXRoaXMuaW5Gb3JlZ3JvdW5kKSB8fCBYbyh0KS5qKCkubmV4dCgodCA9PiB2b2lkIDAgPT09IHRoaXMuU2kodCwgNWUzKS5maW5kKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGllbnRJZCAhPT0gdC5jbGllbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gIXRoaXMubmV0d29ya0VuYWJsZWQgJiYgdC5uZXR3b3JrRW5hYmxlZCwgbiA9ICF0aGlzLmluRm9yZWdyb3VuZCAmJiB0LmluRm9yZWdyb3VuZCwgcyA9IHRoaXMubmV0d29ya0VuYWJsZWQgPT09IHQubmV0d29ya0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlIHx8IG4gJiYgcykgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgfSkpLm5leHQoKHQgPT4gKHRoaXMuaXNQcmltYXJ5ICE9PSB0ICYmIE4oXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBgQ2xpZW50ICR7dCA/IFwiaXNcIiA6IFwiaXMgbm90XCJ9IGVsaWdpYmxlIGZvciBhIHByaW1hcnkgbGVhc2UuYCksIFxuICAgICAgICB0KSkpO1xuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICAgICAgLy8gVGhlIHNodXRkb3duKCkgb3BlcmF0aW9ucyBhcmUgaWRlbXBvdGVudCBhbmQgY2FuIGJlIGNhbGxlZCBldmVuIHdoZW5cbiAgICAgICAgLy8gc3RhcnQoKSBhYm9ydGVkIChlLmcuIGJlY2F1c2UgaXQgY291bGRuJ3QgYWNxdWlyZSB0aGUgcGVyc2lzdGVuY2UgbGVhc2UpLlxuICAgICAgICB0aGlzLkZzID0gITEsIHRoaXMueGkoKSwgdGhpcy5oaSAmJiAodGhpcy5oaS5jYW5jZWwoKSwgdGhpcy5oaSA9IG51bGwpLCB0aGlzLk5pKCksIFxuICAgICAgICB0aGlzLmtpKCksIFxuICAgICAgICAvLyBVc2UgYFNpbXBsZURiLnJ1blRyYW5zYWN0aW9uYCBkaXJlY3RseSB0byBhdm9pZCBmYWlsaW5nIGlmIGFub3RoZXIgdGFiXG4gICAgICAgIC8vIGhhcyBvYnRhaW5lZCB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgICAgYXdhaXQgdGhpcy53aS5ydW5UcmFuc2FjdGlvbihcInNodXRkb3duXCIsIFwicmVhZHdyaXRlXCIsIFsgXCJvd25lclwiLCBcImNsaWVudE1ldGFkYXRhXCIgXSwgKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyB3ZSh0LCBPdC5jdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BaShlKS5uZXh0KCgoKSA9PiB0aGlzLlBpKGUpKSk7XG4gICAgICAgIH0pKSwgdGhpcy53aS5jbG9zZSgpLCBcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbnRyeSBtYXJraW5nIHRoZSBjbGllbnQgYXMgem9tYmllZCBmcm9tIExvY2FsU3RvcmFnZSBzaW5jZVxuICAgICAgICAvLyB3ZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCBpdHMgbWV0YWRhdGEgZnJvbSBJbmRleGVkRGIuXG4gICAgICAgIHRoaXMuTWkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjbGllbnRzIHRoYXQgYXJlIG5vdCB6b21iaWVkIGFuZCBoYXZlIGFuIHVwZGF0ZVRpbWUgd2l0aGluIHRoZVxuICAgICAqIHByb3ZpZGVkIHRocmVzaG9sZC5cbiAgICAgKi8gICAgU2kodCwgZSkge1xuICAgICAgICByZXR1cm4gdC5maWx0ZXIoKHQgPT4gdGhpcy5WaSh0LnVwZGF0ZVRpbWVNcywgZSkgJiYgIXRoaXMuQ2kodC5jbGllbnRJZCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSURzIG9mIHRoZSBjbGllbnRzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuIElmIG11bHRpLXRhYlxuICAgICAqIGlzIG5vdCBzdXBwb3J0ZWQsIHJldHVybnMgYW4gYXJyYXkgdGhhdCBvbmx5IGNvbnRhaW5zIHRoZSBsb2NhbCBjbGllbnQnc1xuICAgICAqIElELlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi8gICAgJGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0QWN0aXZlQ2xpZW50c1wiLCBcInJlYWRvbmx5XCIsICh0ID0+IFhvKHQpLmooKS5uZXh0KCh0ID0+IHRoaXMuU2kodCwgMThlNSkubWFwKCh0ID0+IHQuY2xpZW50SWQpKSkpKSk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5GcztcbiAgICB9XG4gICAgZ2V0TXV0YXRpb25RdWV1ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBvby5kZSh0LCB0aGlzLnNlcmlhbGl6ZXIsIGUsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUpO1xuICAgIH1cbiAgICBnZXRUYXJnZXRDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuQnM7XG4gICAgfVxuICAgIGdldFJlbW90ZURvY3VtZW50Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGU7XG4gICAgfVxuICAgIGdldEluZGV4TWFuYWdlcih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgSnIodCwgdGhpcy5zZXJpYWxpemVyLmZlLmRhdGFiYXNlSWQpO1xuICAgIH1cbiAgICBnZXREb2N1bWVudE92ZXJsYXlDYWNoZSh0KSB7XG4gICAgICAgIHJldHVybiBSci5kZSh0aGlzLnNlcmlhbGl6ZXIsIHQpO1xuICAgIH1cbiAgICBnZXRCdW5kbGVDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXM7XG4gICAgfVxuICAgIHJ1blRyYW5zYWN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgTihcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiU3RhcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQpO1xuICAgICAgICBjb25zdCBzID0gXCJyZWFkb25seVwiID09PSBlID8gXCJyZWFkb25seVwiIDogXCJyZWFkd3JpdGVcIiwgaSA9IDE1ID09PSAociA9IHRoaXMudWkpID8gZGUgOiAxNCA9PT0gciA/IGZlIDogMTMgPT09IHIgPyBsZSA6IDEyID09PSByID8gaGUgOiAxMSA9PT0gciA/IGFlIDogdm9pZCBPKCk7XG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBvYmplY3Qgc3RvcmVzIGZvciB0aGUgcHJvdmlkZWQgc2NoZW1hLiAqL1xuICAgICAgICB2YXIgcjtcbiAgICAgICAgbGV0IG87XG4gICAgICAgIC8vIERvIGFsbCB0cmFuc2FjdGlvbnMgYXMgcmVhZHdyaXRlIGFnYWluc3QgYWxsIG9iamVjdCBzdG9yZXMsIHNpbmNlIHdlXG4gICAgICAgIC8vIGFyZSB0aGUgb25seSByZWFkZXIvd3JpdGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndpLnJ1blRyYW5zYWN0aW9uKHQsIHMsIGksIChzID0+IChvID0gbmV3IHdlKHMsIHRoaXMuT3MgPyB0aGlzLk9zLm5leHQoKSA6IE90LmN0KSwgXG4gICAgICAgIFwicmVhZHdyaXRlLXByaW1hcnlcIiA9PT0gZSA/IHRoaXMuVGkobykubmV4dCgodCA9PiAhIXQgfHwgdGhpcy5FaShvKSkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyBrKGBGYWlsZWQgdG8gb2J0YWluIHByaW1hcnkgbGVhc2UgZm9yIGFjdGlvbiAnJHt0fScuYCksIHRoaXMuaXNQcmltYXJ5ID0gITEsIFxuICAgICAgICAgICAgdGhpcy5paS5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiB0aGlzLmZpKCExKSkpLCBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIEV0KTtcbiAgICAgICAgICAgIHJldHVybiBuKG8pO1xuICAgICAgICB9KSkubmV4dCgodCA9PiB0aGlzLnZpKG8pLm5leHQoKCgpID0+IHQpKSkpIDogdGhpcy5PaShvKS5uZXh0KCgoKSA9PiBuKG8pKSkpKSkudGhlbigodCA9PiAoby5yYWlzZU9uQ29tbWl0dGVkRXZlbnQoKSwgXG4gICAgICAgIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIGN1cnJlbnQgdGFiIGlzIHRoZSBwcmltYXJ5IGxlYXNlaG9sZGVyIG9yIGFsdGVybmF0aXZlbHlcbiAgICAgKiB0aGF0IHRoZSBsZWFzZWhvbGRlciBoYXMgb3B0ZWQgaW50byBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxuICAgICAqL1xuICAgIC8vIFRPRE8oYi8xMTQyMjYyMzQpOiBSZW1vdmUgdGhpcyBjaGVjayB3aGVuIGBzeW5jaHJvbml6ZVRhYnNgIGNhbiBubyBsb25nZXJcbiAgICAvLyBiZSB0dXJuZWQgb2ZmLlxuICAgIE9pKHQpIHtcbiAgICAgICAgcmV0dXJuIFlvKHQpLmdldChcIm93bmVyXCIpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgdGhpcy5WaSh0LmxlYXNlVGltZXN0YW1wTXMsIDVlMykgJiYgIXRoaXMuQ2kodC5vd25lcklkKSAmJiAhdGhpcy5SaSh0KSAmJiAhKHRoaXMub2kgfHwgdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiAmJiB0LmFsbG93VGFiU3luY2hyb25pemF0aW9uKSkgdGhyb3cgbmV3IFUocS5GQUlMRURfUFJFQ09ORElUSU9OLCBIbyk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT2J0YWlucyBvciBleHRlbmRzIHRoZSBuZXcgcHJpbWFyeSBsZWFzZSBmb3IgdGhlIGxvY2FsIGNsaWVudC4gVGhpc1xuICAgICAqIG1ldGhvZCBkb2VzIG5vdCB2ZXJpZnkgdGhhdCB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGlzIGxlYXNlLlxuICAgICAqLyAgICB2aSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBvd25lcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgYWxsb3dUYWJTeW5jaHJvbml6YXRpb246IHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24sXG4gICAgICAgICAgICBsZWFzZVRpbWVzdGFtcE1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBZbyh0KS5wdXQoXCJvd25lclwiLCBlKTtcbiAgICB9XG4gICAgc3RhdGljIEQoKSB7XG4gICAgICAgIHJldHVybiBidC5EKCk7XG4gICAgfVxuICAgIC8qKiBDaGVja3MgdGhlIHByaW1hcnkgbGVhc2UgYW5kIHJlbW92ZXMgaXQgaWYgd2UgYXJlIHRoZSBjdXJyZW50IHByaW1hcnkuICovICAgIEFpKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFlvKHQpO1xuICAgICAgICByZXR1cm4gZS5nZXQoXCJvd25lclwiKS5uZXh0KCh0ID0+IHRoaXMuUmkodCkgPyAoTihcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiUmVsZWFzaW5nIHByaW1hcnkgbGVhc2UuXCIpLCBcbiAgICAgICAgZS5kZWxldGUoXCJvd25lclwiKSkgOiBSdC5yZXNvbHZlKCkpKTtcbiAgICB9XG4gICAgLyoqIFZlcmlmaWVzIHRoYXQgYHVwZGF0ZVRpbWVNc2AgaXMgd2l0aGluIGBtYXhBZ2VNc2AuICovICAgIFZpKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiAhKHQgPCBuIC0gZSkgJiYgKCEodCA+IG4pIHx8IChrKGBEZXRlY3RlZCBhbiB1cGRhdGUgdGltZSB0aGF0IGlzIGluIHRoZSBmdXR1cmU6ICR7dH0gPiAke259YCksIFxuICAgICAgICAhMSkpO1xuICAgIH1cbiAgICBnaSgpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5kb2N1bWVudCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiAodGhpcy5haSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaWkuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gKHRoaXMuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlLCBcbiAgICAgICAgICAgIHRoaXMubWkoKSkpKTtcbiAgICAgICAgfSwgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmFpKSwgdGhpcy5pbkZvcmVncm91bmQgPSBcInZpc2libGVcIiA9PT0gdGhpcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICAgIH1cbiAgICBOaSgpIHtcbiAgICAgICAgdGhpcy5haSAmJiAodGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmFpKSwgdGhpcy5haSA9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHdpbmRvdy51bmxvYWQgaGFuZGxlciB0aGF0IHdpbGwgc3luY2hyb25vdXNseSB3cml0ZSBvdXJcbiAgICAgKiBjbGllbnRJZCB0byBhIFwiem9tYmllIGNsaWVudCBpZFwiIGxvY2F0aW9uIGluIExvY2FsU3RvcmFnZS4gVGhpcyBjYW4gYmUgdXNlZFxuICAgICAqIGJ5IHRhYnMgdHJ5aW5nIHRvIGFjcXVpcmUgdGhlIHByaW1hcnkgbGVhc2UgdG8gZGV0ZXJtaW5lIHRoYXQgdGhlIGxlYXNlXG4gICAgICogaXMgbm8gbG9uZ2VyIHZhbGlkIGV2ZW4gaWYgdGhlIHRpbWVzdGFtcCBpcyByZWNlbnQuIFRoaXMgaXMgcGFydGljdWxhcmx5XG4gICAgICogaW1wb3J0YW50IGZvciB0aGUgcmVmcmVzaCBjYXNlIChzbyB0aGUgdGFiIGNvcnJlY3RseSByZS1hY3F1aXJlcyB0aGVcbiAgICAgKiBwcmltYXJ5IGxlYXNlKS4gTG9jYWxTdG9yYWdlIGlzIHVzZWQgZm9yIHRoaXMgcmF0aGVyIHRoYW4gSW5kZXhlZERiIGJlY2F1c2VcbiAgICAgKiBpdCBpcyBhIHN5bmNocm9ub3VzIEFQSSBhbmQgc28gY2FuIGJlIHVzZWQgcmVsaWFibHkgZnJvbSAgYW4gdW5sb2FkXG4gICAgICogaGFuZGxlci5cbiAgICAgKi8gICAgeWkoKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChudWxsID09PSAodCA9IHRoaXMud2luZG93KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmFkZEV2ZW50TGlzdGVuZXIpICYmICh0aGlzLmNpID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gTm90ZTogSW4gdGhlb3J5LCB0aGlzIHNob3VsZCBiZSBzY2hlZHVsZWQgb24gdGhlIEFzeW5jUXVldWUgc2luY2UgaXRcbiAgICAgICAgICAgIC8vIGFjY2Vzc2VzIGludGVybmFsIHN0YXRlLiBXZSBleGVjdXRlIHRoaXMgY29kZSBkaXJlY3RseSBkdXJpbmcgc2h1dGRvd25cbiAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpdCBnZXRzIGEgY2hhbmNlIHRvIHJ1bi5cbiAgICAgICAgICAgIHRoaXMueGkoKTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAvKD86VmVyc2lvbnxNb2JpbGUpXFwvMVs0NTZdLztcbiAgICAgICAgICAgIGlzU2FmYXJpKCkgJiYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKHQpIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2godCkpICYmIFxuICAgICAgICAgICAgLy8gT24gU2FmYXJpIDE0LCAxNSwgYW5kIDE2LCB3ZSBkbyBub3QgcnVuIGFueSBjbGVhbnVwIGFjdGlvbnMgYXMgaXQgbWlnaHRcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgYSBidWcgdGhhdCBwcmV2ZW50cyBTYWZhcmkgZnJvbSByZS1vcGVuaW5nIEluZGV4ZWREQiBkdXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhZ2UgbG9hZC5cbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjI2NTQ3XG4gICAgICAgICAgICB0aGlzLmlpLmVudGVyUmVzdHJpY3RlZE1vZGUoLyogcHVyZ2VFeGlzdGluZ1Rhc2tzPSAqLyAhMCksIHRoaXMuaWkuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gdGhpcy5zaHV0ZG93bigpKSk7XG4gICAgICAgIH0sIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCB0aGlzLmNpKSk7XG4gICAgfVxuICAgIGtpKCkge1xuICAgICAgICB0aGlzLmNpICYmICh0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgdGhpcy5jaSksIHRoaXMuY2kgPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2xpZW50IGlzIFwiem9tYmllZFwiIGJhc2VkIG9uIGl0cyBMb2NhbFN0b3JhZ2UgZW50cnkuXG4gICAgICogQ2xpZW50cyBiZWNvbWUgem9tYmllZCB3aGVuIHRoZWlyIHRhYiBjbG9zZXMgd2l0aG91dCBydW5uaW5nIGFsbCBvZiB0aGVcbiAgICAgKiBjbGVhbnVwIGxvZ2ljIGluIGBzaHV0ZG93bigpYC5cbiAgICAgKi8gICAgQ2kodCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBudWxsICE9PSAobnVsbCA9PT0gKGUgPSB0aGlzLl9pKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmdldEl0ZW0odGhpcy5EaSh0KSkpO1xuICAgICAgICAgICAgcmV0dXJuIE4oXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBgQ2xpZW50ICcke3R9JyAke24gPyBcImlzXCIgOiBcImlzIG5vdFwifSB6b21iaWVkIGluIExvY2FsU3RvcmFnZWApLCBcbiAgICAgICAgICAgIG47XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCB3b3JraW5nLlxuICAgICAgICAgICAgcmV0dXJuIGsoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkZhaWxlZCB0byBnZXQgem9tYmllZCBjbGllbnQgaWQuXCIsIHQpLCAhMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgY2xpZW50IGFzIHpvbWJpZWQgKGEgY2xpZW50IHRoYXQgaGFkIGl0cyB0YWIgY2xvc2VkKS4gWm9tYmllZFxuICAgICAqIGNsaWVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHByaW1hcnkgdGFiIHNlbGVjdGlvbi5cbiAgICAgKi8gICAgeGkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5faS5zZXRJdGVtKHRoaXMuRGkodGhpcy5jbGllbnRJZCksIFN0cmluZyhEYXRlLm5vdygpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCBhdmFpbGFibGUgLyB3b3JraW5nLlxuICAgICAgICAgICAgayhcIkZhaWxlZCB0byBzZXQgem9tYmllIGNsaWVudCBpZC5cIiwgdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIFJlbW92ZXMgdGhlIHpvbWJpZWQgY2xpZW50IGVudHJ5IGlmIGl0IGV4aXN0cy4gKi8gICAgTWkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5faS5yZW1vdmVJdGVtKHRoaXMuRGkodGhpcy5jbGllbnRJZCkpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfVxuICAgIH1cbiAgICBEaSh0KSB7XG4gICAgICAgIHJldHVybiBgZmlyZXN0b3JlX3pvbWJpZV8ke3RoaXMucGVyc2lzdGVuY2VLZXl9XyR7dH1gO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHByaW1hcnkgY2xpZW50IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBZbyh0KSB7XG4gICAgcmV0dXJuIF9lKHQsIFwib3duZXJcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIFhvKHQpIHtcbiAgICByZXR1cm4gX2UodCwgXCJjbGllbnRNZXRhZGF0YVwiKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgdXNlZCBhcyBhIHByZWZpeCB3aGVuIHN0b3JpbmcgZGF0YSBpbiBJbmRleGVkREIgYW5kXG4gKiBMb2NhbFN0b3JhZ2UuXG4gKi8gZnVuY3Rpb24gWm8odCwgZSkge1xuICAgIC8vIFVzZSB0d28gZGlmZmVyZW50IHByZWZpeCBmb3JtYXRzOlxuICAgIC8vICAgKiBmaXJlc3RvcmUgLyBwZXJzaXN0ZW5jZUtleSAvIHByb2plY3RJRCAuIGRhdGFiYXNlSUQgLyAuLi5cbiAgICAvLyAgICogZmlyZXN0b3JlIC8gcGVyc2lzdGVuY2VLZXkgLyBwcm9qZWN0SUQgLyAuLi5cbiAgICAvLyBwcm9qZWN0SURzIGFyZSBETlMtY29tcGF0aWJsZSBuYW1lcyBhbmQgY2Fubm90IGNvbnRhaW4gZG90c1xuICAgIC8vIHNvIHRoZXJlJ3Mgbm8gZGFuZ2VyIG9mIGNvbGxpc2lvbnMuXG4gICAgbGV0IG4gPSB0LnByb2plY3RJZDtcbiAgICByZXR1cm4gdC5pc0RlZmF1bHREYXRhYmFzZSB8fCAobiArPSBcIi5cIiArIHQuZGF0YWJhc2UpLCBcImZpcmVzdG9yZS9cIiArIGUgKyBcIi9cIiArIG4gKyBcIi9cIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBzZXQgb2YgY2hhbmdlcyB0byB3aGF0IGRvY3VtZW50cyBhcmUgY3VycmVudGx5IGluIHZpZXcgYW5kIG91dCBvZiB2aWV3IGZvclxuICogYSBnaXZlbiBxdWVyeS4gVGhlc2UgY2hhbmdlcyBhcmUgc2VudCB0byB0aGUgTG9jYWxTdG9yZSBieSB0aGUgVmlldyAodmlhXG4gKiB0aGUgU3luY0VuZ2luZSkgYW5kIGFyZSB1c2VkIHRvIHBpbiAvIHVucGluIGRvY3VtZW50cyBhcyBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgdHUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuZnJvbUNhY2hlID0gZSwgdGhpcy5GaSA9IG4sIHRoaXMuQmkgPSBzO1xuICAgIH1cbiAgICBzdGF0aWMgTGkodCwgZSkge1xuICAgICAgICBsZXQgbiA9IGdzKCksIHMgPSBncygpO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZS5kb2NDaGFuZ2VzKSBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICAgIGNhc2UgMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovIDpcbiAgICAgICAgICAgIG4gPSBuLmFkZCh0LmRvYy5rZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovIDpcbiAgICAgICAgICAgIHMgPSBzLmFkZCh0LmRvYy5rZXkpO1xuIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgdHUodCwgZS5mcm9tQ2FjaGUsIG4sIHMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIEZpcmVzdG9yZSBxdWVyeSBlbmdpbmUuXG4gKlxuICogRmlyZXN0b3JlIHF1ZXJpZXMgY2FuIGJlIGV4ZWN1dGVkIGluIHRocmVlIG1vZGVzLiBUaGUgUXVlcnkgRW5naW5lIGRldGVybWluZXNcbiAqIHdoYXQgbW9kZSB0byB1c2UgYmFzZWQgb24gd2hhdCBkYXRhIGlzIHBlcnNpc3RlZC4gVGhlIG1vZGUgb25seSBkZXRlcm1pbmVzXG4gKiB0aGUgcnVudGltZSBjb21wbGV4aXR5IG9mIHRoZSBxdWVyeSAtIHRoZSByZXN1bHQgc2V0IGlzIGVxdWl2YWxlbnQgYWNyb3NzIGFsbFxuICogaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFRoZSBRdWVyeSBlbmdpbmUgd2lsbCB1c2UgaW5kZXhlZC1iYXNlZCBleGVjdXRpb24gaWYgYSB1c2VyIGhhcyBjb25maWd1cmVkXG4gKiBhbnkgaW5kZXggdGhhdCBjYW4gYmUgdXNlZCB0byBleGVjdXRlIHF1ZXJ5ICh2aWEgYHNldEluZGV4Q29uZmlndXJhdGlvbigpYCkuXG4gKiBPdGhlcndpc2UsIHRoZSBlbmdpbmUgd2lsbCB0cnkgdG8gb3B0aW1pemUgdGhlIHF1ZXJ5IGJ5IHJlLXVzaW5nIGEgcHJldmlvdXNseVxuICogcGVyc2lzdGVkIHF1ZXJ5IHJlc3VsdC4gSWYgdGhhdCBpcyBub3QgcG9zc2libGUsIHRoZSBxdWVyeSB3aWxsIGJlIGV4ZWN1dGVkXG4gKiB2aWEgYSBmdWxsIGNvbGxlY3Rpb24gc2Nhbi5cbiAqXG4gKiBJbmRleC1iYXNlZCBleGVjdXRpb24gaXMgdGhlIGRlZmF1bHQgd2hlbiBhdmFpbGFibGUuIFRoZSBxdWVyeSBlbmdpbmVcbiAqIHN1cHBvcnRzIHBhcnRpYWwgaW5kZXhlZCBleGVjdXRpb24gYW5kIG1lcmdlcyB0aGUgcmVzdWx0IGZyb20gdGhlIGluZGV4XG4gKiBsb29rdXAgd2l0aCBkb2N1bWVudHMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBpbmRleGVkLiBUaGUgaW5kZXggZXZhbHVhdGlvblxuICogbWF0Y2hlcyB0aGUgYmFja2VuZCdzIGZvcm1hdCBhbmQgYXMgc3VjaCwgdGhlIFNESyBjYW4gdXNlIGluZGV4aW5nIGZvciBhbGxcbiAqIHF1ZXJpZXMgdGhhdCB0aGUgYmFja2VuZCBzdXBwb3J0cy5cbiAqXG4gKiBJZiBubyBpbmRleCBleGlzdHMsIHRoZSBxdWVyeSBlbmdpbmUgdHJpZXMgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIHRhcmdldFxuICogZG9jdW1lbnQgbWFwcGluZyBpbiB0aGUgVGFyZ2V0Q2FjaGUuIFRoZXNlIG1hcHBpbmdzIGV4aXN0cyBmb3IgYWxsIHF1ZXJpZXNcbiAqIHRoYXQgaGF2ZSBiZWVuIHN5bmNlZCB3aXRoIHRoZSBiYWNrZW5kIGF0IGxlYXN0IG9uY2UgYW5kIGFsbG93IHRoZSBxdWVyeVxuICogZW5naW5lIHRvIG9ubHkgcmVhZCBkb2N1bWVudHMgdGhhdCBwcmV2aW91c2x5IG1hdGNoZWQgYSBxdWVyeSBwbHVzIGFueVxuICogZG9jdW1lbnRzIHRoYXQgd2VyZSBlZGl0ZWQgYWZ0ZXIgdGhlIHF1ZXJ5IHdhcyBsYXN0IGxpc3RlbmVkIHRvLlxuICpcbiAqIFRoZXJlIGFyZSBzb21lIGNhc2VzIHdoZW4gdGhpcyBvcHRpbWl6YXRpb24gaXMgbm90IGd1YXJhbnRlZWQgdG8gcHJvZHVjZVxuICogdGhlIHNhbWUgcmVzdWx0cyBhcyBmdWxsIGNvbGxlY3Rpb24gc2NhbnMuIEluIHRoZXNlIGNhc2VzLCBxdWVyeVxuICogcHJvY2Vzc2luZyBmYWxscyBiYWNrIHRvIGZ1bGwgc2NhbnMuIFRoZXNlIGNhc2VzIGFyZTpcbiAqXG4gKiAtIExpbWl0IHF1ZXJpZXMgd2hlcmUgYSBkb2N1bWVudCB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5IHByZXZpb3VzbHkgbm8gbG9uZ2VyXG4gKiAgIG1hdGNoZXMgdGhlIHF1ZXJ5LlxuICpcbiAqIC0gTGltaXQgcXVlcmllcyB3aGVyZSBhIGRvY3VtZW50IGVkaXQgbWF5IGNhdXNlIHRoZSBkb2N1bWVudCB0byBzb3J0IGJlbG93XG4gKiAgIGFub3RoZXIgZG9jdW1lbnQgdGhhdCBpcyBpbiB0aGUgbG9jYWwgY2FjaGUuXG4gKlxuICogLSBRdWVyaWVzIHRoYXQgaGF2ZSBuZXZlciBiZWVuIENVUlJFTlQgb3IgZnJlZSBvZiBsaW1ibyBkb2N1bWVudHMuXG4gKi8gY2xhc3MgZXUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnFpID0gITE7XG4gICAgfVxuICAgIC8qKiBTZXRzIHRoZSBkb2N1bWVudCB2aWV3IHRvIHF1ZXJ5IGFnYWluc3QuICovICAgIGluaXRpYWxpemUodCwgZSkge1xuICAgICAgICB0aGlzLlVpID0gdCwgdGhpcy5pbmRleE1hbmFnZXIgPSBlLCB0aGlzLnFpID0gITA7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGFsbCBsb2NhbCBkb2N1bWVudHMgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBxdWVyeS4gKi8gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLktpKHQsIGUpLm5leHQoKGkgPT4gaSB8fCB0aGlzLkdpKHQsIGUsIHMsIG4pKSkubmV4dCgobiA9PiBuIHx8IHRoaXMuUWkodCwgZSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYW4gaW5kZXhlZCBxdWVyeSB0aGF0IGV2YWx1YXRlcyB0aGUgcXVlcnkgYmFzZWQgb24gYSBjb2xsZWN0aW9uJ3NcbiAgICAgKiBwZXJzaXN0ZWQgaW5kZXggdmFsdWVzLiBSZXR1cm5zIGBudWxsYCBpZiBhbiBpbmRleCBpcyBub3QgYXZhaWxhYmxlLlxuICAgICAqLyAgICBLaSh0LCBlKSB7XG4gICAgICAgIGlmIChRbihlKSkgXG4gICAgICAgIC8vIFF1ZXJpZXMgdGhhdCBtYXRjaCBhbGwgZG9jdW1lbnRzIGRvbid0IGJlbmVmaXQgZnJvbSB1c2luZ1xuICAgICAgICAvLyBrZXktYmFzZWQgbG9va3Vwcy4gSXQgaXMgbW9yZSBlZmZpY2llbnQgdG8gc2NhbiBhbGwgZG9jdW1lbnRzIGluIGFcbiAgICAgICAgLy8gY29sbGVjdGlvbiwgcmF0aGVyIHRoYW4gdG8gcGVyZm9ybSBpbmRpdmlkdWFsIGxvb2t1cHMuXG4gICAgICAgIHJldHVybiBSdC5yZXNvbHZlKG51bGwpO1xuICAgICAgICBsZXQgbiA9IEpuKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hbmFnZXIuZ2V0SW5kZXhUeXBlKHQsIG4pLm5leHQoKHMgPT4gMCAvKiBJbmRleFR5cGUuTk9ORSAqLyA9PT0gcyA/IG51bGwgOiAobnVsbCAhPT0gZS5saW1pdCAmJiAxIC8qIEluZGV4VHlwZS5QQVJUSUFMICovID09PSBzICYmIChcbiAgICAgICAgLy8gV2UgY2Fubm90IGFwcGx5IGEgbGltaXQgZm9yIHRhcmdldHMgdGhhdCBhcmUgc2VydmVkIHVzaW5nIGEgcGFydGlhbFxuICAgICAgICAvLyBpbmRleC4gSWYgYSBwYXJ0aWFsIGluZGV4IHdpbGwgYmUgdXNlZCB0byBzZXJ2ZSB0aGUgdGFyZ2V0LCB0aGVcbiAgICAgICAgLy8gcXVlcnkgbWF5IHJldHVybiBhIHN1cGVyc2V0IG9mIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoZSB0YXJnZXRcbiAgICAgICAgLy8gKGUuZy4gaWYgdGhlIGluZGV4IGRvZXNuJ3QgaW5jbHVkZSBhbGwgdGhlIHRhcmdldCdzIGZpbHRlcnMpLCBvclxuICAgICAgICAvLyBtYXkgcmV0dXJuIHRoZSBjb3JyZWN0IHNldCBvZiBkb2N1bWVudHMgaW4gdGhlIHdyb25nIG9yZGVyIChlLmcuIGlmXG4gICAgICAgIC8vIHRoZSBpbmRleCBkb2Vzbid0IGluY2x1ZGUgYSBzZWdtZW50IGZvciBvbmUgb2YgdGhlIG9yZGVyQnlzKS5cbiAgICAgICAgLy8gVGhlcmVmb3JlLCBhIGxpbWl0IHNob3VsZCBub3QgYmUgYXBwbGllZCBpbiBzdWNoIGNhc2VzLlxuICAgICAgICBlID0gWG4oZSwgbnVsbCwgXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovKSwgbiA9IEpuKGUpKSwgdGhpcy5pbmRleE1hbmFnZXIuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdUYXJnZXQodCwgbikubmV4dCgocyA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gZ3MoLi4ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5VaS5nZXREb2N1bWVudHModCwgaSkubmV4dCgocyA9PiB0aGlzLmluZGV4TWFuYWdlci5nZXRNaW5PZmZzZXQodCwgbikubmV4dCgobiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuamkoZSwgcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuemkoZSwgciwgaSwgbi5yZWFkVGltZSkgPyB0aGlzLktpKHQsIFhuKGUsIG51bGwsIFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLykpIDogdGhpcy5XaSh0LCByLCBlLCBuKTtcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICB9KSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcXVlcnkgYmFzZWQgb24gdGhlIHRhcmdldCdzIHBlcnNpc3RlZCBxdWVyeSBtYXBwaW5nLiBSZXR1cm5zXG4gICAgICogYG51bGxgIGlmIHRoZSBtYXBwaW5nIGlzIG5vdCBhdmFpbGFibGUgb3IgY2Fubm90IGJlIHVzZWQuXG4gICAgICovICAgIEdpKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgcmV0dXJuIFFuKGUpIHx8IHMuaXNFcXVhbChydC5taW4oKSkgPyB0aGlzLlFpKHQsIGUpIDogdGhpcy5VaS5nZXREb2N1bWVudHModCwgbikubmV4dCgoaSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5qaShlLCBpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnppKGUsIHIsIG4sIHMpID8gdGhpcy5RaSh0LCBlKSA6IChDKCkgPD0gTG9nTGV2ZWwuREVCVUcgJiYgTihcIlF1ZXJ5RW5naW5lXCIsIFwiUmUtdXNpbmcgcHJldmlvdXMgcmVzdWx0IGZyb20gJXMgdG8gZXhlY3V0ZSBxdWVyeTogJXNcIiwgcy50b1N0cmluZygpLCBlcyhlKSksIFxuICAgICAgICAgICAgdGhpcy5XaSh0LCByLCBlLCB5dChzLCAtMSkpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBRdWVyaWVzIHRoYXQgaGF2ZSBuZXZlciBzZWVuIGEgc25hcHNob3Qgd2l0aG91dCBsaW1ibyBmcmVlIGRvY3VtZW50c1xuICAgICAgICAvLyBzaG91bGQgYWxzbyBiZSBydW4gYXMgYSBmdWxsIGNvbGxlY3Rpb24gc2Nhbi5cbiAgICAgICAgfVxuICAgIC8qKiBBcHBsaWVzIHRoZSBxdWVyeSBmaWx0ZXIgYW5kIHNvcnRpbmcgdG8gdGhlIHByb3ZpZGVkIGRvY3VtZW50cy4gICovICAgIGppKHQsIGUpIHtcbiAgICAgICAgLy8gU29ydCB0aGUgZG9jdW1lbnRzIGFuZCByZS1hcHBseSB0aGUgcXVlcnkgZmlsdGVyIHNpbmNlIHByZXZpb3VzbHlcbiAgICAgICAgLy8gbWF0Y2hpbmcgZG9jdW1lbnRzIGRvIG5vdCBuZWNlc3NhcmlseSBzdGlsbCBtYXRjaCB0aGUgcXVlcnkuXG4gICAgICAgIGxldCBuID0gbmV3IEVlKGlzKHQpKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoKGUsIHMpID0+IHtcbiAgICAgICAgICAgIG5zKHQsIHMpICYmIChuID0gbi5hZGQocykpO1xuICAgICAgICB9KSksIG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYSBsaW1pdCBxdWVyeSBuZWVkcyB0byBiZSByZWZpbGxlZCBmcm9tIGNhY2hlLCBtYWtpbmcgaXRcbiAgICAgKiBpbmVsaWdpYmxlIGZvciBpbmRleC1mcmVlIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeS5cbiAgICAgKiBAcGFyYW0gc29ydGVkUHJldmlvdXNSZXN1bHRzIC0gVGhlIGRvY3VtZW50cyB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5IHdoZW4gaXRcbiAgICAgKiB3YXMgbGFzdCBzeW5jaHJvbml6ZWQsIHNvcnRlZCBieSB0aGUgcXVlcnkncyBjb21wYXJhdG9yLlxuICAgICAqIEBwYXJhbSByZW1vdGVLZXlzIC0gVGhlIGRvY3VtZW50IGtleXMgdGhhdCBtYXRjaGVkIHRoZSBxdWVyeSBhdCB0aGUgbGFzdFxuICAgICAqIHNuYXBzaG90LlxuICAgICAqIEBwYXJhbSBsaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24gLSBUaGUgdmVyc2lvbiBvZiB0aGUgc25hcHNob3Qgd2hlbiB0aGVcbiAgICAgKiBxdWVyeSB3YXMgbGFzdCBzeW5jaHJvbml6ZWQuXG4gICAgICovICAgIHppKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHQubGltaXQpIFxuICAgICAgICAvLyBRdWVyaWVzIHdpdGhvdXQgbGltaXRzIGRvIG5vdCBuZWVkIHRvIGJlIHJlZmlsbGVkLlxuICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIGlmIChuLnNpemUgIT09IGUuc2l6ZSkgXG4gICAgICAgIC8vIFRoZSBxdWVyeSBuZWVkcyB0byBiZSByZWZpbGxlZCBpZiBhIHByZXZpb3VzbHkgbWF0Y2hpbmcgZG9jdW1lbnQgbm9cbiAgICAgICAgLy8gbG9uZ2VyIG1hdGNoZXMuXG4gICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgLy8gTGltaXQgcXVlcmllcyBhcmUgbm90IGVsaWdpYmxlIGZvciBpbmRleC1mcmVlIHF1ZXJ5IGV4ZWN1dGlvbiBpZiB0aGVyZSBpc1xuICAgICAgICAvLyBhIHBvdGVudGlhbCB0aGF0IGFuIG9sZGVyIGRvY3VtZW50IGZyb20gY2FjaGUgbm93IHNvcnRzIGJlZm9yZSBhIGRvY3VtZW50XG4gICAgICAgIC8vIHRoYXQgd2FzIHByZXZpb3VzbHkgcGFydCBvZiB0aGUgbGltaXQuIFRoaXMsIGhvd2V2ZXIsIGNhbiBvbmx5IGhhcHBlbiBpZlxuICAgICAgICAvLyB0aGUgZG9jdW1lbnQgYXQgdGhlIGVkZ2Ugb2YgdGhlIGxpbWl0IGdvZXMgb3V0IG9mIGxpbWl0LlxuICAgICAgICAvLyBJZiBhIGRvY3VtZW50IHRoYXQgaXMgbm90IHRoZSBsaW1pdCBib3VuZGFyeSBzb3J0cyBkaWZmZXJlbnRseSxcbiAgICAgICAgLy8gdGhlIGJvdW5kYXJ5IG9mIHRoZSBsaW1pdCBpdHNlbGYgZGlkIG5vdCBjaGFuZ2UgYW5kIGRvY3VtZW50cyBmcm9tIGNhY2hlXG4gICAgICAgIC8vIHdpbGwgY29udGludWUgdG8gYmUgXCJyZWplY3RlZFwiIGJ5IHRoaXMgYm91bmRhcnkuIFRoZXJlZm9yZSwgd2UgY2FuIGlnbm9yZVxuICAgICAgICAvLyBhbnkgbW9kaWZpY2F0aW9ucyB0aGF0IGRvbid0IGFmZmVjdCB0aGUgbGFzdCBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICBjb25zdCBpID0gXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovID09PSB0LmxpbWl0VHlwZSA/IGUubGFzdCgpIDogZS5maXJzdCgpO1xuICAgICAgICByZXR1cm4gISFpICYmIChpLmhhc1BlbmRpbmdXcml0ZXMgfHwgaS52ZXJzaW9uLmNvbXBhcmVUbyhzKSA+IDApO1xuICAgIH1cbiAgICBRaSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBDKCkgPD0gTG9nTGV2ZWwuREVCVUcgJiYgTihcIlF1ZXJ5RW5naW5lXCIsIFwiVXNpbmcgZnVsbCBjb2xsZWN0aW9uIHNjYW4gdG8gZXhlY3V0ZSBxdWVyeTpcIiwgZXMoZSkpLCBcbiAgICAgICAgdGhpcy5VaS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIEl0Lm1pbigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tYmluZXMgdGhlIHJlc3VsdHMgZnJvbSBhbiBpbmRleGVkIGV4ZWN1dGlvbiB3aXRoIHRoZSByZW1haW5pbmcgZG9jdW1lbnRzXG4gICAgICogdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBpbmRleGVkLlxuICAgICAqLyAgICBXaSh0LCBlLCBuLCBzKSB7XG4gICAgICAgIC8vIFJldHJpZXZlIGFsbCByZXN1bHRzIGZvciBkb2N1bWVudHMgdGhhdCB3ZXJlIHVwZGF0ZWQgc2luY2UgdGhlIG9mZnNldC5cbiAgICAgICAgcmV0dXJuIHRoaXMuVWkuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSh0LCBuLCBzKS5uZXh0KCh0ID0+IChcbiAgICAgICAgLy8gTWVyZ2Ugd2l0aCBleGlzdGluZyByZXN1bHRzXG4gICAgICAgIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0ID0gdC5pbnNlcnQoZS5rZXksIGUpO1xuICAgICAgICB9KSksIHQpKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbXBsZW1lbnRzIGBMb2NhbFN0b3JlYCBpbnRlcmZhY2UuXG4gKlxuICogTm90ZTogc29tZSBmaWVsZCBkZWZpbmVkIGluIHRoaXMgY2xhc3MgbWlnaHQgaGF2ZSBwdWJsaWMgYWNjZXNzIGxldmVsLCBidXRcbiAqIHRoZSBjbGFzcyBpcyBub3QgZXhwb3J0ZWQgc28gdGhleSBhcmUgb25seSBhY2Nlc3NpYmxlIGZyb20gdGhpcyBtb2R1bGUuXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBpbXBsZW1lbnQgb3B0aW9uYWwgZmVhdHVyZXMgKGxpa2UgYnVuZGxlcykgaW4gZnJlZVxuICogZnVuY3Rpb25zLCBzdWNoIHRoYXQgdGhleSBhcmUgdHJlZS1zaGFrZWFibGUuXG4gKi9cbmNsYXNzIG51IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogTWFuYWdlcyBvdXIgaW4tbWVtb3J5IG9yIGR1cmFibGUgcGVyc2lzdGVuY2UuICovXG4gICAgdCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gdCwgdGhpcy5IaSA9IGUsIHRoaXMuc2VyaWFsaXplciA9IHMsIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBhIHRhcmdldElEIHRvIGRhdGEgYWJvdXQgaXRzIHRhcmdldC5cbiAgICAgICAgICpcbiAgICAgICAgICogUE9SVElORyBOT1RFOiBXZSBhcmUgdXNpbmcgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIG9uIFdlYiB0byBtYWtlIHJlLXJ1bnNcbiAgICAgICAgICogb2YgYGFwcGx5UmVtb3RlRXZlbnQoKWAgaWRlbXBvdGVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuSmkgPSBuZXcgcGUoZXQpLCBcbiAgICAgICAgLyoqIE1hcHMgYSB0YXJnZXQgdG8gaXRzIHRhcmdldElELiAqL1xuICAgICAgICAvLyBUT0RPKHd1YW5keSk6IEV2YWx1YXRlIGlmIFRhcmdldElkIGNhbiBiZSBwYXJ0IG9mIFRhcmdldC5cbiAgICAgICAgdGhpcy5ZaSA9IG5ldyBvcygodCA9PiAkbih0KSksIE9uKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHBlciBjb2xsZWN0aW9uIGdyb3VwIGluZGV4IG9mIHRoZSBsYXN0IHJlYWQgdGltZSBwcm9jZXNzZWQgYnlcbiAgICAgICAgICogYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cbiAgICAgICAgICpcbiAgICAgICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuWGkgPSBuZXcgTWFwLCB0aGlzLlppID0gdC5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCksIHRoaXMuQnMgPSB0LmdldFRhcmdldENhY2hlKCksIFxuICAgICAgICB0aGlzLnFzID0gdC5nZXRCdW5kbGVDYWNoZSgpLCB0aGlzLnRyKG4pO1xuICAgIH1cbiAgICB0cih0KSB7XG4gICAgICAgIC8vIFRPRE8oaW5kZXhpbmcpOiBBZGQgc3BlYyB0ZXN0cyB0aGF0IHRlc3QgdGhlc2UgY29tcG9uZW50cyBjaGFuZ2UgYWZ0ZXIgYVxuICAgICAgICAvLyB1c2VyIGNoYW5nZVxuICAgICAgICB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXREb2N1bWVudE92ZXJsYXlDYWNoZSh0KSwgdGhpcy5pbmRleE1hbmFnZXIgPSB0aGlzLnBlcnNpc3RlbmNlLmdldEluZGV4TWFuYWdlcih0KSwgXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IHRoaXMucGVyc2lzdGVuY2UuZ2V0TXV0YXRpb25RdWV1ZSh0LCB0aGlzLmluZGV4TWFuYWdlciksIHRoaXMubG9jYWxEb2N1bWVudHMgPSBuZXcga28odGhpcy5aaSwgdGhpcy5tdXRhdGlvblF1ZXVlLCB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLCB0aGlzLmluZGV4TWFuYWdlciksIFxuICAgICAgICB0aGlzLlppLnNldEluZGV4TWFuYWdlcih0aGlzLmluZGV4TWFuYWdlciksIHRoaXMuSGkuaW5pdGlhbGl6ZSh0aGlzLmxvY2FsRG9jdW1lbnRzLCB0aGlzLmluZGV4TWFuYWdlcik7XG4gICAgfVxuICAgIGNvbGxlY3RHYXJiYWdlKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJDb2xsZWN0IGdhcmJhZ2VcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB0LmNvbGxlY3QoZSwgdGhpcy5KaSkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN1KFxuLyoqIE1hbmFnZXMgb3VyIGluLW1lbW9yeSBvciBkdXJhYmxlIHBlcnNpc3RlbmNlLiAqL1xudCwgZSwgbiwgcykge1xuICAgIHJldHVybiBuZXcgbnUodCwgZSwgbiwgcyk7XG59XG5cbi8qKlxuICogVGVsbHMgdGhlIExvY2FsU3RvcmUgdGhhdCB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgY2hhbmdlZC5cbiAqXG4gKiBJbiByZXNwb25zZSB0aGUgbG9jYWwgc3RvcmUgc3dpdGNoZXMgdGhlIG11dGF0aW9uIHF1ZXVlIHRvIHRoZSBuZXcgdXNlciBhbmRcbiAqIHJldHVybnMgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzLlxuICovXG4vLyBQT1JUSU5HIE5PVEU6IEFuZHJvaWQgYW5kIGlPUyBvbmx5IHJldHVybiB0aGUgZG9jdW1lbnRzIGFmZmVjdGVkIGJ5IHRoZVxuLy8gY2hhbmdlLlxuYXN5bmMgZnVuY3Rpb24gaXUodCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgIHJldHVybiBhd2FpdCBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiSGFuZGxlIHVzZXIgY2hhbmdlXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4ge1xuICAgICAgICAvLyBTd2FwIG91dCB0aGUgbXV0YXRpb24gcXVldWUsIGdyYWJiaW5nIHRoZSBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXNcbiAgICAgICAgLy8gYmVmb3JlIGFuZCBhZnRlci5cbiAgICAgICAgbGV0IHM7XG4gICAgICAgIHJldHVybiBuLm11dGF0aW9uUXVldWUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzKHQpLm5leHQoKGkgPT4gKHMgPSBpLCBuLnRyKGUpLCBuLm11dGF0aW9uUXVldWUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzKHQpKSkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IFtdLCByID0gW107XG4gICAgICAgICAgICAvLyBVbmlvbiB0aGUgb2xkL25ldyBjaGFuZ2VkIGtleXMuXG4gICAgICAgICAgICBsZXQgbyA9IGdzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcykge1xuICAgICAgICAgICAgICAgIGkucHVzaCh0LmJhdGNoSWQpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0Lm11dGF0aW9ucykgbyA9IG8uYWRkKGUua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICAgICAgci5wdXNoKHQuYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQubXV0YXRpb25zKSBvID0gby5hZGQoZS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZXQgb2YgYWxsIChwb3RlbnRpYWxseSkgY2hhbmdlZCBkb2N1bWVudHMgYW5kIHRoZSBsaXN0XG4gICAgICAgICAgICAvLyBvZiBtdXRhdGlvbiBiYXRjaCBJRHMgdGhhdCB3ZXJlIGFmZmVjdGVkIGJ5IGNoYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyh0LCBvKS5uZXh0KCh0ID0+ICh7XG4gICAgICAgICAgICAgICAgZXI6IHQsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZEJhdGNoSWRzOiBpLFxuICAgICAgICAgICAgICAgIGFkZGVkQmF0Y2hJZHM6IHJcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qIEFjY2VwdHMgbG9jYWxseSBnZW5lcmF0ZWQgTXV0YXRpb25zIGFuZCBjb21taXQgdGhlbSB0byBzdG9yYWdlLiAqL1xuLyoqXG4gKiBBY2tub3dsZWRnZXMgdGhlIGdpdmVuIGJhdGNoLlxuICpcbiAqIE9uIHRoZSBoYXBweSBwYXRoIHdoZW4gYSBiYXRjaCBpcyBhY2tub3dsZWRnZWQsIHRoZSBsb2NhbCBzdG9yZSB3aWxsXG4gKlxuICogICsgcmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZTtcbiAqICArIGFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGU7XG4gKiAgKyByZWNhbGN1bGF0ZSB0aGUgbGF0ZW5jeSBjb21wZW5zYXRlZCB2aWV3IGltcGxpZWQgYnkgdGhvc2UgY2hhbmdlcyAodGhlcmVcbiAqICAgIG1heSBiZSBtdXRhdGlvbnMgaW4gdGhlIHF1ZXVlIHRoYXQgYWZmZWN0IHRoZSBkb2N1bWVudHMgYnV0IGhhdmVuJ3QgYmVlblxuICogICAgYWNrbm93bGVkZ2VkIHlldCk7IGFuZFxuICogICsgZ2l2ZSB0aGUgY2hhbmdlZCBkb2N1bWVudHMgYmFjayB0aGUgc3luYyBlbmdpbmVcbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIChtb2RpZmllZCkgZG9jdW1lbnRzLlxuICovXG5mdW5jdGlvbiBydSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBY2tub3dsZWRnZSBiYXRjaFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsICh0ID0+IHtcbiAgICAgICAgY29uc3QgcyA9IGUuYmF0Y2gua2V5cygpLCBpID0gbi5aaS5uZXdDaGFuZ2VCdWZmZXIoe1xuICAgICAgICAgICAgdHJhY2tSZW1vdmFsczogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5iYXRjaCwgciA9IGkua2V5cygpO1xuICAgICAgICAgICAgbGV0IG8gPSBSdC5yZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm4gci5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICBvID0gby5uZXh0KCgoKSA9PiBzLmdldEVudHJ5KGUsIHQpKSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmRvY1ZlcnNpb25zLmdldCh0KTtcbiAgICAgICAgICAgICAgICAgICAgRihudWxsICE9PSByKSwgZS52ZXJzaW9uLmNvbXBhcmVUbyhyKSA8IDAgJiYgKGkuYXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIG4pLCBlLmlzVmFsaWREb2N1bWVudCgpICYmIChcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBjb21taXRWZXJzaW9uIGFzIHRoZSByZWFkVGltZSByYXRoZXIgdGhhbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQncyB1cGRhdGVUaW1lIHNpbmNlIHRoZSB1cGRhdGVUaW1lIGlzIG5vdCBhZHZhbmNlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdXBkYXRlcyB0aGF0IGRvIG5vdCBtb2RpZnkgdGhlIHVuZGVybHlpbmcgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0UmVhZFRpbWUobi5jb21taXRWZXJzaW9uKSwgcy5hZGRFbnRyeShlKSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSwgby5uZXh0KCgoKSA9PiB0Lm11dGF0aW9uUXVldWUucmVtb3ZlTXV0YXRpb25CYXRjaChlLCBpKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudHMgYWZmZWN0ZWQgYnkgYSBtdXRhdGlvbiBiYXRjaC4gKi9cbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgKG4sIHQsIGUsIGkpLm5leHQoKCgpID0+IGkuYXBwbHkodCkpKS5uZXh0KCgoKSA9PiBuLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2sodCkpKS5uZXh0KCgoKSA9PiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnJlbW92ZU92ZXJsYXlzRm9yQmF0Y2hJZCh0LCBzLCBlLmJhdGNoLmJhdGNoSWQpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyh0LCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBsZXQgZSA9IGdzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHQubXV0YXRpb25SZXN1bHRzLmxlbmd0aDsgKytuKSB7XG4gICAgICAgICAgICAgICAgdC5tdXRhdGlvblJlc3VsdHNbbl0udHJhbnNmb3JtUmVzdWx0cy5sZW5ndGggPiAwICYmIChlID0gZS5hZGQodC5iYXRjaC5tdXRhdGlvbnNbbl0ua2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlbW92ZXMgbXV0YXRpb25zIGZyb20gdGhlIE11dGF0aW9uUXVldWUgZm9yIHRoZSBzcGVjaWZpZWQgYmF0Y2g7XG4gKiBMb2NhbERvY3VtZW50cyB3aWxsIGJlIHJlY2FsY3VsYXRlZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIG1vZGlmaWVkIGRvY3VtZW50cy5cbiAqLyAoZSkpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModCwgcykpKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBjb25zaXN0ZW50IHNuYXBzaG90IHByb2Nlc3NlZCAodXNlZCBieSB0aGUgUmVtb3RlU3RvcmUgdG9cbiAqIGRldGVybWluZSB3aGV0aGVyIHRvIGJ1ZmZlciBpbmNvbWluZyBzbmFwc2hvdHMgZnJvbSB0aGUgYmFja2VuZCkuXG4gKi9cbmZ1bmN0aW9uIG91KHQpIHtcbiAgICBjb25zdCBlID0gTCh0KTtcbiAgICByZXR1cm4gZS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBsYXN0IHJlbW90ZSBzbmFwc2hvdCB2ZXJzaW9uXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gZS5Ccy5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpKSk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgXCJncm91bmQtc3RhdGVcIiAocmVtb3RlKSBkb2N1bWVudHMuIFdlIGFzc3VtZSB0aGF0IHRoZSByZW1vdGVcbiAqIGV2ZW50IHJlZmxlY3RzIGFueSB3cml0ZSBiYXRjaGVzIHRoYXQgaGF2ZSBiZWVuIGFja25vd2xlZGdlZCBvciByZWplY3RlZFxuICogKGkuZS4gd2UgZG8gbm90IHJlLWFwcGx5IGxvY2FsIG11dGF0aW9ucyB0byB1cGRhdGVzIGZyb20gdGhpcyBldmVudCkuXG4gKlxuICogTG9jYWxEb2N1bWVudHMgYXJlIHJlLWNhbGN1bGF0ZWQgaWYgdGhlcmUgYXJlIHJlbWFpbmluZyBtdXRhdGlvbnMgaW4gdGhlXG4gKiBxdWV1ZS5cbiAqLyBmdW5jdGlvbiB1dSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCksIHMgPSBlLnNuYXBzaG90VmVyc2lvbjtcbiAgICBsZXQgaSA9IG4uSmk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBcHBseSByZW1vdGUgZXZlbnRcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAodCA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBuLlppLm5ld0NoYW5nZUJ1ZmZlcih7XG4gICAgICAgICAgICB0cmFja1JlbW92YWxzOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVzZXQgbmV3VGFyZ2V0RGF0YUJ5VGFyZ2V0TWFwIGluIGNhc2UgdGhpcyB0cmFuc2FjdGlvbiBnZXRzIHJlLXJ1bi5cbiAgICAgICAgICAgICAgICBpID0gbi5KaTtcbiAgICAgICAgY29uc3QgbyA9IFtdO1xuICAgICAgICBlLnRhcmdldENoYW5nZXMuZm9yRWFjaCgoKHIsIHUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBpLmdldCh1KTtcbiAgICAgICAgICAgIGlmICghYykgcmV0dXJuO1xuICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIHJlbW90ZSBrZXlzIGlmIHRoZSB0YXJnZXQgaXMgc3RpbGwgYWN0aXZlLiBUaGlzXG4gICAgICAgICAgICAvLyBlbnN1cmVzIHRoYXQgd2UgY2FuIHBlcnNpc3QgdGhlIHVwZGF0ZWQgdGFyZ2V0IGRhdGEgYWxvbmcgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHVwZGF0ZWQgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaChuLkJzLnJlbW92ZU1hdGNoaW5nS2V5cyh0LCByLnJlbW92ZWREb2N1bWVudHMsIHUpLm5leHQoKCgpID0+IG4uQnMuYWRkTWF0Y2hpbmdLZXlzKHQsIHIuYWRkZWREb2N1bWVudHMsIHUpKSkpO1xuICAgICAgICAgICAgbGV0IGEgPSBjLndpdGhTZXF1ZW5jZU51bWJlcih0LmN1cnJlbnRTZXF1ZW5jZU51bWJlcik7XG4gICAgICAgICAgICBudWxsICE9PSBlLnRhcmdldE1pc21hdGNoZXMuZ2V0KHUpID8gYSA9IGEud2l0aFJlc3VtZVRva2VuKFZlLkVNUFRZX0JZVEVfU1RSSU5HLCBydC5taW4oKSkud2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24ocnQubWluKCkpIDogci5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwICYmIChhID0gYS53aXRoUmVzdW1lVG9rZW4oci5yZXN1bWVUb2tlbiwgcykpLCBcbiAgICAgICAgICAgIGkgPSBpLmluc2VydCh1LCBhKSwgXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRhcmdldCBkYXRhIGlmIHRoZXJlIGFyZSB0YXJnZXQgY2hhbmdlcyAob3IgaWZcbiAgICAgICAgICAgIC8vIHN1ZmZpY2llbnQgdGltZSBoYXMgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZSkuXG4gICAgICAgICAgICAvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV3VGFyZ2V0RGF0YSBzaG91bGQgYmUgcGVyc2lzdGVkIGR1cmluZyBhbiB1cGRhdGUgb2ZcbiAqIGFuIGFjdGl2ZSB0YXJnZXQuIFRhcmdldERhdGEgc2hvdWxkIGFsd2F5cyBiZSBwZXJzaXN0ZWQgd2hlbiBhIHRhcmdldCBpc1xuICogYmVpbmcgcmVsZWFzZWQgYW5kIHNob3VsZCBub3QgY2FsbCB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIFdoaWxlIHRoZSB0YXJnZXQgaXMgYWN0aXZlLCBUYXJnZXREYXRhIHVwZGF0ZXMgY2FuIGJlIG9taXR0ZWQgd2hlbiBub3RoaW5nXG4gKiBhYm91dCB0aGUgdGFyZ2V0IGhhcyBjaGFuZ2VkIGV4Y2VwdCBtZXRhZGF0YSBsaWtlIHRoZSByZXN1bWUgdG9rZW4gb3JcbiAqIHNuYXBzaG90IHZlcnNpb24uIE9jY2FzaW9uYWxseSBpdCdzIHdvcnRoIHRoZSBleHRyYSB3cml0ZSB0byBwcmV2ZW50IHRoZXNlXG4gKiB2YWx1ZXMgZnJvbSBnZXR0aW5nIHRvbyBzdGFsZSBhZnRlciBhIGNyYXNoLCBidXQgdGhpcyBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIHRvbyBmcmVxdWVudC5cbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBwZXJzaXN0IHRhcmdldCBkYXRhIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhIHJlc3VtZSB0b2tlbi5cbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdC5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBhbGxvdyByZXN1bWUgdG9rZW4gY2hhbmdlcyB0byBiZSBidWZmZXJlZCBpbmRlZmluaXRlbHkuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgdXMgdG8gYmUgcmVhc29uYWJseSB1cC10by1kYXRlIGFmdGVyIGEgY3Jhc2ggYW5kIGF2b2lkcyBuZWVkaW5nXG4gICAgICAgICAgICAgICAgLy8gdG8gbG9vcCBvdmVyIGFsbCBhY3RpdmUgcXVlcmllcyBvbiBzaHV0ZG93bi4gRXNwZWNpYWxseSBpbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIC8vIHdlIG1heSBub3QgZ2V0IHRpbWUgdG8gZG8gYW55dGhpbmcgaW50ZXJlc3Rpbmcgd2hpbGUgdGhlIGN1cnJlbnQgdGFiIGlzXG4gICAgICAgICAgICAgICAgLy8gY2xvc2luZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc25hcHNob3RWZXJzaW9uLnRvTWljcm9zZWNvbmRzKCkgLSB0LnNuYXBzaG90VmVyc2lvbi50b01pY3Jvc2Vjb25kcygpID49IDNlOCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpZiB0aGUgb25seSB0aGluZyB0aGF0IGhhcyBjaGFuZ2VkIGFib3V0IGEgdGFyZ2V0IGlzIGl0cyByZXN1bWVcbiAgICAgICAgICAgICAgICAvLyB0b2tlbiBpdCdzIG5vdCB3b3J0aCBwZXJzaXN0aW5nLiBOb3RlIHRoYXQgdGhlIFJlbW90ZVN0b3JlIGtlZXBzIGFuXG4gICAgICAgICAgICAgICAgLy8gaW4tbWVtb3J5IHZpZXcgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgdGFyZ2V0cyB3aGljaCBpbmNsdWRlcyB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHJlc3VtZSB0b2tlbiwgc28gc3RyZWFtIGZhaWx1cmUgb3IgdXNlciBjaGFuZ2VzIHdpbGwgc3RpbGwgdXNlIGFuXG4gICAgICAgICAgICAgICAgLy8gdXAtdG8tZGF0ZSByZXN1bWUgdG9rZW4gcmVnYXJkbGVzcyBvZiB3aGF0IHdlIGRvIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmFkZGVkRG9jdW1lbnRzLnNpemUgKyBuLm1vZGlmaWVkRG9jdW1lbnRzLnNpemUgKyBuLnJlbW92ZWREb2N1bWVudHMuc2l6ZSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIE5vdGlmaWVzIGxvY2FsIHN0b3JlIG9mIHRoZSBjaGFuZ2VkIHZpZXdzIHRvIGxvY2FsbHkgcGluIGRvY3VtZW50cy5cbiAqLyAoYywgYSwgcikgJiYgby5wdXNoKG4uQnMudXBkYXRlVGFyZ2V0RGF0YSh0LCBhKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgbGV0IHUgPSBjcygpLCBjID0gZ3MoKTtcbiAgICAgICAgLy8gSEFDSzogVGhlIG9ubHkgcmVhc29uIHdlIGFsbG93IGEgbnVsbCBzbmFwc2hvdCB2ZXJzaW9uIGlzIHNvIHRoYXQgd2VcbiAgICAgICAgLy8gY2FuIHN5bnRoZXNpemUgcmVtb3RlIGV2ZW50cyB3aGVuIHdlIGdldCBwZXJtaXNzaW9uIGRlbmllZCBlcnJvcnMgd2hpbGVcbiAgICAgICAgLy8gdHJ5aW5nIHRvIHJlc29sdmUgdGhlIHN0YXRlIG9mIGEgbG9jYWxseSBjYWNoZWQgZG9jdW1lbnQgdGhhdCBpcyBpblxuICAgICAgICAvLyBsaW1iby5cbiAgICAgICAgaWYgKGUuZG9jdW1lbnRVcGRhdGVzLmZvckVhY2goKHMgPT4ge1xuICAgICAgICAgICAgZS5yZXNvbHZlZExpbWJvRG9jdW1lbnRzLmhhcyhzKSAmJiBvLnB1c2gobi5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS51cGRhdGVMaW1ib0RvY3VtZW50KHQsIHMpKTtcbiAgICAgICAgfSkpLCBcbiAgICAgICAgLy8gRWFjaCBsb29wIGl0ZXJhdGlvbiBvbmx5IGFmZmVjdHMgaXRzIFwib3duXCIgZG9jLCBzbyBpdCdzIHNhZmUgdG8gZ2V0IGFsbFxuICAgICAgICAvLyB0aGUgcmVtb3RlIGRvY3VtZW50cyBpbiBhZHZhbmNlIGluIGEgc2luZ2xlIGNhbGwuXG4gICAgICAgIG8ucHVzaChjdSh0LCByLCBlLmRvY3VtZW50VXBkYXRlcykubmV4dCgodCA9PiB7XG4gICAgICAgICAgICB1ID0gdC5uciwgYyA9IHQuc3I7XG4gICAgICAgIH0pKSksICFzLmlzRXF1YWwocnQubWluKCkpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gbi5Ccy5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHQpLm5leHQoKGUgPT4gbi5Ccy5zZXRUYXJnZXRzTWV0YWRhdGEodCwgdC5jdXJyZW50U2VxdWVuY2VOdW1iZXIsIHMpKSk7XG4gICAgICAgICAgICBvLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJ0LndhaXRGb3IobykubmV4dCgoKCkgPT4gci5hcHBseSh0KSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHModCwgdSwgYykpKS5uZXh0KCgoKSA9PiB1KSk7XG4gICAgfSkpLnRoZW4oKHQgPT4gKG4uSmkgPSBpLCB0KSkpO1xufVxuXG4vKipcbiAqIFBvcHVsYXRlcyBkb2N1bWVudCBjaGFuZ2UgYnVmZmVyIHdpdGggZG9jdW1lbnRzIGZyb20gYmFja2VuZCBvciBhIGJ1bmRsZS5cbiAqIFJldHVybnMgdGhlIGRvY3VtZW50IGNoYW5nZXMgcmVzdWx0aW5nIGZyb20gYXBwbHlpbmcgdGhvc2UgZG9jdW1lbnRzLCBhbmRcbiAqIGFsc28gYSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZSBhcmUgY2hhbmdlZCBhcyBhIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gdHhuIC0gVHJhbnNhY3Rpb24gdG8gdXNlIHRvIHJlYWQgZXhpc3RpbmcgZG9jdW1lbnRzIGZyb20gc3RvcmFnZS5cbiAqIEBwYXJhbSBkb2N1bWVudEJ1ZmZlciAtIERvY3VtZW50IGJ1ZmZlciB0byBjb2xsZWN0IHRoZSByZXN1bHRlZCBjaGFuZ2VzIHRvIGJlXG4gKiAgICAgICAgYXBwbGllZCB0byBzdG9yYWdlLlxuICogQHBhcmFtIGRvY3VtZW50cyAtIERvY3VtZW50cyB0byBiZSBhcHBsaWVkLlxuICovIGZ1bmN0aW9uIGN1KHQsIGUsIG4pIHtcbiAgICBsZXQgcyA9IGdzKCksIGkgPSBncygpO1xuICAgIHJldHVybiBuLmZvckVhY2goKHQgPT4gcyA9IHMuYWRkKHQpKSksIGUuZ2V0RW50cmllcyh0LCBzKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgbGV0IHMgPSBjcygpO1xuICAgICAgICByZXR1cm4gbi5mb3JFYWNoKCgobiwgcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbyA9IHQuZ2V0KG4pO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2VlIGlmIHRoZXJlIGlzIGEgZXhpc3RlbmNlIHN0YXRlIGNoYW5nZSBmb3IgdGhpcyBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaXNGb3VuZERvY3VtZW50KCkgIT09IG8uaXNGb3VuZERvY3VtZW50KCkgJiYgKGkgPSBpLmFkZChuKSksIFxuICAgICAgICAgICAgLy8gTm90ZTogVGhlIG9yZGVyIG9mIHRoZSBzdGVwcyBiZWxvdyBpcyBpbXBvcnRhbnQsIHNpbmNlIHdlIHdhbnRcbiAgICAgICAgICAgIC8vIHRvIGVuc3VyZSB0aGF0IHJlamVjdGVkIGxpbWJvIHJlc29sdXRpb25zICh3aGljaCBmYWJyaWNhdGVcbiAgICAgICAgICAgIC8vIE5vRG9jdW1lbnRzIHdpdGggU25hcHNob3RWZXJzaW9uLm1pbigpKSBuZXZlciBhZGQgZG9jdW1lbnRzIHRvXG4gICAgICAgICAgICAvLyBjYWNoZS5cbiAgICAgICAgICAgIHIuaXNOb0RvY3VtZW50KCkgJiYgci52ZXJzaW9uLmlzRXF1YWwocnQubWluKCkpID8gKFxuICAgICAgICAgICAgLy8gTm9Eb2N1bWVudHMgd2l0aCBTbmFwc2hvdFZlcnNpb24ubWluKCkgYXJlIHVzZWQgaW4gbWFudWZhY3R1cmVkXG4gICAgICAgICAgICAvLyBldmVudHMuIFdlIHJlbW92ZSB0aGVzZSBkb2N1bWVudHMgZnJvbSBjYWNoZSBzaW5jZSB3ZSBsb3N0XG4gICAgICAgICAgICAvLyBhY2Nlc3MuXG4gICAgICAgICAgICBlLnJlbW92ZUVudHJ5KG4sIHIucmVhZFRpbWUpLCBzID0gcy5pbnNlcnQobiwgcikpIDogIW8uaXNWYWxpZERvY3VtZW50KCkgfHwgci52ZXJzaW9uLmNvbXBhcmVUbyhvLnZlcnNpb24pID4gMCB8fCAwID09PSByLnZlcnNpb24uY29tcGFyZVRvKG8udmVyc2lvbikgJiYgby5oYXNQZW5kaW5nV3JpdGVzID8gKGUuYWRkRW50cnkociksIFxuICAgICAgICAgICAgcyA9IHMuaW5zZXJ0KG4sIHIpKSA6IE4oXCJMb2NhbFN0b3JlXCIsIFwiSWdub3Jpbmcgb3V0ZGF0ZWQgd2F0Y2ggdXBkYXRlIGZvciBcIiwgbiwgXCIuIEN1cnJlbnQgdmVyc2lvbjpcIiwgby52ZXJzaW9uLCBcIiBXYXRjaCB2ZXJzaW9uOlwiLCByLnZlcnNpb24pO1xuICAgICAgICB9KSksIHtcbiAgICAgICAgICAgIG5yOiBzLFxuICAgICAgICAgICAgc3I6IGlcbiAgICAgICAgfTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbXV0YXRpb24gYmF0Y2ggYWZ0ZXIgdGhlIHBhc3NlZCBpbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZVxuICogb3IgbnVsbCBpZiBlbXB0eS5cbiAqIEBwYXJhbSBhZnRlckJhdGNoSWQgLSBJZiBwcm92aWRlZCwgdGhlIGJhdGNoIHRvIHNlYXJjaCBhZnRlci5cbiAqIEByZXR1cm5zIFRoZSBuZXh0IG11dGF0aW9uIG9yIG51bGwgaWYgdGhlcmUgd2Fzbid0IG9uZS5cbiAqL1xuZnVuY3Rpb24gYXUodCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5leHQgbXV0YXRpb24gYmF0Y2hcIiwgXCJyZWFkb25seVwiLCAodCA9PiAodm9pZCAwID09PSBlICYmIChlID0gLTEpLCBcbiAgICBuLm11dGF0aW9uUXVldWUuZ2V0TmV4dE11dGF0aW9uQmF0Y2hBZnRlckJhdGNoSWQodCwgZSkpKSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBEb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5IG9yIG51bGwgaWYgbm90XG4gKiBmb3VuZCAtIHVzZWQgZm9yIHRlc3RpbmcuXG4gKi9cbi8qKlxuICogQXNzaWducyB0aGUgZ2l2ZW4gdGFyZ2V0IGFuIGludGVybmFsIElEIHNvIHRoYXQgaXRzIHJlc3VsdHMgY2FuIGJlIHBpbm5lZCBzb1xuICogdGhleSBkb24ndCBnZXQgR0MnZC4gQSB0YXJnZXQgbXVzdCBiZSBhbGxvY2F0ZWQgaW4gdGhlIGxvY2FsIHN0b3JlIGJlZm9yZVxuICogdGhlIHN0b3JlIGNhbiBiZSB1c2VkIHRvIG1hbmFnZSBpdHMgdmlldy5cbiAqXG4gKiBBbGxvY2F0aW5nIGFuIGFscmVhZHkgYWxsb2NhdGVkIGBUYXJnZXRgIHdpbGwgcmV0dXJuIHRoZSBleGlzdGluZyBgVGFyZ2V0RGF0YWBcbiAqIGZvciB0aGF0IGBUYXJnZXRgLlxuICovXG5mdW5jdGlvbiBodSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBbGxvY2F0ZSB0YXJnZXRcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4ge1xuICAgICAgICBsZXQgcztcbiAgICAgICAgcmV0dXJuIG4uQnMuZ2V0VGFyZ2V0RGF0YSh0LCBlKS5uZXh0KChpID0+IGkgPyAoXG4gICAgICAgIC8vIFRoaXMgdGFyZ2V0IGhhcyBiZWVuIGxpc3RlbmVkIHRvIHByZXZpb3VzbHksIHNvIHJldXNlIHRoZVxuICAgICAgICAvLyBwcmV2aW91cyB0YXJnZXRJRC5cbiAgICAgICAgLy8gVE9ETyhtY2cpOiBmcmVzaGVuIGxhc3QgYWNjZXNzZWQgZGF0ZT9cbiAgICAgICAgcyA9IGksIFJ0LnJlc29sdmUocykpIDogbi5Ccy5hbGxvY2F0ZVRhcmdldElkKHQpLm5leHQoKGkgPT4gKHMgPSBuZXcgY3IoZSwgaSwgXCJUYXJnZXRQdXJwb3NlTGlzdGVuXCIgLyogVGFyZ2V0UHVycG9zZS5MaXN0ZW4gKi8gLCB0LmN1cnJlbnRTZXF1ZW5jZU51bWJlciksIFxuICAgICAgICBuLkJzLmFkZFRhcmdldERhdGEodCwgcykubmV4dCgoKCkgPT4gcykpKSkpKSk7XG4gICAgfSkpLnRoZW4oKHQgPT4ge1xuICAgICAgICAvLyBJZiBNdWx0aS1UYWIgaXMgZW5hYmxlZCwgdGhlIGV4aXN0aW5nIHRhcmdldCBkYXRhIG1heSBiZSBuZXdlciB0aGFuXG4gICAgICAgIC8vIHRoZSBpbi1tZW1vcnkgZGF0YVxuICAgICAgICBjb25zdCBzID0gbi5KaS5nZXQodC50YXJnZXRJZCk7XG4gICAgICAgIHJldHVybiAobnVsbCA9PT0gcyB8fCB0LnNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8ocy5zbmFwc2hvdFZlcnNpb24pID4gMCkgJiYgKG4uSmkgPSBuLkppLmluc2VydCh0LnRhcmdldElkLCB0KSwgXG4gICAgICAgIG4uWWkuc2V0KGUsIHQudGFyZ2V0SWQpKSwgdDtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgVGFyZ2V0RGF0YSBhcyBzZWVuIGJ5IHRoZSBMb2NhbFN0b3JlLCBpbmNsdWRpbmcgdXBkYXRlcyB0aGF0IG1heVxuICogaGF2ZSBub3QgeWV0IGJlZW4gcGVyc2lzdGVkIHRvIHRoZSBUYXJnZXRDYWNoZS5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cbi8qKlxuICogVW5waW5zIGFsbCB0aGUgZG9jdW1lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0LiBJZlxuICogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBzZXQgdG8gZmFsc2UgYW5kIEVhZ2VyIEdDIGVuYWJsZWQsIHRoZSBtZXRob2RcbiAqIGRpcmVjdGx5IHJlbW92ZXMgdGhlIGFzc29jaWF0ZWQgdGFyZ2V0IGRhdGEgZnJvbSB0aGUgdGFyZ2V0IGNhY2hlLlxuICpcbiAqIFJlbGVhc2luZyBhIG5vbi1leGlzdGluZyBgVGFyZ2V0YCBpcyBhIG5vLW9wLlxuICovXG4vLyBQT1JUSU5HIE5PVEU6IGBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YWAgaXMgbXVsdGktdGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBsdSh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IEwodCksIGkgPSBzLkppLmdldChlKSwgciA9IG4gPyBcInJlYWR3cml0ZVwiIDogXCJyZWFkd3JpdGUtcHJpbWFyeVwiO1xuICAgIHRyeSB7XG4gICAgICAgIG4gfHwgYXdhaXQgcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlbGVhc2UgdGFyZ2V0XCIsIHIsICh0ID0+IHMucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUucmVtb3ZlVGFyZ2V0KHQsIGkpKSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICBpZiAoIUR0KHQpKSB0aHJvdyB0O1xuICAgICAgICAvLyBBbGwgYHJlbGVhc2VUYXJnZXRgIGRvZXMgaXMgcmVjb3JkIHRoZSBmaW5hbCBtZXRhZGF0YSBzdGF0ZSBmb3IgdGhlXG4gICAgICAgIC8vIHRhcmdldCwgYnV0IHdlJ3ZlIGJlZW4gcmVjb3JkaW5nIHRoaXMgcGVyaW9kaWNhbGx5IGR1cmluZyB0YXJnZXRcbiAgICAgICAgLy8gYWN0aXZpdHkuIElmIHdlIGxvc2UgdGhpcyB3cml0ZSB0aGlzIGNvdWxkIGNhdXNlIGEgdmVyeSBzbGlnaHRcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiB0aGUgb3JkZXIgb2YgdGFyZ2V0IGRlbGV0aW9uIGR1cmluZyBHQywgYnV0IHdlXG4gICAgICAgIC8vIGRvbid0IGRlZmluZSBleGFjdCBMUlUgc2VtYW50aWNzIHNvIHRoaXMgaXMgYWNjZXB0YWJsZS5cbiAgICAgICAgTihcIkxvY2FsU3RvcmVcIiwgYEZhaWxlZCB0byB1cGRhdGUgc2VxdWVuY2UgbnVtYmVycyBmb3IgdGFyZ2V0ICR7ZX06ICR7dH1gKTtcbiAgICB9XG4gICAgcy5KaSA9IHMuSmkucmVtb3ZlKGUpLCBzLllpLmRlbGV0ZShpLnRhcmdldCk7XG59XG5cbi8qKlxuICogUnVucyB0aGUgc3BlY2lmaWVkIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHN0b3JlIGFuZCByZXR1cm5zIHRoZSByZXN1bHRzLFxuICogcG90ZW50aWFsbHkgdGFraW5nIGFkdmFudGFnZSBvZiBxdWVyeSBkYXRhIGZyb20gcHJldmlvdXMgZXhlY3V0aW9ucyAoc3VjaFxuICogYXMgdGhlIHNldCBvZiByZW1vdGUga2V5cykuXG4gKlxuICogQHBhcmFtIHVzZVByZXZpb3VzUmVzdWx0cyAtIFdoZXRoZXIgcmVzdWx0cyBmcm9tIHByZXZpb3VzIGV4ZWN1dGlvbnMgY2FuXG4gKiBiZSB1c2VkIHRvIG9wdGltaXplIHRoaXMgcXVlcnkgZXhlY3V0aW9uLlxuICovIGZ1bmN0aW9uIGZ1KHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gTCh0KTtcbiAgICBsZXQgaSA9IHJ0Lm1pbigpLCByID0gZ3MoKTtcbiAgICByZXR1cm4gcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkV4ZWN1dGUgcXVlcnlcIiwgXCJyZWFkb25seVwiLCAodCA9PiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBMKHQpLCBpID0gcy5ZaS5nZXQobik7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGkgPyBSdC5yZXNvbHZlKHMuSmkuZ2V0KGkpKSA6IHMuQnMuZ2V0VGFyZ2V0RGF0YShlLCBuKTtcbiAgICB9KHMsIHQsIEpuKGUpKS5uZXh0KChlID0+IHtcbiAgICAgICAgaWYgKGUpIHJldHVybiBpID0gZS5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uLCBzLkJzLmdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIGUudGFyZ2V0SWQpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgIH0pKTtcbiAgICB9KSkubmV4dCgoKCkgPT4gcy5IaS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHQsIGUsIG4gPyBpIDogcnQubWluKCksIG4gPyByIDogZ3MoKSkpKS5uZXh0KCh0ID0+IChfdShzLCBzcyhlKSwgdCksIFxuICAgIHtcbiAgICAgICAgZG9jdW1lbnRzOiB0LFxuICAgICAgICBpcjogclxuICAgIH0pKSkpKTtcbn1cblxuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIGR1KHQsIGUpIHtcbiAgICBjb25zdCBuID0gTCh0KSwgcyA9IEwobi5CcyksIGkgPSBuLkppLmdldChlKTtcbiAgICByZXR1cm4gaSA/IFByb21pc2UucmVzb2x2ZShpLnRhcmdldCkgOiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IHRhcmdldCBkYXRhXCIsIFwicmVhZG9ubHlcIiwgKHQgPT4gcy5sZSh0LCBlKS5uZXh0KCh0ID0+IHQgPyB0LnRhcmdldCA6IG51bGwpKSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgcmV0dXJucyB0aGUgc2V0IG9mIGNoYW5nZXMgc2luY2UgY2xpZW50XG4gKiBpbml0aWFsaXphdGlvbi4gRnVydGhlciBpbnZvY2F0aW9ucyB3aWxsIHJldHVybiBkb2N1bWVudCB0aGF0IGhhdmUgY2hhbmdlZFxuICogc2luY2UgdGhlIHByaW9yIGNhbGwuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiB3dSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCksIHMgPSBuLlhpLmdldChlKSB8fCBydC5taW4oKTtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbWF4aW11bSByZWFkIHRpbWUgZm9yIHRoZSBjb2xsZWN0aW9uLiBUaGlzIHNob3VsZCBhbHdheXNcbiAgICAvLyBleGlzdCwgYnV0IHRvIHJlZHVjZSB0aGUgY2hhbmNlIGZvciByZWdyZXNzaW9ucyB3ZSBkZWZhdWx0IHRvXG4gICAgLy8gU25hcHNob3RWZXJzaW9uLk1pbigpXG4gICAgLy8gVE9ETyhpbmRleGluZyk6IENvbnNpZGVyIHJlbW92aW5nIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuZXcgZG9jdW1lbnQgY2hhbmdlc1wiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4uWmkuZ2V0QWxsRnJvbUNvbGxlY3Rpb25Hcm91cCh0LCBlLCB5dChzLCAtMSksIFxuICAgIC8qIGxpbWl0PSAqLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpKS50aGVuKCh0ID0+IChfdShuLCBlLCB0KSwgdCkpKTtcbn1cblxuLyoqIFNldHMgdGhlIGNvbGxlY3Rpb24gZ3JvdXAncyBtYXhpbXVtIHJlYWQgdGltZSBmcm9tIHRoZSBnaXZlbiBkb2N1bWVudHMuICovXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuZnVuY3Rpb24gX3UodCwgZSwgbikge1xuICAgIGxldCBzID0gdC5YaS5nZXQoZSkgfHwgcnQubWluKCk7XG4gICAgbi5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICBlLnJlYWRUaW1lLmNvbXBhcmVUbyhzKSA+IDAgJiYgKHMgPSBlLnJlYWRUaW1lKTtcbiAgICB9KSksIHQuWGkuc2V0KGUsIHMpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IHVzaW5nIHRoZSBnaXZlbiBidW5kbGUgbmFtZSwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvXG4gKiBob2xkIHRoZSBrZXlzIG9mIGFsbCBkb2N1bWVudHMgZnJvbSB0aGUgYnVuZGxlIGluIHF1ZXJ5LWRvY3VtZW50IG1hcHBpbmdzLlxuICogVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGxvYWRlZCBkb2N1bWVudHMgZG8gbm90IGdldCBnYXJiYWdlIGNvbGxlY3RlZFxuICogcmlnaHQgYXdheS5cbiAqL1xuLyoqXG4gKiBBcHBsaWVzIHRoZSBkb2N1bWVudHMgZnJvbSBhIGJ1bmRsZSB0byB0aGUgXCJncm91bmQtc3RhdGVcIiAocmVtb3RlKVxuICogZG9jdW1lbnRzLlxuICpcbiAqIExvY2FsRG9jdW1lbnRzIGFyZSByZS1jYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSByZW1haW5pbmcgbXV0YXRpb25zIGluIHRoZVxuICogcXVldWUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG11KHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gTCh0KTtcbiAgICBsZXQgciA9IGdzKCksIG8gPSBjcygpO1xuICAgIGZvciAoY29uc3QgdCBvZiBuKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlLnJyKHQubWV0YWRhdGEubmFtZSk7XG4gICAgICAgIHQuZG9jdW1lbnQgJiYgKHIgPSByLmFkZChuKSk7XG4gICAgICAgIGNvbnN0IHMgPSBlLnVyKHQpO1xuICAgICAgICBzLnNldFJlYWRUaW1lKGUuY3IodC5tZXRhZGF0YS5yZWFkVGltZSkpLCBvID0gby5pbnNlcnQobiwgcyk7XG4gICAgfVxuICAgIGNvbnN0IHUgPSBpLlppLm5ld0NoYW5nZUJ1ZmZlcih7XG4gICAgICAgIHRyYWNrUmVtb3ZhbHM6ICEwXG4gICAgfSksIGMgPSBhd2FpdCBodShpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEl0IGlzIE9LIHRoYXQgdGhlIHBhdGggdXNlZCBmb3IgdGhlIHF1ZXJ5IGlzIG5vdCB2YWxpZCwgYmVjYXVzZSB0aGlzIHdpbGxcbiAgICAgICAgLy8gbm90IGJlIHJlYWQgYW5kIHF1ZXJpZWQuXG4gICAgICAgIHJldHVybiBKbihHbih1dC5mcm9tU3RyaW5nKGBfX2J1bmRsZV9fL2RvY3MvJHt0fWApKSk7XG4gICAgfShzKSk7XG4gICAgLy8gQWxsb2NhdGVzIGEgdGFyZ2V0IHRvIGhvbGQgYWxsIGRvY3VtZW50IGtleXMgZnJvbSB0aGUgYnVuZGxlLCBzdWNoIHRoYXRcbiAgICAvLyB0aGV5IHdpbGwgbm90IGdldCBnYXJiYWdlIGNvbGxlY3RlZCByaWdodCBhd2F5LlxuICAgICAgICByZXR1cm4gaS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkFwcGx5IGJ1bmRsZSBkb2N1bWVudHNcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4gY3UodCwgdSwgbykubmV4dCgoZSA9PiAodS5hcHBseSh0KSwgXG4gICAgZSkpKS5uZXh0KChlID0+IGkuQnMucmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodCwgYy50YXJnZXRJZCkubmV4dCgoKCkgPT4gaS5Ccy5hZGRNYXRjaGluZ0tleXModCwgciwgYy50YXJnZXRJZCkpKS5uZXh0KCgoKSA9PiBpLmxvY2FsRG9jdW1lbnRzLmdldExvY2FsVmlld09mRG9jdW1lbnRzKHQsIGUubnIsIGUuc3IpKSkubmV4dCgoKCkgPT4gZS5ucikpKSkpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBvZiBhIGJvb2xlYW4gdG8gaW5kaWNhdGUgaWYgdGhlIGdpdmVuIGJ1bmRsZSBoYXMgYWxyZWFkeVxuICogYmVlbiBsb2FkZWQgYW5kIHRoZSBjcmVhdGUgdGltZSBpcyBuZXdlciB0aGFuIHRoZSBjdXJyZW50IGxvYWRpbmcgYnVuZGxlLlxuICovXG4vKipcbiAqIFNhdmVzIHRoZSBnaXZlbiBgTmFtZWRRdWVyeWAgdG8gbG9jYWwgcGVyc2lzdGVuY2UuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGd1KHQsIGUsIG4gPSBncygpKSB7XG4gICAgLy8gQWxsb2NhdGUgYSB0YXJnZXQgZm9yIHRoZSBuYW1lZCBxdWVyeSBzdWNoIHRoYXQgaXQgY2FuIGJlIHJlc3VtZWRcbiAgICAvLyBmcm9tIGFzc29jaWF0ZWQgcmVhZCB0aW1lIGlmIHVzZXJzIHVzZSBpdCB0byBsaXN0ZW4uXG4gICAgLy8gTk9URTogdGhpcyBhbHNvIG1lYW5zIGlmIG5vIGNvcnJlc3BvbmRpbmcgdGFyZ2V0IGV4aXN0cywgdGhlIG5ldyB0YXJnZXRcbiAgICAvLyB3aWxsIHJlbWFpbiBhY3RpdmUgYW5kIHdpbGwgbm90IGdldCBjb2xsZWN0ZWQsIHVubGVzcyB1c2VycyBoYXBwZW4gdG9cbiAgICAvLyB1bmxpc3RlbiB0aGUgcXVlcnkgc29tZWhvdy5cbiAgICBjb25zdCBzID0gYXdhaXQgaHUodCwgSm4oeXIoZS5idW5kbGVkUXVlcnkpKSksIGkgPSBMKHQpO1xuICAgIHJldHVybiBpLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU2F2ZSBuYW1lZCBxdWVyeVwiLCBcInJlYWR3cml0ZVwiLCAodCA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBOaShlLnJlYWRUaW1lKTtcbiAgICAgICAgLy8gU2ltcGx5IHNhdmUgdGhlIHF1ZXJ5IGl0c2VsZiBpZiBpdCBpcyBvbGRlciB0aGFuIHdoYXQgdGhlIFNESyBhbHJlYWR5XG4gICAgICAgIC8vIGhhcy5cbiAgICAgICAgICAgICAgICBpZiAocy5zbmFwc2hvdFZlcnNpb24uY29tcGFyZVRvKHIpID49IDApIHJldHVybiBpLnFzLnNhdmVOYW1lZFF1ZXJ5KHQsIGUpO1xuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgdGFyZ2V0IGRhdGEgYmVjYXVzZSB0aGUgcXVlcnkgZnJvbSB0aGUgYnVuZGxlIGlzIG5ld2VyLlxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBzLndpdGhSZXN1bWVUb2tlbihWZS5FTVBUWV9CWVRFX1NUUklORywgcik7XG4gICAgICAgIHJldHVybiBpLkppID0gaS5KaS5pbnNlcnQoby50YXJnZXRJZCwgbyksIGkuQnMudXBkYXRlVGFyZ2V0RGF0YSh0LCBvKS5uZXh0KCgoKSA9PiBpLkJzLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKHQsIHMudGFyZ2V0SWQpKSkubmV4dCgoKCkgPT4gaS5Ccy5hZGRNYXRjaGluZ0tleXModCwgbiwgcy50YXJnZXRJZCkpKS5uZXh0KCgoKSA9PiBpLnFzLnNhdmVOYW1lZFF1ZXJ5KHQsIGUpKSk7XG4gICAgfSkpO1xufVxuXG4vKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi9cbmZ1bmN0aW9uIHl1KHQsIGUpIHtcbiAgICByZXR1cm4gYGZpcmVzdG9yZV9jbGllbnRzXyR7dH1fJHtlfWA7XG59XG5cbi8vIFRoZSBmb3JtYXQgb2YgdGhlIFdlYlN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHRoZSBtdXRhdGlvbiBzdGF0ZSBpczpcbi8vICAgICBmaXJlc3RvcmVfbXV0YXRpb25zXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XzxiYXRjaF9pZD5cbi8vICAgICAoZm9yIHVuYXV0aGVudGljYXRlZCB1c2Vycylcbi8vIG9yOiBmaXJlc3RvcmVfbXV0YXRpb25zXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XzxiYXRjaF9pZD5fPHVzZXJfdWlkPlxuXG4vLyAndXNlcl91aWQnIGlzIGxhc3QgdG8gYXZvaWQgbmVlZGluZyB0byBlc2NhcGUgJ18nIGNoYXJhY3RlcnMgdGhhdCBpdCBtaWdodFxuLy8gY29udGFpbi5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBtdXRhdGlvbiBiYXRjaCBpbiBXZWJTdG9yYWdlICovXG5mdW5jdGlvbiBwdSh0LCBlLCBuKSB7XG4gICAgbGV0IHMgPSBgZmlyZXN0b3JlX211dGF0aW9uc18ke3R9XyR7bn1gO1xuICAgIHJldHVybiBlLmlzQXV0aGVudGljYXRlZCgpICYmIChzICs9IGBfJHtlLnVpZH1gKSwgcztcbn1cblxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgYSBxdWVyeSB0YXJnZXQncyBtZXRhZGF0YSBpczpcbi8vICAgICBmaXJlc3RvcmVfdGFyZ2V0c188cGVyc2lzdGVuY2VfcHJlZml4Pl88dGFyZ2V0X2lkPlxuLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciBhIHF1ZXJ5IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi9cbmZ1bmN0aW9uIEl1KHQsIGUpIHtcbiAgICByZXR1cm4gYGZpcmVzdG9yZV90YXJnZXRzXyR7dH1fJHtlfWA7XG59XG5cbi8vIFRoZSBXZWJTdG9yYWdlIHByZWZpeCB0aGF0IHN0b3JlcyB0aGUgcHJpbWFyeSB0YWIncyBvbmxpbmUgc3RhdGUuIFRoZVxuLy8gZm9ybWF0IG9mIHRoZSBrZXkgaXM6XG4vLyAgICAgZmlyZXN0b3JlX29ubGluZV9zdGF0ZV88cGVyc2lzdGVuY2VfcHJlZml4PlxuLyoqXG4gKiBIb2xkcyB0aGUgc3RhdGUgb2YgYSBtdXRhdGlvbiBiYXRjaCwgaW5jbHVkaW5nIGl0cyB1c2VyIElELCBiYXRjaCBJRCBhbmRcbiAqIHdoZXRoZXIgdGhlIGJhdGNoIGlzICdwZW5kaW5nJywgJ2Fja25vd2xlZGdlZCcgb3IgJ3JlamVjdGVkJy5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuY2xhc3MgVHUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdGhpcy51c2VyID0gdCwgdGhpcy5iYXRjaElkID0gZSwgdGhpcy5zdGF0ZSA9IG4sIHRoaXMuZXJyb3IgPSBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBNdXRhdGlvbk1ldGFkYXRhIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24gaW4gV2ViU3RvcmFnZS5cbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxuICAgICAqLyAgICBzdGF0aWMgYXIodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gSlNPTi5wYXJzZShuKTtcbiAgICAgICAgbGV0IGksIHIgPSBcIm9iamVjdFwiID09IHR5cGVvZiBzICYmIC0xICE9PSBbIFwicGVuZGluZ1wiLCBcImFja25vd2xlZGdlZFwiLCBcInJlamVjdGVkXCIgXS5pbmRleE9mKHMuc3RhdGUpICYmICh2b2lkIDAgPT09IHMuZXJyb3IgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2Ygcy5lcnJvcik7XG4gICAgICAgIHJldHVybiByICYmIHMuZXJyb3IgJiYgKHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiBzLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygcy5lcnJvci5jb2RlLCBcbiAgICAgICAgciAmJiAoaSA9IG5ldyBVKHMuZXJyb3IuY29kZSwgcy5lcnJvci5tZXNzYWdlKSkpLCByID8gbmV3IFR1KHQsIGUsIHMuc3RhdGUsIGkpIDogKGsoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIG11dGF0aW9uIHN0YXRlIGZvciBJRCAnJHtlfSc6ICR7bn1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbiAgICBocigpIHtcbiAgICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yICYmICh0LmVycm9yID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXG4gICAgICAgIH0pLCBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgcXVlcnkgdGFyZ2V0LCBpbmNsdWRpbmcgaXRzIHRhcmdldCBJRCBhbmQgd2hldGhlciB0aGVcbiAqIHRhcmdldCBpcyAnbm90LWN1cnJlbnQnLCAnY3VycmVudCcgb3IgJ3JlamVjdGVkJy5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuY2xhc3MgRXUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuc3RhdGUgPSBlLCB0aGlzLmVycm9yID0gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgUXVlcnlUYXJnZXRNZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIGFyKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IEpTT04ucGFyc2UoZSk7XG4gICAgICAgIGxldCBzLCBpID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgbiAmJiAtMSAhPT0gWyBcIm5vdC1jdXJyZW50XCIsIFwiY3VycmVudFwiLCBcInJlamVjdGVkXCIgXS5pbmRleE9mKG4uc3RhdGUpICYmICh2b2lkIDAgPT09IG4uZXJyb3IgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2Ygbi5lcnJvcik7XG4gICAgICAgIHJldHVybiBpICYmIG4uZXJyb3IgJiYgKGkgPSBcInN0cmluZ1wiID09IHR5cGVvZiBuLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygbi5lcnJvci5jb2RlLCBcbiAgICAgICAgaSAmJiAocyA9IG5ldyBVKG4uZXJyb3IuY29kZSwgbi5lcnJvci5tZXNzYWdlKSkpLCBpID8gbmV3IEV1KHQsIG4uc3RhdGUsIHMpIDogKGsoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIHRhcmdldCBzdGF0ZSBmb3IgSUQgJyR7dH0nOiAke2V9YCksIFxuICAgICAgICBudWxsKTtcbiAgICB9XG4gICAgaHIoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvciAmJiAodC5lcnJvciA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuZXJyb3IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuZXJyb3IubWVzc2FnZVxuICAgICAgICB9KSwgSlNPTi5zdHJpbmdpZnkodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgaW1tdXRhYmxlIENsaWVudFN0YXRlIGZvciBhIGNsaWVudCByZWFkIGZyb21cbiAqIFdlYlN0b3JhZ2UsIGNvbnRhaW5pbmcgdGhlIGxpc3Qgb2YgYWN0aXZlIHF1ZXJ5IHRhcmdldHMuXG4gKi8gY2xhc3MgQXUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHQsIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgUmVtb3RlQ2xpZW50U3RhdGUgZnJvbSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIGFuZCByZXR1cm5zIG51bGwgaWYgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBpcyBub3QgdmFsaWQuXG4gICAgICovICAgIHN0YXRpYyBhcih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBKU09OLnBhcnNlKGUpO1xuICAgICAgICBsZXQgcyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIG4gJiYgbi5hY3RpdmVUYXJnZXRJZHMgaW5zdGFuY2VvZiBBcnJheSwgaSA9IHBzKCk7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyBzICYmIHQgPCBuLmFjdGl2ZVRhcmdldElkcy5sZW5ndGg7ICsrdCkgcyA9IEx0KG4uYWN0aXZlVGFyZ2V0SWRzW3RdKSwgXG4gICAgICAgIGkgPSBpLmFkZChuLmFjdGl2ZVRhcmdldElkc1t0XSk7XG4gICAgICAgIHJldHVybiBzID8gbmV3IEF1KHQsIGkpIDogKGsoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgRmFpbGVkIHRvIHBhcnNlIGNsaWVudCBkYXRhIGZvciBpbnN0YW5jZSAnJHt0fSc6ICR7ZX1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIG9ubGluZSBzdGF0ZSBmb3IgYWxsIGNsaWVudHMgcGFydGljaXBhdGluZyBpblxuICogbXVsdGktdGFiLiBUaGUgb25saW5lIHN0YXRlIGlzIG9ubHkgd3JpdHRlbiB0byBieSB0aGUgcHJpbWFyeSBjbGllbnQsIGFuZFxuICogdXNlZCBpbiBzZWNvbmRhcnkgY2xpZW50cyB0byB1cGRhdGUgdGhlaXIgcXVlcnkgdmlld3MuXG4gKi8gY2xhc3MgdnUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHQsIHRoaXMub25saW5lU3RhdGUgPSBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBTaGFyZWRPbmxpbmVTdGF0ZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIGFyKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IEpTT04ucGFyc2UodCk7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIC0xICE9PSBbIFwiVW5rbm93blwiLCBcIk9ubGluZVwiLCBcIk9mZmxpbmVcIiBdLmluZGV4T2YoZS5vbmxpbmVTdGF0ZSkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5jbGllbnRJZCA/IG5ldyB2dShlLmNsaWVudElkLCBlLm9ubGluZVN0YXRlKSA6IChrKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgYEZhaWxlZCB0byBwYXJzZSBvbmxpbmUgc3RhdGU6ICR7dH1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNZXRhZGF0YSBzdGF0ZSBvZiB0aGUgbG9jYWwgY2xpZW50LiBVbmxpa2UgYFJlbW90ZUNsaWVudFN0YXRlYCwgdGhpcyBjbGFzcyBpc1xuICogbXV0YWJsZSBhbmQga2VlcHMgdHJhY2sgb2YgYWxsIHBlbmRpbmcgbXV0YXRpb25zLCB3aGljaCBhbGxvd3MgdXMgdG9cbiAqIHVwZGF0ZSB0aGUgcmFuZ2Ugb2YgcGVuZGluZyBtdXRhdGlvbiBiYXRjaCBJRHMgYXMgbmV3IG11dGF0aW9ucyBhcmUgYWRkZWQgb3JcbiAqIHJlbW92ZWQuXG4gKlxuICogVGhlIGRhdGEgaW4gYExvY2FsQ2xpZW50U3RhdGVgIGlzIG5vdCByZWFkIGZyb20gV2ViU3RvcmFnZSBhbmQgaW5zdGVhZFxuICogdXBkYXRlZCB2aWEgaXRzIGluc3RhbmNlIG1ldGhvZHMuIFRoZSB1cGRhdGVkIHN0YXRlIGNhbiBiZSBzZXJpYWxpemVkIHZpYVxuICogYHRvV2ViU3RvcmFnZUpTT04oKWAuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG5jbGFzcyBSdSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gcHMoKTtcbiAgICB9XG4gICAgbHIodCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmFkZCh0KTtcbiAgICB9XG4gICAgZHIodCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmRlbGV0ZSh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBlbnRyeSBpbnRvIGEgSlNPTi1lbmNvZGVkIGZvcm1hdCB3ZSBjYW4gdXNlIGZvciBXZWJTdG9yYWdlLlxuICAgICAqIERvZXMgbm90IGVuY29kZSBgY2xpZW50SWRgIGFzIGl0IGlzIHBhcnQgb2YgdGhlIGtleSBpbiBXZWJTdG9yYWdlLlxuICAgICAqLyAgICBocigpIHtcbiAgICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgICAgIGFjdGl2ZVRhcmdldElkczogdGhpcy5hY3RpdmVUYXJnZXRJZHMudG9BcnJheSgpLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgdXNlcyBXZWJTdG9yYWdlICh3aW5kb3cubG9jYWxTdG9yYWdlKSBhcyB0aGVcbiAqIGJhY2tpbmcgc3RvcmUgZm9yIHRoZSBTaGFyZWRDbGllbnRTdGF0ZS4gSXQga2VlcHMgdHJhY2sgb2YgYWxsIGFjdGl2ZVxuICogY2xpZW50cyBhbmQgc3VwcG9ydHMgbW9kaWZpY2F0aW9ucyBvZiB0aGUgbG9jYWwgY2xpZW50J3MgZGF0YS5cbiAqLyBjbGFzcyBQdSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLndpbmRvdyA9IHQsIHRoaXMuaWkgPSBlLCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gbiwgdGhpcy53ciA9IHMsIHRoaXMuc3luY0VuZ2luZSA9IG51bGwsIFxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlSGFuZGxlciA9IG51bGwsIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyID0gbnVsbCwgdGhpcy5fciA9IHRoaXMubXIuYmluZCh0aGlzKSwgXG4gICAgICAgIHRoaXMuZ3IgPSBuZXcgcGUoZXQpLCB0aGlzLnN0YXJ0ZWQgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYXB0dXJlcyBXZWJTdG9yYWdlIGV2ZW50cyB0aGF0IG9jY3VyIGJlZm9yZSBgc3RhcnQoKWAgaXMgY2FsbGVkLiBUaGVzZVxuICAgICAgICAgKiBldmVudHMgYXJlIHJlcGxheWVkIG9uY2UgYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgaXMgc3RhcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueXIgPSBbXTtcbiAgICAgICAgLy8gRXNjYXBlIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgbWVudGlvbmVkIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9uc1xuICAgICAgICBjb25zdCByID0gbi5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHRoaXMud2luZG93LmxvY2FsU3RvcmFnZSwgdGhpcy5jdXJyZW50VXNlciA9IGksIHRoaXMucHIgPSB5dSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0aGlzLndyKSwgXG4gICAgICAgIHRoaXMuSXIgPSBcbiAgICAgICAgLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciB0aGUgY3VycmVudCBzZXF1ZW5jZSBudW1iZXIuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBgZmlyZXN0b3JlX3NlcXVlbmNlX251bWJlcl8ke3R9YDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAodGhpcy5wZXJzaXN0ZW5jZUtleSksIHRoaXMuZ3IgPSB0aGlzLmdyLmluc2VydCh0aGlzLndyLCBuZXcgUnUpLCB0aGlzLlRyID0gbmV3IFJlZ0V4cChgXmZpcmVzdG9yZV9jbGllbnRzXyR7cn1fKFteX10qKSRgKSwgXG4gICAgICAgIHRoaXMuRXIgPSBuZXcgUmVnRXhwKGBeZmlyZXN0b3JlX211dGF0aW9uc18ke3J9XyhcXFxcZCspKD86XyguKikpPyRgKSwgdGhpcy5BciA9IG5ldyBSZWdFeHAoYF5maXJlc3RvcmVfdGFyZ2V0c18ke3J9XyhcXFxcZCspJGApLCBcbiAgICAgICAgdGhpcy52ciA9IFxuICAgICAgICAvKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIHRoZSBvbmxpbmUgc3RhdGUgb2YgdGhlIHByaW1hcnkgdGFiLiAqL1xuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gYGZpcmVzdG9yZV9vbmxpbmVfc3RhdGVfJHt0fWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIFdlYlN0b3JhZ2UgcHJlZml4IHRoYXQgcGxheXMgYXMgYSBldmVudCB0byBpbmRpY2F0ZSB0aGUgcmVtb3RlIGRvY3VtZW50c1xuICAgICAgICAvLyBtaWdodCBoYXZlIGNoYW5nZWQgZHVlIHRvIHNvbWUgc2Vjb25kYXJ5IHRhYnMgbG9hZGluZyBhIGJ1bmRsZS5cbiAgICAgICAgLy8gZm9ybWF0IG9mIHRoZSBrZXkgaXM6XG4gICAgICAgIC8vICAgICBmaXJlc3RvcmVfYnVuZGxlX2xvYWRlZF92Ml88cGVyc2lzdGVuY2VLZXk+XG4gICAgICAgIC8vIFRoZSB2ZXJzaW9uIGVuZGluZyB3aXRoIFwidjJcIiBzdG9yZXMgdGhlIGxpc3Qgb2YgbW9kaWZpZWQgY29sbGVjdGlvbiBncm91cHMuXG4gICAgICAgICh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgdGhpcy5SciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBgZmlyZXN0b3JlX2J1bmRsZV9sb2FkZWRfdjJfJHt0fWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIFdlYlN0b3JhZ2Uga2V5IHByZWZpeCBmb3IgdGhlIGtleSB0aGF0IHN0b3JlcyB0aGUgbGFzdCBzZXF1ZW5jZSBudW1iZXIgYWxsb2NhdGVkLiBUaGUga2V5XG4gICAgICAgIC8vIGxvb2tzIGxpa2UgJ2ZpcmVzdG9yZV9zZXF1ZW5jZV9udW1iZXJfPHBlcnNpc3RlbmNlX3ByZWZpeD4nLlxuICAgICAgICAodGhpcy5wZXJzaXN0ZW5jZUtleSksIFxuICAgICAgICAvLyBSYXRoZXIgdGhhbiBhZGRpbmcgdGhlIHN0b3JhZ2Ugb2JzZXJ2ZXIgZHVyaW5nIHN0YXJ0KCksIHdlIGFkZCB0aGVcbiAgICAgICAgLy8gc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGNvbGxlY3RcbiAgICAgICAgLy8gZXZlbnRzIGJlZm9yZSBvdGhlciBjb21wb25lbnRzIHBvcHVsYXRlIHRoZWlyIGluaXRpYWwgc3RhdGUgKGR1cmluZyB0aGVpclxuICAgICAgICAvLyByZXNwZWN0aXZlIHN0YXJ0KCkgY2FsbHMpLiBPdGhlcndpc2UsIHdlIG1pZ2h0IGZvciBleGFtcGxlIG1pc3MgYVxuICAgICAgICAvLyBtdXRhdGlvbiB0aGF0IGlzIGFkZGVkIGFmdGVyIExvY2FsU3RvcmUncyBzdGFydCgpIHByb2Nlc3NlZCB0aGUgZXhpc3RpbmdcbiAgICAgICAgLy8gbXV0YXRpb25zIGJ1dCBiZWZvcmUgd2Ugb2JzZXJ2ZSBXZWJTdG9yYWdlIGV2ZW50cy5cbiAgICAgICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5fcik7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zICd0cnVlJyBpZiBXZWJTdG9yYWdlIGlzIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC4gKi8gICAgc3RhdGljIEQodCkge1xuICAgICAgICByZXR1cm4gISghdCB8fCAhdC5sb2NhbFN0b3JhZ2UpO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgLy8gUmV0cmlldmUgdGhlIGxpc3Qgb2YgZXhpc3RpbmcgY2xpZW50cyB0byBiYWNrZmlsbCB0aGUgZGF0YSBpblxuICAgICAgICAvLyBTaGFyZWRDbGllbnRTdGF0ZS5cbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IHRoaXMuc3luY0VuZ2luZS4kaSgpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xuICAgICAgICAgICAgaWYgKGUgPT09IHRoaXMud3IpIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0SXRlbSh5dSh0aGlzLnBlcnNpc3RlbmNlS2V5LCBlKSk7XG4gICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBdS5hcihlLCB0KTtcbiAgICAgICAgICAgICAgICBuICYmICh0aGlzLmdyID0gdGhpcy5nci5pbnNlcnQobi5jbGllbnRJZCwgbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuUHIoKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYW4gZXhpc3Rpbmcgb25saW5lIHN0YXRlIGFuZCBjYWxsIHRoZSBjYWxsYmFjayBoYW5kbGVyXG4gICAgICAgIC8vIGlmIGFwcGxpY2FibGUuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnZyKTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmJyKGUpO1xuICAgICAgICAgICAgdCAmJiB0aGlzLlZyKHQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLnlyKSB0aGlzLm1yKHQpO1xuICAgICAgICB0aGlzLnlyID0gW10sIFxuICAgICAgICAvLyBSZWdpc3RlciBhIHdpbmRvdyB1bmxvYWQgaG9vayB0byByZW1vdmUgdGhlIGNsaWVudCBtZXRhZGF0YSBlbnRyeSBmcm9tXG4gICAgICAgIC8vIFdlYlN0b3JhZ2UgZXZlbiBpZiBgc2h1dGRvd24oKWAgd2FzIG5vdCBjYWxsZWQuXG4gICAgICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCAoKCkgPT4gdGhpcy5zaHV0ZG93bigpKSksIHRoaXMuc3RhcnRlZCA9ICEwO1xuICAgIH1cbiAgICB3cml0ZVNlcXVlbmNlTnVtYmVyKHQpIHtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMuSXIsIEpTT04uc3RyaW5naWZ5KHQpKTtcbiAgICB9XG4gICAgZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Tcih0aGlzLmdyKTtcbiAgICB9XG4gICAgaXNBY3RpdmVRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIGxldCBlID0gITE7XG4gICAgICAgIHJldHVybiB0aGlzLmdyLmZvckVhY2goKChuLCBzKSA9PiB7XG4gICAgICAgICAgICBzLmFjdGl2ZVRhcmdldElkcy5oYXModCkgJiYgKGUgPSAhMCk7XG4gICAgICAgIH0pKSwgZTtcbiAgICB9XG4gICAgYWRkUGVuZGluZ011dGF0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5Ecih0LCBcInBlbmRpbmdcIik7XG4gICAgfVxuICAgIHVwZGF0ZU11dGF0aW9uU3RhdGUodCwgZSwgbikge1xuICAgICAgICB0aGlzLkRyKHQsIGUsIG4pLCBcbiAgICAgICAgLy8gT25jZSBhIGZpbmFsIG11dGF0aW9uIHJlc3VsdCBpcyBvYnNlcnZlZCBieSBvdGhlciBjbGllbnRzLCB0aGV5IG5vIGxvbmdlclxuICAgICAgICAvLyBhY2Nlc3MgdGhlIG11dGF0aW9uJ3MgbWV0YWRhdGEgZW50cnkuIFNpbmNlIFdlYlN0b3JhZ2UgcmVwbGF5cyBldmVudHNcbiAgICAgICAgLy8gaW4gb3JkZXIsIGl0IGlzIHNhZmUgdG8gZGVsZXRlIHRoZSBlbnRyeSByaWdodCBhZnRlciB1cGRhdGluZyBpdC5cbiAgICAgICAgdGhpcy5Dcih0KTtcbiAgICB9XG4gICAgYWRkTG9jYWxRdWVyeVRhcmdldCh0KSB7XG4gICAgICAgIGxldCBlID0gXCJub3QtY3VycmVudFwiO1xuICAgICAgICAvLyBMb29rdXAgYW4gZXhpc3RpbmcgcXVlcnkgc3RhdGUgaWYgdGhlIHRhcmdldCBJRCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkXG4gICAgICAgIC8vIGJ5IGFub3RoZXIgdGFiXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVRdWVyeVRhcmdldCh0KSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKEl1KHRoaXMucGVyc2lzdGVuY2VLZXksIHQpKTtcbiAgICAgICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IEV1LmFyKHQsIG4pO1xuICAgICAgICAgICAgICAgIHMgJiYgKGUgPSBzLnN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5Oci5scih0KSwgdGhpcy5QcigpLCBlO1xuICAgIH1cbiAgICByZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0KHQpIHtcbiAgICAgICAgdGhpcy5Oci5kcih0KSwgdGhpcy5QcigpO1xuICAgIH1cbiAgICBpc0xvY2FsUXVlcnlUYXJnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Oci5hY3RpdmVUYXJnZXRJZHMuaGFzKHQpO1xuICAgIH1cbiAgICBjbGVhclF1ZXJ5U3RhdGUodCkge1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oSXUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdCkpO1xuICAgIH1cbiAgICB1cGRhdGVRdWVyeVN0YXRlKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5rcih0LCBlLCBuKTtcbiAgICB9XG4gICAgaGFuZGxlVXNlckNoYW5nZSh0LCBlLCBuKSB7XG4gICAgICAgIGUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0aGlzLkNyKHQpO1xuICAgICAgICB9KSksIHRoaXMuY3VycmVudFVzZXIgPSB0LCBuLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRQZW5kaW5nTXV0YXRpb24odCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc2V0T25saW5lU3RhdGUodCkge1xuICAgICAgICB0aGlzLk1yKHQpO1xuICAgIH1cbiAgICBub3RpZnlCdW5kbGVMb2FkZWQodCkge1xuICAgICAgICB0aGlzLiRyKHQpO1xuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgdGhpcy5zdGFydGVkICYmICh0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLCB0aGlzLl9yKSwgdGhpcy5yZW1vdmVJdGVtKHRoaXMucHIpLCBcbiAgICAgICAgdGhpcy5zdGFydGVkID0gITEpO1xuICAgIH1cbiAgICBnZXRJdGVtKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKHQpO1xuICAgICAgICByZXR1cm4gTihcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiUkVBRFwiLCB0LCBlKSwgZTtcbiAgICB9XG4gICAgc2V0SXRlbSh0LCBlKSB7XG4gICAgICAgIE4oXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIlNFVFwiLCB0LCBlKSwgdGhpcy5zdG9yYWdlLnNldEl0ZW0odCwgZSk7XG4gICAgfVxuICAgIHJlbW92ZUl0ZW0odCkge1xuICAgICAgICBOKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJSRU1PVkVcIiwgdCksIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHQpO1xuICAgIH1cbiAgICBtcih0KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoZSBmdW5jdGlvbiBpcyB0eXBlZCB0byB0YWtlIEV2ZW50IHRvIGJlIGludGVyZmFjZS1jb21wYXRpYmxlIHdpdGhcbiAgICAgICAgLy8gYFdpbmRvdy5hZGRFdmVudExpc3RlbmVyYC5cbiAgICAgICAgY29uc3QgZSA9IHQ7XG4gICAgICAgIGlmIChlLnN0b3JhZ2VBcmVhID09PSB0aGlzLnN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGlmIChOKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJFVkVOVFwiLCBlLmtleSwgZS5uZXdWYWx1ZSksIGUua2V5ID09PSB0aGlzLnByKSByZXR1cm4gdm9pZCBrKFwiUmVjZWl2ZWQgV2ViU3RvcmFnZSBub3RpZmljYXRpb24gZm9yIGxvY2FsIGNoYW5nZS4gQW5vdGhlciBjbGllbnQgbWlnaHQgaGF2ZSBnYXJiYWdlLWNvbGxlY3RlZCBvdXIgc3RhdGVcIik7XG4gICAgICAgICAgICB0aGlzLmlpLmVucXVldWVSZXRyeWFibGUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBlLmtleSkgaWYgKHRoaXMuVHIudGVzdChlLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IGUubmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5PcihlLmtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRnIodCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuQnIoZS5rZXksIGUubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSByZXR1cm4gdGhpcy5Gcih0LmNsaWVudElkLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkVyLnRlc3QoZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZS5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLkxyKGUua2V5LCBlLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkgcmV0dXJuIHRoaXMucXIodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5Bci50ZXN0KGUua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGUubmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5VcihlLmtleSwgZS5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHJldHVybiB0aGlzLktyKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSB0aGlzLnZyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZS5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmJyKGUubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSByZXR1cm4gdGhpcy5Wcih0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gdGhpcy5Jcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IE90LmN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHQpIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBKU09OLnBhcnNlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGKFwibnVtYmVyXCIgPT0gdHlwZW9mIG4pLCBlID0gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkZhaWxlZCB0byByZWFkIHNlcXVlbmNlIG51bWJlciBmcm9tIFdlYlN0b3JhZ2VcIiwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gKiBgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGVgIGlzIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIFNoYXJlZENsaWVudFN0YXRlIGZvclxuICogY2xpZW50cyB1c2luZyBtZW1vcnkgcGVyc2lzdGVuY2UuIFRoZSBzdGF0ZSBpbiB0aGlzIGNsYXNzIHJlbWFpbnMgZnVsbHlcbiAqIGlzb2xhdGVkIGFuZCBubyBzeW5jaHJvbml6YXRpb24gaXMgcGVyZm9ybWVkLlxuICovIChlLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgIT09IE90LmN0ICYmIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyKHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSB0aGlzLlJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5HcihlLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHQubWFwKCh0ID0+IHRoaXMuc3luY0VuZ2luZS5Rcih0KSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnlyLnB1c2goZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IE5yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nci5nZXQodGhpcy53cik7XG4gICAgfVxuICAgIFByKCkge1xuICAgICAgICB0aGlzLnNldEl0ZW0odGhpcy5wciwgdGhpcy5Oci5ocigpKTtcbiAgICB9XG4gICAgRHIodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IFR1KHRoaXMuY3VycmVudFVzZXIsIHQsIGUsIG4pLCBpID0gcHUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy5jdXJyZW50VXNlciwgdCk7XG4gICAgICAgIHRoaXMuc2V0SXRlbShpLCBzLmhyKCkpO1xuICAgIH1cbiAgICBDcih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBwdSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0aGlzLmN1cnJlbnRVc2VyLCB0KTtcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGUpO1xuICAgIH1cbiAgICBNcih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy53cixcbiAgICAgICAgICAgIG9ubGluZVN0YXRlOiB0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMudnIsIEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICB9XG4gICAga3IodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gSXUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdCksIGkgPSBuZXcgRXUodCwgZSwgbik7XG4gICAgICAgIHRoaXMuc2V0SXRlbShzLCBpLmhyKCkpO1xuICAgIH1cbiAgICAkcih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKHQpKTtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMuUnIsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBjbGllbnQgc3RhdGUga2V5IGluIFdlYlN0b3JhZ2UuIFJldHVybnMgbnVsbCBpZiB0aGUga2V5IGRvZXMgbm90XG4gICAgICogbWF0Y2ggdGhlIGV4cGVjdGVkIGtleSBmb3JtYXQuXG4gICAgICovICAgIE9yKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuVHIuZXhlYyh0KTtcbiAgICAgICAgcmV0dXJuIGUgPyBlWzFdIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZSBjb3VsZCBub3RcbiAgICAgKiBiZSBwYXJzZWQuXG4gICAgICovICAgIEJyKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuT3IodCk7XG4gICAgICAgIHJldHVybiBBdS5hcihuLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgbXV0YXRpb24gYmF0Y2ggc3RhdGUgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cbiAgICAgKi8gICAgTHIodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5Fci5leGVjKHQpLCBzID0gTnVtYmVyKG5bMV0pLCBpID0gdm9pZCAwICE9PSBuWzJdID8gblsyXSA6IG51bGw7XG4gICAgICAgIHJldHVybiBUdS5hcihuZXcgVihpKSwgcywgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHF1ZXJ5IHRhcmdldCBzdGF0ZSBmcm9tIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZVxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gICAgICovICAgIFVyKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuQXIuZXhlYyh0KSwgcyA9IE51bWJlcihuWzFdKTtcbiAgICAgICAgcmV0dXJuIEV1LmFyKHMsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYW4gb25saW5lIHN0YXRlIGZyb20gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cbiAgICAgKi8gICAgYnIodCkge1xuICAgICAgICByZXR1cm4gdnUuYXIodCk7XG4gICAgfVxuICAgIEdyKHQpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodCk7XG4gICAgfVxuICAgIGFzeW5jIHFyKHQpIHtcbiAgICAgICAgaWYgKHQudXNlci51aWQgPT09IHRoaXMuY3VycmVudFVzZXIudWlkKSByZXR1cm4gdGhpcy5zeW5jRW5naW5lLmpyKHQuYmF0Y2hJZCwgdC5zdGF0ZSwgdC5lcnJvcik7XG4gICAgICAgIE4oXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBgSWdub3JpbmcgbXV0YXRpb24gZm9yIG5vbi1hY3RpdmUgdXNlciAke3QudXNlci51aWR9YCk7XG4gICAgfVxuICAgIEtyKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0VuZ2luZS56cih0LnRhcmdldElkLCB0LnN0YXRlLCB0LmVycm9yKTtcbiAgICB9XG4gICAgRnIodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZSA/IHRoaXMuZ3IuaW5zZXJ0KHQsIGUpIDogdGhpcy5nci5yZW1vdmUodCksIHMgPSB0aGlzLlNyKHRoaXMuZ3IpLCBpID0gdGhpcy5TcihuKSwgciA9IFtdLCBvID0gW107XG4gICAgICAgIHJldHVybiBpLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgcy5oYXModCkgfHwgci5wdXNoKHQpO1xuICAgICAgICB9KSksIHMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBpLmhhcyh0KSB8fCBvLnB1c2godCk7XG4gICAgICAgIH0pKSwgdGhpcy5zeW5jRW5naW5lLldyKHIsIG8pLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ3IgPSBuO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFZyKHQpIHtcbiAgICAgICAgLy8gV2UgY2hlY2sgd2hldGhlciB0aGUgY2xpZW50IHRoYXQgd3JvdGUgdGhpcyBvbmxpbmUgc3RhdGUgaXMgc3RpbGwgYWN0aXZlXG4gICAgICAgIC8vIGJ5IGNvbXBhcmluZyBpdHMgY2xpZW50IElEIHRvIHRoZSBsaXN0IG9mIGNsaWVudHMga2VwdCBhY3RpdmUgaW5cbiAgICAgICAgLy8gSW5kZXhlZERiLiBJZiBhIGNsaWVudCBkb2VzIG5vdCB1cGRhdGUgdGhlaXIgSW5kZXhlZERiIGNsaWVudCBzdGF0ZVxuICAgICAgICAvLyB3aXRoaW4gNSBzZWNvbmRzLCBpdCBpcyBjb25zaWRlcmVkIGluYWN0aXZlIGFuZCB3ZSBkb24ndCBlbWl0IGFuIG9ubGluZVxuICAgICAgICAvLyBzdGF0ZSBldmVudC5cbiAgICAgICAgdGhpcy5nci5nZXQodC5jbGllbnRJZCkgJiYgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIodC5vbmxpbmVTdGF0ZSk7XG4gICAgfVxuICAgIFNyKHQpIHtcbiAgICAgICAgbGV0IGUgPSBwcygpO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgZSA9IGUudW5pb25XaXRoKG4uYWN0aXZlVGFyZ2V0SWRzKTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH1cbn1cblxuY2xhc3MgYnUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkhyID0gbmV3IFJ1LCB0aGlzLkpyID0ge30sIHRoaXMub25saW5lU3RhdGVIYW5kbGVyID0gbnVsbCwgdGhpcy5zZXF1ZW5jZU51bWJlckhhbmRsZXIgPSBudWxsO1xuICAgIH1cbiAgICBhZGRQZW5kaW5nTXV0YXRpb24odCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgdXBkYXRlTXV0YXRpb25TdGF0ZSh0LCBlLCBuKSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH1cbiAgICBhZGRMb2NhbFF1ZXJ5VGFyZ2V0KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSHIubHIodCksIHRoaXMuSnJbdF0gfHwgXCJub3QtY3VycmVudFwiO1xuICAgIH1cbiAgICB1cGRhdGVRdWVyeVN0YXRlKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5Kclt0XSA9IGU7XG4gICAgfVxuICAgIHJlbW92ZUxvY2FsUXVlcnlUYXJnZXQodCkge1xuICAgICAgICB0aGlzLkhyLmRyKHQpO1xuICAgIH1cbiAgICBpc0xvY2FsUXVlcnlUYXJnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ici5hY3RpdmVUYXJnZXRJZHMuaGFzKHQpO1xuICAgIH1cbiAgICBjbGVhclF1ZXJ5U3RhdGUodCkge1xuICAgICAgICBkZWxldGUgdGhpcy5Kclt0XTtcbiAgICB9XG4gICAgZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ici5hY3RpdmVUYXJnZXRJZHM7XG4gICAgfVxuICAgIGlzQWN0aXZlUXVlcnlUYXJnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Ici5hY3RpdmVUYXJnZXRJZHMuaGFzKHQpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSHIgPSBuZXcgUnUsIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBoYW5kbGVVc2VyQ2hhbmdlKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIHNldE9ubGluZVN0YXRlKHQpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIHNodXRkb3duKCkge31cbiAgICB3cml0ZVNlcXVlbmNlTnVtYmVyKHQpIHt9XG4gICAgbm90aWZ5QnVuZGxlTG9hZGVkKHQpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBWdSB7XG4gICAgWXIodCkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIC8vIE5vLW9wLlxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFJlZmVyZW5jZXMgdG8gYHdpbmRvd2AgYXJlIGd1YXJkZWQgYnkgQnJvd3NlckNvbm5lY3Rpdml0eU1vbml0b3IuaXNBdmFpbGFibGUoKVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKipcbiAqIEJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgQ29ubmVjdGl2aXR5TW9uaXRvci5cbiAqL1xuY2xhc3MgU3Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLlhyID0gKCkgPT4gdGhpcy5acigpLCB0aGlzLmVvID0gKCkgPT4gdGhpcy5ubygpLCB0aGlzLnNvID0gW10sIHRoaXMuaW8oKTtcbiAgICB9XG4gICAgWXIodCkge1xuICAgICAgICB0aGlzLnNvLnB1c2godCk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCB0aGlzLlhyKSwgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMuZW8pO1xuICAgIH1cbiAgICBpbygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgdGhpcy5YciksIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLmVvKTtcbiAgICB9XG4gICAgWnIoKSB7XG4gICAgICAgIE4oXCJDb25uZWN0aXZpdHlNb25pdG9yXCIsIFwiTmV0d29yayBjb25uZWN0aXZpdHkgY2hhbmdlZDogQVZBSUxBQkxFXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5zbykgdCgwIC8qIE5ldHdvcmtTdGF0dXMuQVZBSUxBQkxFICovKTtcbiAgICB9XG4gICAgbm8oKSB7XG4gICAgICAgIE4oXCJDb25uZWN0aXZpdHlNb25pdG9yXCIsIFwiTmV0d29yayBjb25uZWN0aXZpdHkgY2hhbmdlZDogVU5BVkFJTEFCTEVcIik7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLnNvKSB0KDEgLyogTmV0d29ya1N0YXR1cy5VTkFWQUlMQUJMRSAqLyk7XG4gICAgfVxuICAgIC8vIFRPRE8oY2hlbmJyaWFuKTogQ29uc2lkZXIgcGFzc2luZyBpbiB3aW5kb3cgZWl0aGVyIGludG8gdGhpcyBjb21wb25lbnQgb3JcbiAgICAvLyBoZXJlIGZvciB0ZXN0aW5nIHZpYSBGYWtlV2luZG93LlxuICAgIC8qKiBDaGVja3MgdGhhdCBhbGwgdXNlZCBhdHRyaWJ1dGVzIG9mIHdpbmRvdyBhcmUgYXZhaWxhYmxlLiAqL1xuICAgIHN0YXRpYyBEKCkge1xuICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ICYmIHZvaWQgMCAhPT0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgdm9pZCAwICE9PSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBtb3N0IHJlY2VudCBpbnZvY2F0aW9uIG9mXG4gKiBgZ2VuZXJhdGVVbmlxdWVEZWJ1Z0lkKClgLCBvciBudWxsIGlmIGl0IGhhcyBuZXZlciBiZWVuIGludm9rZWQuXG4gKi8gbGV0IER1ID0gbnVsbDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYW4gaW5pdGlhbCB2YWx1ZSBmb3IgYGxhc3RVbmlxdWVEZWJ1Z0lkYC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgcmFuZG9tbHkgc2VsZWN0ZWQgZnJvbSBhIHJhbmdlIG9mIGludGVnZXJzIHRoYXQgYXJlXG4gKiByZXByZXNlbnRlZCBhcyA4IGhleGFkZWNpbWFsIGRpZ2l0cy4gVGhpcyBtZWFucyB0aGF0ICh3aXRoaW4gcmVhc29uKSBhbnlcbiAqIG51bWJlcnMgZ2VuZXJhdGVkIGJ5IGluY3JlbWVudGluZyB0aGUgcmV0dXJuZWQgbnVtYmVyIGJ5IDEgd2lsbCBhbHNvIGJlXG4gKiByZXByZXNlbnRlZCBieSA4IGhleGFkZWNpbWFsIGRpZ2l0cy4gVGhpcyBsZWFkcyB0byBhbGwgXCJJRHNcIiBoYXZpbmcgdGhlIHNhbWVcbiAqIGxlbmd0aCB3aGVuIGNvbnZlcnRlZCB0byBhIGhleGFkZWNpbWFsIHN0cmluZywgbWFraW5nIHJlYWRpbmcgbG9ncyBjb250YWluaW5nXG4gKiB0aGVzZSBJRHMgZWFzaWVyIHRvIGZvbGxvdy4gQW5kIHNpbmNlIHRoZSByZXR1cm4gdmFsdWUgaXMgcmFuZG9tbHkgc2VsZWN0ZWRcbiAqIGl0IHdpbGwgaGVscCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gbG9ncyBmcm9tIGRpZmZlcmVudCBleGVjdXRpb25zLlxuICovXG4vKipcbiAqIEdlbmVyYXRlcyBhbmQgcmV0dXJucyBhIHVuaXF1ZSBJRCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgSUQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBkZWJ1ZyBsb2dnaW5nIG1lc3NhZ2VzIHRvIGhlbHBcbiAqIGNvcnJlbGF0ZSBsb2cgbWVzc2FnZXMgdGhhdCBtYXkgYmUgc3BhdGlhbGx5IHNlcGFyYXRlZCBpbiB0aGUgbG9ncywgYnV0XG4gKiBsb2dpY2FsbHkgcmVsYXRlZC4gRm9yIGV4YW1wbGUsIGEgbmV0d29yayBjb25uZWN0aW9uIGNvdWxkIGluY2x1ZGUgdGhlIHNhbWVcbiAqIFwiZGVidWcgSURcIiBzdHJpbmcgaW4gYWxsIG9mIGl0cyBsb2cgbWVzc2FnZXMgdG8gaGVscCB0cmFjZSBhIHNwZWNpZmljXG4gKiBjb25uZWN0aW9uIG92ZXIgdGltZS5cbiAqXG4gKiBAcmV0dXJuIHRoZSAxMC1jaGFyYWN0ZXIgZ2VuZXJhdGVkIElEIChlLmcuIFwiMHhhMWIyYzNkNFwiKS5cbiAqL1xuZnVuY3Rpb24gQ3UoKSB7XG4gICAgcmV0dXJuIG51bGwgPT09IER1ID8gRHUgPSAyNjg0MzU0NTYgKyBNYXRoLnJvdW5kKDIxNDc0ODM2NDggKiBNYXRoLnJhbmRvbSgpKSA6IER1KyssIFxuICAgIFwiMHhcIiArIER1LnRvU3RyaW5nKDE2KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgeHUgPSB7XG4gICAgQmF0Y2hHZXREb2N1bWVudHM6IFwiYmF0Y2hHZXRcIixcbiAgICBDb21taXQ6IFwiY29tbWl0XCIsXG4gICAgUnVuUXVlcnk6IFwicnVuUXVlcnlcIixcbiAgICBSdW5BZ2dyZWdhdGlvblF1ZXJ5OiBcInJ1bkFnZ3JlZ2F0aW9uUXVlcnlcIlxufTtcblxuLyoqXG4gKiBNYXBzIFJQQyBuYW1lcyB0byB0aGUgY29ycmVzcG9uZGluZyBSRVNUIGVuZHBvaW50IG5hbWUuXG4gKlxuICogV2UgdXNlIGFycmF5IG5vdGF0aW9uIHRvIGF2b2lkIG1hbmdsaW5nLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBQcm92aWRlcyBhIHNpbXBsZSBoZWxwZXIgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHRoZSBTdHJlYW0gaW50ZXJmYWNlIHRvXG4gKiBicmlkZ2UgdG8gb3RoZXIgaW1wbGVtZW50YXRpb25zIHRoYXQgYXJlIHN0cmVhbXMgYnV0IGRvIG5vdCBpbXBsZW1lbnQgdGhlXG4gKiBpbnRlcmZhY2UuIFRoZSBzdHJlYW0gY2FsbGJhY2tzIGFyZSBpbnZva2VkIHdpdGggdGhlIGNhbGxPbi4uLiBtZXRob2RzLlxuICovXG5jbGFzcyBOdSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLnJvID0gdC5ybywgdGhpcy5vbyA9IHQub287XG4gICAgfVxuICAgIHVvKHQpIHtcbiAgICAgICAgdGhpcy5jbyA9IHQ7XG4gICAgfVxuICAgIGFvKHQpIHtcbiAgICAgICAgdGhpcy5obyA9IHQ7XG4gICAgfVxuICAgIG9uTWVzc2FnZSh0KSB7XG4gICAgICAgIHRoaXMubG8gPSB0O1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5vbygpO1xuICAgIH1cbiAgICBzZW5kKHQpIHtcbiAgICAgICAgdGhpcy5ybyh0KTtcbiAgICB9XG4gICAgZm8oKSB7XG4gICAgICAgIHRoaXMuY28oKTtcbiAgICB9XG4gICAgd28odCkge1xuICAgICAgICB0aGlzLmhvKHQpO1xuICAgIH1cbiAgICBfbyh0KSB7XG4gICAgICAgIHRoaXMubG8odCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBrdSA9IFwiV2ViQ2hhbm5lbENvbm5lY3Rpb25cIjtcblxuY2xhc3MgTXUgZXh0ZW5kcyBcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIFJlc3QtYmFzZWQgY29ubmVjdGlvbnMgdG8gdGhlIGJhY2tlbmQgKFdlYkNoYW5uZWwgYW5kXG4gKiBIVFRQKS5cbiAqL1xuY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZUluZm8gPSB0LCB0aGlzLmRhdGFiYXNlSWQgPSB0LmRhdGFiYXNlSWQ7XG4gICAgICAgIGNvbnN0IGUgPSB0LnNzbCA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiO1xuICAgICAgICB0aGlzLm1vID0gZSArIFwiOi8vXCIgKyB0Lmhvc3QsIHRoaXMueW8gPSBcInByb2plY3RzL1wiICsgdGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZCArIFwiL2RhdGFiYXNlcy9cIiArIHRoaXMuZGF0YWJhc2VJZC5kYXRhYmFzZSArIFwiL2RvY3VtZW50c1wiO1xuICAgIH1cbiAgICBnZXQgcG8oKSB7XG4gICAgICAgIC8vIEJvdGggYGludm9rZVJQQygpYCBhbmQgYGludm9rZVN0cmVhbWluZ1JQQygpYCB1c2UgdGhlaXIgYHBhdGhgIGFyZ3VtZW50cyB0byBkZXRlcm1pbmVcbiAgICAgICAgLy8gd2hlcmUgdG8gcnVuIHRoZSBxdWVyeSwgYW5kIGV4cGVjdCB0aGUgYHJlcXVlc3RgIHRvIE5PVCBzcGVjaWZ5IHRoZSBcInBhdGhcIi5cbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICBJbyh0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBDdSgpLCBvID0gdGhpcy5Ubyh0LCBlKTtcbiAgICAgICAgTihcIlJlc3RDb25uZWN0aW9uXCIsIGBTZW5kaW5nIFJQQyAnJHt0fScgJHtyfTpgLCBvLCBuKTtcbiAgICAgICAgY29uc3QgdSA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5Fbyh1LCBzLCBpKSwgdGhpcy5Bbyh0LCBvLCB1LCBuKS50aGVuKChlID0+IChOKFwiUmVzdENvbm5lY3Rpb25cIiwgYFJlY2VpdmVkIFJQQyAnJHt0fScgJHtyfTogYCwgZSksIFxuICAgICAgICBlKSksIChlID0+IHtcbiAgICAgICAgICAgIHRocm93IE0oXCJSZXN0Q29ubmVjdGlvblwiLCBgUlBDICcke3R9JyAke3J9IGZhaWxlZCB3aXRoIGVycm9yOiBgLCBlLCBcInVybDogXCIsIG8sIFwicmVxdWVzdDpcIiwgbiksIFxuICAgICAgICAgICAgZTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICB2byh0LCBlLCBuLCBzLCBpLCByKSB7XG4gICAgICAgIC8vIFRoZSBSRVNUIEFQSSBhdXRvbWF0aWNhbGx5IGFnZ3JlZ2F0ZXMgYWxsIG9mIHRoZSBzdHJlYW1lZCByZXN1bHRzLCBzbyB3ZVxuICAgICAgICAvLyBjYW4ganVzdCB1c2UgdGhlIG5vcm1hbCBpbnZva2UoKSBtZXRob2QuXG4gICAgICAgIHJldHVybiB0aGlzLklvKHQsIGUsIG4sIHMsIGkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyB0aGUgaGVhZGVycyBmb3IgYSByZXF1ZXN0LCBhZGRpbmcgYW55IGF1dGhvcml6YXRpb24gdG9rZW4gaWZcbiAgICAgKiBwcmVzZW50IGFuZCBhbnkgYWRkaXRpb25hbCBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKi8gICAgRW8odCwgZSwgbikge1xuICAgICAgICB0W1wiWC1Hb29nLUFwaS1DbGllbnRcIl0gPSBcImdsLWpzLyBmaXJlL1wiICsgUywgXG4gICAgICAgIC8vIENvbnRlbnQtVHlwZTogdGV4dC9wbGFpbiB3aWxsIGF2b2lkIHByZWZsaWdodCByZXF1ZXN0cyB3aGljaCBtaWdodFxuICAgICAgICAvLyBtZXNzIHdpdGggQ09SUyBhbmQgcmVkaXJlY3RzIGJ5IHByb3hpZXMuIElmIHdlIGFkZCBjdXN0b20gaGVhZGVyc1xuICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRoaXMgY29kZSB0byBwb3RlbnRpYWxseSB1c2UgdGhlICRodHRwT3ZlcndyaXRlXG4gICAgICAgIC8vIHBhcmFtZXRlciBzdXBwb3J0ZWQgYnkgRVNGIHRvIGF2b2lkIHRyaWdnZXJpbmcgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAgICB0W1wiQ29udGVudC1UeXBlXCJdID0gXCJ0ZXh0L3BsYWluXCIsIHRoaXMuZGF0YWJhc2VJbmZvLmFwcElkICYmICh0W1wiWC1GaXJlYmFzZS1HTVBJRFwiXSA9IHRoaXMuZGF0YWJhc2VJbmZvLmFwcElkKSwgXG4gICAgICAgIGUgJiYgZS5oZWFkZXJzLmZvckVhY2goKChlLCBuKSA9PiB0W25dID0gZSkpLCBuICYmIG4uaGVhZGVycy5mb3JFYWNoKCgoZSwgbikgPT4gdFtuXSA9IGUpKTtcbiAgICB9XG4gICAgVG8odCwgZSkge1xuICAgICAgICBjb25zdCBuID0geHVbdF07XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm1vfS92MS8ke2V9OiR7bn1gO1xuICAgIH1cbn0ge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIodCksIHRoaXMuZm9yY2VMb25nUG9sbGluZyA9IHQuZm9yY2VMb25nUG9sbGluZywgdGhpcy5hdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPSB0LmF1dG9EZXRlY3RMb25nUG9sbGluZywgXG4gICAgICAgIHRoaXMudXNlRmV0Y2hTdHJlYW1zID0gdC51c2VGZXRjaFN0cmVhbXMsIHRoaXMubG9uZ1BvbGxpbmdPcHRpb25zID0gdC5sb25nUG9sbGluZ09wdGlvbnM7XG4gICAgfVxuICAgIEFvKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgY29uc3QgaSA9IEN1KCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKHIsIG8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBuZXcgWGhySW87XG4gICAgICAgICAgICB1LnNldFdpdGhDcmVkZW50aWFscyghMCksIHUubGlzdGVuT25jZShFdmVudFR5cGUuQ09NUExFVEUsICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh1LmdldExhc3RFcnJvckNvZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLk5PX0VSUk9SOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHUuZ2V0UmVzcG9uc2VKc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBOKGt1LCBgWEhSIGZvciBSUEMgJyR7dH0nICR7aX0gcmVjZWl2ZWQ6YCwgSlNPTi5zdHJpbmdpZnkoZSkpLCByKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5USU1FT1VUOlxuICAgICAgICAgICAgICAgICAgICAgICAgTihrdSwgYFJQQyAnJHt0fScgJHtpfSB0aW1lZCBvdXRgKSwgbyhuZXcgVShxLkRFQURMSU5FX0VYQ0VFREVELCBcIlJlcXVlc3QgdGltZSBvdXRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5IVFRQX0VSUk9SOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHUuZ2V0U3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTihrdSwgYFJQQyAnJHt0fScgJHtpfSBmYWlsZWQgd2l0aCBzdGF0dXM6YCwgbiwgXCJyZXNwb25zZSB0ZXh0OlwiLCB1LmdldFJlc3BvbnNlVGV4dCgpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ID0gdS5nZXRSZXNwb25zZUpzb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHQpICYmICh0ID0gdFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG51bGwgPT0gdCA/IHZvaWQgMCA6IHQuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5zdGF0dXMgJiYgZS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18vZywgXCItXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocSkuaW5kZXhPZihlKSA+PSAwID8gZSA6IHEuVU5LTk9XTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfShlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8obmV3IFUodCwgZS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG8obmV3IFUocS5VTktOT1dOLCBcIlNlcnZlciByZXNwb25kZWQgd2l0aCBzdGF0dXMgXCIgKyB1LmdldFN0YXR1cygpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWNlaXZlZCBhbiBIVFRQX0VSUk9SIGJ1dCB0aGVyZSdzIG5vIHN0YXR1cyBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBtb3N0IHByb2JhYmx5IGEgY29ubmVjdGlvbiBpc3N1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbyhuZXcgVShxLlVOQVZBSUxBQkxFLCBcIkNvbm5lY3Rpb24gZmFpbGVkLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBPKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBOKGt1LCBgUlBDICcke3R9JyAke2l9IGNvbXBsZXRlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBjID0gSlNPTi5zdHJpbmdpZnkocyk7XG4gICAgICAgICAgICBOKGt1LCBgUlBDICcke3R9JyAke2l9IHNlbmRpbmcgcmVxdWVzdDpgLCBzKSwgdS5zZW5kKGUsIFwiUE9TVFwiLCBjLCBuLCAxNSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgUm8odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gQ3UoKSwgaSA9IFsgdGhpcy5tbywgXCIvXCIsIFwiZ29vZ2xlLmZpcmVzdG9yZS52MS5GaXJlc3RvcmVcIiwgXCIvXCIsIHQsIFwiL2NoYW5uZWxcIiBdLCByID0gY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCgpLCBvID0gZ2V0U3RhdEV2ZW50VGFyZ2V0KCksIHUgPSB7XG4gICAgICAgICAgICAvLyBSZXF1aXJlZCBmb3IgYmFja2VuZCBzdGlja2luZXNzLCByb3V0aW5nIGJlaGF2aW9yIGlzIGJhc2VkIG9uIHRoaXNcbiAgICAgICAgICAgIC8vIHBhcmFtZXRlci5cbiAgICAgICAgICAgIGh0dHBTZXNzaW9uSWRQYXJhbTogXCJnc2Vzc2lvbmlkXCIsXG4gICAgICAgICAgICBpbml0TWVzc2FnZUhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgbWVzc2FnZVVybFBhcmFtczoge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcGFyYW0gaXMgdXNlZCB0byBpbXByb3ZlIHJvdXRpbmcgYW5kIHByb2plY3QgaXNvbGF0aW9uIGJ5IHRoZVxuICAgICAgICAgICAgICAgIC8vIGJhY2tlbmQgYW5kIG11c3QgYmUgaW5jbHVkZWQgaW4gZXZlcnkgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICBkYXRhYmFzZTogYHByb2plY3RzLyR7dGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZH0vZGF0YWJhc2VzLyR7dGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlfWBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZW5kUmF3SnNvbjogITAsXG4gICAgICAgICAgICBzdXBwb3J0c0Nyb3NzRG9tYWluWGhyOiAhMCxcbiAgICAgICAgICAgIGludGVybmFsQ2hhbm5lbFBhcmFtczoge1xuICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHRpbWVvdXQgKHJhbmRvbWl6ZWQgYmV0d2VlbiAxMC0yMCBzZWNvbmRzKSBzaW5jZVxuICAgICAgICAgICAgICAgIC8vIGEgbGFyZ2Ugd3JpdGUgYmF0Y2ggb24gYSBzbG93IGludGVybmV0IGNvbm5lY3Rpb24gbWF5IHRha2UgYSBsb25nXG4gICAgICAgICAgICAgICAgLy8gdGltZSB0byBzZW5kIHRvIHRoZSBiYWNrZW5kLiBSYXRoZXIgdGhhbiBoYXZlIFdlYkNoYW5uZWwgaW1wb3NlIGFcbiAgICAgICAgICAgICAgICAvLyB0aWdodCB0aW1lb3V0IHdoaWNoIGNvdWxkIGxlYWQgdG8gaW5maW5pdGUgdGltZW91dHMgYW5kIHJldHJpZXMsIHdlXG4gICAgICAgICAgICAgICAgLy8gc2V0IGl0IHZlcnkgbGFyZ2UgKDUtMTAgbWludXRlcykgYW5kIHJlbHkgb24gdGhlIGJyb3dzZXIncyBidWlsdGluXG4gICAgICAgICAgICAgICAgLy8gdGltZW91dHMgdG8ga2ljayBpbiBpZiB0aGUgcmVxdWVzdCBpc24ndCB3b3JraW5nLlxuICAgICAgICAgICAgICAgIGZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNczogNmU1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9yY2VMb25nUG9sbGluZzogdGhpcy5mb3JjZUxvbmdQb2xsaW5nLFxuICAgICAgICAgICAgZGV0ZWN0QnVmZmVyaW5nUHJveHk6IHRoaXMuYXV0b0RldGVjdExvbmdQb2xsaW5nXG4gICAgICAgIH0sIGMgPSB0aGlzLmxvbmdQb2xsaW5nT3B0aW9ucy50aW1lb3V0U2Vjb25kcztcbiAgICAgICAgdm9pZCAwICE9PSBjICYmICh1LmxvbmdQb2xsaW5nVGltZW91dCA9IE1hdGgucm91bmQoMWUzICogYykpLCB0aGlzLnVzZUZldGNoU3RyZWFtcyAmJiAodS54bWxIdHRwRmFjdG9yeSA9IG5ldyBGZXRjaFhtbEh0dHBGYWN0b3J5KHt9KSksIFxuICAgICAgICB0aGlzLkVvKHUuaW5pdE1lc3NhZ2VIZWFkZXJzLCBlLCBuKSwgXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGN1c3RvbSBoZWFkZXJzIHdlIGp1c3QgYWRkZWQgdG8gcmVxdWVzdC5pbml0TWVzc2FnZUhlYWRlcnNcbiAgICAgICAgLy8gKEF1dGhvcml6YXRpb24sIGV0Yy4pIHdpbGwgdHJpZ2dlciB0aGUgYnJvd3NlciB0byBtYWtlIGEgQ09SUyBwcmVmbGlnaHRcbiAgICAgICAgLy8gcmVxdWVzdCBiZWNhdXNlIHRoZSBYSFIgd2lsbCBubyBsb25nZXIgbWVldCB0aGUgY3JpdGVyaWEgZm9yIGEgXCJzaW1wbGVcIlxuICAgICAgICAvLyBDT1JTIHJlcXVlc3Q6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQ09SUyNTaW1wbGVfcmVxdWVzdHNcbiAgICAgICAgLy8gVGhlcmVmb3JlIHRvIGF2b2lkIHRoZSBDT1JTIHByZWZsaWdodCByZXF1ZXN0IChhbiBleHRyYSBuZXR3b3JrXG4gICAgICAgIC8vIHJvdW5kdHJpcCksIHdlIHVzZSB0aGUgZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzIG9wdGlvbiB0byBzcGVjaWZ5IHRoYXRcbiAgICAgICAgLy8gdGhlIGhlYWRlcnMgc2hvdWxkIGluc3RlYWQgYmUgZW5jb2RlZCBpbiB0aGUgcmVxdWVzdCdzIFBPU1QgcGF5bG9hZCxcbiAgICAgICAgLy8gd2hpY2ggaXMgcmVjb2duaXplZCBieSB0aGUgd2ViY2hhbm5lbCBiYWNrZW5kLlxuICAgICAgICB1LmVuY29kZUluaXRNZXNzYWdlSGVhZGVycyA9ICEwO1xuICAgICAgICBjb25zdCBhID0gaS5qb2luKFwiXCIpO1xuICAgICAgICBOKGt1LCBgQ3JlYXRpbmcgUlBDICcke3R9JyBzdHJlYW0gJHtzfTogJHthfWAsIHUpO1xuICAgICAgICBjb25zdCBoID0gci5jcmVhdGVXZWJDaGFubmVsKGEsIHUpO1xuICAgICAgICAvLyBXZWJDaGFubmVsIHN1cHBvcnRzIHNlbmRpbmcgdGhlIGZpcnN0IG1lc3NhZ2Ugd2l0aCB0aGUgaGFuZHNoYWtlIC0gc2F2aW5nXG4gICAgICAgIC8vIGEgbmV0d29yayByb3VuZCB0cmlwLiBIb3dldmVyLCBpdCB3aWxsIGhhdmUgdG8gY2FsbCBzZW5kIGluIHRoZSBzYW1lXG4gICAgICAgIC8vIEpTIGV2ZW50IGxvb3AgYXMgb3Blbi4gSW4gb3JkZXIgdG8gZW5mb3JjZSB0aGlzLCB3ZSBkZWxheSBhY3R1YWxseVxuICAgICAgICAvLyBvcGVuaW5nIHRoZSBXZWJDaGFubmVsIHVudGlsIHNlbmQgaXMgY2FsbGVkLiBXaGV0aGVyIHdlIGhhdmUgY2FsbGVkXG4gICAgICAgIC8vIG9wZW4gaXMgdHJhY2tlZCB3aXRoIHRoaXMgdmFyaWFibGUuXG4gICAgICAgICAgICAgICAgbGV0IGwgPSAhMSwgZiA9ICExO1xuICAgICAgICAvLyBBIGZsYWcgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHN0cmVhbSB3YXMgY2xvc2VkIChieSB1cyBvciB0aHJvdWdoIGFuXG4gICAgICAgIC8vIGVycm9yL2Nsb3NlIGV2ZW50KSB0byBhdm9pZCBkZWxpdmVyaW5nIG11bHRpcGxlIGNsb3NlIGV2ZW50cyBvciBzZW5kaW5nXG4gICAgICAgIC8vIG9uIGEgY2xvc2VkIHN0cmVhbVxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBuZXcgTnUoe1xuICAgICAgICAgICAgcm86IGUgPT4ge1xuICAgICAgICAgICAgICAgIGYgPyBOKGt1LCBgTm90IHNlbmRpbmcgYmVjYXVzZSBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IGlzIGNsb3NlZDpgLCBlKSA6IChsIHx8IChOKGt1LCBgT3BlbmluZyBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IHRyYW5zcG9ydC5gKSwgXG4gICAgICAgICAgICAgICAgaC5vcGVuKCksIGwgPSAhMCksIE4oa3UsIGBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IHNlbmRpbmc6YCwgZSksIGguc2VuZChlKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb286ICgpID0+IGguY2xvc2UoKVxuICAgICAgICB9KSwgdyA9ICh0LCBlLCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IGNsb3N1cmUgdHlwaW5nIHNlZW1zIGJyb2tlbiBiZWNhdXNlIFdlYkNoYW5uZWwgZG9lc1xuICAgICAgICAgICAgLy8gbm90IGltcGxlbWVudCBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlXG4gICAgICAgICAgICB0Lmxpc3RlbihlLCAodCA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbih0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENsb3N1cmUgZXZlbnRzIGFyZSBndWFyZGVkIGFuZCBleGNlcHRpb25zIGFyZSBzd2FsbG93ZWQsIHNvIGNhdGNoIGFueVxuICAgICAgICAvLyBleGNlcHRpb24gYW5kIHJldGhyb3cgdXNpbmcgYSBzZXRUaW1lb3V0IHNvIHRoZXkgYmVjb21lIHZpc2libGUgYWdhaW4uXG4gICAgICAgIC8vIE5vdGUgdGhhdCBldmVudHVhbGx5IHRoaXMgZnVuY3Rpb24gY291bGQgZ28gYXdheSBpZiB3ZSBhcmUgY29uZmlkZW50XG4gICAgICAgIC8vIGVub3VnaCB0aGUgY29kZSBpcyBleGNlcHRpb24gZnJlZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdyhoLCBXZWJDaGFubmVsLkV2ZW50VHlwZS5PUEVOLCAoKCkgPT4ge1xuICAgICAgICAgICAgZiB8fCBOKGt1LCBgUlBDICcke3R9JyBzdHJlYW0gJHtzfSB0cmFuc3BvcnQgb3BlbmVkLmApO1xuICAgICAgICB9KSksIHcoaCwgV2ViQ2hhbm5lbC5FdmVudFR5cGUuQ0xPU0UsICgoKSA9PiB7XG4gICAgICAgICAgICBmIHx8IChmID0gITAsIE4oa3UsIGBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IHRyYW5zcG9ydCBjbG9zZWRgKSwgZC53bygpKTtcbiAgICAgICAgfSkpLCB3KGgsIFdlYkNoYW5uZWwuRXZlbnRUeXBlLkVSUk9SLCAoZSA9PiB7XG4gICAgICAgICAgICBmIHx8IChmID0gITAsIE0oa3UsIGBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IHRyYW5zcG9ydCBlcnJvcmVkOmAsIGUpLCBkLndvKG5ldyBVKHEuVU5BVkFJTEFCTEUsIFwiVGhlIG9wZXJhdGlvbiBjb3VsZCBub3QgYmUgY29tcGxldGVkXCIpKSk7XG4gICAgICAgIH0pKSwgdyhoLCBXZWJDaGFubmVsLkV2ZW50VHlwZS5NRVNTQUdFLCAoZSA9PiB7XG4gICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRhdGFbMF07XG4gICAgICAgICAgICAgICAgRighIWkpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oYi8zNTE0Mzg5MSk6IFRoZXJlIGlzIGEgYnVnIGluIE9uZSBQbGF0Zm9ybSB0aGF0IGNhdXNlZCBlcnJvcnNcbiAgICAgICAgICAgICAgICAvLyAoYW5kIG9ubHkgZXJyb3JzKSB0byBiZSB3cmFwcGVkIGluIGFuIGV4dHJhIGFycmF5LiBUbyBiZSBmb3J3YXJkXG4gICAgICAgICAgICAgICAgLy8gY29tcGF0aWJsZSB3aXRoIHRoZSBidWcgd2UgbmVlZCB0byBjaGVjayBlaXRoZXIgY29uZGl0aW9uLiBUaGUgbGF0dGVyXG4gICAgICAgICAgICAgICAgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgZml4IGhhcyBiZWVuIHJvbGxlZCBvdXQuXG4gICAgICAgICAgICAgICAgLy8gVXNlIGFueSBiZWNhdXNlIG1zZ0RhdGEuZXJyb3IgaXMgbm90IHR5cGVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLCBvID0gci5lcnJvciB8fCAobnVsbCA9PT0gKG4gPSByWzBdKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLmVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgICAgICBOKGt1LCBgUlBDICcke3R9JyBzdHJlYW0gJHtzfSByZWNlaXZlZCBlcnJvcjpgLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3Iuc3RhdHVzIHdpbGwgYmUgYSBzdHJpbmcgbGlrZSAnT0snIG9yICdOT1RfRk9VTkQnLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gby5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuID0gXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogTWFwcyBhbiBlcnJvciBDb2RlIGZyb20gYSBHUlBDIHN0YXR1cyBpZGVudGlmaWVyIGxpa2UgJ05PVF9GT1VORCcuXG4gKlxuICogQHJldHVybnMgVGhlIENvZGUgZXF1aXZhbGVudCB0byB0aGUgZ2l2ZW4gc3RhdHVzIHN0cmluZyBvciB1bmRlZmluZWQgaWZcbiAqICAgICB0aGVyZSBpcyBubyBtYXRjaC5cbiAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb29rdXAgYnkgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGlpW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgcmV0dXJuIHVpKGUpO1xuICAgICAgICAgICAgICAgICAgICB9KGUpLCBpID0gby5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IG4gJiYgKG4gPSBxLklOVEVSTkFMLCBpID0gXCJVbmtub3duIGVycm9yIHN0YXR1czogXCIgKyBlICsgXCIgd2l0aCBtZXNzYWdlIFwiICsgby5tZXNzYWdlKSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgY2xvc2VkIHNvIG5vIGZ1cnRoZXIgZXZlbnRzIGFyZSBwcm9wYWdhdGVkXG4gICAgICAgICAgICAgICAgICAgIGYgPSAhMCwgZC53byhuZXcgVShuLCBpKSksIGguY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgTihrdSwgYFJQQyAnJHt0fScgc3RyZWFtICR7c30gcmVjZWl2ZWQ6YCwgaSksIGQuX28oaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgdyhvLCBFdmVudC5TVEFUX0VWRU5ULCAoZSA9PiB7XG4gICAgICAgICAgICBlLnN0YXQgPT09IFN0YXQuUFJPWFkgPyBOKGt1LCBgUlBDICcke3R9JyBzdHJlYW0gJHtzfSBkZXRlY3RlZCBidWZmZXJpbmcgcHJveHlgKSA6IGUuc3RhdCA9PT0gU3RhdC5OT1BST1hZICYmIE4oa3UsIGBSUEMgJyR7dH0nIHN0cmVhbSAke3N9IGRldGVjdGVkIG5vIGJ1ZmZlcmluZyBwcm94eWApO1xuICAgICAgICB9KSksIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5IHdlIGNvdWxkL3Nob3VsZCB3YWl0IGZvciB0aGUgV2ViQ2hhbm5lbCBvcGVuZWQgZXZlbnQsXG4gICAgICAgICAgICAvLyBidXQgYmVjYXVzZSB3ZSB3YW50IHRvIHNlbmQgdGhlIGZpcnN0IG1lc3NhZ2Ugd2l0aCB0aGUgV2ViQ2hhbm5lbFxuICAgICAgICAgICAgLy8gaGFuZHNoYWtlIHdlIHByZXRlbmQgdGhlIGNoYW5uZWwgb3BlbmVkIGhlcmUgKGFzeW5jaHJvbm91c2x5KSwgYW5kXG4gICAgICAgICAgICAvLyB0aGVuIGRlbGF5IHRoZSBhY3R1YWwgb3BlbiB1bnRpbCB0aGUgZmlyc3QgbWVzc2FnZSBpcyBzZW50LlxuICAgICAgICAgICAgZC5mbygpO1xuICAgICAgICB9KSwgMCksIGQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIEluaXRpYWxpemVzIHRoZSBXZWJDaGFubmVsQ29ubmVjdGlvbiBmb3IgdGhlIGJyb3dzZXIuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFRoZSBQbGF0Zm9ybSdzICd3aW5kb3cnIGltcGxlbWVudGF0aW9uIG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uICR1KCkge1xuICAgIC8vIGB3aW5kb3dgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogbnVsbDtcbn1cblxuLyoqIFRoZSBQbGF0Zm9ybSdzICdkb2N1bWVudCcgaW1wbGVtZW50YXRpb24gb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlLiAqLyBmdW5jdGlvbiBPdSgpIHtcbiAgICAvLyBgZG9jdW1lbnRgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIEZ1KHQpIHtcbiAgICByZXR1cm4gbmV3IFZpKHQsIC8qIHVzZVByb3RvM0pzb249ICovICEwKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBoZWxwZXIgZm9yIHJ1bm5pbmcgZGVsYXllZCB0YXNrcyBmb2xsb3dpbmcgYW4gZXhwb25lbnRpYWwgYmFja29mZiBjdXJ2ZVxuICogYmV0d2VlbiBhdHRlbXB0cy5cbiAqXG4gKiBFYWNoIGRlbGF5IGlzIG1hZGUgdXAgb2YgYSBcImJhc2VcIiBkZWxheSB3aGljaCBmb2xsb3dzIHRoZSBleHBvbmVudGlhbFxuICogYmFja29mZiBjdXJ2ZSwgYW5kIGEgKy8tIDUwJSBcImppdHRlclwiIHRoYXQgaXMgY2FsY3VsYXRlZCBhbmQgYWRkZWQgdG8gdGhlXG4gKiBiYXNlIGRlbGF5LiBUaGlzIHByZXZlbnRzIGNsaWVudHMgZnJvbSBhY2NpZGVudGFsbHkgc3luY2hyb25pemluZyB0aGVpclxuICogZGVsYXlzIGNhdXNpbmcgc3Bpa2VzIG9mIGxvYWQgdG8gdGhlIGJhY2tlbmQuXG4gKi9cbmNsYXNzIEJ1IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgQXN5bmNRdWV1ZSB0byBydW4gYmFja29mZiBvcGVyYXRpb25zIG9uLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBJRCB0byB1c2Ugd2hlbiBzY2hlZHVsaW5nIGJhY2tvZmYgb3BlcmF0aW9ucyBvbiB0aGUgQXN5bmNRdWV1ZS5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCBkZWxheSAodXNlZCBhcyB0aGUgYmFzZSBkZWxheSBvbiB0aGUgZmlyc3QgcmV0cnkgYXR0ZW1wdCkuXG4gICAgICogTm90ZSB0aGF0IGppdHRlciB3aWxsIHN0aWxsIGJlIGFwcGxpZWQsIHNvIHRoZSBhY3R1YWwgZGVsYXkgY291bGQgYmUgYXNcbiAgICAgKiBsaXR0bGUgYXMgMC41KmluaXRpYWxEZWxheU1zLlxuICAgICAqL1xuICAgIG4gPSAxZTNcbiAgICAvKipcbiAgICAgKiBUaGUgbXVsdGlwbGllciB0byB1c2UgdG8gZGV0ZXJtaW5lIHRoZSBleHRlbmRlZCBiYXNlIGRlbGF5IGFmdGVyIGVhY2hcbiAgICAgKiBhdHRlbXB0LlxuICAgICAqLyAsIHMgPSAxLjVcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBiYXNlIGRlbGF5IGFmdGVyIHdoaWNoIG5vIGZ1cnRoZXIgYmFja29mZiBpcyBwZXJmb3JtZWQuXG4gICAgICogTm90ZSB0aGF0IGppdHRlciB3aWxsIHN0aWxsIGJlIGFwcGxpZWQsIHNvIHRoZSBhY3R1YWwgZGVsYXkgY291bGQgYmUgYXNcbiAgICAgKiBtdWNoIGFzIDEuNSptYXhEZWxheU1zLlxuICAgICAqLyAsIGkgPSA2ZTQpIHtcbiAgICAgICAgdGhpcy5paSA9IHQsIHRoaXMudGltZXJJZCA9IGUsIHRoaXMuUG8gPSBuLCB0aGlzLmJvID0gcywgdGhpcy5WbyA9IGksIHRoaXMuU28gPSAwLCBcbiAgICAgICAgdGhpcy5EbyA9IG51bGwsIFxuICAgICAgICAvKiogVGhlIGxhc3QgYmFja29mZiBhdHRlbXB0LCBhcyBlcG9jaCBtaWxsaXNlY29uZHMuICovXG4gICAgICAgIHRoaXMuQ28gPSBEYXRlLm5vdygpLCB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheS5cbiAgICAgKlxuICAgICAqIFRoZSB2ZXJ5IG5leHQgYmFja29mZkFuZFdhaXQoKSB3aWxsIGhhdmUgbm8gZGVsYXkuIElmIGl0IGlzIGNhbGxlZCBhZ2FpblxuICAgICAqIChpLmUuIGR1ZSB0byBhbiBlcnJvciksIGluaXRpYWxEZWxheU1zIChwbHVzIGppdHRlcikgd2lsbCBiZSB1c2VkLCBhbmRcbiAgICAgKiBzdWJzZXF1ZW50IG9uZXMgd2lsbCBpbmNyZWFzZSBhY2NvcmRpbmcgdG8gdGhlIGJhY2tvZmZGYWN0b3IuXG4gICAgICovICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLlNvID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBiYWNrb2ZmIGRlbGF5IHRvIHRoZSBtYXhpbXVtIGRlbGF5IChlLmcuIGZvciB1c2UgYWZ0ZXIgYVxuICAgICAqIFJFU09VUkNFX0VYSEFVU1RFRCBlcnJvcikuXG4gICAgICovICAgIHhvKCkge1xuICAgICAgICB0aGlzLlNvID0gdGhpcy5WbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciBjdXJyZW50RGVsYXlNcywgYW5kIGluY3JlYXNlcyB0aGVcbiAgICAgKiBkZWxheSBmb3IgYW55IHN1YnNlcXVlbnQgYXR0ZW1wdHMuIElmIHRoZXJlIHdhcyBhIHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb25cbiAgICAgKiBhbHJlYWR5LCBpdCB3aWxsIGJlIGNhbmNlbGVkLlxuICAgICAqLyAgICBObyh0KSB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyBiYWNrb2ZmIG9wZXJhdGlvbi5cbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgLy8gRmlyc3Qgc2NoZWR1bGUgdXNpbmcgdGhlIGN1cnJlbnQgYmFzZSAod2hpY2ggbWF5IGJlIDAgYW5kIHNob3VsZCBiZVxuICAgICAgICAvLyBob25vcmVkIGFzIHN1Y2gpLlxuICAgICAgICBjb25zdCBlID0gTWF0aC5mbG9vcih0aGlzLlNvICsgdGhpcy5rbygpKSwgbiA9IE1hdGgubWF4KDAsIERhdGUubm93KCkgLSB0aGlzLkNvKSwgcyA9IE1hdGgubWF4KDAsIGUgLSBuKTtcbiAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCBsYXN0QXR0ZW1wdFRpbWUgYmVpbmcgaW4gdGhlIGZ1dHVyZSBkdWUgdG8gYSBjbG9jayBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgcyA+IDAgJiYgTihcIkV4cG9uZW50aWFsQmFja29mZlwiLCBgQmFja2luZyBvZmYgZm9yICR7c30gbXMgKGJhc2UgZGVsYXk6ICR7dGhpcy5Tb30gbXMsIGRlbGF5IHdpdGggaml0dGVyOiAke2V9IG1zLCBsYXN0IGF0dGVtcHQ6ICR7bn0gbXMgYWdvKWApLCBcbiAgICAgICAgdGhpcy5EbyA9IHRoaXMuaWkuZW5xdWV1ZUFmdGVyRGVsYXkodGhpcy50aW1lcklkLCBzLCAoKCkgPT4gKHRoaXMuQ28gPSBEYXRlLm5vdygpLCBcbiAgICAgICAgdCgpKSkpLCBcbiAgICAgICAgLy8gQXBwbHkgYmFja29mZiBmYWN0b3IgdG8gZGV0ZXJtaW5lIG5leHQgZGVsYXkgYW5kIGVuc3VyZSBpdCBpcyB3aXRoaW5cbiAgICAgICAgLy8gYm91bmRzLlxuICAgICAgICB0aGlzLlNvICo9IHRoaXMuYm8sIHRoaXMuU28gPCB0aGlzLlBvICYmICh0aGlzLlNvID0gdGhpcy5QbyksIHRoaXMuU28gPiB0aGlzLlZvICYmICh0aGlzLlNvID0gdGhpcy5Wbyk7XG4gICAgfVxuICAgIE1vKCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLkRvICYmICh0aGlzLkRvLnNraXBEZWxheSgpLCB0aGlzLkRvID0gbnVsbCk7XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5EbyAmJiAodGhpcy5Eby5jYW5jZWwoKSwgdGhpcy5EbyA9IG51bGwpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHJhbmRvbSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWy1jdXJyZW50QmFzZU1zLzIsIGN1cnJlbnRCYXNlTXMvMl0gKi8gICAga28oKSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAtIC41KSAqIHRoaXMuU287XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBzdHJlYW1pbmcgUlBDXG4gKiB0byB0aGUgRmlyZXN0b3JlIGJhY2tlbmQuIEl0J3MgYnVpbHQgb24gdG9wIG9mIHRoZSBjb25uZWN0aW9ucyBvd24gc3VwcG9ydFxuICogZm9yIHN0cmVhbWluZyBSUENzLCBhbmQgYWRkcyBzZXZlcmFsIGNyaXRpY2FsIGZlYXR1cmVzIGZvciBvdXIgY2xpZW50czpcbiAqXG4gKiAgIC0gRXhwb25lbnRpYWwgYmFja29mZiBvbiBmYWlsdXJlXG4gKiAgIC0gQXV0aGVudGljYXRpb24gdmlhIENyZWRlbnRpYWxzUHJvdmlkZXJcbiAqICAgLSBEaXNwYXRjaGluZyBhbGwgY2FsbGJhY2tzIGludG8gdGhlIHNoYXJlZCB3b3JrZXIgcXVldWVcbiAqICAgLSBDbG9zaW5nIGlkbGUgc3RyZWFtcyBhZnRlciA2MCBzZWNvbmRzIG9mIGluYWN0aXZpdHlcbiAqXG4gKiBTdWJjbGFzc2VzIG9mIFBlcnNpc3RlbnRTdHJlYW0gaW1wbGVtZW50IHNlcmlhbGl6YXRpb24gb2YgbW9kZWxzIHRvIGFuZFxuICogZnJvbSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvdG9jb2wgYnVmZmVycyBmb3IgYSBzcGVjaWZpY1xuICogc3RyZWFtaW5nIFJQQy5cbiAqXG4gKiAjIyBTdGFydGluZyBhbmQgU3RvcHBpbmdcbiAqXG4gKiBTdHJlYW1pbmcgUlBDcyBhcmUgc3RhdGVmdWwgYW5kIG5lZWQgdG8gYmUgc3RhcnQoKWVkIGJlZm9yZSBtZXNzYWdlcyBjYW5cbiAqIGJlIHNlbnQgYW5kIHJlY2VpdmVkLiBUaGUgUGVyc2lzdGVudFN0cmVhbSB3aWxsIGNhbGwgdGhlIG9uT3BlbigpIGZ1bmN0aW9uXG4gKiBvZiB0aGUgbGlzdGVuZXIgb25jZSB0aGUgc3RyZWFtIGlzIHJlYWR5IHRvIGFjY2VwdCByZXF1ZXN0cy5cbiAqXG4gKiBTaG91bGQgYSBzdGFydCgpIGZhaWwsIFBlcnNpc3RlbnRTdHJlYW0gd2lsbCBjYWxsIHRoZSByZWdpc3RlcmVkIG9uQ2xvc2UoKVxuICogbGlzdGVuZXIgd2l0aCBhIEZpcmVzdG9yZUVycm9yIGluZGljYXRpbmcgd2hhdCB3ZW50IHdyb25nLlxuICpcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSBjYW4gYmUgc3RhcnRlZCBhbmQgc3RvcHBlZCByZXBlYXRlZGx5LlxuICpcbiAqIEdlbmVyaWMgdHlwZXM6XG4gKiAgU2VuZFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBvdXRnb2luZyBtZXNzYWdlIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiAgICBjb25uZWN0aW9uIHN0cmVhbVxuICogIFJlY2VpdmVUeXBlOiBUaGUgdHlwZSBvZiB0aGUgaW5jb21pbmcgbWVzc2FnZSBvZiB0aGUgdW5kZXJseWluZ1xuICogICAgY29ubmVjdGlvbiBzdHJlYW1cbiAqICBMaXN0ZW5lclR5cGU6IFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgY2FsbGJhY2tzXG4gKi9cbmNsYXNzIEx1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpLCByLCBvLCB1KSB7XG4gICAgICAgIHRoaXMuaWkgPSB0LCB0aGlzLiRvID0gbiwgdGhpcy5PbyA9IHMsIHRoaXMuY29ubmVjdGlvbiA9IGksIHRoaXMuYXV0aENyZWRlbnRpYWxzUHJvdmlkZXIgPSByLCBcbiAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIgPSBvLCB0aGlzLmxpc3RlbmVyID0gdSwgdGhpcy5zdGF0ZSA9IDAgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwgKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgY2xvc2UgY291bnQgdGhhdCdzIGluY3JlbWVudGVkIGV2ZXJ5IHRpbWUgdGhlIHN0cmVhbSBpcyBjbG9zZWQ7IHVzZWQgYnlcbiAgICAgICAgICogZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlcigpIHRvIGludmFsaWRhdGUgY2FsbGJhY2tzIHRoYXQgaGFwcGVuIGFmdGVyXG4gICAgICAgICAqIGNsb3NlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5GbyA9IDAsIHRoaXMuQm8gPSBudWxsLCB0aGlzLkxvID0gbnVsbCwgdGhpcy5zdHJlYW0gPSBudWxsLCB0aGlzLnFvID0gbmV3IEJ1KHQsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgc3RhcnQoKSBoYXMgYmVlbiBjYWxsZWQgYW5kIG5vIGVycm9yIGhhcyBvY2N1cnJlZC4gVHJ1ZVxuICAgICAqIGluZGljYXRlcyB0aGUgc3RyZWFtIGlzIG9wZW4gb3IgaW4gdGhlIHByb2Nlc3Mgb2Ygb3BlbmluZyAod2hpY2hcbiAgICAgKiBlbmNvbXBhc3NlcyByZXNwZWN0aW5nIGJhY2tvZmYsIGdldHRpbmcgYXV0aCB0b2tlbnMsIGFuZCBzdGFydGluZyB0aGVcbiAgICAgKiBhY3R1YWwgUlBDKS4gVXNlIGlzT3BlbigpIHRvIGRldGVybWluZSBpZiB0aGUgc3RyZWFtIGlzIG9wZW4gYW5kIHJlYWR5IGZvclxuICAgICAqIG91dGJvdW5kIHJlcXVlc3RzLlxuICAgICAqLyAgICBVbygpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLlN0YXJ0aW5nICovID09PSB0aGlzLnN0YXRlIHx8IDUgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkJhY2tvZmYgKi8gPT09IHRoaXMuc3RhdGUgfHwgdGhpcy5LbygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVuZGVybHlpbmcgUlBDIGlzIG9wZW4gKHRoZSBvbk9wZW4oKSBsaXN0ZW5lciBoYXMgYmVlblxuICAgICAqIGNhbGxlZCkgYW5kIHRoZSBzdHJlYW0gaXMgcmVhZHkgZm9yIG91dGJvdW5kIHJlcXVlc3RzLlxuICAgICAqLyAgICBLbygpIHtcbiAgICAgICAgcmV0dXJuIDIgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLk9wZW4gKi8gPT09IHRoaXMuc3RhdGUgfHwgMyAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSGVhbHRoeSAqLyA9PT0gdGhpcy5zdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBSUEMuIE9ubHkgYWxsb3dlZCBpZiBpc1N0YXJ0ZWQoKSByZXR1cm5zIGZhbHNlLiBUaGUgc3RyZWFtIGlzXG4gICAgICogbm90IGltbWVkaWF0ZWx5IHJlYWR5IGZvciB1c2U6IG9uT3BlbigpIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBSUEMgaXNcbiAgICAgKiByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMsIGF0IHdoaWNoIHBvaW50IGlzT3BlbigpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICpcbiAgICAgKiBXaGVuIHN0YXJ0IHJldHVybnMsIGlzU3RhcnRlZCgpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICovICAgIHN0YXJ0KCkge1xuICAgICAgICA0IC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5FcnJvciAqLyAhPT0gdGhpcy5zdGF0ZSA/IHRoaXMuYXV0aCgpIDogdGhpcy5HbygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyB0aGUgUlBDLiBUaGlzIGNhbGwgaXMgaWRlbXBvdGVudCBhbmQgYWxsb3dlZCByZWdhcmRsZXNzIG9mIHRoZVxuICAgICAqIGN1cnJlbnQgaXNTdGFydGVkKCkgc3RhdGUuXG4gICAgICpcbiAgICAgKiBXaGVuIHN0b3AgcmV0dXJucywgaXNTdGFydGVkKCkgYW5kIGlzT3BlbigpIHdpbGwgYm90aCByZXR1cm4gZmFsc2UuXG4gICAgICovICAgIGFzeW5jIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuVW8oKSAmJiBhd2FpdCB0aGlzLmNsb3NlKDAgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwgKi8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZnRlciBhbiBlcnJvciB0aGUgc3RyZWFtIHdpbGwgdXN1YWxseSBiYWNrIG9mZiBvbiB0aGUgbmV4dCBhdHRlbXB0IHRvXG4gICAgICogc3RhcnQgaXQuIElmIHRoZSBlcnJvciB3YXJyYW50cyBhbiBpbW1lZGlhdGUgcmVzdGFydCBvZiB0aGUgc3RyZWFtLCB0aGVcbiAgICAgKiBzZW5kZXIgY2FuIHVzZSB0aGlzIHRvIGluZGljYXRlIHRoYXQgdGhlIHJlY2VpdmVyIHNob3VsZCBub3QgYmFjayBvZmYuXG4gICAgICpcbiAgICAgKiBFYWNoIGVycm9yIHdpbGwgY2FsbCB0aGUgb25DbG9zZSgpIGxpc3RlbmVyLiBUaGF0IGZ1bmN0aW9uIGNhbiBkZWNpZGUgdG9cbiAgICAgKiBpbmhpYml0IGJhY2tvZmYgaWYgcmVxdWlyZWQuXG4gICAgICovICAgIFFvKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMCAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbCAqLyAsIHRoaXMucW8ucmVzZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFya3MgdGhpcyBzdHJlYW0gYXMgaWRsZS4gSWYgbm8gZnVydGhlciBhY3Rpb25zIGFyZSBwZXJmb3JtZWQgb24gdGhlXG4gICAgICogc3RyZWFtIGZvciBvbmUgbWludXRlLCB0aGUgc3RyZWFtIHdpbGwgYXV0b21hdGljYWxseSBjbG9zZSBpdHNlbGYgYW5kXG4gICAgICogbm90aWZ5IHRoZSBzdHJlYW0ncyBvbkNsb3NlKCkgaGFuZGxlciB3aXRoIFN0YXR1cy5PSy4gVGhlIHN0cmVhbSB3aWxsIHRoZW5cbiAgICAgKiBiZSBpbiBhICFpc1N0YXJ0ZWQoKSBzdGF0ZSwgcmVxdWlyaW5nIHRoZSBjYWxsZXIgdG8gc3RhcnQgdGhlIHN0cmVhbSBhZ2FpblxuICAgICAqIGJlZm9yZSBmdXJ0aGVyIHVzZS5cbiAgICAgKlxuICAgICAqIE9ubHkgc3RyZWFtcyB0aGF0IGFyZSBpbiBzdGF0ZSAnT3BlbicgY2FuIGJlIG1hcmtlZCBpZGxlLCBhcyBhbGwgb3RoZXJcbiAgICAgKiBzdGF0ZXMgaW1wbHkgcGVuZGluZyBuZXR3b3JrIG9wZXJhdGlvbnMuXG4gICAgICovICAgIGpvKCkge1xuICAgICAgICAvLyBTdGFydHMgdGhlIGlkbGUgdGltZSBpZiB3ZSBhcmUgaW4gc3RhdGUgJ09wZW4nIGFuZCBhcmUgbm90IHlldCBhbHJlYWR5XG4gICAgICAgIC8vIHJ1bm5pbmcgYSB0aW1lciAoaW4gd2hpY2ggY2FzZSB0aGUgcHJldmlvdXMgaWRsZSB0aW1lb3V0IHN0aWxsIGFwcGxpZXMpLlxuICAgICAgICB0aGlzLktvKCkgJiYgbnVsbCA9PT0gdGhpcy5CbyAmJiAodGhpcy5CbyA9IHRoaXMuaWkuZW5xdWV1ZUFmdGVyRGVsYXkodGhpcy4kbywgNmU0LCAoKCkgPT4gdGhpcy56bygpKSkpO1xuICAgIH1cbiAgICAvKiogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSB1bmRlcmx5aW5nIHN0cmVhbS4gKi8gICAgV28odCkge1xuICAgICAgICB0aGlzLkhvKCksIHRoaXMuc3RyZWFtLnNlbmQodCk7XG4gICAgfVxuICAgIC8qKiBDYWxsZWQgYnkgdGhlIGlkbGUgdGltZXIgd2hlbiB0aGUgc3RyZWFtIHNob3VsZCBjbG9zZSBkdWUgdG8gaW5hY3Rpdml0eS4gKi8gICAgYXN5bmMgem8oKSB7XG4gICAgICAgIGlmICh0aGlzLktvKCkpIFxuICAgICAgICAvLyBXaGVuIHRpbWluZyBvdXQgYW4gaWRsZSBzdHJlYW0gdGhlcmUncyBubyByZWFzb24gdG8gZm9yY2UgdGhlIHN0cmVhbSBpbnRvIGJhY2tvZmYgd2hlblxuICAgICAgICAvLyBpdCByZXN0YXJ0cyBzbyBzZXQgdGhlIHN0cmVhbSBzdGF0ZSB0byBJbml0aWFsIGluc3RlYWQgb2YgRXJyb3IuXG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlKDAgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwgKi8pO1xuICAgIH1cbiAgICAvKiogTWFya3MgdGhlIHN0cmVhbSBhcyBhY3RpdmUgYWdhaW4uICovICAgIEhvKCkge1xuICAgICAgICB0aGlzLkJvICYmICh0aGlzLkJvLmNhbmNlbCgpLCB0aGlzLkJvID0gbnVsbCk7XG4gICAgfVxuICAgIC8qKiBDYW5jZWxzIHRoZSBoZWFsdGggY2hlY2sgZGVsYXllZCBvcGVyYXRpb24uICovICAgIEpvKCkge1xuICAgICAgICB0aGlzLkxvICYmICh0aGlzLkxvLmNhbmNlbCgpLCB0aGlzLkxvID0gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgc3RyZWFtIGFuZCBjbGVhbnMgdXAgYXMgbmVjZXNzYXJ5OlxuICAgICAqXG4gICAgICogKiBjbG9zZXMgdGhlIHVuZGVybHlpbmcgR1JQQyBzdHJlYW07XG4gICAgICogKiBjYWxscyB0aGUgb25DbG9zZSBoYW5kbGVyIHdpdGggdGhlIGdpdmVuICdlcnJvcic7XG4gICAgICogKiBzZXRzIGludGVybmFsIHN0cmVhbSBzdGF0ZSB0byAnZmluYWxTdGF0ZSc7XG4gICAgICogKiBhZGp1c3RzIHRoZSBiYWNrb2ZmIHRpbWVyIGJhc2VkIG9uIHRoZSBlcnJvclxuICAgICAqXG4gICAgICogQSBuZXcgc3RyZWFtIGNhbiBiZSBvcGVuZWQgYnkgY2FsbGluZyBzdGFydCgpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpbmFsU3RhdGUgLSB0aGUgaW50ZW5kZWQgc3RhdGUgb2YgdGhlIHN0cmVhbSBhZnRlciBjbG9zaW5nLlxuICAgICAqIEBwYXJhbSBlcnJvciAtIHRoZSBlcnJvciB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkIHdpdGguXG4gICAgICovICAgIGFzeW5jIGNsb3NlKHQsIGUpIHtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBvdXRzdGFuZGluZyB0aW1lcnMgKHRoZXkncmUgZ3VhcmFudGVlZCBub3QgdG8gZXhlY3V0ZSkuXG4gICAgICAgIHRoaXMuSG8oKSwgdGhpcy5KbygpLCB0aGlzLnFvLmNhbmNlbCgpLCBcbiAgICAgICAgLy8gSW52YWxpZGF0ZXMgYW55IHN0cmVhbS1yZWxhdGVkIGNhbGxiYWNrcyAoZS5nLiBmcm9tIGF1dGggb3IgdGhlXG4gICAgICAgIC8vIHVuZGVybHlpbmcgc3RyZWFtKSwgZ3VhcmFudGVlaW5nIHRoZXkgd29uJ3QgZXhlY3V0ZS5cbiAgICAgICAgdGhpcy5GbysrLCA0IC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5FcnJvciAqLyAhPT0gdCA/IFxuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIGludGVudGlvbmFsIGNsb3NlIGVuc3VyZSB3ZSBkb24ndCBkZWxheSBvdXIgbmV4dCBjb25uZWN0aW9uIGF0dGVtcHQuXG4gICAgICAgIHRoaXMucW8ucmVzZXQoKSA6IGUgJiYgZS5jb2RlID09PSBxLlJFU09VUkNFX0VYSEFVU1RFRCA/IChcbiAgICAgICAgLy8gTG9nIHRoZSBlcnJvci4gKFByb2JhYmx5IGVpdGhlciAncXVvdGEgZXhjZWVkZWQnIG9yICdtYXggcXVldWUgbGVuZ3RoIHJlYWNoZWQnLilcbiAgICAgICAgayhlLnRvU3RyaW5nKCkpLCBrKFwiVXNpbmcgbWF4aW11bSBiYWNrb2ZmIGRlbGF5IHRvIHByZXZlbnQgb3ZlcmxvYWRpbmcgdGhlIGJhY2tlbmQuXCIpLCBcbiAgICAgICAgdGhpcy5xby54bygpKSA6IGUgJiYgZS5jb2RlID09PSBxLlVOQVVUSEVOVElDQVRFRCAmJiAzIC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5IZWFsdGh5ICovICE9PSB0aGlzLnN0YXRlICYmIChcbiAgICAgICAgLy8gXCJ1bmF1dGhlbnRpY2F0ZWRcIiBlcnJvciBtZWFucyB0aGUgdG9rZW4gd2FzIHJlamVjdGVkLiBUaGlzIHNob3VsZCByYXJlbHlcbiAgICAgICAgLy8gaGFwcGVuIHNpbmNlIGJvdGggQXV0aCBhbmQgQXBwQ2hlY2sgZW5zdXJlIGEgc3VmZmljaWVudCBUVEwgd2hlbiB3ZVxuICAgICAgICAvLyByZXF1ZXN0IGEgdG9rZW4uIElmIGEgdXNlciBtYW51YWxseSByZXNldHMgdGhlaXIgc3lzdGVtIGNsb2NrIHRoaXMgY2FuXG4gICAgICAgIC8vIGZhaWwsIGhvd2V2ZXIuIEluIHRoaXMgY2FzZSwgd2Ugc2hvdWxkIGdldCBhIENvZGUuVU5BVVRIRU5USUNBVEVEIGVycm9yXG4gICAgICAgIC8vIGJlZm9yZSB3ZSByZWNlaXZlZCB0aGUgZmlyc3QgbWVzc2FnZSBhbmQgd2UgbmVlZCB0byBpbnZhbGlkYXRlIHRoZSB0b2tlblxuICAgICAgICAvLyB0byBlbnN1cmUgdGhhdCB3ZSBmZXRjaCBhIG5ldyB0b2tlbi5cbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHNQcm92aWRlci5pbnZhbGlkYXRlVG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIuaW52YWxpZGF0ZVRva2VuKCkpLCBcbiAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIHVuZGVybHlpbmcgc3RyZWFtIGJlY2F1c2Ugd2UgYXJlIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIGV2ZW50cy5cbiAgICAgICAgbnVsbCAhPT0gdGhpcy5zdHJlYW0gJiYgKHRoaXMuWW8oKSwgdGhpcy5zdHJlYW0uY2xvc2UoKSwgdGhpcy5zdHJlYW0gPSBudWxsKSwgXG4gICAgICAgIC8vIFRoaXMgc3RhdGUgbXVzdCBiZSBhc3NpZ25lZCBiZWZvcmUgY2FsbGluZyBvbkNsb3NlKCkgdG8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvXG4gICAgICAgIC8vIGluaGliaXQgYmFja29mZiBvciBvdGhlcndpc2UgbWFuaXB1bGF0ZSB0aGUgc3RhdGUgaW4gaXRzIG5vbi1zdGFydGVkIHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXRlID0gdCwgXG4gICAgICAgIC8vIE5vdGlmeSB0aGUgbGlzdGVuZXIgdGhhdCB0aGUgc3RyZWFtIGNsb3NlZC5cbiAgICAgICAgYXdhaXQgdGhpcy5saXN0ZW5lci5hbyhlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgYmVmb3JlIHRoZSBzdHJlYW0gaXMgY2xvc2VkLlxuICAgICAqIENhbGxpbmcgc3VwZXIudGVhckRvd24oKSBpcyBub3QgcmVxdWlyZWQuXG4gICAgICovICAgIFlvKCkge31cbiAgICBhdXRoKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMSAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcgKi87XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLlhvKHRoaXMuRm8pLCBlID0gdGhpcy5GbztcbiAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBKdXN0IHVzZSBkaXNwYXRjaElmTm90Q2xvc2VkLCBidXQgc2VlIFRPRE8gYmVsb3cuXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoWyB0aGlzLmF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyLmdldFRva2VuKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFsc1Byb3ZpZGVyLmdldFRva2VuKCkgXSkudGhlbigoKFt0LCBuXSkgPT4ge1xuICAgICAgICAgICAgLy8gU3RyZWFtIGNhbiBiZSBzdG9wcGVkIHdoaWxlIHdhaXRpbmcgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBXZSByZWFsbHkgc2hvdWxkIGp1c3QgdXNlIGRpc3BhdGNoSWZOb3RDbG9zZWRcbiAgICAgICAgICAgIC8vIGFuZCBsZXQgdGhpcyBkaXNwYXRjaCBvbnRvIHRoZSBxdWV1ZSwgYnV0IHRoYXQgb3BlbmVkIGEgc3BlYyB0ZXN0IGNhblxuICAgICAgICAgICAgLy8gb2Ygd29ybXMgdGhhdCBJIGRvbid0IHdhbnQgdG8gZGVhbCB3aXRoIGluIHRoaXMgUFIuXG4gICAgICAgICAgICB0aGlzLkZvID09PSBlICYmIFxuICAgICAgICAgICAgLy8gTm9ybWFsbHkgd2UnZCBoYXZlIHRvIHNjaGVkdWxlIHRoZSBjYWxsYmFjayBvbiB0aGUgQXN5bmNRdWV1ZS5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHRoZSBmb2xsb3dpbmcgY2FsbHMgYXJlIHNhZmUgdG8gYmUgY2FsbGVkIG91dHNpZGUgdGhlXG4gICAgICAgICAgICAvLyBBc3luY1F1ZXVlIHNpbmNlIHRoZXkgZG9uJ3QgY2hhaW4gYXN5bmNocm9ub3VzIGNhbGxzXG4gICAgICAgICAgICB0aGlzLlpvKHQsIG4pO1xuICAgICAgICB9KSwgKGUgPT4ge1xuICAgICAgICAgICAgdCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgVShxLlVOS05PV04sIFwiRmV0Y2hpbmcgYXV0aCB0b2tlbiBmYWlsZWQ6IFwiICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50dSh0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBabyh0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLlhvKHRoaXMuRm8pO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHRoaXMuZXUodCwgZSksIHRoaXMuc3RyZWFtLnVvKCgoKSA9PiB7XG4gICAgICAgICAgICBuKCgoKSA9PiAodGhpcy5zdGF0ZSA9IDIgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLk9wZW4gKi8gLCB0aGlzLkxvID0gdGhpcy5paS5lbnF1ZXVlQWZ0ZXJEZWxheSh0aGlzLk9vLCAxZTQsICgoKSA9PiAodGhpcy5LbygpICYmICh0aGlzLnN0YXRlID0gMyAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSGVhbHRoeSAqLyksIFxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSksIHRoaXMubGlzdGVuZXIudW8oKSkpKTtcbiAgICAgICAgfSkpLCB0aGlzLnN0cmVhbS5hbygodCA9PiB7XG4gICAgICAgICAgICBuKCgoKSA9PiB0aGlzLnR1KHQpKSk7XG4gICAgICAgIH0pKSwgdGhpcy5zdHJlYW0ub25NZXNzYWdlKCh0ID0+IHtcbiAgICAgICAgICAgIG4oKCgpID0+IHRoaXMub25NZXNzYWdlKHQpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgR28oKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSA1IC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5CYWNrb2ZmICovICwgdGhpcy5xby5ObygoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDAgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwgKi8gLCB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdHNcbiAgICB0dSh0KSB7XG4gICAgICAgIC8vIEluIHRoZW9yeSB0aGUgc3RyZWFtIGNvdWxkIGNsb3NlIGNsZWFubHksIGhvd2V2ZXIsIGluIG91ciBjdXJyZW50IG1vZGVsXG4gICAgICAgIC8vIHdlIG5ldmVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWNhdXNlIGlmIHdlIHN0b3AgYSBzdHJlYW0gb3Vyc2VsdmVzLFxuICAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgbmV2ZXIgYmUgY2FsbGVkLiBUbyBwcmV2ZW50IGNhc2VzIHdoZXJlIHdlIHJldHJ5XG4gICAgICAgIC8vIHdpdGhvdXQgYSBiYWNrb2ZmIGFjY2lkZW50YWxseSwgd2Ugc2V0IHRoZSBzdHJlYW0gdG8gZXJyb3IgaW4gYWxsIGNhc2VzLlxuICAgICAgICByZXR1cm4gTihcIlBlcnNpc3RlbnRTdHJlYW1cIiwgYGNsb3NlIHdpdGggZXJyb3I6ICR7dH1gKSwgdGhpcy5zdHJlYW0gPSBudWxsLCB0aGlzLmNsb3NlKDQgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkVycm9yICovICwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBcImRpc3BhdGNoZXJcIiBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb3BlcmF0aW9ucyBvbnRvIHRoZVxuICAgICAqIEFzeW5jUXVldWUgYnV0IG9ubHkgcnVucyB0aGVtIGlmIGNsb3NlQ291bnQgcmVtYWlucyB1bmNoYW5nZWQuIFRoaXMgYWxsb3dzXG4gICAgICogdXMgdG8gdHVybiBhdXRoIC8gc3RyZWFtIGNhbGxiYWNrcyBpbnRvIG5vLW9wcyBpZiB0aGUgc3RyZWFtIGlzIGNsb3NlZCAvXG4gICAgICogcmUtb3BlbmVkLCBldGMuXG4gICAgICovICAgIFhvKHQpIHtcbiAgICAgICAgcmV0dXJuIGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5paS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiB0aGlzLkZvID09PSB0ID8gZSgpIDogKE4oXCJQZXJzaXN0ZW50U3RyZWFtXCIsIFwic3RyZWFtIGNhbGxiYWNrIHNraXBwZWQgYnkgZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlci5cIiksIFxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSB0aGF0IGltcGxlbWVudHMgdGhlIExpc3RlbiBSUEMuXG4gKlxuICogT25jZSB0aGUgTGlzdGVuIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBvbk9wZW4oKSBsaXN0ZW5lciwgYW55IG51bWJlciBvZlxuICogbGlzdGVuKCkgYW5kIHVubGlzdGVuKCkgY2FsbHMgY2FuIGJlIG1hZGUgdG8gY29udHJvbCB3aGF0IGNoYW5nZXMgd2lsbCBiZVxuICogc2VudCBmcm9tIHRoZSBzZXJ2ZXIgZm9yIExpc3RlblJlc3BvbnNlcy5cbiAqLyBjbGFzcyBxdSBleHRlbmRzIEx1IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpLCByKSB7XG4gICAgICAgIHN1cGVyKHQsIFwibGlzdGVuX3N0cmVhbV9jb25uZWN0aW9uX2JhY2tvZmZcIiAvKiBUaW1lcklkLkxpc3RlblN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmICovICwgXCJsaXN0ZW5fc3RyZWFtX2lkbGVcIiAvKiBUaW1lcklkLkxpc3RlblN0cmVhbUlkbGUgKi8gLCBcImhlYWx0aF9jaGVja190aW1lb3V0XCIgLyogVGltZXJJZC5IZWFsdGhDaGVja1RpbWVvdXQgKi8gLCBlLCBuLCBzLCByKSwgXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IGk7XG4gICAgfVxuICAgIGV1KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5SbyhcIkxpc3RlblwiLCB0LCBlKTtcbiAgICB9XG4gICAgb25NZXNzYWdlKHQpIHtcbiAgICAgICAgLy8gQSBzdWNjZXNzZnVsIHJlc3BvbnNlIG1lYW5zIHRoZSBzdHJlYW0gaXMgaGVhbHRoeVxuICAgICAgICB0aGlzLnFvLnJlc2V0KCk7XG4gICAgICAgIGNvbnN0IGUgPSBRaSh0aGlzLnNlcmlhbGl6ZXIsIHQpLCBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBvbmx5IHJlYWNoZWQgYSBjb25zaXN0ZW50IHNuYXBzaG90IGZvciB0aGUgZW50aXJlIHN0cmVhbSBpZiB0aGVyZVxuICAgICAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXG4gICAgICAgICAgICAvLyB0YXJnZXRzIGlzIGVtcHR5KS4gVGhlIGJhY2tlbmQgaXMgZ3VhcmFudGVlZCB0byBzZW5kIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAgICAgICAgaWYgKCEoXCJ0YXJnZXRDaGFuZ2VcIiBpbiB0KSkgcmV0dXJuIHJ0Lm1pbigpO1xuICAgICAgICAgICAgY29uc3QgZSA9IHQudGFyZ2V0Q2hhbmdlO1xuICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0SWRzICYmIGUudGFyZ2V0SWRzLmxlbmd0aCA/IHJ0Lm1pbigpIDogZS5yZWFkVGltZSA/IE5pKGUucmVhZFRpbWUpIDogcnQubWluKCk7XG4gICAgICAgIH0odCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLm51KGUsIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgaW50ZXJlc3QgaW4gdGhlIHJlc3VsdHMgb2YgdGhlIGdpdmVuIHRhcmdldC4gSWYgdGhlIHRhcmdldFxuICAgICAqIGluY2x1ZGVzIGEgcmVzdW1lVG9rZW4gaXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdC4gUmVzdWx0cyB0aGF0XG4gICAgICogYWZmZWN0IHRoZSB0YXJnZXQgd2lsbCBiZSBzdHJlYW1lZCBiYWNrIGFzIFdhdGNoQ2hhbmdlIG1lc3NhZ2VzIHRoYXRcbiAgICAgKiByZWZlcmVuY2UgdGhlIHRhcmdldElkLlxuICAgICAqLyAgICBzdSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB7fTtcbiAgICAgICAgZS5kYXRhYmFzZSA9IExpKHRoaXMuc2VyaWFsaXplciksIGUuYWRkVGFyZ2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgbGV0IG47XG4gICAgICAgICAgICBjb25zdCBzID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAobiA9IEZuKHMpID8ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50czogSGkodCwgcylcbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IEppKHQsIHMpXG4gICAgICAgICAgICB9LCBuLnRhcmdldElkID0gZS50YXJnZXRJZCwgZS5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgbi5yZXN1bWVUb2tlbiA9IENpKHQsIGUucmVzdW1lVG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBTaSh0LCBlLmV4cGVjdGVkQ291bnQpO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IHMgJiYgKG4uZXhwZWN0ZWRDb3VudCA9IHMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8ocnQubWluKCkpID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8od3VhbmR5KTogQ29uc2lkZXIgcmVtb3ZpbmcgYWJvdmUgY2hlY2sgYmVjYXVzZSBpdCBpcyBtb3N0IGxpa2VseSB0cnVlLlxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0IG5vdywgbWFueSB0ZXN0cyBkZXBlbmQgb24gdGhpcyBiZWhhdmlvdXIgdGhvdWdoIChsZWF2aW5nIG1pbigpIG91dFxuICAgICAgICAgICAgICAgIC8vIG9mIHNlcmlhbGl6YXRpb24pLlxuICAgICAgICAgICAgICAgIG4ucmVhZFRpbWUgPSBEaSh0LCBlLnNuYXBzaG90VmVyc2lvbi50b1RpbWVzdGFtcCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gU2kodCwgZS5leHBlY3RlZENvdW50KTtcbiAgICAgICAgICAgICAgICBudWxsICE9PSBzICYmIChuLmV4cGVjdGVkQ291bnQgPSBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KHRoaXMuc2VyaWFsaXplciwgdCk7XG4gICAgICAgIGNvbnN0IG4gPSBYaSh0aGlzLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICBuICYmIChlLmxhYmVscyA9IG4pLCB0aGlzLldvKGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBpbnRlcmVzdCBpbiB0aGUgcmVzdWx0cyBvZiB0aGUgdGFyZ2V0IGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICAgKiBnaXZlbiB0YXJnZXRJZC5cbiAgICAgKi8gICAgaXUodCkge1xuICAgICAgICBjb25zdCBlID0ge307XG4gICAgICAgIGUuZGF0YWJhc2UgPSBMaSh0aGlzLnNlcmlhbGl6ZXIpLCBlLnJlbW92ZVRhcmdldCA9IHQsIHRoaXMuV28oZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgU3RyZWFtIHRoYXQgaW1wbGVtZW50cyB0aGUgV3JpdGUgUlBDLlxuICpcbiAqIFRoZSBXcml0ZSBSUEMgcmVxdWlyZXMgdGhlIGNhbGxlciB0byBtYWludGFpbiBzcGVjaWFsIHN0cmVhbVRva2VuXG4gKiBzdGF0ZSBpbiBiZXR3ZWVuIGNhbGxzLCB0byBoZWxwIHRoZSBzZXJ2ZXIgdW5kZXJzdGFuZCB3aGljaCByZXNwb25zZXMgdGhlXG4gKiBjbGllbnQgaGFzIHByb2Nlc3NlZCBieSB0aGUgdGltZSB0aGUgbmV4dCByZXF1ZXN0IGlzIG1hZGUuIEV2ZXJ5IHJlc3BvbnNlXG4gKiB3aWxsIGNvbnRhaW4gYSBzdHJlYW1Ub2tlbjsgdGhpcyB2YWx1ZSBtdXN0IGJlIHBhc3NlZCB0byB0aGUgbmV4dFxuICogcmVxdWVzdC5cbiAqXG4gKiBBZnRlciBjYWxsaW5nIHN0YXJ0KCkgb24gdGhpcyBzdHJlYW0sIHRoZSBuZXh0IHJlcXVlc3QgbXVzdCBiZSBhIGhhbmRzaGFrZSxcbiAqIGNvbnRhaW5pbmcgd2hhdGV2ZXIgc3RyZWFtVG9rZW4gaXMgb24gaGFuZC4gT25jZSBhIHJlc3BvbnNlIHRvIHRoaXNcbiAqIHJlcXVlc3QgaXMgcmVjZWl2ZWQsIGFsbCBwZW5kaW5nIG11dGF0aW9ucyBtYXkgYmUgc3VibWl0dGVkLiBXaGVuXG4gKiBzdWJtaXR0aW5nIG11bHRpcGxlIGJhdGNoZXMgb2YgbXV0YXRpb25zIGF0IHRoZSBzYW1lIHRpbWUsIGl0J3NcbiAqIG9rYXkgdG8gdXNlIHRoZSBzYW1lIHN0cmVhbVRva2VuIGZvciB0aGUgY2FsbHMgdG8gd3JpdGVNdXRhdGlvbnMuXG4gKlxuICogVE9ETyhiLzMzMjcxMjM1KTogVXNlIHByb3RvIHR5cGVzXG4gKi8gY2xhc3MgVXUgZXh0ZW5kcyBMdSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICBzdXBlcih0LCBcIndyaXRlX3N0cmVhbV9jb25uZWN0aW9uX2JhY2tvZmZcIiAvKiBUaW1lcklkLldyaXRlU3RyZWFtQ29ubmVjdGlvbkJhY2tvZmYgKi8gLCBcIndyaXRlX3N0cmVhbV9pZGxlXCIgLyogVGltZXJJZC5Xcml0ZVN0cmVhbUlkbGUgKi8gLCBcImhlYWx0aF9jaGVja190aW1lb3V0XCIgLyogVGltZXJJZC5IZWFsdGhDaGVja1RpbWVvdXQgKi8gLCBlLCBuLCBzLCByKSwgXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IGksIHRoaXMucnUgPSAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHdoZXRoZXIgb3Igbm90IGEgaGFuZHNoYWtlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGNoYW5nZWQgYW5kXG4gICAgICogdGhlIHN0cmVhbSBpcyByZWFkeSB0byBhY2NlcHQgbXV0YXRpb25zLlxuICAgICAqLyAgICBnZXQgb3UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1O1xuICAgIH1cbiAgICAvLyBPdmVycmlkZSBvZiBQZXJzaXN0ZW50U3RyZWFtLnN0YXJ0XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMucnUgPSAhMSwgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSB2b2lkIDAsIHN1cGVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIFlvKCkge1xuICAgICAgICB0aGlzLnJ1ICYmIHRoaXMudXUoW10pO1xuICAgIH1cbiAgICBldSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uUm8oXCJXcml0ZVwiLCB0LCBlKTtcbiAgICB9XG4gICAgb25NZXNzYWdlKHQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBBbHdheXMgY2FwdHVyZSB0aGUgbGFzdCBzdHJlYW0gdG9rZW4uXG4gICAgICAgIEYoISF0LnN0cmVhbVRva2VuKSwgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSB0LnN0cmVhbVRva2VuLCB0aGlzLnJ1KSB7XG4gICAgICAgICAgICAvLyBBIHN1Y2Nlc3NmdWwgZmlyc3Qgd3JpdGUgcmVzcG9uc2UgbWVhbnMgdGhlIHN0cmVhbSBpcyBoZWFsdGh5LFxuICAgICAgICAgICAgLy8gTm90ZSwgdGhhdCB3ZSBjb3VsZCBjb25zaWRlciBhIHN1Y2Nlc3NmdWwgaGFuZHNoYWtlIGhlYWx0aHksIGhvd2V2ZXIsXG4gICAgICAgICAgICAvLyB0aGUgd3JpdGUgaXRzZWxmIG1pZ2h0IGJlIGNhdXNpbmcgYW4gZXJyb3Igd2Ugd2FudCB0byBiYWNrIG9mZiBmcm9tLlxuICAgICAgICAgICAgdGhpcy5xby5yZXNldCgpO1xuICAgICAgICAgICAgY29uc3QgZSA9IFdpKHQud3JpdGVSZXN1bHRzLCB0LmNvbW1pdFRpbWUpLCBuID0gTmkodC5jb21taXRUaW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmN1KG4sIGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBmaXJzdCByZXNwb25zZSBpcyBhbHdheXMgdGhlIGhhbmRzaGFrZSByZXNwb25zZVxuICAgICAgICByZXR1cm4gRighdC53cml0ZVJlc3VsdHMgfHwgMCA9PT0gdC53cml0ZVJlc3VsdHMubGVuZ3RoKSwgdGhpcy5ydSA9ICEwLCB0aGlzLmxpc3RlbmVyLmF1KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGluaXRpYWwgc3RyZWFtVG9rZW4gdG8gdGhlIHNlcnZlciwgcGVyZm9ybWluZyB0aGUgaGFuZHNoYWtlXG4gICAgICogcmVxdWlyZWQgdG8gbWFrZSB0aGUgU3RyZWFtaW5nV3JpdGUgUlBDIHdvcmsuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyBzaG91bGQgd2FpdCB1bnRpbCBvbkhhbmRzaGFrZUNvbXBsZXRlIHdhcyBjYWxsZWQuXG4gICAgICovICAgIGh1KCkge1xuICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IFN1cHBvcnQgc3RyZWFtIHJlc3VtcHRpb24uIFdlIGludGVudGlvbmFsbHkgZG8gbm90IHNldCB0aGVcbiAgICAgICAgLy8gc3RyZWFtIHRva2VuIG9uIHRoZSBoYW5kc2hha2UsIGlnbm9yaW5nIGFueSBzdHJlYW0gdG9rZW4gd2UgbWlnaHQgaGF2ZS5cbiAgICAgICAgY29uc3QgdCA9IHt9O1xuICAgICAgICB0LmRhdGFiYXNlID0gTGkodGhpcy5zZXJpYWxpemVyKSwgdGhpcy5Xbyh0KTtcbiAgICB9XG4gICAgLyoqIFNlbmRzIGEgZ3JvdXAgb2YgbXV0YXRpb25zIHRvIHRoZSBGaXJlc3RvcmUgYmFja2VuZCB0byBhcHBseS4gKi8gICAgdXUodCkge1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAgc3RyZWFtVG9rZW46IHRoaXMubGFzdFN0cmVhbVRva2VuLFxuICAgICAgICAgICAgd3JpdGVzOiB0Lm1hcCgodCA9PiBqaSh0aGlzLnNlcmlhbGl6ZXIsIHQpKSlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5XbyhlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERhdGFzdG9yZSBhbmQgaXRzIHJlbGF0ZWQgbWV0aG9kcyBhcmUgYSB3cmFwcGVyIGFyb3VuZCB0aGUgZXh0ZXJuYWwgR29vZ2xlXG4gKiBDbG91ZCBEYXRhc3RvcmUgZ3JwYyBBUEksIHdoaWNoIHByb3ZpZGVzIGFuIGludGVyZmFjZSB0aGF0IGlzIG1vcmUgY29udmVuaWVudFxuICogZm9yIHRoZSByZXN0IG9mIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZSB0byBjb25zdW1lLlxuICovXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIERhdGFzdG9yZSB0aGF0IGV4cG9zZXMgYWRkaXRpb25hbCBzdGF0ZSBmb3IgaW50ZXJuYWxcbiAqIGNvbnN1bXB0aW9uLlxuICovXG5jbGFzcyBLdSBleHRlbmRzIGNsYXNzIHt9IHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuYXV0aENyZWRlbnRpYWxzID0gdCwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzID0gZSwgdGhpcy5jb25uZWN0aW9uID0gbiwgXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHMsIHRoaXMubHUgPSAhMTtcbiAgICB9XG4gICAgZnUoKSB7XG4gICAgICAgIGlmICh0aGlzLmx1KSB0aHJvdyBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVGhlIGNsaWVudCBoYXMgYWxyZWFkeSBiZWVuIHRlcm1pbmF0ZWQuXCIpO1xuICAgIH1cbiAgICAvKiogSW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggYXV0aCBhbmQgQXBwQ2hlY2sgdG9rZW5zLiAqLyAgICBJbyh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1KCksIFByb21pc2UuYWxsKFsgdGhpcy5hdXRoQ3JlZGVudGlhbHMuZ2V0VG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLmdldFRva2VuKCkgXSkudGhlbigoKFtzLCBpXSkgPT4gdGhpcy5jb25uZWN0aW9uLklvKHQsIGUsIG4sIHMsIGkpKSkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgdGhyb3cgXCJGaXJlYmFzZUVycm9yXCIgPT09IHQubmFtZSA/ICh0LmNvZGUgPT09IHEuVU5BVVRIRU5USUNBVEVEICYmICh0aGlzLmF1dGhDcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKSwgXG4gICAgICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMuaW52YWxpZGF0ZVRva2VuKCkpLCB0KSA6IG5ldyBVKHEuVU5LTk9XTiwgdC50b1N0cmluZygpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKiogSW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggc3RyZWFtZWQgcmVzdWx0cyB3aXRoIGF1dGggYW5kIEFwcENoZWNrIHRva2Vucy4gKi8gICAgdm8odCwgZSwgbiwgcykge1xuICAgICAgICByZXR1cm4gdGhpcy5mdSgpLCBQcm9taXNlLmFsbChbIHRoaXMuYXV0aENyZWRlbnRpYWxzLmdldFRva2VuKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5nZXRUb2tlbigpIF0pLnRoZW4oKChbaSwgcl0pID0+IHRoaXMuY29ubmVjdGlvbi52byh0LCBlLCBuLCBpLCByLCBzKSkpLmNhdGNoKCh0ID0+IHtcbiAgICAgICAgICAgIHRocm93IFwiRmlyZWJhc2VFcnJvclwiID09PSB0Lm5hbWUgPyAodC5jb2RlID09PSBxLlVOQVVUSEVOVElDQVRFRCAmJiAodGhpcy5hdXRoQ3JlZGVudGlhbHMuaW52YWxpZGF0ZVRva2VuKCksIFxuICAgICAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLmludmFsaWRhdGVUb2tlbigpKSwgdCkgOiBuZXcgVShxLlVOS05PV04sIHQudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICB0aGlzLmx1ID0gITA7XG4gICAgfVxufVxuXG4vLyBUT0RPKGZpcmVzdG9yZXhwKTogTWFrZSBzdXJlIHRoZXJlIGlzIG9ubHkgb25lIERhdGFzdG9yZSBpbnN0YW5jZSBwZXJcbi8vIGZpcmVzdG9yZS1leHAgY2xpZW50LlxuYXN5bmMgZnVuY3Rpb24gR3UodCwgZSwgbikge1xuICAgIHZhciBzO1xuICAgIGNvbnN0IGkgPSBMKHQpLCB7cmVxdWVzdDogciwgZHU6IG99ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gSmkodCwgZSksIGkgPSB7fSwgciA9IFtdO1xuICAgICAgICBsZXQgbyA9IDA7XG4gICAgICAgIHJldHVybiBuLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgLy8gTWFwIGFsbCBjbGllbnQtc2lkZSBhbGlhc2VzIHRvIGEgdW5pcXVlIHNob3J0LWZvcm1cbiAgICAgICAgICAgIC8vIGFsaWFzLiBUaGlzIGF2b2lkcyBpc3N1ZXMgd2l0aCBjbGllbnQtc2lkZSBhbGlhc2VzIHRoYXRcbiAgICAgICAgICAgIC8vIGV4Y2VlZCB0aGUgMTUwMC1ieXRlIHN0cmluZyBzaXplIGxpbWl0LlxuICAgICAgICAgICAgY29uc3QgZSA9IFwiYWdncmVnYXRlX1wiICsgbysrO1xuICAgICAgICAgICAgaVtlXSA9IHQuYWxpYXMsIFwiY291bnRcIiA9PT0gdC55dCA/IHIucHVzaCh7XG4gICAgICAgICAgICAgICAgYWxpYXM6IGUsXG4gICAgICAgICAgICAgICAgY291bnQ6IHt9XG4gICAgICAgICAgICB9KSA6IFwiYXZnXCIgPT09IHQueXQgPyByLnB1c2goe1xuICAgICAgICAgICAgICAgIGFsaWFzOiBlLFxuICAgICAgICAgICAgICAgIGF2Zzoge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc3IodC5maWVsZFBhdGgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkgOiBcInN1bVwiID09PSB0Lnl0ICYmIHIucHVzaCh7XG4gICAgICAgICAgICAgICAgYWxpYXM6IGUsXG4gICAgICAgICAgICAgICAgc3VtOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzcih0LmZpZWxkUGF0aClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCB7XG4gICAgICAgICAgICByZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgc3RydWN0dXJlZEFnZ3JlZ2F0aW9uUXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRpb25zOiByLFxuICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVkUXVlcnk6IHMuc3RydWN0dXJlZFF1ZXJ5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHMucGFyZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHU6IGlcbiAgICAgICAgfTtcbiAgICB9KGkuc2VyaWFsaXplciwgSm4oZSksIG4pLCB1ID0gci5wYXJlbnQ7XG4gICAgaS5jb25uZWN0aW9uLnBvIHx8IGRlbGV0ZSByLnBhcmVudDtcbiAgICBjb25zdCBjID0gKGF3YWl0IGkudm8oXCJSdW5BZ2dyZWdhdGlvblF1ZXJ5XCIsIHUsIHIsIC8qZXhwZWN0ZWRSZXNwb25zZUNvdW50PSovIDEpKS5maWx0ZXIoKHQgPT4gISF0LnJlc3VsdCkpO1xuICAgIC8vIE9taXQgUnVuQWdncmVnYXRpb25RdWVyeVJlc3BvbnNlIHRoYXQgb25seSBjb250YWluIHJlYWRUaW1lcy5cbiAgICAgICAgRigxID09PSBjLmxlbmd0aCk7XG4gICAgLy8gUmVtYXAgdGhlIHNob3J0LWZvcm0gYWxpYXNlcyB0aGF0IHdlcmUgc2VudCB0byB0aGUgc2VydmVyXG4gICAgLy8gdG8gdGhlIGNsaWVudC1zaWRlIGFsaWFzZXMuIFVzZXJzIHdpbGwgYWNjZXNzIHRoZSByZXN1bHRzXG4gICAgLy8gdXNpbmcgdGhlIGNsaWVudC1zaWRlIGFsaWFzLlxuICAgIGNvbnN0IGEgPSBudWxsID09PSAocyA9IGNbMF0ucmVzdWx0KSB8fCB2b2lkIDAgPT09IHMgPyB2b2lkIDAgOiBzLmFnZ3JlZ2F0ZUZpZWxkcztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYSkucmVkdWNlKCgodCwgZSkgPT4gKHRbb1tlXV0gPSBhW2VdLCB0KSksIHt9KTtcbn1cblxuLyoqXG4gKiBBIGNvbXBvbmVudCB1c2VkIGJ5IHRoZSBSZW1vdGVTdG9yZSB0byB0cmFjayB0aGUgT25saW5lU3RhdGUgKHRoYXQgaXMsXG4gKiB3aGV0aGVyIG9yIG5vdCB0aGUgY2xpZW50IGFzIGEgd2hvbGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdG8gYmUgb25saW5lIG9yXG4gKiBvZmZsaW5lKSwgaW1wbGVtZW50aW5nIHRoZSBhcHByb3ByaWF0ZSBoZXVyaXN0aWNzLlxuICpcbiAqIEluIHBhcnRpY3VsYXIsIHdoZW4gdGhlIGNsaWVudCBpcyB0cnlpbmcgdG8gY29ubmVjdCB0byB0aGUgYmFja2VuZCwgd2VcbiAqIGFsbG93IHVwIHRvIE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMgd2l0aGluIE9OTElORV9TVEFURV9USU1FT1VUX01TIGZvclxuICogYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQuIElmIHdlIGhhdmUgdG9vIG1hbnkgZmFpbHVyZXMgb3IgdGhlIHRpbWVvdXQgZWxhcHNlcyxcbiAqIHRoZW4gd2Ugc2V0IHRoZSBPbmxpbmVTdGF0ZSB0byBPZmZsaW5lLCBhbmQgdGhlIGNsaWVudCB3aWxsIGJlaGF2ZSBhcyBpZlxuICogaXQgaXMgb2ZmbGluZSAoZ2V0KClzIHdpbGwgcmV0dXJuIGNhY2hlZCBkYXRhLCBldGMuKS5cbiAqL1xuY2xhc3MgUXUge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlID0gdCwgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBlLCBcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IE9ubGluZVN0YXRlLiAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBjb3VudCBvZiBjb25zZWN1dGl2ZSBmYWlsdXJlcyB0byBvcGVuIHRoZSBzdHJlYW0uIElmIGl0IHJlYWNoZXMgdGhlXG4gICAgICAgICAqIG1heGltdW0gZGVmaW5lZCBieSBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTLCB3ZSdsbCBzZXQgdGhlIE9ubGluZVN0YXRlIHRvXG4gICAgICAgICAqIE9mZmxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnd1ID0gMCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHRpbWVyIHRoYXQgZWxhcHNlcyBhZnRlciBPTkxJTkVfU1RBVEVfVElNRU9VVF9NUywgYXQgd2hpY2ggcG9pbnQgd2VcbiAgICAgICAgICogdHJhbnNpdGlvbiBmcm9tIE9ubGluZVN0YXRlLlVua25vd24gdG8gT25saW5lU3RhdGUuT2ZmbGluZSB3aXRob3V0IHdhaXRpbmdcbiAgICAgICAgICogZm9yIHRoZSBzdHJlYW0gdG8gYWN0dWFsbHkgZmFpbCAoTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUyB0aW1lcykuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl91ID0gbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIGxvZyBhIHdhcm5pbmcgbWVzc2FnZSBpZiBpdCBmYWlscyB0byBjb25uZWN0IHRvXG4gICAgICAgICAqIHRoZSBiYWNrZW5kIChpbml0aWFsbHkgdHJ1ZSwgY2xlYXJlZCBhZnRlciBhIHN1Y2Nlc3NmdWwgc3RyZWFtLCBvciBpZiB3ZSd2ZVxuICAgICAgICAgKiBsb2dnZWQgdGhlIG1lc3NhZ2UgYWxyZWFkeSkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm11ID0gITA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCBieSBSZW1vdGVTdG9yZSB3aGVuIGEgd2F0Y2ggc3RyZWFtIGlzIHN0YXJ0ZWQgKGluY2x1ZGluZyBvbiBlYWNoXG4gICAgICogYmFja29mZiBhdHRlbXB0KS5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IGF0dGVtcHQsIGl0IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gYW5kIHN0YXJ0c1xuICAgICAqIHRoZSBvbmxpbmVTdGF0ZVRpbWVyLlxuICAgICAqLyAgICBndSgpIHtcbiAgICAgICAgMCA9PT0gdGhpcy53dSAmJiAodGhpcy55dShcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSwgdGhpcy5fdSA9IHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheShcIm9ubGluZV9zdGF0ZV90aW1lb3V0XCIgLyogVGltZXJJZC5PbmxpbmVTdGF0ZVRpbWVvdXQgKi8gLCAxZTQsICgoKSA9PiAodGhpcy5fdSA9IG51bGwsIFxuICAgICAgICB0aGlzLnB1KFwiQmFja2VuZCBkaWRuJ3QgcmVzcG9uZCB3aXRoaW4gMTAgc2Vjb25kcy5cIiksIHRoaXMueXUoXCJPZmZsaW5lXCIgLyogT25saW5lU3RhdGUuT2ZmbGluZSAqLyksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgb3VyIE9ubGluZVN0YXRlIGFzIGFwcHJvcHJpYXRlIGFmdGVyIHRoZSB3YXRjaCBzdHJlYW0gcmVwb3J0cyBhXG4gICAgICogZmFpbHVyZS4gVGhlIGZpcnN0IGZhaWx1cmUgbW92ZXMgdXMgdG8gdGhlICdVbmtub3duJyBzdGF0ZS4gV2UgdGhlbiBtYXlcbiAgICAgKiBhbGxvdyBtdWx0aXBsZSBmYWlsdXJlcyAoYmFzZWQgb24gTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUykgYmVmb3JlIHdlXG4gICAgICogYWN0dWFsbHkgdHJhbnNpdGlvbiB0byB0aGUgJ09mZmxpbmUnIHN0YXRlLlxuICAgICAqLyAgICBJdSh0KSB7XG4gICAgICAgIFwiT25saW5lXCIgLyogT25saW5lU3RhdGUuT25saW5lICovID09PSB0aGlzLnN0YXRlID8gdGhpcy55dShcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSA6ICh0aGlzLnd1KyssIFxuICAgICAgICB0aGlzLnd1ID49IDEgJiYgKHRoaXMuVHUoKSwgdGhpcy5wdShgQ29ubmVjdGlvbiBmYWlsZWQgMSB0aW1lcy4gTW9zdCByZWNlbnQgZXJyb3I6ICR7dC50b1N0cmluZygpfWApLCBcbiAgICAgICAgdGhpcy55dShcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdGx5IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIHRoZSBzcGVjaWZpZWQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNldHMgb3VyIHRpbWVycyAvIGZhaWx1cmUgY291bnRlcnMsIGV0Yy4gdXNlZCBieSBvdXJcbiAgICAgKiBPZmZsaW5lIGhldXJpc3RpY3MsIHNvIG11c3Qgbm90IGJlIHVzZWQgaW4gcGxhY2Ugb2ZcbiAgICAgKiBoYW5kbGVXYXRjaFN0cmVhbVN0YXJ0KCkgYW5kIGhhbmRsZVdhdGNoU3RyZWFtRmFpbHVyZSgpLlxuICAgICAqLyAgICBzZXQodCkge1xuICAgICAgICB0aGlzLlR1KCksIHRoaXMud3UgPSAwLCBcIk9ubGluZVwiIC8qIE9ubGluZVN0YXRlLk9ubGluZSAqLyA9PT0gdCAmJiAoXG4gICAgICAgIC8vIFdlJ3ZlIGNvbm5lY3RlZCB0byB3YXRjaCBhdCBsZWFzdCBvbmNlLiBEb24ndCB3YXJuIHRoZSBkZXZlbG9wZXJcbiAgICAgICAgLy8gYWJvdXQgYmVpbmcgb2ZmbGluZSBnb2luZyBmb3J3YXJkLlxuICAgICAgICB0aGlzLm11ID0gITEpLCB0aGlzLnl1KHQpO1xuICAgIH1cbiAgICB5dSh0KSB7XG4gICAgICAgIHQgIT09IHRoaXMuc3RhdGUgJiYgKHRoaXMuc3RhdGUgPSB0LCB0aGlzLm9ubGluZVN0YXRlSGFuZGxlcih0KSk7XG4gICAgfVxuICAgIHB1KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IGBDb3VsZCBub3QgcmVhY2ggQ2xvdWQgRmlyZXN0b3JlIGJhY2tlbmQuICR7dH1cXG5UaGlzIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCB5b3VyIGRldmljZSBkb2VzIG5vdCBoYXZlIGEgaGVhbHRoeSBJbnRlcm5ldCBjb25uZWN0aW9uIGF0IHRoZSBtb21lbnQuIFRoZSBjbGllbnQgd2lsbCBvcGVyYXRlIGluIG9mZmxpbmUgbW9kZSB1bnRpbCBpdCBpcyBhYmxlIHRvIHN1Y2Nlc3NmdWxseSBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLmA7XG4gICAgICAgIHRoaXMubXUgPyAoayhlKSwgdGhpcy5tdSA9ICExKSA6IE4oXCJPbmxpbmVTdGF0ZVRyYWNrZXJcIiwgZSk7XG4gICAgfVxuICAgIFR1KCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLl91ICYmICh0aGlzLl91LmNhbmNlbCgpLCB0aGlzLl91ID0gbnVsbCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBqdSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsIHN0b3JlLCB1c2VkIHRvIGZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIHdpdGggb3V0Ym91bmQgbXV0YXRpb25zLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKiBUaGUgY2xpZW50LXNpZGUgcHJveHkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGJhY2tlbmQuICovXG4gICAgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgPSB0LCB0aGlzLmRhdGFzdG9yZSA9IGUsIHRoaXMuYXN5bmNRdWV1ZSA9IG4sIHRoaXMucmVtb3RlU3luY2VyID0ge30sIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIHVwIHRvIE1BWF9QRU5ESU5HX1dSSVRFUyB3cml0ZXMgdGhhdCB3ZSBoYXZlIGZldGNoZWQgZnJvbSB0aGVcbiAgICAgICAgICogTG9jYWxTdG9yZSB2aWEgZmlsbFdyaXRlUGlwZWxpbmUoKSBhbmQgaGF2ZSBvciB3aWxsIHNlbmQgdG8gdGhlIHdyaXRlXG4gICAgICAgICAqIHN0cmVhbS5cbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbmV2ZXIgd3JpdGVQaXBlbGluZS5sZW5ndGggPiAwIHRoZSBSZW1vdGVTdG9yZSB3aWxsIGF0dGVtcHQgdG8gc3RhcnQgb3JcbiAgICAgICAgICogcmVzdGFydCB0aGUgd3JpdGUgc3RyZWFtLiBXaGVuIHRoZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQgdGhlIHdyaXRlcyBpbiB0aGVcbiAgICAgICAgICogcGlwZWxpbmUgd2lsbCBiZSBzZW50IGluIG9yZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXcml0ZXMgcmVtYWluIGluIHdyaXRlUGlwZWxpbmUgdW50aWwgdGhleSBhcmUgYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kXG4gICAgICAgICAqIGFuZCB0aHVzIHdpbGwgYXV0b21hdGljYWxseSBiZSByZS1zZW50IGlmIHRoZSBzdHJlYW0gaXMgaW50ZXJydXB0ZWQgL1xuICAgICAgICAgKiByZXN0YXJ0ZWQgYmVmb3JlIHRoZXkncmUgYWNrbm93bGVkZ2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXcml0ZSByZXNwb25zZXMgZnJvbSB0aGUgYmFja2VuZCBhcmUgbGlua2VkIHRvIHRoZWlyIG9yaWdpbmF0aW5nIHJlcXVlc3RcbiAgICAgICAgICogcHVyZWx5IGJhc2VkIG9uIG9yZGVyLCBhbmQgc28gd2UgY2FuIGp1c3Qgc2hpZnQoKSB3cml0ZXMgZnJvbSB0aGUgZnJvbnQgb2ZcbiAgICAgICAgICogdGhlIHdyaXRlUGlwZWxpbmUgYXMgd2UgcmVjZWl2ZSByZXNwb25zZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLkV1ID0gW10sIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXBwaW5nIG9mIHdhdGNoZWQgdGFyZ2V0cyB0aGF0IHRoZSBjbGllbnQgY2FyZXMgYWJvdXQgdHJhY2tpbmcgYW5kIHRoZVxuICAgICAgICAgKiB1c2VyIGhhcyBleHBsaWNpdGx5IGNhbGxlZCBhICdsaXN0ZW4nIGZvciB0aGlzIHRhcmdldC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlc2UgdGFyZ2V0cyBtYXkgb3IgbWF5IG5vdCBoYXZlIGJlZW4gc2VudCB0byBvciBhY2tub3dsZWRnZWQgYnkgdGhlXG4gICAgICAgICAqIHNlcnZlci4gT24gcmUtZXN0YWJsaXNoaW5nIHRoZSBsaXN0ZW4gc3RyZWFtLCB0aGVzZSB0YXJnZXRzIHNob3VsZCBiZSBzZW50XG4gICAgICAgICAqIHRvIHRoZSBzZXJ2ZXIuIFRoZSB0YXJnZXRzIHJlbW92ZWQgd2l0aCB1bmxpc3RlbnMgYXJlIHJlbW92ZWQgZWFnZXJseVxuICAgICAgICAgKiB3aXRob3V0IHdhaXRpbmcgZm9yIGNvbmZpcm1hdGlvbiBmcm9tIHRoZSBsaXN0ZW4gc3RyZWFtLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5BdSA9IG5ldyBNYXAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXQgb2YgcmVhc29ucyBmb3Igd2h5IHRoZSBSZW1vdGVTdG9yZSBtYXkgYmUgb2ZmbGluZS4gSWYgZW1wdHksIHRoZVxuICAgICAgICAgKiBSZW1vdGVTdG9yZSBtYXkgc3RhcnQgaXRzIG5ldHdvcmsgY29ubmVjdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZ1ID0gbmV3IFNldCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFdmVudCBoYW5kbGVycyB0aGF0IGdldCBjYWxsZWQgd2hlbiB0aGUgbmV0d29yayBpcyBkaXNhYmxlZCBvciBlbmFibGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQT1JUSU5HIE5PVEU6IFRoZXNlIGZ1bmN0aW9ucyBhcmUgdXNlZCBvbiB0aGUgV2ViIGNsaWVudCB0byBjcmVhdGUgdGhlXG4gICAgICAgICAqIHVuZGVybHlpbmcgc3RyZWFtcyAodG8gc3VwcG9ydCB0cmVlLXNoYWtlYWJsZSBzdHJlYW1zKS4gT24gQW5kcm9pZCBhbmQgaU9TLFxuICAgICAgICAgKiB0aGUgc3RyZWFtcyBhcmUgY3JlYXRlZCBkdXJpbmcgY29uc3RydWN0aW9uIG9mIFJlbW90ZVN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5SdSA9IFtdLCB0aGlzLlB1ID0gaSwgdGhpcy5QdS5ZcigodCA9PiB7XG4gICAgICAgICAgICBuLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBQb3J0aW5nIE5vdGU6IFVubGlrZSBpT1MsIGByZXN0YXJ0TmV0d29yaygpYCBpcyBjYWxsZWQgZXZlbiB3aGVuIHRoZVxuICAgICAgICAgICAgICAgIC8vIG5ldHdvcmsgYmVjb21lcyB1bnJlYWNoYWJsZSBhcyB3ZSBkb24ndCBoYXZlIGFueSBvdGhlciB3YXkgdG8gdGVhclxuICAgICAgICAgICAgICAgIC8vIGRvd24gb3VyIHN0cmVhbXMuXG4gICAgICAgICAgICAgICAgZWModGhpcykgJiYgKE4oXCJSZW1vdGVTdG9yZVwiLCBcIlJlc3RhcnRpbmcgc3RyZWFtcyBmb3IgbmV0d29yayByZWFjaGFiaWxpdHkgY2hhbmdlLlwiKSwgXG4gICAgICAgICAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gTCh0KTtcbiAgICAgICAgICAgICAgICAgICAgZS52dS5hZGQoNCAvKiBPZmZsaW5lQ2F1c2UuQ29ubmVjdGl2aXR5Q2hhbmdlICovKSwgYXdhaXQgV3UoZSksIGUuYnUuc2V0KFwiVW5rbm93blwiIC8qIE9ubGluZVN0YXRlLlVua25vd24gKi8pLCBcbiAgICAgICAgICAgICAgICAgICAgZS52dS5kZWxldGUoNCAvKiBPZmZsaW5lQ2F1c2UuQ29ubmVjdGl2aXR5Q2hhbmdlICovKSwgYXdhaXQgenUoZSk7XG4gICAgICAgICAgICAgICAgfSh0aGlzKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSwgdGhpcy5idSA9IG5ldyBRdShuLCBzKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHp1KHQpIHtcbiAgICBpZiAoZWModCkpIGZvciAoY29uc3QgZSBvZiB0LlJ1KSBhd2FpdCBlKC8qIGVuYWJsZWQ9ICovICEwKTtcbn1cblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlcyB0aGUgbmV0d29yay4gVGhlIG5ldHdvcmsgY2FuIGJlIHJlLWVuYWJsZWQgdXNpbmdcbiAqIGVuYWJsZU5ldHdvcmsoKS5cbiAqLyBhc3luYyBmdW5jdGlvbiBXdSh0KSB7XG4gICAgZm9yIChjb25zdCBlIG9mIHQuUnUpIGF3YWl0IGUoLyogZW5hYmxlZD0gKi8gITEpO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBuZXcgbGlzdGVuIGZvciB0aGUgZ2l2ZW4gdGFyZ2V0LiBVc2VzIHJlc3VtZSB0b2tlbiBpZiBwcm92aWRlZC4gSXRcbiAqIGlzIGEgbm8tb3AgaWYgdGhlIHRhcmdldCBvZiBnaXZlbiBgVGFyZ2V0RGF0YWAgaXMgYWxyZWFkeSBiZWluZyBsaXN0ZW5lZCB0by5cbiAqL1xuZnVuY3Rpb24gSHUodCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgIG4uQXUuaGFzKGUudGFyZ2V0SWQpIHx8IChcbiAgICAvLyBNYXJrIHRoaXMgYXMgc29tZXRoaW5nIHRoZSBjbGllbnQgaXMgY3VycmVudGx5IGxpc3RlbmluZyBmb3IuXG4gICAgbi5BdS5zZXQoZS50YXJnZXRJZCwgZSksIHRjKG4pID8gXG4gICAgLy8gVGhlIGxpc3RlbiB3aWxsIGJlIHNlbnQgaW4gb25XYXRjaFN0cmVhbU9wZW5cbiAgICBadShuKSA6IHBjKG4pLktvKCkgJiYgWXUobiwgZSkpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGxpc3RlbiBmcm9tIHNlcnZlci4gSXQgaXMgYSBuby1vcCBpZiB0aGUgZ2l2ZW4gdGFyZ2V0IGlkIGlzXG4gKiBub3QgYmVpbmcgbGlzdGVuZWQgdG8uXG4gKi8gZnVuY3Rpb24gSnUodCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gcGMobik7XG4gICAgbi5BdS5kZWxldGUoZSksIHMuS28oKSAmJiBYdShuLCBlKSwgMCA9PT0gbi5BdS5zaXplICYmIChzLktvKCkgPyBzLmpvKCkgOiBlYyhuKSAmJiBcbiAgICAvLyBSZXZlcnQgdG8gT25saW5lU3RhdGUuVW5rbm93biBpZiB0aGUgd2F0Y2ggc3RyZWFtIGlzIG5vdCBvcGVuIGFuZCB3ZVxuICAgIC8vIGhhdmUgbm8gbGlzdGVuZXJzLCBzaW5jZSB3aXRob3V0IGFueSBsaXN0ZW5zIHRvIHNlbmQgd2UgY2Fubm90XG4gICAgLy8gY29uZmlybSBpZiB0aGUgc3RyZWFtIGlzIGhlYWx0aHkgYW5kIHVwZ3JhZGUgdG8gT25saW5lU3RhdGUuT25saW5lLlxuICAgIG4uYnUuc2V0KFwiVW5rbm93blwiIC8qIE9ubGluZVN0YXRlLlVua25vd24gKi8pKTtcbn1cblxuLyoqXG4gKiBXZSBuZWVkIHRvIGluY3JlbWVudCB0aGUgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwZW5kaW5nIHJlc3BvbnNlcyB3ZSdyZSBkdWVcbiAqIGZyb20gd2F0Y2ggc28gd2Ugd2FpdCBmb3IgdGhlIGFjayB0byBwcm9jZXNzIGFueSBtZXNzYWdlcyBmcm9tIHRoaXMgdGFyZ2V0LlxuICovIGZ1bmN0aW9uIFl1KHQsIGUpIHtcbiAgICBpZiAodC5WdS5xdChlLnRhcmdldElkKSwgZS5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwIHx8IGUuc25hcHNob3RWZXJzaW9uLmNvbXBhcmVUbyhydC5taW4oKSkgPiAwKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0LnJlbW90ZVN5bmNlci5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KGUudGFyZ2V0SWQpLnNpemU7XG4gICAgICAgIGUgPSBlLndpdGhFeHBlY3RlZENvdW50KG4pO1xuICAgIH1cbiAgICBwYyh0KS5zdShlKTtcbn1cblxuLyoqXG4gKiBXZSBuZWVkIHRvIGluY3JlbWVudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIHdlJ3JlIGR1ZVxuICogZnJvbSB3YXRjaCBzbyB3ZSB3YWl0IGZvciB0aGUgcmVtb3ZhbCBvbiB0aGUgc2VydmVyIGJlZm9yZSB3ZSBwcm9jZXNzIGFueVxuICogbWVzc2FnZXMgZnJvbSB0aGlzIHRhcmdldC5cbiAqLyBmdW5jdGlvbiBYdSh0LCBlKSB7XG4gICAgdC5WdS5xdChlKSwgcGModCkuaXUoZSk7XG59XG5cbmZ1bmN0aW9uIFp1KHQpIHtcbiAgICB0LlZ1ID0gbmV3IEVpKHtcbiAgICAgICAgZ2V0UmVtb3RlS2V5c0ZvclRhcmdldDogZSA9PiB0LnJlbW90ZVN5bmNlci5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KGUpLFxuICAgICAgICBsZTogZSA9PiB0LkF1LmdldChlKSB8fCBudWxsLFxuICAgICAgICB1ZTogKCkgPT4gdC5kYXRhc3RvcmUuc2VyaWFsaXplci5kYXRhYmFzZUlkXG4gICAgfSksIHBjKHQpLnN0YXJ0KCksIHQuYnUuZ3UoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHdhdGNoIHN0cmVhbSBzaG91bGQgYmUgc3RhcnRlZCBiZWNhdXNlIGl0J3MgbmVjZXNzYXJ5XG4gKiBhbmQgaGFzIG5vdCB5ZXQgYmVlbiBzdGFydGVkLlxuICovIGZ1bmN0aW9uIHRjKHQpIHtcbiAgICByZXR1cm4gZWModCkgJiYgIXBjKHQpLlVvKCkgJiYgdC5BdS5zaXplID4gMDtcbn1cblxuZnVuY3Rpb24gZWModCkge1xuICAgIHJldHVybiAwID09PSBMKHQpLnZ1LnNpemU7XG59XG5cbmZ1bmN0aW9uIG5jKHQpIHtcbiAgICB0LlZ1ID0gdm9pZCAwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzYyh0KSB7XG4gICAgdC5BdS5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICBZdSh0LCBlKTtcbiAgICB9KSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGljKHQsIGUpIHtcbiAgICBuYyh0KSwgXG4gICAgLy8gSWYgd2Ugc3RpbGwgbmVlZCB0aGUgd2F0Y2ggc3RyZWFtLCByZXRyeSB0aGUgY29ubmVjdGlvbi5cbiAgICB0Yyh0KSA/ICh0LmJ1Lkl1KGUpLCBadSh0KSkgOiBcbiAgICAvLyBObyBuZWVkIHRvIHJlc3RhcnQgd2F0Y2ggc3RyZWFtIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGFjdGl2ZSB0YXJnZXRzLlxuICAgIC8vIFRoZSBvbmxpbmUgc3RhdGUgaXMgc2V0IHRvIHVua25vd24gYmVjYXVzZSB0aGVyZSBpcyBubyBhY3RpdmUgYXR0ZW1wdFxuICAgIC8vIGF0IGVzdGFibGlzaGluZyBhIGNvbm5lY3Rpb25cbiAgICB0LmJ1LnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmModCwgZSwgbikge1xuICAgIGlmIChcbiAgICAvLyBNYXJrIHRoZSBjbGllbnQgYXMgb25saW5lIHNpbmNlIHdlIGdvdCBhIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyXG4gICAgdC5idS5zZXQoXCJPbmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PbmxpbmUgKi8pLCBlIGluc3RhbmNlb2YgSWkgJiYgMiAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQgKi8gPT09IGUuc3RhdGUgJiYgZS5jYXVzZSkgXG4gICAgLy8gVGhlcmUgd2FzIGFuIGVycm9yIG9uIGEgdGFyZ2V0LCBkb24ndCB3YWl0IGZvciBhIGNvbnNpc3RlbnQgc25hcHNob3RcbiAgICAvLyB0byByYWlzZSBldmVudHNcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBcbiAgICAgICAgLyoqIEhhbmRsZXMgYW4gZXJyb3Igb24gYSB0YXJnZXQgKi9cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IGUuY2F1c2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgZS50YXJnZXRJZHMpIFxuICAgICAgICAgICAgLy8gQSB3YXRjaGVkIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5LlxuICAgICAgICAgICAgdC5BdS5oYXMocykgJiYgKGF3YWl0IHQucmVtb3RlU3luY2VyLnJlamVjdExpc3RlbihzLCBuKSwgdC5BdS5kZWxldGUocyksIHQuVnUucmVtb3ZlVGFyZ2V0KHMpKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEF0dGVtcHRzIHRvIGZpbGwgb3VyIHdyaXRlIHBpcGVsaW5lIHdpdGggd3JpdGVzIGZyb20gdGhlIExvY2FsU3RvcmUuXG4gKlxuICogQ2FsbGVkIGludGVybmFsbHkgdG8gYm9vdHN0cmFwIG9yIHJlZmlsbCB0aGUgd3JpdGUgcGlwZWxpbmUgYW5kIGJ5XG4gKiBTeW5jRW5naW5lIHdoZW5ldmVyIHRoZXJlIGFyZSBuZXcgbXV0YXRpb25zIHRvIHByb2Nlc3MuXG4gKlxuICogU3RhcnRzIHRoZSB3cml0ZSBzdHJlYW0gaWYgbmVjZXNzYXJ5LlxuICovICh0LCBlKTtcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgICAgIE4oXCJSZW1vdGVTdG9yZVwiLCBcIkZhaWxlZCB0byByZW1vdmUgdGFyZ2V0cyAlczogJXMgXCIsIGUudGFyZ2V0SWRzLmpvaW4oXCIsXCIpLCBuKSwgXG4gICAgICAgIGF3YWl0IG9jKHQsIG4pO1xuICAgIH0gZWxzZSBpZiAoZSBpbnN0YW5jZW9mIHlpID8gdC5WdS5IdChlKSA6IGUgaW5zdGFuY2VvZiBwaSA/IHQuVnUubmUoZSkgOiB0LlZ1Llh0KGUpLCBcbiAgICAhbi5pc0VxdWFsKHJ0Lm1pbigpKSkgdHJ5IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IG91KHQubG9jYWxTdG9yZSk7XG4gICAgICAgIG4uY29tcGFyZVRvKGUpID49IDAgJiYgXG4gICAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgYSB0YXJnZXQgY2hhbmdlIHdpdGggYSBnbG9iYWwgc25hcHNob3QgaWYgdGhlIHNuYXBzaG90XG4gICAgICAgIC8vIHZlcnNpb24gaXMgbm90IGVxdWFsIHRvIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgYXdhaXQgXG4gICAgICAgIC8qKlxuICogVGFrZXMgYSBiYXRjaCBvZiBjaGFuZ2VzIGZyb20gdGhlIERhdGFzdG9yZSwgcmVwYWNrYWdlcyB0aGVtIGFzIGFcbiAqIFJlbW90ZUV2ZW50LCBhbmQgcGFzc2VzIHRoYXQgb24gdG8gdGhlIGxpc3RlbmVyLCB3aGljaCBpcyB0eXBpY2FsbHkgdGhlXG4gKiBTeW5jRW5naW5lLlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LlZ1LmNlKGUpO1xuICAgICAgICAgICAgLy8gVXBkYXRlIGluLW1lbW9yeSByZXN1bWUgdG9rZW5zLiBMb2NhbFN0b3JlIHdpbGwgdXBkYXRlIHRoZVxuICAgICAgICAgICAgLy8gcGVyc2lzdGVudCB2aWV3IG9mIHRoZXNlIHdoZW4gYXBwbHlpbmcgdGhlIGNvbXBsZXRlZCBSZW1vdGVFdmVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnRhcmdldENoYW5nZXMuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobi5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LkF1LmdldChzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSB3YXRjaGVkIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgJiYgdC5BdS5zZXQocywgaS53aXRoUmVzdW1lVG9rZW4obi5yZXN1bWVUb2tlbiwgZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSwgXG4gICAgICAgICAgICAvLyBSZS1lc3RhYmxpc2ggbGlzdGVucyBmb3IgdGhlIHRhcmdldHMgdGhhdCBoYXZlIGJlZW4gaW52YWxpZGF0ZWQgYnlcbiAgICAgICAgICAgIC8vIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgICAgICAgIG4udGFyZ2V0TWlzbWF0Y2hlcy5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LkF1LmdldChlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXMpIFxuICAgICAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIHJlc3VtZSB0b2tlbiBmb3IgdGhlIHRhcmdldCwgc2luY2Ugd2UncmUgaW4gYSBrbm93biBtaXNtYXRjaFxuICAgICAgICAgICAgICAgIC8vIHN0YXRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LkF1LnNldChlLCBzLndpdGhSZXN1bWVUb2tlbihWZS5FTVBUWV9CWVRFX1NUUklORywgcy5zbmFwc2hvdFZlcnNpb24pKSwgXG4gICAgICAgICAgICAgICAgLy8gQ2F1c2UgYSBoYXJkIHJlc2V0IGJ5IHVud2F0Y2hpbmcgYW5kIHJld2F0Y2hpbmcgaW1tZWRpYXRlbHksIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGRlbGliZXJhdGVseSBkb24ndCBzZW5kIGEgcmVzdW1lIHRva2VuIHNvIHRoYXQgd2UgZ2V0IGEgZnVsbCB1cGRhdGUuXG4gICAgICAgICAgICAgICAgWHUodCwgZSk7XG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdlIHNlbmQgYXMgYmVpbmcgb24gYmVoYWxmIG9mIGFuIGV4aXN0ZW5jZSBmaWx0ZXJcbiAgICAgICAgICAgICAgICAvLyBtaXNtYXRjaCwgYnV0IGRvbid0IGFjdHVhbGx5IHJldGFpbiB0aGF0IGluIGxpc3RlblRhcmdldHMuIFRoaXMgZW5zdXJlc1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgd2UgZmxhZyB0aGUgZmlyc3QgcmUtbGlzdGVuIHRoaXMgd2F5IHdpdGhvdXQgaW1wYWN0aW5nIGZ1dHVyZVxuICAgICAgICAgICAgICAgIC8vIGxpc3RlbnMgb2YgdGhpcyB0YXJnZXQgKHRoYXQgbWlnaHQgaGFwcGVuIGUuZy4gb24gcmVjb25uZWN0KS5cbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IGNyKHMudGFyZ2V0LCBlLCBuLCBzLnNlcXVlbmNlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBZdSh0LCBpKTtcbiAgICAgICAgICAgIH0pKSwgdC5yZW1vdGVTeW5jZXIuYXBwbHlSZW1vdGVFdmVudChuKTtcbiAgICAgICAgfSh0LCBuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIE4oXCJSZW1vdGVTdG9yZVwiLCBcIkZhaWxlZCB0byByYWlzZSBzbmFwc2hvdDpcIiwgZSksIGF3YWl0IG9jKHQsIGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWNvdmVyeSBsb2dpYyBmb3IgSW5kZXhlZERCIGVycm9ycyB0aGF0IHRha2VzIHRoZSBuZXR3b3JrIG9mZmxpbmUgdW50aWxcbiAqIGBvcGAgc3VjY2VlZHMuIFJldHJpZXMgYXJlIHNjaGVkdWxlZCB3aXRoIGJhY2tvZmYgdXNpbmdcbiAqIGBlbnF1ZXVlUmV0cnlhYmxlKClgLiBJZiBgb3AoKWAgaXMgbm90IHByb3ZpZGVkLCBJbmRleGVkREIgYWNjZXNzIGlzXG4gKiB2YWxpZGF0ZWQgdmlhIGEgZ2VuZXJpYyBvcGVyYXRpb24uXG4gKlxuICogVGhlIHJldHVybmVkIFByb21pc2UgaXMgcmVzb2x2ZWQgb25jZSB0aGUgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgYmVmb3JlXG4gKiBhbnkgcmV0cnkgYXR0ZW1wdC5cbiAqLyBhc3luYyBmdW5jdGlvbiBvYyh0LCBlLCBuKSB7XG4gICAgaWYgKCFEdChlKSkgdGhyb3cgZTtcbiAgICB0LnZ1LmFkZCgxIC8qIE9mZmxpbmVDYXVzZS5JbmRleGVkRGJGYWlsZWQgKi8pLCBcbiAgICAvLyBEaXNhYmxlIG5ldHdvcmsgYW5kIHJhaXNlIG9mZmxpbmUgc25hcHNob3RzXG4gICAgYXdhaXQgV3UodCksIHQuYnUuc2V0KFwiT2ZmbGluZVwiIC8qIE9ubGluZVN0YXRlLk9mZmxpbmUgKi8pLCBuIHx8IChcbiAgICAvLyBVc2UgYSBzaW1wbGUgcmVhZCBvcGVyYXRpb24gdG8gZGV0ZXJtaW5lIGlmIEluZGV4ZWREQiByZWNvdmVyZWQuXG4gICAgLy8gSWRlYWxseSwgd2Ugd291bGQgZXhwb3NlIGEgaGVhbHRoIGNoZWNrIGRpcmVjdGx5IG9uIFNpbXBsZURiLCBidXRcbiAgICAvLyBSZW1vdGVTdG9yZSBvbmx5IGhhcyBhY2Nlc3MgdG8gcGVyc2lzdGVuY2UgdGhyb3VnaCBMb2NhbFN0b3JlLlxuICAgIG4gPSAoKSA9PiBvdSh0LmxvY2FsU3RvcmUpKSwgXG4gICAgLy8gUHJvYmUgSW5kZXhlZERCIHBlcmlvZGljYWxseSBhbmQgcmUtZW5hYmxlIG5ldHdvcmtcbiAgICB0LmFzeW5jUXVldWUuZW5xdWV1ZVJldHJ5YWJsZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBOKFwiUmVtb3RlU3RvcmVcIiwgXCJSZXRyeWluZyBJbmRleGVkREIgYWNjZXNzXCIpLCBhd2FpdCBuKCksIHQudnUuZGVsZXRlKDEgLyogT2ZmbGluZUNhdXNlLkluZGV4ZWREYkZhaWxlZCAqLyksIFxuICAgICAgICBhd2FpdCB6dSh0KTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgYG9wYC4gSWYgYG9wYCBmYWlscywgdGFrZXMgdGhlIG5ldHdvcmsgb2ZmbGluZSB1bnRpbCBgb3BgXG4gKiBzdWNjZWVkcy4gUmV0dXJucyBhZnRlciB0aGUgZmlyc3QgYXR0ZW1wdC5cbiAqLyBmdW5jdGlvbiB1Yyh0LCBlKSB7XG4gICAgcmV0dXJuIGUoKS5jYXRjaCgobiA9PiBvYyh0LCBuLCBlKSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYyh0KSB7XG4gICAgY29uc3QgZSA9IEwodCksIG4gPSBJYyhlKTtcbiAgICBsZXQgcyA9IGUuRXUubGVuZ3RoID4gMCA/IGUuRXVbZS5FdS5sZW5ndGggLSAxXS5iYXRjaElkIDogLTE7XG4gICAgZm9yICg7YWMoZSk7ICkgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGF1KGUubG9jYWxTdG9yZSwgcyk7XG4gICAgICAgIGlmIChudWxsID09PSB0KSB7XG4gICAgICAgICAgICAwID09PSBlLkV1Lmxlbmd0aCAmJiBuLmpvKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzID0gdC5iYXRjaElkLCBoYyhlLCB0KTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgIGF3YWl0IG9jKGUsIHQpO1xuICAgIH1cbiAgICBsYyhlKSAmJiBmYyhlKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgd2UgY2FuIGFkZCB0byB0aGUgd3JpdGUgcGlwZWxpbmUgKGkuZS4gdGhlIG5ldHdvcmsgaXNcbiAqIGVuYWJsZWQgYW5kIHRoZSB3cml0ZSBwaXBlbGluZSBpcyBub3QgZnVsbCkuXG4gKi8gZnVuY3Rpb24gYWModCkge1xuICAgIHJldHVybiBlYyh0KSAmJiB0LkV1Lmxlbmd0aCA8IDEwO1xufVxuXG4vKipcbiAqIFF1ZXVlcyBhZGRpdGlvbmFsIHdyaXRlcyB0byBiZSBzZW50IHRvIHRoZSB3cml0ZSBzdHJlYW0sIHNlbmRpbmcgdGhlbVxuICogaW1tZWRpYXRlbHkgaWYgdGhlIHdyaXRlIHN0cmVhbSBpcyBlc3RhYmxpc2hlZC5cbiAqLyBmdW5jdGlvbiBoYyh0LCBlKSB7XG4gICAgdC5FdS5wdXNoKGUpO1xuICAgIGNvbnN0IG4gPSBJYyh0KTtcbiAgICBuLktvKCkgJiYgbi5vdSAmJiBuLnV1KGUubXV0YXRpb25zKTtcbn1cblxuZnVuY3Rpb24gbGModCkge1xuICAgIHJldHVybiBlYyh0KSAmJiAhSWModCkuVW8oKSAmJiB0LkV1Lmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIGZjKHQpIHtcbiAgICBJYyh0KS5zdGFydCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkYyh0KSB7XG4gICAgSWModCkuaHUoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gd2ModCkge1xuICAgIGNvbnN0IGUgPSBJYyh0KTtcbiAgICAvLyBTZW5kIHRoZSB3cml0ZSBwaXBlbGluZSBub3cgdGhhdCB0aGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdC5FdSkgZS51dShuLm11dGF0aW9ucyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9jKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gdC5FdS5zaGlmdCgpLCBpID0gdGkuZnJvbShzLCBlLCBuKTtcbiAgICBhd2FpdCB1Yyh0LCAoKCkgPT4gdC5yZW1vdGVTeW5jZXIuYXBwbHlTdWNjZXNzZnVsV3JpdGUoaSkpKSwgXG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdpdGggdGhlIGNvbXBsZXRpb24gb2YgdGhpcyBtdXRhdGlvbiBhbm90aGVyXG4gICAgLy8gc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgYXdhaXQgY2ModCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1jKHQsIGUpIHtcbiAgICAvLyBJZiB0aGUgd3JpdGUgc3RyZWFtIGNsb3NlZCBhZnRlciB0aGUgd3JpdGUgaGFuZHNoYWtlIGNvbXBsZXRlcywgYSB3cml0ZVxuICAgIC8vIG9wZXJhdGlvbiBmYWlsZWQgYW5kIHdlIGZhaWwgdGhlIHBlbmRpbmcgb3BlcmF0aW9uLlxuICAgIGUgJiYgSWModCkub3UgJiYgXG4gICAgLy8gVGhpcyBlcnJvciBhZmZlY3RzIHRoZSBhY3R1YWwgd3JpdGUuXG4gICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBPbmx5IGhhbmRsZSBwZXJtYW5lbnQgZXJyb3JzIGhlcmUuIElmIGl0J3MgdHJhbnNpZW50LCBqdXN0IGxldCB0aGUgcmV0cnlcbiAgICAgICAgLy8gbG9naWMga2ljayBpbi5cbiAgICAgICAgaWYgKG4gPSBlLmNvZGUsIG9pKG4pICYmIG4gIT09IHEuQUJPUlRFRCkge1xuICAgICAgICAgICAgLy8gVGhpcyB3YXMgYSBwZXJtYW5lbnQgZXJyb3IsIHRoZSByZXF1ZXN0IGl0c2VsZiB3YXMgdGhlIHByb2JsZW1cbiAgICAgICAgICAgIC8vIHNvIGl0J3Mgbm90IGdvaW5nIHRvIHN1Y2NlZWQgaWYgd2UgcmVzZW5kIGl0LlxuICAgICAgICAgICAgY29uc3QgbiA9IHQuRXUuc2hpZnQoKTtcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSBpdCdzIGFsc28gdW5saWtlbHkgdGhhdCB0aGUgc2VydmVyIGl0c2VsZiBpcyBtZWx0aW5nXG4gICAgICAgICAgICAvLyBkb3duIC0tIHRoaXMgd2FzIGp1c3QgYSBiYWQgcmVxdWVzdCBzbyBpbmhpYml0IGJhY2tvZmYgb24gdGhlIG5leHRcbiAgICAgICAgICAgIC8vIHJlc3RhcnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBJYyh0KS5RbygpLCBhd2FpdCB1Yyh0LCAoKCkgPT4gdC5yZW1vdGVTeW5jZXIucmVqZWN0RmFpbGVkV3JpdGUobi5iYXRjaElkLCBlKSkpLCBcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3aXRoIHRoZSBjb21wbGV0aW9uIG9mIHRoaXMgbXV0YXRpb25cbiAgICAgICAgICAgIC8vIGFub3RoZXIgc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgICAgICAgICBhd2FpdCBjYyh0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbjtcbiAgICB9KHQsIGUpLCBcbiAgICAvLyBUaGUgd3JpdGUgc3RyZWFtIG1pZ2h0IGhhdmUgYmVlbiBzdGFydGVkIGJ5IHJlZmlsbGluZyB0aGUgd3JpdGVcbiAgICAvLyBwaXBlbGluZSBmb3IgZmFpbGVkIHdyaXRlc1xuICAgIGxjKHQpICYmIGZjKHQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgbi5hc3luY1F1ZXVlLnZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MoKSwgTihcIlJlbW90ZVN0b3JlXCIsIFwiUmVtb3RlU3RvcmUgcmVjZWl2ZWQgbmV3IGNyZWRlbnRpYWxzXCIpO1xuICAgIGNvbnN0IHMgPSBlYyhuKTtcbiAgICAvLyBUZWFyIGRvd24gYW5kIHJlLWNyZWF0ZSBvdXIgbmV0d29yayBzdHJlYW1zLiBUaGlzIHdpbGwgZW5zdXJlIHdlIGdldCBhXG4gICAgLy8gZnJlc2ggYXV0aCB0b2tlbiBmb3IgdGhlIG5ldyB1c2VyIGFuZCByZS1maWxsIHRoZSB3cml0ZSBwaXBlbGluZSB3aXRoXG4gICAgLy8gbmV3IG11dGF0aW9ucyBmcm9tIHRoZSBMb2NhbFN0b3JlIChzaW5jZSBtdXRhdGlvbnMgYXJlIHBlci11c2VyKS5cbiAgICAgICAgbi52dS5hZGQoMyAvKiBPZmZsaW5lQ2F1c2UuQ3JlZGVudGlhbENoYW5nZSAqLyksIGF3YWl0IFd1KG4pLCBzICYmIFxuICAgIC8vIERvbid0IHNldCB0aGUgbmV0d29yayBzdGF0dXMgdG8gVW5rbm93biBpZiB3ZSBhcmUgb2ZmbGluZS5cbiAgICBuLmJ1LnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSwgYXdhaXQgbi5yZW1vdGVTeW5jZXIuaGFuZGxlQ3JlZGVudGlhbENoYW5nZShlKSwgXG4gICAgbi52dS5kZWxldGUoMyAvKiBPZmZsaW5lQ2F1c2UuQ3JlZGVudGlhbENoYW5nZSAqLyksIGF3YWl0IHp1KG4pO1xufVxuXG4vKipcbiAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxuICovIGFzeW5jIGZ1bmN0aW9uIHljKHQsIGUpIHtcbiAgICBjb25zdCBuID0gTCh0KTtcbiAgICBlID8gKG4udnUuZGVsZXRlKDIgLyogT2ZmbGluZUNhdXNlLklzU2Vjb25kYXJ5ICovKSwgYXdhaXQgenUobikpIDogZSB8fCAobi52dS5hZGQoMiAvKiBPZmZsaW5lQ2F1c2UuSXNTZWNvbmRhcnkgKi8pLCBcbiAgICBhd2FpdCBXdShuKSwgbi5idS5zZXQoXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLykpO1xufVxuXG4vKipcbiAqIElmIG5vdCB5ZXQgaW5pdGlhbGl6ZWQsIHJlZ2lzdGVycyB0aGUgV2F0Y2hTdHJlYW0gYW5kIGl0cyBuZXR3b3JrIHN0YXRlXG4gKiBjYWxsYmFjayB3aXRoIGByZW1vdGVTdG9yZUltcGxgLiBSZXR1cm5zIHRoZSBleGlzdGluZyBzdHJlYW0gaWYgb25lIGlzXG4gKiBhbHJlYWR5IGF2YWlsYWJsZS5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IE9uIGlPUyBhbmQgQW5kcm9pZCwgdGhlIFdhdGNoU3RyZWFtIGdldHMgcmVnaXN0ZXJlZCBvbiBzdGFydHVwLlxuICogVGhpcyBpcyBub3QgZG9uZSBvbiBXZWIgdG8gYWxsb3cgaXQgdG8gYmUgdHJlZS1zaGFrZW4uXG4gKi8gZnVuY3Rpb24gcGModCkge1xuICAgIHJldHVybiB0LlN1IHx8IChcbiAgICAvLyBDcmVhdGUgc3RyZWFtIChidXQgbm90ZSB0aGF0IGl0IGlzIG5vdCBzdGFydGVkIHlldCkuXG4gICAgdC5TdSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgY29uc3QgcyA9IEwodCk7XG4gICAgICAgIHJldHVybiBzLmZ1KCksIG5ldyBxdShlLCBzLmNvbm5lY3Rpb24sIHMuYXV0aENyZWRlbnRpYWxzLCBzLmFwcENoZWNrQ3JlZGVudGlhbHMsIHMuc2VyaWFsaXplciwgbik7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovICh0LmRhdGFzdG9yZSwgdC5hc3luY1F1ZXVlLCB7XG4gICAgICAgIHVvOiBzYy5iaW5kKG51bGwsIHQpLFxuICAgICAgICBhbzogaWMuYmluZChudWxsLCB0KSxcbiAgICAgICAgbnU6IHJjLmJpbmQobnVsbCwgdClcbiAgICB9KSwgdC5SdS5wdXNoKChhc3luYyBlID0+IHtcbiAgICAgICAgZSA/ICh0LlN1LlFvKCksIHRjKHQpID8gWnUodCkgOiB0LmJ1LnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSkgOiAoYXdhaXQgdC5TdS5zdG9wKCksIFxuICAgICAgICBuYyh0KSk7XG4gICAgfSkpKSwgdC5TdTtcbn1cblxuLyoqXG4gKiBJZiBub3QgeWV0IGluaXRpYWxpemVkLCByZWdpc3RlcnMgdGhlIFdyaXRlU3RyZWFtIGFuZCBpdHMgbmV0d29yayBzdGF0ZVxuICogY2FsbGJhY2sgd2l0aCBgcmVtb3RlU3RvcmVJbXBsYC4gUmV0dXJucyB0aGUgZXhpc3Rpbmcgc3RyZWFtIGlmIG9uZSBpc1xuICogYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogUE9SVElORyBOT1RFOiBPbiBpT1MgYW5kIEFuZHJvaWQsIHRoZSBXcml0ZVN0cmVhbSBnZXRzIHJlZ2lzdGVyZWQgb24gc3RhcnR1cC5cbiAqIFRoaXMgaXMgbm90IGRvbmUgb24gV2ViIHRvIGFsbG93IGl0IHRvIGJlIHRyZWUtc2hha2VuLlxuICovIGZ1bmN0aW9uIEljKHQpIHtcbiAgICByZXR1cm4gdC5EdSB8fCAoXG4gICAgLy8gQ3JlYXRlIHN0cmVhbSAoYnV0IG5vdGUgdGhhdCBpdCBpcyBub3Qgc3RhcnRlZCB5ZXQpLlxuICAgIHQuRHUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBMKHQpO1xuICAgICAgICByZXR1cm4gcy5mdSgpLCBuZXcgVXUoZSwgcy5jb25uZWN0aW9uLCBzLmF1dGhDcmVkZW50aWFscywgcy5hcHBDaGVja0NyZWRlbnRpYWxzLCBzLnNlcmlhbGl6ZXIsIG4pO1xuICAgIH0odC5kYXRhc3RvcmUsIHQuYXN5bmNRdWV1ZSwge1xuICAgICAgICB1bzogZGMuYmluZChudWxsLCB0KSxcbiAgICAgICAgYW86IG1jLmJpbmQobnVsbCwgdCksXG4gICAgICAgIGF1OiB3Yy5iaW5kKG51bGwsIHQpLFxuICAgICAgICBjdTogX2MuYmluZChudWxsLCB0KVxuICAgIH0pLCB0LlJ1LnB1c2goKGFzeW5jIGUgPT4ge1xuICAgICAgICBlID8gKHQuRHUuUW8oKSwgXG4gICAgICAgIC8vIFRoaXMgd2lsbCBzdGFydCB0aGUgd3JpdGUgc3RyZWFtIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgYXdhaXQgY2ModCkpIDogKGF3YWl0IHQuRHUuc3RvcCgpLCB0LkV1Lmxlbmd0aCA+IDAgJiYgKE4oXCJSZW1vdGVTdG9yZVwiLCBgU3RvcHBpbmcgd3JpdGUgc3RyZWFtIHdpdGggJHt0LkV1Lmxlbmd0aH0gcGVuZGluZyB3cml0ZXNgKSwgXG4gICAgICAgIHQuRXUgPSBbXSkpO1xuICAgIH0pKSksIHQuRHU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHNjaGVkdWxlZCB0byBiZSBydW4gaW4gdGhlIGZ1dHVyZSBvbiBhbiBBc3luY1F1ZXVlLlxuICpcbiAqIEl0IGlzIGNyZWF0ZWQgdmlhIERlbGF5ZWRPcGVyYXRpb24uY3JlYXRlQW5kU2NoZWR1bGUoKS5cbiAqXG4gKiBTdXBwb3J0cyBjYW5jZWxsYXRpb24gKHZpYSBjYW5jZWwoKSkgYW5kIGVhcmx5IGV4ZWN1dGlvbiAodmlhIHNraXBEZWxheSgpKS5cbiAqXG4gKiBOb3RlOiBXZSBpbXBsZW1lbnQgYFByb21pc2VMaWtlYCBpbnN0ZWFkIG9mIGBQcm9taXNlYCwgYXMgdGhlIGBQcm9taXNlYCB0eXBlXG4gKiBpbiBuZXdlciB2ZXJzaW9ucyBvZiBUeXBlU2NyaXB0IGRlZmluZXMgYGZpbmFsbHlgLCB3aGljaCBpcyBub3QgYXZhaWxhYmxlIGluXG4gKiBJRS5cbiAqL1xuY2xhc3MgVGMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlID0gdCwgdGhpcy50aW1lcklkID0gZSwgdGhpcy50YXJnZXRUaW1lTXMgPSBuLCB0aGlzLm9wID0gcywgdGhpcy5yZW1vdmFsQ2FsbGJhY2sgPSBpLCBcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IG5ldyBLLCB0aGlzLnRoZW4gPSB0aGlzLmRlZmVycmVkLnByb21pc2UudGhlbi5iaW5kKHRoaXMuZGVmZXJyZWQucHJvbWlzZSksIFxuICAgICAgICAvLyBJdCdzIG5vcm1hbCBmb3IgdGhlIGRlZmVycmVkIHByb21pc2UgdG8gYmUgY2FuY2VsZWQgKGR1ZSB0byBjYW5jZWxsYXRpb24pXG4gICAgICAgIC8vIGFuZCBzbyB3ZSBhdHRhY2ggYSBkdW1teSBjYXRjaCBjYWxsYmFjayB0byBhdm9pZFxuICAgICAgICAvLyAnVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbldhcm5pbmcnIGxvZyBzcGFtLlxuICAgICAgICB0aGlzLmRlZmVycmVkLnByb21pc2UuY2F0Y2goKHQgPT4ge30pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIERlbGF5ZWRPcGVyYXRpb24gdGhhdCBoYXMgYmVlbiBzY2hlZHVsZWQgdG8gYmVcbiAgICAgKiBleGVjdXRlZCBvbiB0aGUgcHJvdmlkZWQgYXN5bmNRdWV1ZSBhZnRlciB0aGUgcHJvdmlkZWQgZGVsYXlNcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3luY1F1ZXVlIC0gVGhlIHF1ZXVlIHRvIHNjaGVkdWxlIHRoZSBvcGVyYXRpb24gb24uXG4gICAgICogQHBhcmFtIGlkIC0gQSBUaW1lciBJRCBpZGVudGlmeWluZyB0aGUgdHlwZSBvZiBvcGVyYXRpb24gdGhpcyBpcy5cbiAgICAgKiBAcGFyYW0gZGVsYXlNcyAtIFRoZSBkZWxheSAobXMpIGJlZm9yZSB0aGUgb3BlcmF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWQuXG4gICAgICogQHBhcmFtIG9wIC0gVGhlIG9wZXJhdGlvbiB0byBydW4uXG4gICAgICogQHBhcmFtIHJlbW92YWxDYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgb25jZSB0aGVcbiAgICAgKiAgIG9wZXJhdGlvbiBpcyBleGVjdXRlZCBvciBjYW5jZWxlZCwgbm90aWZ5aW5nIHRoZSBBc3luY1F1ZXVlIHRvIHJlbW92ZSBpdFxuICAgICAqICAgZnJvbSBpdHMgZGVsYXllZE9wZXJhdGlvbnMgbGlzdC5cbiAgICAgKiAgIFBPUlRJTkcgTk9URTogVGhpcyBleGlzdHMgdG8gcHJldmVudCBtYWtpbmcgcmVtb3ZlRGVsYXllZE9wZXJhdGlvbigpIGFuZFxuICAgICAqICAgdGhlIERlbGF5ZWRPcGVyYXRpb24gY2xhc3MgcHVibGljLlxuICAgICAqLyAgICBzdGF0aWMgY3JlYXRlQW5kU2NoZWR1bGUodCwgZSwgbiwgcywgaSkge1xuICAgICAgICBjb25zdCByID0gRGF0ZS5ub3coKSArIG4sIG8gPSBuZXcgVGModCwgZSwgciwgcywgaSk7XG4gICAgICAgIHJldHVybiBvLnN0YXJ0KG4pLCBvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIHRpbWVyLiBUaGlzIGlzIGNhbGxlZCBpbW1lZGlhdGVseSBhZnRlciBjb25zdHJ1Y3Rpb24gYnlcbiAgICAgKiBjcmVhdGVBbmRTY2hlZHVsZSgpLlxuICAgICAqLyAgICBzdGFydCh0KSB7XG4gICAgICAgIHRoaXMudGltZXJIYW5kbGUgPSBzZXRUaW1lb3V0KCgoKSA9PiB0aGlzLmhhbmRsZURlbGF5RWxhcHNlZCgpKSwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFF1ZXVlcyB0aGUgb3BlcmF0aW9uIHRvIHJ1biBpbW1lZGlhdGVseSAoaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBydW4gb3JcbiAgICAgKiBjYW5jZWxlZCkuXG4gICAgICovICAgIHNraXBEZWxheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRGVsYXlFbGFwc2VkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIG9wZXJhdGlvbiBpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGV4ZWN1dGVkIG9yIGNhbmNlbGVkLiBUaGVcbiAgICAgKiBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQuXG4gICAgICpcbiAgICAgKiBBcyBsb25nIGFzIHRoZSBvcGVyYXRpb24gaGFzIG5vdCB5ZXQgYmVlbiBydW4sIGNhbGxpbmcgY2FuY2VsKCkgcHJvdmlkZXMgYVxuICAgICAqIGd1YXJhbnRlZSB0aGF0IHRoZSBvcGVyYXRpb24gd2lsbCBub3QgYmUgcnVuLlxuICAgICAqLyAgICBjYW5jZWwodCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLnRpbWVySGFuZGxlICYmICh0aGlzLmNsZWFyVGltZW91dCgpLCB0aGlzLmRlZmVycmVkLnJlamVjdChuZXcgVShxLkNBTkNFTExFRCwgXCJPcGVyYXRpb24gY2FuY2VsbGVkXCIgKyAodCA/IFwiOiBcIiArIHQgOiBcIlwiKSkpKTtcbiAgICB9XG4gICAgaGFuZGxlRGVsYXlFbGFwc2VkKCkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gbnVsbCAhPT0gdGhpcy50aW1lckhhbmRsZSA/ICh0aGlzLmNsZWFyVGltZW91dCgpLCBcbiAgICAgICAgdGhpcy5vcCgpLnRoZW4oKHQgPT4gdGhpcy5kZWZlcnJlZC5yZXNvbHZlKHQpKSkpIDogUHJvbWlzZS5yZXNvbHZlKCkpKTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLnRpbWVySGFuZGxlICYmICh0aGlzLnJlbW92YWxDYWxsYmFjayh0aGlzKSwgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJIYW5kbGUpLCBcbiAgICAgICAgdGhpcy50aW1lckhhbmRsZSA9IG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgRmlyZXN0b3JlRXJyb3IgdGhhdCBjYW4gYmUgc3VyZmFjZWQgdG8gdGhlIHVzZXIgaWYgdGhlIHByb3ZpZGVkXG4gKiBlcnJvciBpcyBhbiBJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yLiBSZS10aHJvd3MgdGhlIGVycm9yIG90aGVyd2lzZS5cbiAqLyBmdW5jdGlvbiBFYyh0LCBlKSB7XG4gICAgaWYgKGsoXCJBc3luY1F1ZXVlXCIsIGAke2V9OiAke3R9YCksIER0KHQpKSByZXR1cm4gbmV3IFUocS5VTkFWQUlMQUJMRSwgYCR7ZX06ICR7dH1gKTtcbiAgICB0aHJvdyB0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBEb2N1bWVudFNldCBpcyBhbiBpbW11dGFibGUgKGNvcHktb24td3JpdGUpIGNvbGxlY3Rpb24gdGhhdCBob2xkcyBkb2N1bWVudHNcbiAqIGluIG9yZGVyIHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgY29tcGFyYXRvci4gV2UgYWx3YXlzIGFkZCBhIGRvY3VtZW50IGtleVxuICogY29tcGFyYXRvciBvbiB0b3Agb2Ygd2hhdCBpcyBwcm92aWRlZCB0byBndWFyYW50ZWUgZG9jdW1lbnQgZXF1YWxpdHkgYmFzZWQgb25cbiAqIHRoZSBrZXkuXG4gKi8gY2xhc3MgQWMge1xuICAgIC8qKiBUaGUgZGVmYXVsdCBvcmRlcmluZyBpcyBieSBrZXkgaWYgdGhlIGNvbXBhcmF0b3IgaXMgb21pdHRlZCAqL1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgLy8gV2UgYXJlIGFkZGluZyBkb2N1bWVudCBrZXkgY29tcGFyYXRvciB0byB0aGUgZW5kIGFzIGl0J3MgdGhlIG9ubHlcbiAgICAgICAgLy8gZ3VhcmFudGVlZCB1bmlxdWUgcHJvcGVydHkgb2YgYSBkb2N1bWVudC5cbiAgICAgICAgdGhpcy5jb21wYXJhdG9yID0gdCA/IChlLCBuKSA9PiB0KGUsIG4pIHx8IGh0LmNvbXBhcmF0b3IoZS5rZXksIG4ua2V5KSA6ICh0LCBlKSA9PiBodC5jb21wYXJhdG9yKHQua2V5LCBlLmtleSksIFxuICAgICAgICB0aGlzLmtleWVkTWFwID0gaHMoKSwgdGhpcy5zb3J0ZWRTZXQgPSBuZXcgcGUodGhpcy5jb21wYXJhdG9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbXB0eSBjb3B5IG9mIHRoZSBleGlzdGluZyBEb2N1bWVudFNldCwgdXNpbmcgdGhlIHNhbWVcbiAgICAgKiBjb21wYXJhdG9yLlxuICAgICAqLyAgICBzdGF0aWMgZW1wdHlTZXQodCkge1xuICAgICAgICByZXR1cm4gbmV3IEFjKHQuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIGhhcyh0KSB7XG4gICAgICAgIHJldHVybiBudWxsICE9IHRoaXMua2V5ZWRNYXAuZ2V0KHQpO1xuICAgIH1cbiAgICBnZXQodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXllZE1hcC5nZXQodCk7XG4gICAgfVxuICAgIGZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQubWluS2V5KCk7XG4gICAgfVxuICAgIGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZFNldC5tYXhLZXkoKTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkU2V0LmlzRW1wdHkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHByb3ZpZGVkIGtleSBpbiB0aGUgZG9jdW1lbnQgc2V0LCBvciAtMSBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBrZXkgaXMgbm90IHByZXNlbnQgaW4gdGhlIHNldDtcbiAgICAgKi8gICAgaW5kZXhPZih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmtleWVkTWFwLmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgPyB0aGlzLnNvcnRlZFNldC5pbmRleE9mKGUpIDogLTE7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQuc2l6ZTtcbiAgICB9XG4gICAgLyoqIEl0ZXJhdGVzIGRvY3VtZW50cyBpbiBvcmRlciBkZWZpbmVkIGJ5IFwiY29tcGFyYXRvclwiICovICAgIGZvckVhY2godCkge1xuICAgICAgICB0aGlzLnNvcnRlZFNldC5pbm9yZGVyVHJhdmVyc2FsKCgoZSwgbikgPT4gKHQoZSksICExKSkpO1xuICAgIH1cbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGEgZG9jdW1lbnQgd2l0aCB0aGUgc2FtZSBrZXkgKi8gICAgYWRkKHQpIHtcbiAgICAgICAgLy8gRmlyc3QgcmVtb3ZlIHRoZSBlbGVtZW50IGlmIHdlIGhhdmUgaXQuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmRlbGV0ZSh0LmtleSk7XG4gICAgICAgIHJldHVybiBlLmNvcHkoZS5rZXllZE1hcC5pbnNlcnQodC5rZXksIHQpLCBlLnNvcnRlZFNldC5pbnNlcnQodCwgbnVsbCkpO1xuICAgIH1cbiAgICAvKiogRGVsZXRlcyBhIGRvY3VtZW50IHdpdGggYSBnaXZlbiBrZXkgKi8gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuY29weSh0aGlzLmtleWVkTWFwLnJlbW92ZSh0KSwgdGhpcy5zb3J0ZWRTZXQucmVtb3ZlKGUpKSA6IHRoaXM7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgQWMpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IHQuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5zb3J0ZWRTZXQuZ2V0SXRlcmF0b3IoKSwgbiA9IHQuc29ydGVkU2V0LmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGZvciAoO2UuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldE5leHQoKS5rZXksIHMgPSBuLmdldE5leHQoKS5rZXk7XG4gICAgICAgICAgICBpZiAoIXQuaXNFcXVhbChzKSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0LnB1c2goZS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpLCAwID09PSB0Lmxlbmd0aCA/IFwiRG9jdW1lbnRTZXQgKClcIiA6IFwiRG9jdW1lbnRTZXQgKFxcbiAgXCIgKyB0LmpvaW4oXCIgIFxcblwiKSArIFwiXFxuKVwiO1xuICAgIH1cbiAgICBjb3B5KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBBYztcbiAgICAgICAgcmV0dXJuIG4uY29tcGFyYXRvciA9IHRoaXMuY29tcGFyYXRvciwgbi5rZXllZE1hcCA9IHQsIG4uc29ydGVkU2V0ID0gZSwgbjtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50Q2hhbmdlU2V0IGtlZXBzIHRyYWNrIG9mIGEgc2V0IG9mIGNoYW5nZXMgdG8gZG9jcyBpbiBhIHF1ZXJ5LCBtZXJnaW5nXG4gKiBkdXBsaWNhdGUgZXZlbnRzIGZvciB0aGUgc2FtZSBkb2MuXG4gKi8gY2xhc3MgdmMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkN1ID0gbmV3IHBlKGh0LmNvbXBhcmF0b3IpO1xuICAgIH1cbiAgICB0cmFjayh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LmRvYy5rZXksIG4gPSB0aGlzLkN1LmdldChlKTtcbiAgICAgICAgbiA/IFxuICAgICAgICAvLyBNZXJnZSB0aGUgbmV3IGNoYW5nZSB3aXRoIHRoZSBleGlzdGluZyBjaGFuZ2UuXG4gICAgICAgIDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyAhPT0gdC50eXBlICYmIDMgLyogQ2hhbmdlVHlwZS5NZXRhZGF0YSAqLyA9PT0gbi50eXBlID8gdGhpcy5DdSA9IHRoaXMuQ3UuaW5zZXJ0KGUsIHQpIDogMyAvKiBDaGFuZ2VUeXBlLk1ldGFkYXRhICovID09PSB0LnR5cGUgJiYgMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gIT09IG4udHlwZSA/IHRoaXMuQ3UgPSB0aGlzLkN1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiBuLnR5cGUsXG4gICAgICAgICAgICBkb2M6IHQuZG9jXG4gICAgICAgIH0pIDogMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovID09PSB0LnR5cGUgJiYgMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovID09PSBuLnR5cGUgPyB0aGlzLkN1ID0gdGhpcy5DdS5pbnNlcnQoZSwge1xuICAgICAgICAgICAgdHlwZTogMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovICxcbiAgICAgICAgICAgIGRvYzogdC5kb2NcbiAgICAgICAgfSkgOiAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gPT09IHQudHlwZSAmJiAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuQ3UgPSB0aGlzLkN1Lmluc2VydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovID09PSB0LnR5cGUgJiYgMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovID09PSBuLnR5cGUgPyB0aGlzLkN1ID0gdGhpcy5DdS5yZW1vdmUoZSkgOiAxIC8qIENoYW5nZVR5cGUuUmVtb3ZlZCAqLyA9PT0gdC50eXBlICYmIDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA9PT0gbi50eXBlID8gdGhpcy5DdSA9IHRoaXMuQ3UuaW5zZXJ0KGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovICxcbiAgICAgICAgICAgIGRvYzogbi5kb2NcbiAgICAgICAgfSkgOiAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gPT09IHQudHlwZSAmJiAxIC8qIENoYW5nZVR5cGUuUmVtb3ZlZCAqLyA9PT0gbi50eXBlID8gdGhpcy5DdSA9IHRoaXMuQ3UuaW5zZXJ0KGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyAsXG4gICAgICAgICAgICBkb2M6IHQuZG9jXG4gICAgICAgIH0pIDogXG4gICAgICAgIC8vIFRoaXMgaW5jbHVkZXMgdGhlc2UgY2FzZXMsIHdoaWNoIGRvbid0IG1ha2Ugc2Vuc2U6XG4gICAgICAgIC8vIEFkZGVkLT5BZGRlZFxuICAgICAgICAvLyBSZW1vdmVkLT5SZW1vdmVkXG4gICAgICAgIC8vIE1vZGlmaWVkLT5BZGRlZFxuICAgICAgICAvLyBSZW1vdmVkLT5Nb2RpZmllZFxuICAgICAgICAvLyBNZXRhZGF0YS0+QWRkZWRcbiAgICAgICAgLy8gUmVtb3ZlZC0+TWV0YWRhdGFcbiAgICAgICAgTygpIDogdGhpcy5DdSA9IHRoaXMuQ3UuaW5zZXJ0KGUsIHQpO1xuICAgIH1cbiAgICB4dSgpIHtcbiAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5DdS5pbm9yZGVyVHJhdmVyc2FsKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgdC5wdXNoKG4pO1xuICAgICAgICB9KSksIHQ7XG4gICAgfVxufVxuXG5jbGFzcyBSYyB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgciwgbywgdSwgYykge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdCwgdGhpcy5kb2NzID0gZSwgdGhpcy5vbGREb2NzID0gbiwgdGhpcy5kb2NDaGFuZ2VzID0gcywgdGhpcy5tdXRhdGVkS2V5cyA9IGksIFxuICAgICAgICB0aGlzLmZyb21DYWNoZSA9IHIsIHRoaXMuc3luY1N0YXRlQ2hhbmdlZCA9IG8sIHRoaXMuZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMgPSB1LCBcbiAgICAgICAgdGhpcy5oYXNDYWNoZWRSZXN1bHRzID0gYztcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIGFsbCBkb2N1bWVudHMgaW4gdGhlIHNuYXBzaG90IHdlcmUgYWRkZWQuICovICAgIHN0YXRpYyBmcm9tSW5pdGlhbERvY3VtZW50cyh0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICByLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiB0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCBuZXcgUmModCwgZSwgQWMuZW1wdHlTZXQoZSksIHIsIG4sIHMsIFxuICAgICAgICAvKiBzeW5jU3RhdGVDaGFuZ2VkPSAqLyAhMCwgXG4gICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMSwgaSk7XG4gICAgfVxuICAgIGdldCBoYXNQZW5kaW5nV3JpdGVzKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMubXV0YXRlZEtleXMuaXNFbXB0eSgpO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgaWYgKCEodGhpcy5mcm9tQ2FjaGUgPT09IHQuZnJvbUNhY2hlICYmIHRoaXMuaGFzQ2FjaGVkUmVzdWx0cyA9PT0gdC5oYXNDYWNoZWRSZXN1bHRzICYmIHRoaXMuc3luY1N0YXRlQ2hhbmdlZCA9PT0gdC5zeW5jU3RhdGVDaGFuZ2VkICYmIHRoaXMubXV0YXRlZEtleXMuaXNFcXVhbCh0Lm11dGF0ZWRLZXlzKSAmJiBabih0aGlzLnF1ZXJ5LCB0LnF1ZXJ5KSAmJiB0aGlzLmRvY3MuaXNFcXVhbCh0LmRvY3MpICYmIHRoaXMub2xkRG9jcy5pc0VxdWFsKHQub2xkRG9jcykpKSByZXR1cm4gITE7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmRvY0NoYW5nZXMsIG4gPSB0LmRvY0NoYW5nZXM7XG4gICAgICAgIGlmIChlLmxlbmd0aCAhPT0gbi5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCsrKSBpZiAoZVt0XS50eXBlICE9PSBuW3RdLnR5cGUgfHwgIWVbdF0uZG9jLmlzRXF1YWwoblt0XS5kb2MpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEhvbGRzIHRoZSBsaXN0ZW5lcnMgYW5kIHRoZSBsYXN0IHJlY2VpdmVkIFZpZXdTbmFwc2hvdCBmb3IgYSBxdWVyeSBiZWluZ1xuICogdHJhY2tlZCBieSBFdmVudE1hbmFnZXIuXG4gKi8gY2xhc3MgUGMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLk51ID0gdm9pZCAwLCB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH1cbn1cblxuY2xhc3MgYmMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBuZXcgb3MoKHQgPT4gdHModCkpLCBabiksIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovICwgXG4gICAgICAgIHRoaXMua3UgPSBuZXcgU2V0O1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gVmModCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gZS5xdWVyeTtcbiAgICBsZXQgaSA9ICExLCByID0gbi5xdWVyaWVzLmdldChzKTtcbiAgICBpZiAociB8fCAoaSA9ICEwLCByID0gbmV3IFBjKSwgaSkgdHJ5IHtcbiAgICAgICAgci5OdSA9IGF3YWl0IG4ub25MaXN0ZW4ocyk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICBjb25zdCBuID0gRWModCwgYEluaXRpYWxpemF0aW9uIG9mIHF1ZXJ5ICcke2VzKGUucXVlcnkpfScgZmFpbGVkYCk7XG4gICAgICAgIHJldHVybiB2b2lkIGUub25FcnJvcihuKTtcbiAgICB9XG4gICAgaWYgKG4ucXVlcmllcy5zZXQocywgciksIHIubGlzdGVuZXJzLnB1c2goZSksIFxuICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgIGUuTXUobi5vbmxpbmVTdGF0ZSksIHIuTnUpIHtcbiAgICAgICAgZS4kdShyLk51KSAmJiB4YyhuKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIFNjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gTCh0KSwgcyA9IGUucXVlcnk7XG4gICAgbGV0IGkgPSAhMTtcbiAgICBjb25zdCByID0gbi5xdWVyaWVzLmdldChzKTtcbiAgICBpZiAocikge1xuICAgICAgICBjb25zdCB0ID0gci5saXN0ZW5lcnMuaW5kZXhPZihlKTtcbiAgICAgICAgdCA+PSAwICYmIChyLmxpc3RlbmVycy5zcGxpY2UodCwgMSksIGkgPSAwID09PSByLmxpc3RlbmVycy5sZW5ndGgpO1xuICAgIH1cbiAgICBpZiAoaSkgcmV0dXJuIG4ucXVlcmllcy5kZWxldGUocyksIG4ub25Vbmxpc3RlbihzKTtcbn1cblxuZnVuY3Rpb24gRGModCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgIGxldCBzID0gITE7XG4gICAgZm9yIChjb25zdCB0IG9mIGUpIHtcbiAgICAgICAgY29uc3QgZSA9IHQucXVlcnksIGkgPSBuLnF1ZXJpZXMuZ2V0KGUpO1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIGkubGlzdGVuZXJzKSBlLiR1KHQpICYmIChzID0gITApO1xuICAgICAgICAgICAgaS5OdSA9IHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcyAmJiB4YyhuKTtcbn1cblxuZnVuY3Rpb24gQ2ModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBMKHQpLCBpID0gcy5xdWVyaWVzLmdldChlKTtcbiAgICBpZiAoaSkgZm9yIChjb25zdCB0IG9mIGkubGlzdGVuZXJzKSB0Lm9uRXJyb3Iobik7XG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMuIE5PVEU6IFdlIGRvbid0IG5lZWQgdG8gY2FsbCBzeW5jRW5naW5lLnVubGlzdGVuKClcbiAgICAvLyBhZnRlciBhbiBlcnJvci5cbiAgICAgICAgcy5xdWVyaWVzLmRlbGV0ZShlKTtcbn1cblxuLy8gQ2FsbCBhbGwgZ2xvYmFsIHNuYXBzaG90IGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiBzZXQuXG5mdW5jdGlvbiB4Yyh0KSB7XG4gICAgdC5rdS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgdC5uZXh0KCk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFF1ZXJ5TGlzdGVuZXIgdGFrZXMgYSBzZXJpZXMgb2YgaW50ZXJuYWwgdmlldyBzbmFwc2hvdHMgYW5kIGRldGVybWluZXNcbiAqIHdoZW4gdG8gcmFpc2UgdGhlIGV2ZW50LlxuICpcbiAqIEl0IHVzZXMgYW4gT2JzZXJ2ZXIgdG8gZGlzcGF0Y2ggZXZlbnRzLlxuICovIGNsYXNzIE5jIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLk91ID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsIHNuYXBzaG90cyAoZS5nLiBmcm9tIGNhY2hlKSBtYXkgbm90IGJlIHByb3BhZ2F0ZWQgdG8gdGhlIHdyYXBwZWRcbiAgICAgICAgICogb2JzZXJ2ZXIuIFRoaXMgZmxhZyBpcyBzZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIGFjdHVhbGx5IHJhaXNlZCBhbiBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuRnUgPSAhMSwgdGhpcy5CdSA9IG51bGwsIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovICwgXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG4gfHwge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIG5ldyBWaWV3U25hcHNob3QgdG8gdGhpcyBsaXN0ZW5lciwgcmFpc2luZyBhIHVzZXItZmFjaW5nIGV2ZW50XG4gICAgICogaWYgYXBwbGljYWJsZSAoZGVwZW5kaW5nIG9uIHdoYXQgY2hhbmdlZCwgd2hldGhlciB0aGUgdXNlciBoYXMgb3B0ZWQgaW50b1xuICAgICAqIG1ldGFkYXRhLW9ubHkgY2hhbmdlcywgZXRjLikuIFJldHVybnMgdHJ1ZSBpZiBhIHVzZXItZmFjaW5nIGV2ZW50IHdhc1xuICAgICAqIGluZGVlZCByYWlzZWQuXG4gICAgICovICAgICR1KHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcykge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBtZXRhZGF0YSBvbmx5IGNoYW5nZXMuXG4gICAgICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdC5kb2NDaGFuZ2VzKSAzIC8qIENoYW5nZVR5cGUuTWV0YWRhdGEgKi8gIT09IG4udHlwZSAmJiBlLnB1c2gobik7XG4gICAgICAgICAgICB0ID0gbmV3IFJjKHQucXVlcnksIHQuZG9jcywgdC5vbGREb2NzLCBlLCB0Lm11dGF0ZWRLZXlzLCB0LmZyb21DYWNoZSwgdC5zeW5jU3RhdGVDaGFuZ2VkLCBcbiAgICAgICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMCwgdC5oYXNDYWNoZWRSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZSA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5GdSA/IHRoaXMuTHUodCkgJiYgKHRoaXMuT3UubmV4dCh0KSwgZSA9ICEwKSA6IHRoaXMucXUodCwgdGhpcy5vbmxpbmVTdGF0ZSkgJiYgKHRoaXMuVXUodCksIFxuICAgICAgICBlID0gITApLCB0aGlzLkJ1ID0gdCwgZTtcbiAgICB9XG4gICAgb25FcnJvcih0KSB7XG4gICAgICAgIHRoaXMuT3UuZXJyb3IodCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHdoZXRoZXIgYSBzbmFwc2hvdCB3YXMgcmFpc2VkLiAqLyAgICBNdSh0KSB7XG4gICAgICAgIHRoaXMub25saW5lU3RhdGUgPSB0O1xuICAgICAgICBsZXQgZSA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5CdSAmJiAhdGhpcy5GdSAmJiB0aGlzLnF1KHRoaXMuQnUsIHQpICYmICh0aGlzLlV1KHRoaXMuQnUpLCBlID0gITApLCBcbiAgICAgICAgZTtcbiAgICB9XG4gICAgcXUodCwgZSkge1xuICAgICAgICAvLyBBbHdheXMgcmFpc2UgdGhlIGZpcnN0IGV2ZW50IHdoZW4gd2UncmUgc3luY2VkXG4gICAgICAgIGlmICghdC5mcm9tQ2FjaGUpIHJldHVybiAhMDtcbiAgICAgICAgLy8gTk9URTogV2UgY29uc2lkZXIgT25saW5lU3RhdGUuVW5rbm93biBhcyBvbmxpbmUgKGl0IHNob3VsZCBiZWNvbWUgT2ZmbGluZVxuICAgICAgICAvLyBvciBPbmxpbmUgaWYgd2Ugd2FpdCBsb25nIGVub3VnaCkuXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFwiT2ZmbGluZVwiIC8qIE9ubGluZVN0YXRlLk9mZmxpbmUgKi8gIT09IGU7XG4gICAgICAgIC8vIERvbid0IHJhaXNlIHRoZSBldmVudCBpZiB3ZSdyZSBvbmxpbmUsIGFyZW4ndCBzeW5jZWQgeWV0IChjaGVja2VkXG4gICAgICAgIC8vIGFib3ZlKSBhbmQgYXJlIHdhaXRpbmcgZm9yIGEgc3luYy5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCF0aGlzLm9wdGlvbnMuS3UgfHwgIW4pICYmICghdC5kb2NzLmlzRW1wdHkoKSB8fCB0Lmhhc0NhY2hlZFJlc3VsdHMgfHwgXCJPZmZsaW5lXCIgLyogT25saW5lU3RhdGUuT2ZmbGluZSAqLyA9PT0gZSk7XG4gICAgICAgIC8vIFJhaXNlIGRhdGEgZnJvbSBjYWNoZSBpZiB3ZSBoYXZlIGFueSBkb2N1bWVudHMsIGhhdmUgY2FjaGVkIHJlc3VsdHMgYmVmb3JlLFxuICAgICAgICAvLyBvciB3ZSBhcmUgb2ZmbGluZS5cbiAgICAgICAgfVxuICAgIEx1KHQpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBoYW5kbGUgaW5jbHVkZURvY3VtZW50TWV0YWRhdGFDaGFuZ2VzIGhlcmUgYmVjYXVzZVxuICAgICAgICAvLyB0aGUgTWV0YWRhdGEgb25seSBjaGFuZ2VzIGhhdmUgYWxyZWFkeSBiZWVuIHN0cmlwcGVkIG91dCBpZiBuZWVkZWQuXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIG9ubHkgY2hhbmdlcyB3ZSB3aWxsIHNlZSBhcmUgdGhlIG9uZXMgd2Ugc2hvdWxkXG4gICAgICAgIC8vIHByb3BhZ2F0ZS5cbiAgICAgICAgaWYgKHQuZG9jQ2hhbmdlcy5sZW5ndGggPiAwKSByZXR1cm4gITA7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLkJ1ICYmIHRoaXMuQnUuaGFzUGVuZGluZ1dyaXRlcyAhPT0gdC5oYXNQZW5kaW5nV3JpdGVzO1xuICAgICAgICByZXR1cm4gISghdC5zeW5jU3RhdGVDaGFuZ2VkICYmICFlKSAmJiAhMCA9PT0gdGhpcy5vcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXM7XG4gICAgICAgIC8vIEdlbmVyYWxseSB3ZSBzaG91bGQgaGF2ZSBoaXQgb25lIG9mIHRoZSBjYXNlcyBhYm92ZSwgYnV0IGl0J3MgcG9zc2libGVcbiAgICAgICAgLy8gdG8gZ2V0IGhlcmUgaWYgdGhlcmUgd2VyZSBvbmx5IG1ldGFkYXRhIGRvY0NoYW5nZXMgYW5kIHRoZXkgZ290XG4gICAgICAgIC8vIHN0cmlwcGVkIG91dC5cbiAgICAgICAgfVxuICAgIFV1KHQpIHtcbiAgICAgICAgdCA9IFJjLmZyb21Jbml0aWFsRG9jdW1lbnRzKHQucXVlcnksIHQuZG9jcywgdC5tdXRhdGVkS2V5cywgdC5mcm9tQ2FjaGUsIHQuaGFzQ2FjaGVkUmVzdWx0cyksIFxuICAgICAgICB0aGlzLkZ1ID0gITAsIHRoaXMuT3UubmV4dCh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY29tcGxldGUgZWxlbWVudCBpbiB0aGUgYnVuZGxlIHN0cmVhbSwgdG9nZXRoZXIgd2l0aCB0aGUgYnl0ZSBsZW5ndGggaXRcbiAqIG9jY3VwaWVzIGluIHRoZSBzdHJlYW0uXG4gKi8gY2xhc3Mga2Mge1xuICAgIGNvbnN0cnVjdG9yKHQsIFxuICAgIC8vIEhvdyBtYW55IGJ5dGVzIHRoaXMgZWxlbWVudCB0YWtlcyB0byBzdG9yZSBpbiB0aGUgYnVuZGxlLlxuICAgIGUpIHtcbiAgICAgICAgdGhpcy5HdSA9IHQsIHRoaXMuYnl0ZUxlbmd0aCA9IGU7XG4gICAgfVxuICAgIFF1KCkge1xuICAgICAgICByZXR1cm4gXCJtZXRhZGF0YVwiIGluIHRoaXMuR3U7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gY29udmVydCBvYmplY3RzIGZyb20gYnVuZGxlcyB0byBtb2RlbCBvYmplY3RzIGluIHRoZSBTREsuXG4gKi8gY2xhc3MgTWMge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdDtcbiAgICB9XG4gICAgcnIodCkge1xuICAgICAgICByZXR1cm4gT2kodGhpcy5zZXJpYWxpemVyLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBCdW5kbGVEb2N1bWVudCB0byBhIE11dGFibGVEb2N1bWVudC5cbiAgICAgKi8gICAgdXIodCkge1xuICAgICAgICByZXR1cm4gdC5tZXRhZGF0YS5leGlzdHMgPyBLaSh0aGlzLnNlcmlhbGl6ZXIsIHQuZG9jdW1lbnQsICExKSA6IGFuLm5ld05vRG9jdW1lbnQodGhpcy5ycih0Lm1ldGFkYXRhLm5hbWUpLCB0aGlzLmNyKHQubWV0YWRhdGEucmVhZFRpbWUpKTtcbiAgICB9XG4gICAgY3IodCkge1xuICAgICAgICByZXR1cm4gTmkodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgY2xhc3MgdG8gcHJvY2VzcyB0aGUgZWxlbWVudHMgZnJvbSBhIGJ1bmRsZSwgbG9hZCB0aGVtIGludG8gbG9jYWxcbiAqIHN0b3JhZ2UgYW5kIHByb3ZpZGUgcHJvZ3Jlc3MgdXBkYXRlIHdoaWxlIGxvYWRpbmcuXG4gKi8gY2xhc3MgJGMge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5qdSA9IHQsIHRoaXMubG9jYWxTdG9yZSA9IGUsIHRoaXMuc2VyaWFsaXplciA9IG4sIFxuICAgICAgICAvKiogQmF0Y2hlZCBxdWVyaWVzIHRvIGJlIHNhdmVkIGludG8gc3RvcmFnZSAqL1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBbXSwgXG4gICAgICAgIC8qKiBCYXRjaGVkIGRvY3VtZW50cyB0byBiZSBzYXZlZCBpbnRvIHN0b3JhZ2UgKi9cbiAgICAgICAgdGhpcy5kb2N1bWVudHMgPSBbXSwgXG4gICAgICAgIC8qKiBUaGUgY29sbGVjdGlvbiBncm91cHMgYWZmZWN0ZWQgYnkgdGhpcyBidW5kbGUuICovXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbkdyb3VwcyA9IG5ldyBTZXQsIHRoaXMucHJvZ3Jlc3MgPSBPYyh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBlbGVtZW50IGZyb20gdGhlIGJ1bmRsZSB0byB0aGUgbG9hZGVyLlxuICAgICAqXG4gICAgICogUmV0dXJucyBhIG5ldyBwcm9ncmVzcyBpZiBhZGRpbmcgdGhlIGVsZW1lbnQgbGVhZHMgdG8gYSBuZXcgcHJvZ3Jlc3MsXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgbnVsbC5cbiAgICAgKi8gICAgenUodCkge1xuICAgICAgICB0aGlzLnByb2dyZXNzLmJ5dGVzTG9hZGVkICs9IHQuYnl0ZUxlbmd0aDtcbiAgICAgICAgbGV0IGUgPSB0aGlzLnByb2dyZXNzLmRvY3VtZW50c0xvYWRlZDtcbiAgICAgICAgaWYgKHQuR3UubmFtZWRRdWVyeSkgdGhpcy5xdWVyaWVzLnB1c2godC5HdS5uYW1lZFF1ZXJ5KTsgZWxzZSBpZiAodC5HdS5kb2N1bWVudE1ldGFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogdC5HdS5kb2N1bWVudE1ldGFkYXRhXG4gICAgICAgICAgICB9KSwgdC5HdS5kb2N1bWVudE1ldGFkYXRhLmV4aXN0cyB8fCArK2U7XG4gICAgICAgICAgICBjb25zdCBuID0gdXQuZnJvbVN0cmluZyh0Lkd1LmRvY3VtZW50TWV0YWRhdGEubmFtZSk7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25Hcm91cHMuYWRkKG4uZ2V0KG4ubGVuZ3RoIC0gMikpO1xuICAgICAgICB9IGVsc2UgdC5HdS5kb2N1bWVudCAmJiAodGhpcy5kb2N1bWVudHNbdGhpcy5kb2N1bWVudHMubGVuZ3RoIC0gMV0uZG9jdW1lbnQgPSB0Lkd1LmRvY3VtZW50LCBcbiAgICAgICAgKytlKTtcbiAgICAgICAgcmV0dXJuIGUgIT09IHRoaXMucHJvZ3Jlc3MuZG9jdW1lbnRzTG9hZGVkID8gKHRoaXMucHJvZ3Jlc3MuZG9jdW1lbnRzTG9hZGVkID0gZSwgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvZ3Jlc3MpKSA6IG51bGw7XG4gICAgfVxuICAgIFd1KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBNYXAsIG4gPSBuZXcgTWModGhpcy5zZXJpYWxpemVyKTtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIHQpIGlmIChzLm1ldGFkYXRhLnF1ZXJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuLnJyKHMubWV0YWRhdGEubmFtZSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygcy5tZXRhZGF0YS5xdWVyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IChlLmdldChuKSB8fCBncygpKS5hZGQodCk7XG4gICAgICAgICAgICAgICAgZS5zZXQobiwgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcHJvZ3Jlc3MgdG8gJ1N1Y2Nlc3MnIGFuZCByZXR1cm4gdGhlIHVwZGF0ZWQgcHJvZ3Jlc3MuXG4gICAgICovICAgIGFzeW5jIGNvbXBsZXRlKCkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgbXUodGhpcy5sb2NhbFN0b3JlLCBuZXcgTWModGhpcy5zZXJpYWxpemVyKSwgdGhpcy5kb2N1bWVudHMsIHRoaXMuanUuaWQpLCBlID0gdGhpcy5XdSh0aGlzLmRvY3VtZW50cyk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLnF1ZXJpZXMpIGF3YWl0IGd1KHRoaXMubG9jYWxTdG9yZSwgdCwgZS5nZXQodC5uYW1lKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzLnRhc2tTdGF0ZSA9IFwiU3VjY2Vzc1wiLCB7XG4gICAgICAgICAgICBwcm9ncmVzczogdGhpcy5wcm9ncmVzcyxcbiAgICAgICAgICAgIEh1OiB0aGlzLmNvbGxlY3Rpb25Hcm91cHMsXG4gICAgICAgICAgICBKdTogdFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3NgIHJlcHJlc2VudGluZyB0aGUgaW5pdGlhbCBwcm9ncmVzcyBvZlxuICogbG9hZGluZyBhIGJ1bmRsZS5cbiAqLyBmdW5jdGlvbiBPYyh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFza1N0YXRlOiBcIlJ1bm5pbmdcIixcbiAgICAgICAgZG9jdW1lbnRzTG9hZGVkOiAwLFxuICAgICAgICBieXRlc0xvYWRlZDogMCxcbiAgICAgICAgdG90YWxEb2N1bWVudHM6IHQudG90YWxEb2N1bWVudHMsXG4gICAgICAgIHRvdGFsQnl0ZXM6IHQudG90YWxCeXRlc1xuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGBMb2FkQnVuZGxlVGFza1Byb2dyZXNzYCByZXByZXNlbnRpbmcgdGhlIHByb2dyZXNzIHRoYXQgdGhlIGxvYWRpbmdcbiAqIGhhcyBzdWNjZWVkZWQuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBGYyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmtleSA9IHQ7XG4gICAgfVxufVxuXG5jbGFzcyBCYyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmtleSA9IHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIFZpZXcgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGluZyB0aGUgZmluYWwgbWVyZ2VkIHRydXRoIG9mIHdoYXQgZG9jcyBhcmUgaW5cbiAqIGEgcXVlcnkuIEl0IGdldHMgbm90aWZpZWQgb2YgbG9jYWwgYW5kIHJlbW90ZSBjaGFuZ2VzIHRvIGRvY3MsIGFuZCBhcHBsaWVzXG4gKiB0aGUgcXVlcnkgZmlsdGVycyBhbmQgbGltaXRzIHRvIGRldGVybWluZSB0aGUgbW9zdCBjb3JyZWN0IHBvc3NpYmxlIHJlc3VsdHMuXG4gKi8gY2xhc3MgTGMge1xuICAgIGNvbnN0cnVjdG9yKHQsIFxuICAgIC8qKiBEb2N1bWVudHMgaW5jbHVkZWQgaW4gdGhlIHJlbW90ZSB0YXJnZXQgKi9cbiAgICBlKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLll1ID0gZSwgdGhpcy5YdSA9IG51bGwsIHRoaXMuaGFzQ2FjaGVkUmVzdWx0cyA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZmxhZyB3aGV0aGVyIHRoZSB2aWV3IGlzIGN1cnJlbnQgd2l0aCB0aGUgYmFja2VuZC4gQSB2aWV3IGlzIGNvbnNpZGVyZWRcbiAgICAgICAgICogY3VycmVudCBhZnRlciBpdCBoYXMgc2VlbiB0aGUgY3VycmVudCBmbGFnIGZyb20gdGhlIGJhY2tlbmQgYW5kIGRpZCBub3RcbiAgICAgICAgICogbG9zZSBjb25zaXN0ZW5jeSB3aXRoaW4gdGhlIHdhdGNoIHN0cmVhbSAoZS5nLiBiZWNhdXNlIG9mIGFuIGV4aXN0ZW5jZVxuICAgICAgICAgKiBmaWx0ZXIgbWlzbWF0Y2gpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gITEsIFxuICAgICAgICAvKiogRG9jdW1lbnRzIGluIHRoZSB2aWV3IGJ1dCBub3QgaW4gdGhlIHJlbW90ZSB0YXJnZXQgKi9cbiAgICAgICAgdGhpcy5adSA9IGdzKCksIFxuICAgICAgICAvKiogRG9jdW1lbnQgS2V5cyB0aGF0IGhhdmUgbG9jYWwgY2hhbmdlcyAqL1xuICAgICAgICB0aGlzLm11dGF0ZWRLZXlzID0gZ3MoKSwgdGhpcy50YyA9IGlzKHQpLCB0aGlzLmVjID0gbmV3IEFjKHRoaXMudGMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIHJlbW90ZSBkb2N1bWVudHMgdGhhdCB0aGUgc2VydmVyIGhhcyB0b2xkIHVzIGJlbG9uZ3MgdG8gdGhlIHRhcmdldCBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiB0aGlzIHZpZXcuXG4gICAgICovICAgIGdldCBuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWXU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYSBzZXQgb2YgZG9jIGNoYW5nZXMsIGFwcGxpZXMgdGhlIHF1ZXJ5IGxpbWl0LCBhbmQgY29tcHV0ZXNcbiAgICAgKiB3aGF0IHRoZSBuZXcgcmVzdWx0cyBzaG91bGQgYmUsIHdoYXQgdGhlIGNoYW5nZXMgd2VyZSwgYW5kIHdoZXRoZXIgd2UgbWF5XG4gICAgICogbmVlZCB0byBnbyBiYWNrIHRvIHRoZSBsb2NhbCBjYWNoZSBmb3IgbW9yZSByZXN1bHRzLiBEb2VzIG5vdCBtYWtlIGFueVxuICAgICAqIGNoYW5nZXMgdG8gdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIGRvY0NoYW5nZXMgLSBUaGUgZG9jIGNoYW5nZXMgdG8gYXBwbHkgdG8gdGhpcyB2aWV3LlxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NoYW5nZXMgLSBJZiB0aGlzIGlzIGJlaW5nIGNhbGxlZCB3aXRoIGEgcmVmaWxsLCB0aGVuIHN0YXJ0XG4gICAgICogICAgICAgIHdpdGggdGhpcyBzZXQgb2YgZG9jcyBhbmQgY2hhbmdlcyBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHZpZXcuXG4gICAgICogQHJldHVybnMgYSBuZXcgc2V0IG9mIGRvY3MsIGNoYW5nZXMsIGFuZCByZWZpbGwgZmxhZy5cbiAgICAgKi8gICAgc2ModCwgZSkge1xuICAgICAgICBjb25zdCBuID0gZSA/IGUuaWMgOiBuZXcgdmMsIHMgPSBlID8gZS5lYyA6IHRoaXMuZWM7XG4gICAgICAgIGxldCBpID0gZSA/IGUubXV0YXRlZEtleXMgOiB0aGlzLm11dGF0ZWRLZXlzLCByID0gcywgbyA9ICExO1xuICAgICAgICAvLyBUcmFjayB0aGUgbGFzdCBkb2MgaW4gYSAoZnVsbCkgbGltaXQuIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHNvbWVcbiAgICAgICAgLy8gdXBkYXRlIChhIGRlbGV0ZSwgb3IgYW4gdXBkYXRlIG1vdmluZyBhIGRvYyBwYXN0IHRoZSBvbGQgbGltaXQpIG1pZ2h0XG4gICAgICAgIC8vIG1lYW4gdGhlcmUgaXMgc29tZSBvdGhlciBkb2N1bWVudCBpbiB0aGUgbG9jYWwgY2FjaGUgdGhhdCBlaXRoZXIgc2hvdWxkXG4gICAgICAgIC8vIGNvbWUgKDEpIGJldHdlZW4gdGhlIG9sZCBsYXN0IGxpbWl0IGRvYyBhbmQgdGhlIG5ldyBsYXN0IGRvY3VtZW50LCBpbiB0aGVcbiAgICAgICAgLy8gY2FzZSBvZiB1cGRhdGVzLCBvciAoMikgYWZ0ZXIgdGhlIG5ldyBsYXN0IGRvY3VtZW50LCBpbiB0aGUgY2FzZSBvZlxuICAgICAgICAvLyBkZWxldGVzLiBTbyB3ZSBrZWVwIHRoaXMgZG9jIGF0IHRoZSBvbGQgbGltaXQgdG8gY29tcGFyZSB0aGUgdXBkYXRlcyB0by5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgc2hvdWxkIG5ldmVyIGdldCB1c2VkIGluIGEgcmVmaWxsICh3aGVuIHByZXZpb3VzQ2hhbmdlcyBpc1xuICAgICAgICAvLyBzZXQpLCBiZWNhdXNlIHRoZXJlIHdpbGwgb25seSBiZSBhZGRzIC0tIG5vIGRlbGV0ZXMgb3IgdXBkYXRlcy5cbiAgICAgICAgY29uc3QgdSA9IFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLyA9PT0gdGhpcy5xdWVyeS5saW1pdFR5cGUgJiYgcy5zaXplID09PSB0aGlzLnF1ZXJ5LmxpbWl0ID8gcy5sYXN0KCkgOiBudWxsLCBjID0gXCJMXCIgLyogTGltaXRUeXBlLkxhc3QgKi8gPT09IHRoaXMucXVlcnkubGltaXRUeXBlICYmIHMuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IHMuZmlyc3QoKSA6IG51bGw7XG4gICAgICAgIC8vIERyb3AgZG9jdW1lbnRzIG91dCB0byBtZWV0IGxpbWl0L2xpbWl0VG9MYXN0IHJlcXVpcmVtZW50LlxuICAgICAgICBpZiAodC5pbm9yZGVyVHJhdmVyc2FsKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IHMuZ2V0KHQpLCBoID0gbnModGhpcy5xdWVyeSwgZSkgPyBlIDogbnVsbCwgbCA9ICEhYSAmJiB0aGlzLm11dGF0ZWRLZXlzLmhhcyhhLmtleSksIGYgPSAhIWggJiYgKGguaGFzTG9jYWxNdXRhdGlvbnMgfHwgXG4gICAgICAgICAgICAvLyBXZSBvbmx5IGNvbnNpZGVyIGNvbW1pdHRlZCBtdXRhdGlvbnMgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmVcbiAgICAgICAgICAgIC8vIG11dGF0ZWQgZHVyaW5nIHRoZSBsaWZldGltZSBvZiB0aGUgdmlldy5cbiAgICAgICAgICAgIHRoaXMubXV0YXRlZEtleXMuaGFzKGgua2V5KSAmJiBoLmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XG4gICAgICAgICAgICBsZXQgZCA9ICExO1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgJiYgaCkge1xuICAgICAgICAgICAgICAgIGEuZGF0YS5pc0VxdWFsKGguZGF0YSkgPyBsICE9PSBmICYmIChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMyAvKiBDaGFuZ2VUeXBlLk1ldGFkYXRhICovICxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBoXG4gICAgICAgICAgICAgICAgfSksIGQgPSAhMCkgOiB0aGlzLnJjKGEsIGgpIHx8IChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovICxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBoXG4gICAgICAgICAgICAgICAgfSksIGQgPSAhMCwgKHUgJiYgdGhpcy50YyhoLCB1KSA+IDAgfHwgYyAmJiB0aGlzLnRjKGgsIGMpIDwgMCkgJiYgKFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZG9jIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBsaW1pdCB0byBvdXRzaWRlIHRoZSBsaW1pdC5cbiAgICAgICAgICAgICAgICAvLyBUaGF0IG1lYW5zIHRoZXJlIG1heSBiZSBzb21lIG90aGVyIGRvYyBpbiB0aGUgbG9jYWwgY2FjaGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgIG8gPSAhMCkpO1xuICAgICAgICAgICAgfSBlbHNlICFhICYmIGggPyAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGhcbiAgICAgICAgICAgIH0pLCBkID0gITApIDogYSAmJiAhaCAmJiAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgICAgIGRvYzogYVxuICAgICAgICAgICAgfSksIGQgPSAhMCwgKHUgfHwgYykgJiYgKFxuICAgICAgICAgICAgLy8gQSBkb2Mgd2FzIHJlbW92ZWQgZnJvbSBhIGZ1bGwgbGltaXQgcXVlcnkuIFdlJ2xsIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIHJlcXVlcnkgZnJvbSB0aGUgbG9jYWwgY2FjaGUgdG8gc2VlIGlmIHdlIGtub3cgYWJvdXQgc29tZSBvdGhlclxuICAgICAgICAgICAgLy8gZG9jIHRoYXQgc2hvdWxkIGJlIGluIHRoZSByZXN1bHRzLlxuICAgICAgICAgICAgbyA9ICEwKSk7XG4gICAgICAgICAgICBkICYmIChoID8gKHIgPSByLmFkZChoKSwgaSA9IGYgPyBpLmFkZCh0KSA6IGkuZGVsZXRlKHQpKSA6IChyID0gci5kZWxldGUodCksIGkgPSBpLmRlbGV0ZSh0KSkpO1xuICAgICAgICB9KSksIG51bGwgIT09IHRoaXMucXVlcnkubGltaXQpIGZvciAoO3Iuc2l6ZSA+IHRoaXMucXVlcnkubGltaXQ7ICkge1xuICAgICAgICAgICAgY29uc3QgdCA9IFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLyA9PT0gdGhpcy5xdWVyeS5saW1pdFR5cGUgPyByLmxhc3QoKSA6IHIuZmlyc3QoKTtcbiAgICAgICAgICAgIHIgPSByLmRlbGV0ZSh0LmtleSksIGkgPSBpLmRlbGV0ZSh0LmtleSksIG4udHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlYzogcixcbiAgICAgICAgICAgIGljOiBuLFxuICAgICAgICAgICAgemk6IG8sXG4gICAgICAgICAgICBtdXRhdGVkS2V5czogaVxuICAgICAgICB9O1xuICAgIH1cbiAgICByYyh0LCBlKSB7XG4gICAgICAgIC8vIFdlIHN1cHByZXNzIHRoZSBpbml0aWFsIGNoYW5nZSBldmVudCBmb3IgZG9jdW1lbnRzIHRoYXQgd2VyZSBtb2RpZmllZCBhc1xuICAgICAgICAvLyBwYXJ0IG9mIGEgd3JpdGUgYWNrbm93bGVkZ21lbnQgKGUuZy4gd2hlbiB0aGUgdmFsdWUgb2YgYSBzZXJ2ZXIgdHJhbnNmb3JtXG4gICAgICAgIC8vIGlzIGFwcGxpZWQpIGFzIFdhdGNoIHdpbGwgc2VuZCB1cyB0aGUgc2FtZSBkb2N1bWVudCBhZ2Fpbi5cbiAgICAgICAgLy8gQnkgc3VwcHJlc3NpbmcgdGhlIGV2ZW50LCB3ZSBvbmx5IHJhaXNlIHR3byB1c2VyIHZpc2libGUgZXZlbnRzIChvbmUgd2l0aFxuICAgICAgICAvLyBgaGFzUGVuZGluZ1dyaXRlc2AgYW5kIHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQpIGluc3RlYWQgb2YgdGhyZWVcbiAgICAgICAgLy8gKG9uZSB3aXRoIGBoYXNQZW5kaW5nV3JpdGVzYCwgdGhlIG1vZGlmaWVkIGRvY3VtZW50IHdpdGhcbiAgICAgICAgLy8gYGhhc1BlbmRpbmdXcml0ZXNgIGFuZCB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIGRvY3VtZW50KS5cbiAgICAgICAgcmV0dXJuIHQuaGFzTG9jYWxNdXRhdGlvbnMgJiYgZS5oYXNDb21taXR0ZWRNdXRhdGlvbnMgJiYgIWUuaGFzTG9jYWxNdXRhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZpZXcgd2l0aCB0aGUgZ2l2ZW4gVmlld0RvY3VtZW50Q2hhbmdlcyBhbmQgb3B0aW9uYWxseSB1cGRhdGVzXG4gICAgICogbGltYm8gZG9jcyBhbmQgc3luYyBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCB0YXJnZXQgY2hhbmdlLlxuICAgICAqIEBwYXJhbSBkb2NDaGFuZ2VzIC0gVGhlIHNldCBvZiBjaGFuZ2VzIHRvIG1ha2UgdG8gdGhlIHZpZXcncyBkb2NzLlxuICAgICAqIEBwYXJhbSB1cGRhdGVMaW1ib0RvY3VtZW50cyAtIFdoZXRoZXIgdG8gdXBkYXRlIGxpbWJvIGRvY3VtZW50cyBiYXNlZCBvblxuICAgICAqICAgICAgICB0aGlzIGNoYW5nZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0Q2hhbmdlIC0gQSB0YXJnZXQgY2hhbmdlIHRvIGFwcGx5IGZvciBjb21wdXRpbmcgbGltYm8gZG9jcyBhbmRcbiAgICAgKiAgICAgICAgc3luYyBzdGF0ZS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBWaWV3Q2hhbmdlIHdpdGggdGhlIGdpdmVuIGRvY3MsIGNoYW5nZXMsIGFuZCBzeW5jIHN0YXRlLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogVGhlIGlPUy9BbmRyb2lkIGNsaWVudHMgYWx3YXlzIGNvbXB1dGUgbGltYm8gZG9jdW1lbnQgY2hhbmdlcy5cbiAgICBhcHBseUNoYW5nZXModCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gdGhpcy5lYztcbiAgICAgICAgdGhpcy5lYyA9IHQuZWMsIHRoaXMubXV0YXRlZEtleXMgPSB0Lm11dGF0ZWRLZXlzO1xuICAgICAgICAvLyBTb3J0IGNoYW5nZXMgYmFzZWQgb24gdHlwZSBhbmQgcXVlcnkgY29tcGFyYXRvclxuICAgICAgICBjb25zdCBpID0gdC5pYy54dSgpO1xuICAgICAgICBpLnNvcnQoKCh0LCBlKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdCA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMgLyogQ2hhbmdlVHlwZS5NZXRhZGF0YSAqLyA6XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgbWV0YWRhdGEgY2hhbmdlIGlzIGNvbnZlcnRlZCB0byBhIG1vZGlmaWVkIGNoYW5nZSBhdCB0aGUgcHVibGljXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwaSBsYXllci4gIFNpbmNlIHdlIHNvcnQgYnkgZG9jdW1lbnQga2V5IGFuZCB0aGVuIGNoYW5nZSB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAvLyBtZXRhZGF0YSBhbmQgbW9kaWZpZWQgY2hhbmdlcyBtdXN0IGJlIHNvcnRlZCBlcXVpdmFsZW50bHkuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuKHQpIC0gbihlKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAodC50eXBlLCBlLnR5cGUpIHx8IHRoaXMudGModC5kb2MsIGUuZG9jKSkpLCB0aGlzLm9jKG4pO1xuICAgICAgICBjb25zdCByID0gZSA/IHRoaXMudWMoKSA6IFtdLCBvID0gMCA9PT0gdGhpcy5adS5zaXplICYmIHRoaXMuY3VycmVudCA/IDEgLyogU3luY1N0YXRlLlN5bmNlZCAqLyA6IDAgLyogU3luY1N0YXRlLkxvY2FsICovICwgdSA9IG8gIT09IHRoaXMuWHU7XG4gICAgICAgIGlmICh0aGlzLlh1ID0gbywgMCAhPT0gaS5sZW5ndGggfHwgdSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzbmFwc2hvdDogbmV3IFJjKHRoaXMucXVlcnksIHQuZWMsIHMsIGksIHQubXV0YXRlZEtleXMsIDAgLyogU3luY1N0YXRlLkxvY2FsICovID09PSBvLCB1LCBcbiAgICAgICAgICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gITEsICEhbiAmJiBuLnJlc3VtZVRva2VuLmFwcHJveGltYXRlQnl0ZVNpemUoKSA+IDApLFxuICAgICAgICAgICAgICAgIGNjOiByXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vIGNoYW5nZXNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNjOiByXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYW4gT25saW5lU3RhdGUgY2hhbmdlIHRvIHRoZSB2aWV3LCBwb3RlbnRpYWxseSBnZW5lcmF0aW5nIGFcbiAgICAgKiBWaWV3Q2hhbmdlIGlmIHRoZSB2aWV3J3Mgc3luY1N0YXRlIGNoYW5nZXMgYXMgYSByZXN1bHQuXG4gICAgICovICAgIE11KHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCAmJiBcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovID09PSB0ID8gKFxuICAgICAgICAvLyBJZiB3ZSdyZSBvZmZsaW5lLCBzZXQgYGN1cnJlbnRgIHRvIGZhbHNlIGFuZCB0aGVuIGNhbGwgYXBwbHlDaGFuZ2VzKClcbiAgICAgICAgLy8gdG8gcmVmcmVzaCBvdXIgc3luY1N0YXRlIGFuZCBnZW5lcmF0ZSBhIFZpZXdDaGFuZ2UgYXMgYXBwcm9wcmlhdGUuIFdlXG4gICAgICAgIC8vIGFyZSBndWFyYW50ZWVkIHRvIGdldCBhIG5ldyBUYXJnZXRDaGFuZ2UgdGhhdCBzZXRzIGBjdXJyZW50YCBiYWNrIHRvXG4gICAgICAgIC8vIHRydWUgb25jZSB0aGUgY2xpZW50IGlzIGJhY2sgb25saW5lLlxuICAgICAgICB0aGlzLmN1cnJlbnQgPSAhMSwgdGhpcy5hcHBseUNoYW5nZXMoe1xuICAgICAgICAgICAgZWM6IHRoaXMuZWMsXG4gICAgICAgICAgICBpYzogbmV3IHZjLFxuICAgICAgICAgICAgbXV0YXRlZEtleXM6IHRoaXMubXV0YXRlZEtleXMsXG4gICAgICAgICAgICB6aTogITFcbiAgICAgICAgfSwgXG4gICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyAhMSkpIDoge1xuICAgICAgICAgICAgY2M6IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgZG9jIGZvciB0aGUgZ2l2ZW4ga2V5IHNob3VsZCBiZSBpbiBsaW1iby5cbiAgICAgKi8gICAgYWModCkge1xuICAgICAgICAvLyBJZiB0aGUgcmVtb3RlIGVuZCBzYXlzIGl0J3MgcGFydCBvZiB0aGlzIHF1ZXJ5LCBpdCdzIG5vdCBpbiBsaW1iby5cbiAgICAgICAgcmV0dXJuICF0aGlzLll1Lmhhcyh0KSAmJiAoXG4gICAgICAgIC8vIFRoZSBsb2NhbCBzdG9yZSBkb2Vzbid0IHRoaW5rIGl0J3MgYSByZXN1bHQsIHNvIGl0IHNob3VsZG4ndCBiZSBpbiBsaW1iby5cbiAgICAgICAgISF0aGlzLmVjLmhhcyh0KSAmJiAhdGhpcy5lYy5nZXQodCkuaGFzTG9jYWxNdXRhdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHN5bmNlZERvY3VtZW50cywgY3VycmVudCwgYW5kIGxpbWJvIGRvY3MgYmFzZWQgb24gdGhlIGdpdmVuIGNoYW5nZS5cbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGNoYW5nZXMgdG8gd2hpY2ggZG9jcyBhcmUgaW4gbGltYm8uXG4gICAgICovICAgIG9jKHQpIHtcbiAgICAgICAgdCAmJiAodC5hZGRlZERvY3VtZW50cy5mb3JFYWNoKCh0ID0+IHRoaXMuWXUgPSB0aGlzLll1LmFkZCh0KSkpLCB0Lm1vZGlmaWVkRG9jdW1lbnRzLmZvckVhY2goKHQgPT4ge30pKSwgXG4gICAgICAgIHQucmVtb3ZlZERvY3VtZW50cy5mb3JFYWNoKCh0ID0+IHRoaXMuWXUgPSB0aGlzLll1LmRlbGV0ZSh0KSkpLCB0aGlzLmN1cnJlbnQgPSB0LmN1cnJlbnQpO1xuICAgIH1cbiAgICB1YygpIHtcbiAgICAgICAgLy8gV2UgY2FuIG9ubHkgZGV0ZXJtaW5lIGxpbWJvIGRvY3VtZW50cyB3aGVuIHdlJ3JlIGluLXN5bmMgd2l0aCB0aGUgc2VydmVyLlxuICAgICAgICBpZiAoIXRoaXMuY3VycmVudCkgcmV0dXJuIFtdO1xuICAgICAgICAvLyBUT0RPKGtsaW10KTogRG8gdGhpcyBpbmNyZW1lbnRhbGx5IHNvIHRoYXQgaXQncyBub3QgcXVhZHJhdGljIHdoZW5cbiAgICAgICAgLy8gdXBkYXRpbmcgbWFueSBkb2N1bWVudHMuXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuWnU7XG4gICAgICAgIHRoaXMuWnUgPSBncygpLCB0aGlzLmVjLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5hYyh0LmtleSkgJiYgKHRoaXMuWnUgPSB0aGlzLlp1LmFkZCh0LmtleSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIERpZmYgdGhlIG5ldyBsaW1ibyBkb2NzIHdpdGggdGhlIG9sZCBsaW1ibyBkb2NzLlxuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5adS5oYXModCkgfHwgZS5wdXNoKG5ldyBCYyh0KSk7XG4gICAgICAgIH0pKSwgdGhpcy5adS5mb3JFYWNoKChuID0+IHtcbiAgICAgICAgICAgIHQuaGFzKG4pIHx8IGUucHVzaChuZXcgRmMobikpO1xuICAgICAgICB9KSksIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgaW4tbWVtb3J5IHN0YXRlIG9mIHRoZSBjdXJyZW50IHZpZXcgd2l0aCB0aGUgc3RhdGUgcmVhZCBmcm9tXG4gICAgICogcGVyc2lzdGVuY2UuXG4gICAgICpcbiAgICAgKiBXZSB1cGRhdGUgdGhlIHF1ZXJ5IHZpZXcgd2hlbmV2ZXIgYSBjbGllbnQncyBwcmltYXJ5IHN0YXR1cyBjaGFuZ2VzOlxuICAgICAqIC0gV2hlbiBhIGNsaWVudCB0cmFuc2l0aW9ucyBmcm9tIHByaW1hcnkgdG8gc2Vjb25kYXJ5LCBpdCBjYW4gbWlzc1xuICAgICAqICAgTG9jYWxTdG9yYWdlIHVwZGF0ZXMgYW5kIGl0cyBxdWVyeSB2aWV3cyBtYXkgdGVtcG9yYXJpbHkgbm90IGJlXG4gICAgICogICBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgc3RhdGUgb24gZGlzay5cbiAgICAgKiAtIEZvciBzZWNvbmRhcnkgdG8gcHJpbWFyeSB0cmFuc2l0aW9ucywgdGhlIGNsaWVudCBuZWVkcyB0byB1cGRhdGUgdGhlIGxpc3RcbiAgICAgKiAgIG9mIGBzeW5jZWREb2N1bWVudHNgIHNpbmNlIHNlY29uZGFyeSBjbGllbnRzIHVwZGF0ZSB0aGVpciBxdWVyeSB2aWV3c1xuICAgICAqICAgYmFzZWQgcHVyZWx5IG9uIHN5bnRoZXNpemVkIFJlbW90ZUV2ZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBxdWVyeVJlc3VsdC5kb2N1bWVudHMgLSBUaGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHF1ZXJ5IGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBMb2NhbFN0b3JlLlxuICAgICAqIEBwYXJhbSBxdWVyeVJlc3VsdC5yZW1vdGVLZXlzIC0gVGhlIGtleXMgb2YgdGhlIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoZVxuICAgICAqIHF1ZXJ5IGFjY29yZGluZyB0byB0aGUgYmFja2VuZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBWaWV3Q2hhbmdlIHRoYXQgcmVzdWx0ZWQgZnJvbSB0aGlzIHN5bmNocm9uaXphdGlvbi5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgIGhjKHQpIHtcbiAgICAgICAgdGhpcy5ZdSA9IHQuaXIsIHRoaXMuWnUgPSBncygpO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5zYyh0LmRvY3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q2hhbmdlcyhlLCAvKnVwZGF0ZUxpbWJvRG9jdW1lbnRzPSovICEwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHZpZXcgc25hcHNob3QgYXMgaWYgdGhpcyBxdWVyeSB3YXMganVzdCBsaXN0ZW5lZCB0by4gQ29udGFpbnNcbiAgICAgKiBhIGRvY3VtZW50IGFkZCBmb3IgZXZlcnkgZXhpc3RpbmcgZG9jdW1lbnQgYW5kIHRoZSBgZnJvbUNhY2hlYCBhbmRcbiAgICAgKiBgaGFzUGVuZGluZ1dyaXRlc2Agc3RhdHVzIG9mIHRoZSBhbHJlYWR5IGVzdGFibGlzaGVkIHZpZXcuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICBsYygpIHtcbiAgICAgICAgcmV0dXJuIFJjLmZyb21Jbml0aWFsRG9jdW1lbnRzKHRoaXMucXVlcnksIHRoaXMuZWMsIHRoaXMubXV0YXRlZEtleXMsIDAgLyogU3luY1N0YXRlLkxvY2FsICovID09PSB0aGlzLlh1LCB0aGlzLmhhc0NhY2hlZFJlc3VsdHMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBRdWVyeVZpZXcgY29udGFpbnMgYWxsIG9mIHRoZSBkYXRhIHRoYXQgU3luY0VuZ2luZSBuZWVkcyB0byBrZWVwIHRyYWNrIG9mIGZvclxuICogYSBwYXJ0aWN1bGFyIHF1ZXJ5LlxuICovXG5jbGFzcyBxYyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IGl0c2VsZi5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IG51bWJlciBjcmVhdGVkIGJ5IHRoZSBjbGllbnQgdGhhdCBpcyB1c2VkIGluIHRoZSB3YXRjaFxuICAgICAqIHN0cmVhbSB0byBpZGVudGlmeSB0aGlzIHF1ZXJ5LlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIFRoZSB2aWV3IGlzIHJlc3BvbnNpYmxlIGZvciBjb21wdXRpbmcgdGhlIGZpbmFsIG1lcmdlZCB0cnV0aCBvZiB3aGF0XG4gICAgICogZG9jcyBhcmUgaW4gdGhlIHF1ZXJ5LiBJdCBnZXRzIG5vdGlmaWVkIG9mIGxvY2FsIGFuZCByZW1vdGUgY2hhbmdlcyxcbiAgICAgKiBhbmQgYXBwbGllcyB0aGUgcXVlcnkgZmlsdGVycyBhbmQgbGltaXRzIHRvIGRldGVybWluZSB0aGUgbW9zdCBjb3JyZWN0XG4gICAgICogcG9zc2libGUgcmVzdWx0cy5cbiAgICAgKi9cbiAgICBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLnRhcmdldElkID0gZSwgdGhpcy52aWV3ID0gbjtcbiAgICB9XG59XG5cbi8qKiBUcmFja3MgYSBsaW1ibyByZXNvbHV0aW9uLiAqLyBjbGFzcyBVYyB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmtleSA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRvIHRydWUgb25jZSB3ZSd2ZSByZWNlaXZlZCBhIGRvY3VtZW50LiBUaGlzIGlzIHVzZWQgaW5cbiAgICAgICAgICogZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCgpIGFuZCB1bHRpbWF0ZWx5IHVzZWQgYnkgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yIHRvXG4gICAgICAgICAqIGRlY2lkZSB3aGV0aGVyIGl0IG5lZWRzIHRvIG1hbnVmYWN0dXJlIGEgZGVsZXRlIGV2ZW50IGZvciB0aGUgdGFyZ2V0IG9uY2VcbiAgICAgICAgICogdGhlIHRhcmdldCBpcyBDVVJSRU5ULlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mYyA9ICExO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgU3luY0VuZ2luZWAgY29vcmRpbmF0aW5nIHdpdGggb3RoZXIgcGFydHMgb2YgU0RLLlxuICpcbiAqIFRoZSBwYXJ0cyBvZiBTeW5jRW5naW5lIHRoYXQgYWN0IGFzIGEgY2FsbGJhY2sgdG8gUmVtb3RlU3RvcmUgbmVlZCB0byBiZVxuICogcmVnaXN0ZXJlZCBpbmRpdmlkdWFsbHkuIFRoaXMgaXMgZG9uZSBpbiBgc3luY0VuZ2luZVdyaXRlKClgIGFuZFxuICogYHN5bmNFbmdpbmVMaXN0ZW4oKWAgKGFzIHdlbGwgYXMgYGFwcGx5UHJpbWFyeVN0YXRlKClgKSBhcyB0aGVzZSBtZXRob2RzXG4gKiBzZXJ2ZSBhcyBlbnRyeSBwb2ludHMgdG8gUmVtb3RlU3RvcmUncyBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIE5vdGU6IHNvbWUgZmllbGQgZGVmaW5lZCBpbiB0aGlzIGNsYXNzIG1pZ2h0IGhhdmUgcHVibGljIGFjY2VzcyBsZXZlbCwgYnV0XG4gKiB0aGUgY2xhc3MgaXMgbm90IGV4cG9ydGVkIHNvIHRoZXkgYXJlIG9ubHkgYWNjZXNzaWJsZSBmcm9tIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyB1c2VmdWwgdG8gaW1wbGVtZW50IG9wdGlvbmFsIGZlYXR1cmVzIChsaWtlIGJ1bmRsZXMpIGluIGZyZWVcbiAqIGZ1bmN0aW9ucywgc3VjaCB0aGF0IHRoZXkgYXJlIHRyZWUtc2hha2VhYmxlLlxuICovIGNsYXNzIEtjIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE1hbmFnZXMgc3RhdGUgc3luY2hyb25pemF0aW9uIGluIG11bHRpLXRhYiBlbnZpcm9ubWVudHMuXG4gICAgcywgaSwgcikge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgPSB0LCB0aGlzLnJlbW90ZVN0b3JlID0gZSwgdGhpcy5ldmVudE1hbmFnZXIgPSBuLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlID0gcywgXG4gICAgICAgIHRoaXMuY3VycmVudFVzZXIgPSBpLCB0aGlzLm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zID0gciwgdGhpcy5kYyA9IHt9LCB0aGlzLndjID0gbmV3IG9zKCh0ID0+IHRzKHQpKSwgWm4pLCBcbiAgICAgICAgdGhpcy5fYyA9IG5ldyBNYXAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGtleXMgb2YgZG9jdW1lbnRzIHRoYXQgYXJlIGluIGxpbWJvIGZvciB3aGljaCB3ZSBoYXZlbid0IHlldCBzdGFydGVkIGFcbiAgICAgICAgICogbGltYm8gcmVzb2x1dGlvbiBxdWVyeS4gVGhlIHN0cmluZ3MgaW4gdGhpcyBzZXQgYXJlIHRoZSByZXN1bHQgb2YgY2FsbGluZ1xuICAgICAgICAgKiBga2V5LnBhdGguY2Fub25pY2FsU3RyaW5nKClgIHdoZXJlIGBrZXlgIGlzIGEgYERvY3VtZW50S2V5YCBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBgU2V0YCB0eXBlIHdhcyBjaG9zZW4gYmVjYXVzZSBpdCBwcm92aWRlcyBlZmZpY2llbnQgbG9va3VwIGFuZCByZW1vdmFsXG4gICAgICAgICAqIG9mIGFyYml0cmFyeSBlbGVtZW50cyBhbmQgaXQgYWxzbyBtYWludGFpbnMgaW5zZXJ0aW9uIG9yZGVyLCBwcm92aWRpbmcgdGhlXG4gICAgICAgICAqIGRlc2lyZWQgcXVldWUtbGlrZSBGSUZPIHNlbWFudGljcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWMgPSBuZXcgU2V0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXBzIHRyYWNrIG9mIHRoZSB0YXJnZXQgSUQgZm9yIGVhY2ggZG9jdW1lbnQgdGhhdCBpcyBpbiBsaW1ibyB3aXRoIGFuXG4gICAgICAgICAqIGFjdGl2ZSB0YXJnZXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdjID0gbmV3IHBlKGh0LmNvbXBhcmF0b3IpLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXBzIHRyYWNrIG9mIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhbiBhY3RpdmUgbGltYm8gcmVzb2x1dGlvbiBmb3IgZWFjaFxuICAgICAgICAgKiBhY3RpdmUgdGFyZ2V0IElEIHRoYXQgd2FzIHN0YXJ0ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIGxpbWJvIHJlc29sdXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnljID0gbmV3IE1hcCwgdGhpcy5JYyA9IG5ldyBPbywgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjb21wbGV0aW9uIGhhbmRsZXJzLCBpbmRleGVkIGJ5IFVzZXIgYW5kIEJhdGNoSWQuICovXG4gICAgICAgIHRoaXMuVGMgPSB7fSwgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjYWxsYmFja3Mgd2FpdGluZyBmb3IgYWxsIHBlbmRpbmcgd3JpdGVzIHRvIGJlIGFja25vd2xlZGdlZC4gKi9cbiAgICAgICAgdGhpcy5FYyA9IG5ldyBNYXAsIHRoaXMuQWMgPSBsby5NbigpLCB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyAsIFxuICAgICAgICAvLyBUaGUgcHJpbWFyeSBzdGF0ZSBpcyBzZXQgdG8gYHRydWVgIG9yIGBmYWxzZWAgaW1tZWRpYXRlbHkgYWZ0ZXIgRmlyZXN0b3JlXG4gICAgICAgIC8vIHN0YXJ0dXAuIEluIHRoZSBpbnRlcmltLCBhIGNsaWVudCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIHByaW1hcnkgaWZcbiAgICAgICAgLy8gYGlzUHJpbWFyeWAgaXMgdHJ1ZS5cbiAgICAgICAgdGhpcy52YyA9IHZvaWQgMDtcbiAgICB9XG4gICAgZ2V0IGlzUHJpbWFyeUNsaWVudCgpIHtcbiAgICAgICAgcmV0dXJuICEwID09PSB0aGlzLnZjO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIG5ldyBsaXN0ZW4sIHJlc29sdmVzIHByb21pc2Ugd2hlbiBsaXN0ZW4gZW5xdWV1ZWQgdG8gdGhlXG4gKiBzZXJ2ZXIuIEFsbCB0aGUgc3Vic2VxdWVudCB2aWV3IHNuYXBzaG90cyBvciBlcnJvcnMgYXJlIHNlbnQgdG8gdGhlXG4gKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBSZXR1cm5zIHRoZSBpbml0aWFsIHNuYXBzaG90LlxuICovXG5hc3luYyBmdW5jdGlvbiBHYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9IHBhKHQpO1xuICAgIGxldCBzLCBpO1xuICAgIGNvbnN0IHIgPSBuLndjLmdldChlKTtcbiAgICBpZiAocikgXG4gICAgLy8gUE9SVElORyBOT1RFOiBXaXRoIE11bHRpLVRhYiBXZWIsIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBxdWVyeSB2aWV3XG4gICAgLy8gYWxyZWFkeSBleGlzdHMgd2hlbiBFdmVudE1hbmFnZXIgY2FsbHMgdXMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzXG4gICAgLy8gaGFwcGVucyB3aGVuIHRoZSBwcmltYXJ5IHRhYiBpcyBhbHJlYWR5IGxpc3RlbmluZyB0byB0aGlzIHF1ZXJ5IG9uXG4gICAgLy8gYmVoYWxmIG9mIGFub3RoZXIgdGFiIGFuZCB0aGUgdXNlciBvZiB0aGUgcHJpbWFyeSBhbHNvIHN0YXJ0cyBsaXN0ZW5pbmdcbiAgICAvLyB0byB0aGUgcXVlcnkuIEV2ZW50TWFuYWdlciB3aWxsIG5vdCBoYXZlIGFuIGFzc2lnbmVkIHRhcmdldCBJRCBpbiB0aGlzXG4gICAgLy8gY2FzZSBhbmQgY2FsbHMgYGxpc3RlbmAgdG8gb2J0YWluIHRoaXMgSUQuXG4gICAgcyA9IHIudGFyZ2V0SWQsIG4uc2hhcmVkQ2xpZW50U3RhdGUuYWRkTG9jYWxRdWVyeVRhcmdldChzKSwgaSA9IHIudmlldy5sYygpOyBlbHNlIHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGh1KG4ubG9jYWxTdG9yZSwgSm4oZSkpLCByID0gbi5zaGFyZWRDbGllbnRTdGF0ZS5hZGRMb2NhbFF1ZXJ5VGFyZ2V0KHQudGFyZ2V0SWQpO1xuICAgICAgICBzID0gdC50YXJnZXRJZCwgaSA9IGF3YWl0IFFjKG4sIGUsIHMsIFwiY3VycmVudFwiID09PSByLCB0LnJlc3VtZVRva2VuKSwgbi5pc1ByaW1hcnlDbGllbnQgJiYgSHUobi5yZW1vdGVTdG9yZSwgdCk7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIHZpZXcgZm9yIGEgcHJldmlvdXNseSB1bmtub3duIHF1ZXJ5IGFuZCBjb21wdXRlcyBpdHMgaW5pdGlhbFxuICogc25hcHNob3QuXG4gKi8gYXN5bmMgZnVuY3Rpb24gUWModCwgZSwgbiwgcywgaSkge1xuICAgIC8vIFBPUlRJTkcgTk9URTogT24gV2ViIG9ubHksIHdlIGluamVjdCB0aGUgY29kZSB0aGF0IHJlZ2lzdGVycyBuZXcgTGltYm9cbiAgICAvLyB0YXJnZXRzIGJhc2VkIG9uIHZpZXcgY2hhbmdlcy4gVGhpcyBhbGxvd3MgdXMgdG8gb25seSBkZXBlbmQgb24gTGltYm9cbiAgICAvLyBjaGFuZ2VzIHdoZW4gdXNlciBjb2RlIGluY2x1ZGVzIHF1ZXJpZXMuXG4gICAgdC5SYyA9IChlLCBuLCBzKSA9PiBhc3luYyBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIGxldCBpID0gZS52aWV3LnNjKG4pO1xuICAgICAgICBpLnppICYmIChcbiAgICAgICAgLy8gVGhlIHF1ZXJ5IGhhcyBhIGxpbWl0IGFuZCBzb21lIGRvY3Mgd2VyZSByZW1vdmVkLCBzbyB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIHJlLXJ1biB0aGUgcXVlcnkgYWdhaW5zdCB0aGUgbG9jYWwgc3RvcmUgdG8gbWFrZSBzdXJlIHdlXG4gICAgICAgIC8vIGRpZG4ndCBsb3NlIGFueSBnb29kIGRvY3MgdGhhdCBoYWQgYmVlbiBwYXN0IHRoZSBsaW1pdC5cbiAgICAgICAgaSA9IGF3YWl0IGZ1KHQubG9jYWxTdG9yZSwgZS5xdWVyeSwgXG4gICAgICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITEpLnRoZW4oKCh7ZG9jdW1lbnRzOiB0fSkgPT4gZS52aWV3LnNjKHQsIGkpKSkpO1xuICAgICAgICBjb25zdCByID0gcyAmJiBzLnRhcmdldENoYW5nZXMuZ2V0KGUudGFyZ2V0SWQpLCBvID0gZS52aWV3LmFwcGx5Q2hhbmdlcyhpLCBcbiAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIHQuaXNQcmltYXJ5Q2xpZW50LCByKTtcbiAgICAgICAgcmV0dXJuIGlhKHQsIGUudGFyZ2V0SWQsIG8uY2MpLCBvLnNuYXBzaG90O1xuICAgIH0odCwgZSwgbiwgcyk7XG4gICAgY29uc3QgciA9IGF3YWl0IGZ1KHQubG9jYWxTdG9yZSwgZSwgXG4gICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMCksIG8gPSBuZXcgTGMoZSwgci5pciksIHUgPSBvLnNjKHIuZG9jdW1lbnRzKSwgYyA9IGdpLmNyZWF0ZVN5bnRoZXNpemVkVGFyZ2V0Q2hhbmdlRm9yQ3VycmVudENoYW5nZShuLCBzICYmIFwiT2ZmbGluZVwiIC8qIE9ubGluZVN0YXRlLk9mZmxpbmUgKi8gIT09IHQub25saW5lU3RhdGUsIGkpLCBhID0gby5hcHBseUNoYW5nZXModSwgXG4gICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIHQuaXNQcmltYXJ5Q2xpZW50LCBjKTtcbiAgICBpYSh0LCBuLCBhLmNjKTtcbiAgICBjb25zdCBoID0gbmV3IHFjKGUsIG4sIG8pO1xuICAgIHJldHVybiB0LndjLnNldChlLCBoKSwgdC5fYy5oYXMobikgPyB0Ll9jLmdldChuKS5wdXNoKGUpIDogdC5fYy5zZXQobiwgWyBlIF0pLCBhLnNuYXBzaG90O1xufVxuXG4vKiogU3RvcHMgbGlzdGVuaW5nIHRvIHRoZSBxdWVyeS4gKi8gYXN5bmMgZnVuY3Rpb24gamModCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gbi53Yy5nZXQoZSksIGkgPSBuLl9jLmdldChzLnRhcmdldElkKTtcbiAgICBpZiAoaS5sZW5ndGggPiAxKSByZXR1cm4gbi5fYy5zZXQocy50YXJnZXRJZCwgaS5maWx0ZXIoKHQgPT4gIVpuKHQsIGUpKSkpLCB2b2lkIG4ud2MuZGVsZXRlKGUpO1xuICAgIC8vIE5vIG90aGVyIHF1ZXJpZXMgYXJlIG1hcHBlZCB0byB0aGUgdGFyZ2V0LCBjbGVhbiB1cCB0aGUgcXVlcnkgYW5kIHRoZSB0YXJnZXQuXG4gICAgICAgIGlmIChuLmlzUHJpbWFyeUNsaWVudCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgbG9jYWwgcXVlcnkgdGFyZ2V0IGZpcnN0IHRvIGFsbG93IHVzIHRvIHZlcmlmeVxuICAgICAgICAvLyB3aGV0aGVyIGFueSBvdGhlciBjbGllbnQgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldC5cbiAgICAgICAgbi5zaGFyZWRDbGllbnRTdGF0ZS5yZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0KHMudGFyZ2V0SWQpO1xuICAgICAgICBuLnNoYXJlZENsaWVudFN0YXRlLmlzQWN0aXZlUXVlcnlUYXJnZXQocy50YXJnZXRJZCkgfHwgYXdhaXQgbHUobi5sb2NhbFN0b3JlLCBzLnRhcmdldElkLCBcbiAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMSkudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgbi5zaGFyZWRDbGllbnRTdGF0ZS5jbGVhclF1ZXJ5U3RhdGUocy50YXJnZXRJZCksIEp1KG4ucmVtb3RlU3RvcmUsIHMudGFyZ2V0SWQpLCBcbiAgICAgICAgICAgIG5hKG4sIHMudGFyZ2V0SWQpO1xuICAgICAgICB9KSkuY2F0Y2godnQpO1xuICAgIH0gZWxzZSBuYShuLCBzLnRhcmdldElkKSwgYXdhaXQgbHUobi5sb2NhbFN0b3JlLCBzLnRhcmdldElkLCBcbiAgICAvKmtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhPSovICEwKTtcbn1cblxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIHdyaXRlIG9mIGxvY2FsIG11dGF0aW9uIGJhdGNoIHdoaWNoIGludm9sdmVzIGFkZGluZyB0aGVcbiAqIHdyaXRlcyB0byB0aGUgbXV0YXRpb24gcXVldWUsIG5vdGlmeWluZyB0aGUgcmVtb3RlIHN0b3JlIGFib3V0IG5ld1xuICogbXV0YXRpb25zIGFuZCByYWlzaW5nIGV2ZW50cyBmb3IgYW55IGNoYW5nZXMgdGhpcyB3cml0ZSBjYXVzZWQuXG4gKlxuICogVGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBjYWxsIGlzIHJlc29sdmVkIHdoZW4gdGhlIGFib3ZlIHN0ZXBzXG4gKiBoYXZlIGNvbXBsZXRlZCwgKm5vdCogd2hlbiB0aGUgd3JpdGUgd2FzIGFja2VkIGJ5IHRoZSBiYWNrZW5kLiBUaGVcbiAqIHVzZXJDYWxsYmFjayBpcyByZXNvbHZlZCBvbmNlIHRoZSB3cml0ZSB3YXMgYWNrZWQvcmVqZWN0ZWQgYnkgdGhlXG4gKiBiYWNrZW5kIChvciBmYWlsZWQgbG9jYWxseSBmb3IgYW55IG90aGVyIHJlYXNvbikuXG4gKi8gYXN5bmMgZnVuY3Rpb24gemModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBJYSh0KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IEwodCksIHMgPSBpdC5ub3coKSwgaSA9IGUucmVkdWNlKCgodCwgZSkgPT4gdC5hZGQoZS5rZXkpKSwgZ3MoKSk7XG4gICAgICAgICAgICBsZXQgciwgbztcbiAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9jYWxseSB3cml0ZSBtdXRhdGlvbnNcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2gga2V5cyBkbyBub3QgaGF2ZSBhIHJlbW90ZSB2ZXJzaW9uIGluIHRoZSBjYWNoZSwgdGhpc1xuICAgICAgICAgICAgICAgIC8vIGlzIG5lZWRlZCB0byBjcmVhdGUgdGhlIHJpZ2h0IG92ZXJsYXkgbXV0YXRpb246IGlmIG5vIHJlbW90ZSB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VudHMsIHdlIGRvIG5vdCBuZWVkIHRvIGNyZWF0ZSBvdmVybGF5cyBhcyBwYXRjaCBtdXRhdGlvbnMuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhPdmVybGF5KTogSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGRldGVybWluZSB0aGlzPyBVc2luZyB0aGVcbiAgICAgICAgICAgICAgICAvLyAgZG9jdW1lbnQgdmVyc2lvbiBkb2VzIG5vdCB3b3JrIGJlY2F1c2UgbG9jYWwgbXV0YXRpb25zIHNldCB0aGVtIGJhY2tcbiAgICAgICAgICAgICAgICAvLyAgdG8gMC5cbiAgICAgICAgICAgICAgICBsZXQgdSA9IGNzKCksIGMgPSBncygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLlppLmdldEVudHJpZXModCwgaSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHUgPSB0LCB1LmZvckVhY2goKCh0LCBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmlzVmFsaWREb2N1bWVudCgpIHx8IChjID0gYy5hZGQodCkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0T3ZlcmxheWVkRG9jdW1lbnRzKHQsIHUpKSkubmV4dCgoaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm9uLWlkZW1wb3RlbnQgbXV0YXRpb25zIChzdWNoIGFzIGBGaWVsZFZhbHVlLmluY3JlbWVudCgpYCksXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHJlY29yZCB0aGUgYmFzZSBzdGF0ZSBpbiBhIHNlcGFyYXRlIHBhdGNoIG11dGF0aW9uLiBUaGlzIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGxhdGVyIHVzZWQgdG8gZ3VhcmFudGVlIGNvbnNpc3RlbnQgdmFsdWVzIGFuZCBwcmV2ZW50cyBmbGlja2VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgdGhlIGJhY2tlbmQgc2VuZHMgdXMgYW4gdXBkYXRlIHRoYXQgYWxyZWFkeSBpbmNsdWRlcyBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNmb3JtLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gR3ModCwgci5nZXQodC5rZXkpLm92ZXJsYXllZERvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoZSBiYXNlIHN0YXRlIHNob3VsZCBvbmx5IGJlIGFwcGxpZWQgaWYgdGhlcmUncyBzb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBkb2N1bWVudCB0byBvdmVycmlkZSwgc28gdXNlIGEgUHJlY29uZGl0aW9uIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleGlzdHM9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKG5ldyB6cyh0LmtleSwgZSwgY24oZS52YWx1ZS5tYXBWYWx1ZSksIEZzLmV4aXN0cyghMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5tdXRhdGlvblF1ZXVlLmFkZE11dGF0aW9uQmF0Y2godCwgcywgbywgZSk7XG4gICAgICAgICAgICAgICAgfSkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvID0gZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGUuYXBwbHlUb0xvY2FsRG9jdW1lbnRTZXQociwgYyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnNhdmVPdmVybGF5cyh0LCBlLmJhdGNoSWQsIHMpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKS50aGVuKCgoKSA9PiAoe1xuICAgICAgICAgICAgICAgIGJhdGNoSWQ6IG8uYmF0Y2hJZCxcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBscyhyKVxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfShzLmxvY2FsU3RvcmUsIGUpO1xuICAgICAgICBzLnNoYXJlZENsaWVudFN0YXRlLmFkZFBlbmRpbmdNdXRhdGlvbih0LmJhdGNoSWQpLCBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICBsZXQgcyA9IHQuVGNbdC5jdXJyZW50VXNlci50b0tleSgpXTtcbiAgICAgICAgICAgIHMgfHwgKHMgPSBuZXcgcGUoZXQpKTtcbiAgICAgICAgICAgIHMgPSBzLmluc2VydChlLCBuKSwgdC5UY1t0LmN1cnJlbnRVc2VyLnRvS2V5KCldID0gcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlc29sdmVzIG9yIHJlamVjdHMgdGhlIHVzZXIgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiBiYXRjaCBhbmQgdGhlbiBkaXNjYXJkc1xuICogaXQuXG4gKi8gKHMsIHQuYmF0Y2hJZCwgbiksIGF3YWl0IHVhKHMsIHQuY2hhbmdlcyksIGF3YWl0IGNjKHMucmVtb3RlU3RvcmUpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgcGVyc2lzdCB0aGUgbXV0YXRpb24sIHdlIHJlamVjdCB0aGUgdXNlciBjYWxsYmFjayBhbmRcbiAgICAgICAgLy8gZG9uJ3Qgc2VuZCB0aGUgbXV0YXRpb24uIFRoZSB1c2VyIGNhbiB0aGVuIHJldHJ5IHRoZSB3cml0ZS5cbiAgICAgICAgY29uc3QgZSA9IEVjKHQsIFwiRmFpbGVkIHRvIHBlcnNpc3Qgd3JpdGVcIik7XG4gICAgICAgIG4ucmVqZWN0KGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIG9uZSByZW1vdGUgZXZlbnQgdG8gdGhlIHN5bmMgZW5naW5lLCBub3RpZnlpbmcgYW55IHZpZXdzIG9mIHRoZVxuICogY2hhbmdlcywgYW5kIHJlbGVhc2luZyBhbnkgcGVuZGluZyBtdXRhdGlvbiBiYXRjaGVzIHRoYXQgd291bGQgYmVjb21lXG4gKiB2aXNpYmxlIGJlY2F1c2Ugb2YgdGhlIHNuYXBzaG90IHZlcnNpb24gdGhlIHJlbW90ZSBldmVudCBjb250YWlucy5cbiAqLyBhc3luYyBmdW5jdGlvbiBXYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IHV1KG4ubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgIC8vIFVwZGF0ZSBgcmVjZWl2ZWREb2N1bWVudGAgYXMgYXBwcm9wcmlhdGUgZm9yIGFueSBsaW1ibyB0YXJnZXRzLlxuICAgICAgICAgICAgICAgIGUudGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IG4ueWMuZ2V0KGUpO1xuICAgICAgICAgICAgcyAmJiAoXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgbGltYm8gcmVzb2x1dGlvbiBsb29rdXAsIGl0J3MgZm9yIGEgc2luZ2xlIGRvY3VtZW50XG4gICAgICAgICAgICAvLyBhbmQgaXQgY291bGQgYmUgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLCBidXQgbm90IGEgY29tYmluYXRpb24uXG4gICAgICAgICAgICBGKHQuYWRkZWREb2N1bWVudHMuc2l6ZSArIHQubW9kaWZpZWREb2N1bWVudHMuc2l6ZSArIHQucmVtb3ZlZERvY3VtZW50cy5zaXplIDw9IDEpLCBcbiAgICAgICAgICAgIHQuYWRkZWREb2N1bWVudHMuc2l6ZSA+IDAgPyBzLmZjID0gITAgOiB0Lm1vZGlmaWVkRG9jdW1lbnRzLnNpemUgPiAwID8gRihzLmZjKSA6IHQucmVtb3ZlZERvY3VtZW50cy5zaXplID4gMCAmJiAoRihzLmZjKSwgXG4gICAgICAgICAgICBzLmZjID0gITEpKTtcbiAgICAgICAgfSkpLCBhd2FpdCB1YShuLCB0LCBlKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgIGF3YWl0IHZ0KHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgc3luYyBlbmdpbmUgYW5kIG5vdGlmaWVzIGFueSB2aWV3cyBvZlxuICogdGhlIGNoYW5nZS5cbiAqLyBmdW5jdGlvbiBIYyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IEwodCk7XG4gICAgLy8gSWYgd2UgYXJlIHRoZSBzZWNvbmRhcnkgY2xpZW50LCB3ZSBleHBsaWNpdGx5IGlnbm9yZSB0aGUgcmVtb3RlIHN0b3JlJ3NcbiAgICAvLyBvbmxpbmUgc3RhdGUgKHRoZSBsb2NhbCBjbGllbnQgbWF5IGdvIG9mZmxpbmUsIGV2ZW4gdGhvdWdoIHRoZSBwcmltYXJ5XG4gICAgLy8gdGFiIHJlbWFpbnMgb25saW5lKSBhbmQgb25seSBhcHBseSB0aGUgcHJpbWFyeSB0YWIncyBvbmxpbmUgc3RhdGUgZnJvbVxuICAgIC8vIFNoYXJlZENsaWVudFN0YXRlLlxuICAgICAgICBpZiAocy5pc1ByaW1hcnlDbGllbnQgJiYgMCAvKiBPbmxpbmVTdGF0ZVNvdXJjZS5SZW1vdGVTdG9yZSAqLyA9PT0gbiB8fCAhcy5pc1ByaW1hcnlDbGllbnQgJiYgMSAvKiBPbmxpbmVTdGF0ZVNvdXJjZS5TaGFyZWRDbGllbnRTdGF0ZSAqLyA9PT0gbikge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHMud2MuZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBzLnZpZXcuTXUoZSk7XG4gICAgICAgICAgICBpLnNuYXBzaG90ICYmIHQucHVzaChpLnNuYXBzaG90KTtcbiAgICAgICAgfSkpLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gTCh0KTtcbiAgICAgICAgICAgIG4ub25saW5lU3RhdGUgPSBlO1xuICAgICAgICAgICAgbGV0IHMgPSAhMTtcbiAgICAgICAgICAgIG4ucXVlcmllcy5mb3JFYWNoKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuLmxpc3RlbmVycykgXG4gICAgICAgICAgICAgICAgLy8gUnVuIGdsb2JhbCBzbmFwc2hvdCBsaXN0ZW5lcnMgaWYgYSBjb25zaXN0ZW50IHNuYXBzaG90IGhhcyBiZWVuIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgdC5NdShlKSAmJiAocyA9ICEwKTtcbiAgICAgICAgICAgIH0pKSwgcyAmJiB4YyhuKTtcbiAgICAgICAgfShzLmV2ZW50TWFuYWdlciwgZSksIHQubGVuZ3RoICYmIHMuZGMubnUodCksIHMub25saW5lU3RhdGUgPSBlLCBzLmlzUHJpbWFyeUNsaWVudCAmJiBzLnNoYXJlZENsaWVudFN0YXRlLnNldE9ubGluZVN0YXRlKGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWplY3RzIHRoZSBsaXN0ZW4gZm9yIHRoZSBnaXZlbiB0YXJnZXRJRC4gVGhpcyBjYW4gYmUgdHJpZ2dlcmVkIGJ5IHRoZVxuICogYmFja2VuZCBmb3IgYW55IGFjdGl2ZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHN5bmNFbmdpbmUgLSBUaGUgc3luYyBlbmdpbmUgaW1wbGVtZW50YXRpb24uXG4gKiBAcGFyYW0gdGFyZ2V0SWQgLSBUaGUgdGFyZ2V0SUQgY29ycmVzcG9uZHMgdG8gb25lIHByZXZpb3VzbHkgaW5pdGlhdGVkIGJ5IHRoZVxuICogdXNlciBhcyBwYXJ0IG9mIFRhcmdldERhdGEgcGFzc2VkIHRvIGxpc3RlbigpIG9uIFJlbW90ZVN0b3JlLlxuICogQHBhcmFtIGVyciAtIEEgZGVzY3JpcHRpb24gb2YgdGhlIGNvbmRpdGlvbiB0aGF0IGhhcyBmb3JjZWQgdGhlIHJlamVjdGlvbi5cbiAqIE5lYXJseSBhbHdheXMgdGhpcyB3aWxsIGJlIGFuIGluZGljYXRpb24gdGhhdCB0aGUgdXNlciBpcyBubyBsb25nZXJcbiAqIGF1dGhvcml6ZWQgdG8gc2VlIHRoZSBkYXRhIG1hdGNoaW5nIHRoZSB0YXJnZXQuXG4gKi8gYXN5bmMgZnVuY3Rpb24gSmModCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBMKHQpO1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgICAgIHMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZShlLCBcInJlamVjdGVkXCIsIG4pO1xuICAgIGNvbnN0IGkgPSBzLnljLmdldChlKSwgciA9IGkgJiYgaS5rZXk7XG4gICAgaWYgKHIpIHtcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IFdlIHJlYWxseSBvbmx5IHNob3VsZCBkbyB0aGUgZm9sbG93aW5nIG9uIHBlcm1pc3Npb25cbiAgICAgICAgLy8gZGVuaWVkIGVycm9ycywgYnV0IHdlIGRvbid0IGhhdmUgdGhlIGNhdXNlIGNvZGUgaGVyZS5cbiAgICAgICAgLy8gSXQncyBhIGxpbWJvIGRvYy4gQ3JlYXRlIGEgc3ludGhldGljIGV2ZW50IHNheWluZyBpdCB3YXMgZGVsZXRlZC5cbiAgICAgICAgLy8gVGhpcyBpcyBraW5kIG9mIGEgaGFjay4gSWRlYWxseSwgd2Ugd291bGQgaGF2ZSBhIG1ldGhvZCBpbiB0aGUgbG9jYWxcbiAgICAgICAgLy8gc3RvcmUgdG8gcHVyZ2UgYSBkb2N1bWVudC4gSG93ZXZlciwgaXQgd291bGQgYmUgdHJpY2t5IHRvIGtlZXAgYWxsIG9mXG4gICAgICAgIC8vIHRoZSBsb2NhbCBzdG9yZSdzIGludmFyaWFudHMgd2l0aCBhbm90aGVyIG1ldGhvZC5cbiAgICAgICAgbGV0IHQgPSBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG4gICAgICAgIC8vIFRPRE8oYi8yMTcxODkyMTYpOiBUaGlzIGxpbWJvIGRvY3VtZW50IHNob3VsZCBpZGVhbGx5IGhhdmUgYSByZWFkIHRpbWUsXG4gICAgICAgIC8vIHNvIHRoYXQgaXQgaXMgcGlja2VkIHVwIGJ5IGFueSByZWFkLXRpbWUgYmFzZWQgc2NhbnMuIFRoZSBiYWNrZW5kLFxuICAgICAgICAvLyBob3dldmVyLCBkb2VzIG5vdCBzZW5kIGEgcmVhZCB0aW1lIGZvciB0YXJnZXQgcmVtb3ZhbHMuXG4gICAgICAgICAgICAgICAgdCA9IHQuaW5zZXJ0KHIsIGFuLm5ld05vRG9jdW1lbnQociwgcnQubWluKCkpKTtcbiAgICAgICAgY29uc3QgbiA9IGdzKCkuYWRkKHIpLCBpID0gbmV3IG1pKHJ0Lm1pbigpLCBcbiAgICAgICAgLyogdGFyZ2V0Q2hhbmdlcz0gKi8gbmV3IE1hcCwgXG4gICAgICAgIC8qIHRhcmdldE1pc21hdGNoZXM9ICovIG5ldyBwZShldCksIHQsIG4pO1xuICAgICAgICBhd2FpdCBXYyhzLCBpKSwgXG4gICAgICAgIC8vIFNpbmNlIHRoaXMgcXVlcnkgZmFpbGVkLCB3ZSB3b24ndCB3YW50IHRvIG1hbnVhbGx5IHVubGlzdGVuIHRvIGl0LlxuICAgICAgICAvLyBXZSBvbmx5IHJlbW92ZSBpdCBmcm9tIGJvb2trZWVwaW5nIGFmdGVyIHdlIHN1Y2Nlc3NmdWxseSBhcHBsaWVkIHRoZVxuICAgICAgICAvLyBSZW1vdGVFdmVudC4gSWYgYGFwcGx5UmVtb3RlRXZlbnQoKWAgdGhyb3dzLCB3ZSB3YW50IHRvIHJlLWxpc3RlbiB0b1xuICAgICAgICAvLyB0aGlzIHF1ZXJ5IHdoZW4gdGhlIFJlbW90ZVN0b3JlIHJlc3RhcnRzIHRoZSBXYXRjaCBzdHJlYW0sIHdoaWNoIHNob3VsZFxuICAgICAgICAvLyByZS10cmlnZ2VyIHRoZSB0YXJnZXQgZmFpbHVyZS5cbiAgICAgICAgcy5nYyA9IHMuZ2MucmVtb3ZlKHIpLCBzLnljLmRlbGV0ZShlKSwgb2Eocyk7XG4gICAgfSBlbHNlIGF3YWl0IGx1KHMubG9jYWxTdG9yZSwgZSwgXG4gICAgLyoga2VlcFBlcnNpc3RlZFRhcmdldERhdGEgKi8gITEpLnRoZW4oKCgpID0+IG5hKHMsIGUsIG4pKSkuY2F0Y2godnQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBZYyh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCksIHMgPSBlLmJhdGNoLmJhdGNoSWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IHJ1KG4ubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgIC8vIFRoZSBsb2NhbCBzdG9yZSBtYXkgb3IgbWF5IG5vdCBiZSBhYmxlIHRvIGFwcGx5IHRoZSB3cml0ZSByZXN1bHQgYW5kXG4gICAgICAgIC8vIHJhaXNlIGV2ZW50cyBpbW1lZGlhdGVseSAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHdhdGNoZXIgaXMgY2F1Z2h0XG4gICAgICAgIC8vIHVwKSwgc28gd2UgcmFpc2UgdXNlciBjYWxsYmFja3MgZmlyc3Qgc28gdGhhdCB0aGV5IGNvbnNpc3RlbnRseSBoYXBwZW5cbiAgICAgICAgLy8gYmVmb3JlIGxpc3RlbiBldmVudHMuXG4gICAgICAgICAgICAgICAgZWEobiwgcywgLyplcnJvcj0qLyBudWxsKSwgdGEobiwgcyksIG4uc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlTXV0YXRpb25TdGF0ZShzLCBcImFja25vd2xlZGdlZFwiKSwgXG4gICAgICAgIGF3YWl0IHVhKG4sIHQpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgYXdhaXQgdnQodCk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBYYyh0LCBlLCBuKSB7XG4gICAgY29uc3QgcyA9IEwodCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJSZWplY3QgYmF0Y2hcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAodCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ubXV0YXRpb25RdWV1ZS5sb29rdXBNdXRhdGlvbkJhdGNoKHQsIGUpLm5leHQoKGUgPT4gKEYobnVsbCAhPT0gZSksIHMgPSBlLmtleXMoKSwgXG4gICAgICAgICAgICAgICAgbi5tdXRhdGlvblF1ZXVlLnJlbW92ZU11dGF0aW9uQmF0Y2godCwgZSkpKSkubmV4dCgoKCkgPT4gbi5tdXRhdGlvblF1ZXVlLnBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrKHQpKSkubmV4dCgoKCkgPT4gbi5kb2N1bWVudE92ZXJsYXlDYWNoZS5yZW1vdmVPdmVybGF5c0ZvckJhdGNoSWQodCwgcywgZSkpKS5uZXh0KCgoKSA9PiBuLmxvY2FsRG9jdW1lbnRzLnJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzRm9yRG9jdW1lbnRLZXlzKHQsIHMpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModCwgcykpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJldHVybnMgdGhlIGxhcmdlc3QgKGxhdGVzdCkgYmF0Y2ggaWQgaW4gbXV0YXRpb24gcXVldWUgdGhhdCBpcyBwZW5kaW5nXG4gKiBzZXJ2ZXIgcmVzcG9uc2UuXG4gKlxuICogUmV0dXJucyBgQkFUQ0hJRF9VTktOT1dOYCBpZiB0aGUgcXVldWUgaXMgZW1wdHkuXG4gKi8gKHMubG9jYWxTdG9yZSwgZSk7XG4gICAgICAgIC8vIFRoZSBsb2NhbCBzdG9yZSBtYXkgb3IgbWF5IG5vdCBiZSBhYmxlIHRvIGFwcGx5IHRoZSB3cml0ZSByZXN1bHQgYW5kXG4gICAgICAgIC8vIHJhaXNlIGV2ZW50cyBpbW1lZGlhdGVseSAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHdhdGNoZXIgaXMgY2F1Z2h0IHVwKSxcbiAgICAgICAgLy8gc28gd2UgcmFpc2UgdXNlciBjYWxsYmFja3MgZmlyc3Qgc28gdGhhdCB0aGV5IGNvbnNpc3RlbnRseSBoYXBwZW4gYmVmb3JlXG4gICAgICAgIC8vIGxpc3RlbiBldmVudHMuXG4gICAgICAgICAgICAgICAgZWEocywgZSwgbiksIHRhKHMsIGUpLCBzLnNoYXJlZENsaWVudFN0YXRlLnVwZGF0ZU11dGF0aW9uU3RhdGUoZSwgXCJyZWplY3RlZFwiLCBuKSwgXG4gICAgICAgIGF3YWl0IHVhKHMsIHQpO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgYXdhaXQgdnQobik7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIHVzZXIgY2FsbGJhY2sgdGhhdCByZXNvbHZlcyB3aGVuIGFsbCBwZW5kaW5nIG11dGF0aW9ucyBhdCB0aGUgbW9tZW50IG9mIGNhbGxpbmdcbiAqIGFyZSBhY2tub3dsZWRnZWQgLlxuICovIGFzeW5jIGZ1bmN0aW9uIFpjKHQsIGUpIHtcbiAgICBjb25zdCBuID0gTCh0KTtcbiAgICBlYyhuLnJlbW90ZVN0b3JlKSB8fCBOKFwiU3luY0VuZ2luZVwiLCBcIlRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLiBUaGUgdGFzayByZXR1cm5lZCBieSAnYXdhaXRQZW5kaW5nV3JpdGVzKCknIHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoZSBuZXR3b3JrIGlzIGVuYWJsZWQuXCIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gTCh0KTtcbiAgICAgICAgICAgIHJldHVybiBlLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IGhpZ2hlc3QgdW5hY2tub3dsZWRnZWQgYmF0Y2ggaWRcIiwgXCJyZWFkb25seVwiLCAodCA9PiBlLm11dGF0aW9uUXVldWUuZ2V0SGlnaGVzdFVuYWNrbm93bGVkZ2VkQmF0Y2hJZCh0KSkpO1xuICAgICAgICB9KG4ubG9jYWxTdG9yZSk7XG4gICAgICAgIGlmICgtMSA9PT0gdCkgXG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkgaWYgdGhlcmUgaXMgbm8gcGVuZGluZyB3cml0ZXMgYXQgdGhlIG1vbWVudC5cbiAgICAgICAgcmV0dXJuIHZvaWQgZS5yZXNvbHZlKCk7XG4gICAgICAgIGNvbnN0IHMgPSBuLkVjLmdldCh0KSB8fCBbXTtcbiAgICAgICAgcy5wdXNoKGUpLCBuLkVjLnNldCh0LCBzKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBFYyh0LCBcIkluaXRpYWxpemF0aW9uIG9mIHdhaXRGb3JQZW5kaW5nV3JpdGVzKCkgb3BlcmF0aW9uIGZhaWxlZFwiKTtcbiAgICAgICAgZS5yZWplY3Qobik7XG4gICAgfVxufVxuXG4vKipcbiAqIFRyaWdnZXJzIHRoZSBjYWxsYmFja3MgdGhhdCBhcmUgd2FpdGluZyBmb3IgdGhpcyBiYXRjaCBpZCB0byBnZXQgYWNrbm93bGVkZ2VkIGJ5IHNlcnZlcixcbiAqIGlmIHRoZXJlIGFyZSBhbnkuXG4gKi8gZnVuY3Rpb24gdGEodCwgZSkge1xuICAgICh0LkVjLmdldChlKSB8fCBbXSkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgIHQucmVzb2x2ZSgpO1xuICAgIH0pKSwgdC5FYy5kZWxldGUoZSk7XG59XG5cbi8qKiBSZWplY3QgYWxsIG91dHN0YW5kaW5nIGNhbGxiYWNrcyB3YWl0aW5nIGZvciBwZW5kaW5nIHdyaXRlcyB0byBjb21wbGV0ZS4gKi8gZnVuY3Rpb24gZWEodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBMKHQpO1xuICAgIGxldCBpID0gcy5UY1tzLmN1cnJlbnRVc2VyLnRvS2V5KCldO1xuICAgIC8vIE5PVEU6IE11dGF0aW9ucyByZXN0b3JlZCBmcm9tIHBlcnNpc3RlbmNlIHdvbid0IGhhdmUgY2FsbGJhY2tzLCBzbyBpdCdzXG4gICAgLy8gb2theSBmb3IgdGhlcmUgdG8gYmUgbm8gY2FsbGJhY2sgZm9yIHRoaXMgSUQuXG4gICAgICAgIGlmIChpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBpLmdldChlKTtcbiAgICAgICAgdCAmJiAobiA/IHQucmVqZWN0KG4pIDogdC5yZXNvbHZlKCksIGkgPSBpLnJlbW92ZShlKSksIHMuVGNbcy5jdXJyZW50VXNlci50b0tleSgpXSA9IGk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuYSh0LCBlLCBuID0gbnVsbCkge1xuICAgIHQuc2hhcmVkQ2xpZW50U3RhdGUucmVtb3ZlTG9jYWxRdWVyeVRhcmdldChlKTtcbiAgICBmb3IgKGNvbnN0IHMgb2YgdC5fYy5nZXQoZSkpIHQud2MuZGVsZXRlKHMpLCBuICYmIHQuZGMuUGMocywgbik7XG4gICAgaWYgKHQuX2MuZGVsZXRlKGUpLCB0LmlzUHJpbWFyeUNsaWVudCkge1xuICAgICAgICB0LkljLklzKGUpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgdC5JYy5jb250YWluc0tleShlKSB8fCBcbiAgICAgICAgICAgIC8vIFdlIHJlbW92ZWQgdGhlIGxhc3QgcmVmZXJlbmNlIGZvciB0aGlzIGtleVxuICAgICAgICAgICAgc2EodCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNhKHQsIGUpIHtcbiAgICB0Lm1jLmRlbGV0ZShlLnBhdGguY2Fub25pY2FsU3RyaW5nKCkpO1xuICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB0aGUgdGFyZ2V0IGFscmVhZHkgZ290IHJlbW92ZWQgYmVjYXVzZSB0aGUgcXVlcnkgZmFpbGVkLiBJbiB0aGF0IGNhc2UsXG4gICAgLy8gdGhlIGtleSB3b24ndCBleGlzdCBpbiBgbGltYm9UYXJnZXRzQnlLZXlgLiBPbmx5IGRvIHRoZSBjbGVhbnVwIGlmIHdlIHN0aWxsIGhhdmUgdGhlIHRhcmdldC5cbiAgICBjb25zdCBuID0gdC5nYy5nZXQoZSk7XG4gICAgbnVsbCAhPT0gbiAmJiAoSnUodC5yZW1vdGVTdG9yZSwgbiksIHQuZ2MgPSB0LmdjLnJlbW92ZShlKSwgdC55Yy5kZWxldGUobiksIG9hKHQpKTtcbn1cblxuZnVuY3Rpb24gaWEodCwgZSwgbikge1xuICAgIGZvciAoY29uc3QgcyBvZiBuKSBpZiAocyBpbnN0YW5jZW9mIEZjKSB0LkljLmFkZFJlZmVyZW5jZShzLmtleSwgZSksIHJhKHQsIHMpOyBlbHNlIGlmIChzIGluc3RhbmNlb2YgQmMpIHtcbiAgICAgICAgTihcIlN5bmNFbmdpbmVcIiwgXCJEb2N1bWVudCBubyBsb25nZXIgaW4gbGltYm86IFwiICsgcy5rZXkpLCB0LkljLnJlbW92ZVJlZmVyZW5jZShzLmtleSwgZSk7XG4gICAgICAgIHQuSWMuY29udGFpbnNLZXkocy5rZXkpIHx8IFxuICAgICAgICAvLyBXZSByZW1vdmVkIHRoZSBsYXN0IHJlZmVyZW5jZSBmb3IgdGhpcyBrZXlcbiAgICAgICAgc2EodCwgcy5rZXkpO1xuICAgIH0gZWxzZSBPKCk7XG59XG5cbmZ1bmN0aW9uIHJhKHQsIGUpIHtcbiAgICBjb25zdCBuID0gZS5rZXksIHMgPSBuLnBhdGguY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgdC5nYy5nZXQobikgfHwgdC5tYy5oYXMocykgfHwgKE4oXCJTeW5jRW5naW5lXCIsIFwiTmV3IGRvY3VtZW50IGluIGxpbWJvOiBcIiArIG4pLCB0Lm1jLmFkZChzKSwgXG4gICAgb2EodCkpO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBsaXN0ZW5zIGZvciBkb2N1bWVudHMgaW4gbGltYm8gdGhhdCBhcmUgZW5xdWV1ZWQgZm9yIHJlc29sdXRpb24sXG4gKiBzdWJqZWN0IHRvIGEgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucy5cbiAqXG4gKiBXaXRob3V0IGJvdW5kaW5nIHRoZSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucywgdGhlIHNlcnZlciBjYW4gZmFpbFxuICogd2l0aCBcInJlc291cmNlIGV4aGF1c3RlZFwiIGVycm9ycyB3aGljaCBjYW4gbGVhZCB0byBwYXRob2xvZ2ljYWwgY2xpZW50XG4gKiBiZWhhdmlvciBhcyBzZWVuIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzI2ODMuXG4gKi8gZnVuY3Rpb24gb2EodCkge1xuICAgIGZvciAoO3QubWMuc2l6ZSA+IDAgJiYgdC5nYy5zaXplIDwgdC5tYXhDb25jdXJyZW50TGltYm9SZXNvbHV0aW9uczsgKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0Lm1jLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICAgICAgdC5tYy5kZWxldGUoZSk7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgaHQodXQuZnJvbVN0cmluZyhlKSksIHMgPSB0LkFjLm5leHQoKTtcbiAgICAgICAgdC55Yy5zZXQocywgbmV3IFVjKG4pKSwgdC5nYyA9IHQuZ2MuaW5zZXJ0KG4sIHMpLCBIdSh0LnJlbW90ZVN0b3JlLCBuZXcgY3IoSm4oR24obi5wYXRoKSksIHMsIFwiVGFyZ2V0UHVycG9zZUxpbWJvUmVzb2x1dGlvblwiIC8qIFRhcmdldFB1cnBvc2UuTGltYm9SZXNvbHV0aW9uICovICwgT3QuY3QpKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVhKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gTCh0KSwgaSA9IFtdLCByID0gW10sIG8gPSBbXTtcbiAgICBzLndjLmlzRW1wdHkoKSB8fCAocy53Yy5mb3JFYWNoKCgodCwgdSkgPT4ge1xuICAgICAgICBvLnB1c2gocy5SYyh1LCBlLCBuKS50aGVuKCh0ID0+IHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB2aWV3cyBpZiB0aGVyZSBhcmUgYWN0dWFsIGNoYW5nZXMuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgY2hhbmdlcywgb3Igd2UgYXJlIGhhbmRsaW5nIGEgZ2xvYmFsIHNuYXBzaG90LCBub3RpZnlcbiAgICAgICAgICAgIC8vIHNlY29uZGFyeSBjbGllbnRzIHRvIHVwZGF0ZSBxdWVyeSBzdGF0ZS5cbiAgICAgICAgICAgICh0IHx8IG4pICYmIHMuaXNQcmltYXJ5Q2xpZW50ICYmIHMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZSh1LnRhcmdldElkLCAobnVsbCA9PSB0ID8gdm9pZCAwIDogdC5mcm9tQ2FjaGUpID8gXCJub3QtY3VycmVudFwiIDogXCJjdXJyZW50XCIpLCBcbiAgICAgICAgICAgIHQpIHtcbiAgICAgICAgICAgICAgICBpLnB1c2godCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHR1LkxpKHUudGFyZ2V0SWQsIHQpO1xuICAgICAgICAgICAgICAgIHIucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICB9KSksIGF3YWl0IFByb21pc2UuYWxsKG8pLCBzLmRjLm51KGkpLCBhd2FpdCBhc3luYyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIm5vdGlmeUxvY2FsVmlld0NoYW5nZXNcIiwgXCJyZWFkd3JpdGVcIiwgKHQgPT4gUnQuZm9yRWFjaChlLCAoZSA9PiBSdC5mb3JFYWNoKGUuRmksIChzID0+IG4ucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUuYWRkUmVmZXJlbmNlKHQsIGUudGFyZ2V0SWQsIHMpKSkubmV4dCgoKCkgPT4gUnQuZm9yRWFjaChlLkJpLCAocyA9PiBuLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlLnJlbW92ZVJlZmVyZW5jZSh0LCBlLnRhcmdldElkLCBzKSkpKSkpKSkpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBpZiAoIUR0KHQpKSB0aHJvdyB0O1xuICAgICAgICAgICAgLy8gSWYgYG5vdGlmeUxvY2FsVmlld0NoYW5nZXNgIGZhaWxzLCB3ZSBkaWQgbm90IGFkdmFuY2UgdGhlIHNlcXVlbmNlXG4gICAgICAgICAgICAvLyBudW1iZXIgZm9yIHRoZSBkb2N1bWVudHMgdGhhdCB3ZXJlIGluY2x1ZGVkIGluIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAvLyBUaGlzIG1pZ2h0IHRyaWdnZXIgdGhlbSB0byBiZSBkZWxldGVkIGVhcmxpZXIgdGhhbiB0aGV5IG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSwgYnV0IGl0IHNob3VsZCBub3QgaW52YWxpZGF0ZSB0aGUgaW50ZWdyaXR5IG9mIHRoZSBkYXRhLlxuICAgICAgICAgICAgTihcIkxvY2FsU3RvcmVcIiwgXCJGYWlsZWQgdG8gdXBkYXRlIHNlcXVlbmNlIG51bWJlcnM6IFwiICsgdCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnRhcmdldElkO1xuICAgICAgICAgICAgaWYgKCF0LmZyb21DYWNoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLkppLmdldChlKSwgcyA9IHQuc25hcHNob3RWZXJzaW9uLCBpID0gdC53aXRoTGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbihzKTtcbiAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRoZSBsYXN0IGxpbWJvIGZyZWUgc25hcHNob3QgdmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLkppID0gbi5KaS5pbnNlcnQoZSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KHMubG9jYWxTdG9yZSwgcikpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgaWYgKCFuLmN1cnJlbnRVc2VyLmlzRXF1YWwoZSkpIHtcbiAgICAgICAgTihcIlN5bmNFbmdpbmVcIiwgXCJVc2VyIGNoYW5nZS4gTmV3IHVzZXI6XCIsIGUudG9LZXkoKSk7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCBpdShuLmxvY2FsU3RvcmUsIGUpO1xuICAgICAgICBuLmN1cnJlbnRVc2VyID0gZSwgXG4gICAgICAgIC8vIEZhaWxzIHRhc2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHJlcXVlc3RlZCBieSBwcmV2aW91cyB1c2VyLlxuICAgICAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB0LkVjLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHQucmVqZWN0KG5ldyBVKHEuQ0FOQ0VMTEVELCBlKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCB0LkVjLmNsZWFyKCk7XG4gICAgICAgIH0obiwgXCInd2FpdEZvclBlbmRpbmdXcml0ZXMnIHByb21pc2UgaXMgcmVqZWN0ZWQgZHVlIHRvIGEgdXNlciBjaGFuZ2UuXCIpLCBcbiAgICAgICAgLy8gVE9ETyhiLzExNDIyNjQxNyk6IENvbnNpZGVyIGNhbGxpbmcgdGhpcyBvbmx5IGluIHRoZSBwcmltYXJ5IHRhYi5cbiAgICAgICAgbi5zaGFyZWRDbGllbnRTdGF0ZS5oYW5kbGVVc2VyQ2hhbmdlKGUsIHQucmVtb3ZlZEJhdGNoSWRzLCB0LmFkZGVkQmF0Y2hJZHMpLCBhd2FpdCB1YShuLCB0LmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFhKHQsIGUpIHtcbiAgICBjb25zdCBuID0gTCh0KSwgcyA9IG4ueWMuZ2V0KGUpO1xuICAgIGlmIChzICYmIHMuZmMpIHJldHVybiBncygpLmFkZChzLmtleSk7XG4gICAge1xuICAgICAgICBsZXQgdCA9IGdzKCk7XG4gICAgICAgIGNvbnN0IHMgPSBuLl9jLmdldChlKTtcbiAgICAgICAgaWYgKCFzKSByZXR1cm4gdDtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuLndjLmdldChlKTtcbiAgICAgICAgICAgIHQgPSB0LnVuaW9uV2l0aChzLnZpZXcubmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWNvbmNpbGUgdGhlIGxpc3Qgb2Ygc3luY2VkIGRvY3VtZW50cyBpbiBhbiBleGlzdGluZyB2aWV3IHdpdGggdGhvc2VcbiAqIGZyb20gcGVyc2lzdGVuY2UuXG4gKi8gYXN5bmMgZnVuY3Rpb24gaGEodCwgZSkge1xuICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gYXdhaXQgZnUobi5sb2NhbFN0b3JlLCBlLnF1ZXJ5LCBcbiAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICEwKSwgaSA9IGUudmlldy5oYyhzKTtcbiAgICByZXR1cm4gbi5pc1ByaW1hcnlDbGllbnQgJiYgaWEobiwgZS50YXJnZXRJZCwgaS5jYyksIGk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIG5ld2x5IGNoYW5nZWQgZG9jdW1lbnRzIGZyb20gcmVtb3RlIGRvY3VtZW50IGNhY2hlIGFuZCByYWlzZXNcbiAqIHNuYXBzaG90cyBpZiBuZWVkZWQuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBsYSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgcmV0dXJuIHd1KG4ubG9jYWxTdG9yZSwgZSkudGhlbigodCA9PiB1YShuLCB0KSkpO1xufVxuXG4vKiogQXBwbGllcyBhIG11dGF0aW9uIHN0YXRlIHRvIGFuIGV4aXN0aW5nIGJhdGNoLiAgKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBmYSh0LCBlLCBuLCBzKSB7XG4gICAgY29uc3QgaSA9IEwodCksIHIgPSBhd2FpdCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gTChuLm11dGF0aW9uUXVldWUpO1xuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkxvb2t1cCBtdXRhdGlvbiBkb2N1bWVudHNcIiwgXCJyZWFkb25seVwiLCAodCA9PiBzLlNuKHQsIGUpLm5leHQoKGUgPT4gZSA/IG4ubG9jYWxEb2N1bWVudHMuZ2V0RG9jdW1lbnRzKHQsIGUpIDogUnQucmVzb2x2ZShudWxsKSkpKSk7XG4gICAgfVxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG4gICAgKGkubG9jYWxTdG9yZSwgZSk7XG4gICAgbnVsbCAhPT0gciA/IChcInBlbmRpbmdcIiA9PT0gbiA/IFxuICAgIC8vIElmIHdlIGFyZSB0aGUgcHJpbWFyeSBjbGllbnQsIHdlIG5lZWQgdG8gc2VuZCB0aGlzIHdyaXRlIHRvIHRoZVxuICAgIC8vIGJhY2tlbmQuIFNlY29uZGFyeSBjbGllbnRzIHdpbGwgaWdub3JlIHRoZXNlIHdyaXRlcyBzaW5jZSB0aGVpciByZW1vdGVcbiAgICAvLyBjb25uZWN0aW9uIGlzIGRpc2FibGVkLlxuICAgIGF3YWl0IGNjKGkucmVtb3RlU3RvcmUpIDogXCJhY2tub3dsZWRnZWRcIiA9PT0gbiB8fCBcInJlamVjdGVkXCIgPT09IG4gPyAoXG4gICAgLy8gTk9URTogQm90aCB0aGVzZSBtZXRob2RzIGFyZSBuby1vcHMgZm9yIGJhdGNoZXMgdGhhdCBvcmlnaW5hdGVkIGZyb21cbiAgICAvLyBvdGhlciBjbGllbnRzLlxuICAgIGVhKGksIGUsIHMgfHwgbnVsbCksIHRhKGksIGUpLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIEwoTCh0KS5tdXRhdGlvblF1ZXVlKS5DbihlKTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAoaS5sb2NhbFN0b3JlLCBlKSkgOiBPKCksIGF3YWl0IHVhKGksIHIpKSA6IFxuICAgIC8vIEEgdGhyb3R0bGVkIHRhYiBtYXkgbm90IGhhdmUgc2VlbiB0aGUgbXV0YXRpb24gYmVmb3JlIGl0IHdhcyBjb21wbGV0ZWRcbiAgICAvLyBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZSwgaW4gd2hpY2ggY2FzZSB3ZSB3b24ndCBoYXZlIGNhY2hlZFxuICAgIC8vIHRoZSBhZmZlY3RlZCBkb2N1bWVudHMuIEluIHRoaXMgY2FzZSB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgdXBkYXRlXG4gICAgLy8gc2luY2UgdGhhdCBtZWFucyB3ZSBkaWRuJ3QgYXBwbHkgdGhlIG11dGF0aW9uIGxvY2FsbHkgYXQgYWxsIChpZiB3ZVxuICAgIC8vIGhhZCwgd2Ugd291bGQgaGF2ZSBjYWNoZWQgdGhlIGFmZmVjdGVkIGRvY3VtZW50cyksIGFuZCBzbyB3ZSB3aWxsIGp1c3RcbiAgICAvLyBzZWUgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzIHZpYSBub3JtYWwgcmVtb3RlIGRvY3VtZW50IHVwZGF0ZXNcbiAgICAvLyBhcyBhcHBsaWNhYmxlLlxuICAgIE4oXCJTeW5jRW5naW5lXCIsIFwiQ2Fubm90IGFwcGx5IG11dGF0aW9uIGJhdGNoIHdpdGggaWQ6IFwiICsgZSk7XG59XG5cbi8qKiBBcHBsaWVzIGEgcXVlcnkgdGFyZ2V0IGNoYW5nZSBmcm9tIGEgZGlmZmVyZW50IHRhYi4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBkYSh0LCBlKSB7XG4gICAgY29uc3QgbiA9IEwodCk7XG4gICAgaWYgKHBhKG4pLCBJYShuKSwgITAgPT09IGUgJiYgITAgIT09IG4udmMpIHtcbiAgICAgICAgLy8gU2Vjb25kYXJ5IHRhYnMgb25seSBtYWludGFpbiBWaWV3cyBmb3IgdGhlaXIgbG9jYWwgbGlzdGVuZXJzIGFuZCB0aGVcbiAgICAgICAgLy8gVmlld3MgaW50ZXJuYWwgc3RhdGUgbWF5IG5vdCBiZSAxMDAlIHBvcHVsYXRlZCAoaW4gcGFydGljdWxhclxuICAgICAgICAvLyBzZWNvbmRhcnkgdGFicyBkb24ndCB0cmFjayBzeW5jZWREb2N1bWVudHMsIHRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoZVxuICAgICAgICAvLyBzZXJ2ZXIgY29uc2lkZXJzIHRvIGJlIGluIHRoZSB0YXJnZXQpLiBTbyB3aGVuIGEgc2Vjb25kYXJ5IGJlY29tZXNcbiAgICAgICAgLy8gcHJpbWFyeSwgd2UgbmVlZCB0byBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCB2aWV3cyBmb3IgYWxsIHRhcmdldHNcbiAgICAgICAgLy8gbWF0Y2ggdGhlIHN0YXRlIG9uIGRpc2suXG4gICAgICAgIGNvbnN0IHQgPSBuLnNoYXJlZENsaWVudFN0YXRlLmdldEFsbEFjdGl2ZVF1ZXJ5VGFyZ2V0cygpLCBlID0gYXdhaXQgd2EobiwgdC50b0FycmF5KCkpO1xuICAgICAgICBuLnZjID0gITAsIGF3YWl0IHljKG4ucmVtb3RlU3RvcmUsICEwKTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIEh1KG4ucmVtb3RlU3RvcmUsIHQpO1xuICAgIH0gZWxzZSBpZiAoITEgPT09IGUgJiYgITEgIT09IG4udmMpIHtcbiAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICBsZXQgZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBuLl9jLmZvckVhY2goKChzLCBpKSA9PiB7XG4gICAgICAgICAgICBuLnNoYXJlZENsaWVudFN0YXRlLmlzTG9jYWxRdWVyeVRhcmdldChpKSA/IHQucHVzaChpKSA6IGUgPSBlLnRoZW4oKCgpID0+IChuYShuLCBpKSwgXG4gICAgICAgICAgICBsdShuLmxvY2FsU3RvcmUsIGksIFxuICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCkpKSksIEp1KG4ucmVtb3RlU3RvcmUsIGkpO1xuICAgICAgICB9KSksIGF3YWl0IGUsIGF3YWl0IHdhKG4sIHQpLCBcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IEwodCk7XG4gICAgICAgICAgICBlLnljLmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgSnUoZS5yZW1vdGVTdG9yZSwgbik7XG4gICAgICAgICAgICB9KSksIGUuSWMuVHMoKSwgZS55YyA9IG5ldyBNYXAsIGUuZ2MgPSBuZXcgcGUoaHQuY29tcGFyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZWNvbmNpbGUgdGhlIHF1ZXJ5IHZpZXdzIG9mIHRoZSBwcm92aWRlZCBxdWVyeSB0YXJnZXRzIHdpdGggdGhlIHN0YXRlIGZyb21cbiAqIHBlcnNpc3RlbmNlLiBSYWlzZXMgc25hcHNob3RzIGZvciBhbnkgY2hhbmdlcyB0aGF0IGFmZmVjdCB0aGUgbG9jYWxcbiAqIGNsaWVudCBhbmQgcmV0dXJucyB0aGUgdXBkYXRlZCBzdGF0ZSBvZiBhbGwgdGFyZ2V0J3MgcXVlcnkgZGF0YS5cbiAqXG4gKiBAcGFyYW0gc3luY0VuZ2luZSAtIFRoZSBzeW5jIGVuZ2luZSBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHRhcmdldHMgLSB0aGUgbGlzdCBvZiB0YXJnZXRzIHdpdGggdmlld3MgdGhhdCBuZWVkIHRvIGJlIHJlY29tcHV0ZWRcbiAqIEBwYXJhbSB0cmFuc2l0aW9uVG9QcmltYXJ5IC0gYHRydWVgIGlmZiB0aGUgdGFiIHRyYW5zaXRpb25zIGZyb20gYSBzZWNvbmRhcnlcbiAqIHRhYiB0byBhIHByaW1hcnkgdGFiXG4gKi9cbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgKG4pLCBuLnZjID0gITEsIGF3YWl0IHljKG4ucmVtb3RlU3RvcmUsICExKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdhKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gTCh0KSwgaSA9IFtdLCByID0gW107XG4gICAgZm9yIChjb25zdCB0IG9mIGUpIHtcbiAgICAgICAgbGV0IGU7XG4gICAgICAgIGNvbnN0IG4gPSBzLl9jLmdldCh0KTtcbiAgICAgICAgaWYgKG4gJiYgMCAhPT0gbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEZvciBxdWVyaWVzIHRoYXQgaGF2ZSBhIGxvY2FsIFZpZXcsIHdlIGZldGNoIHRoZWlyIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIC8vIGZyb20gTG9jYWxTdG9yZSAoYXMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgdGhlIHNuYXBzaG90IHZlcnNpb25cbiAgICAgICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCkgYW5kIHJlY29uY2lsZSB0aGVpciB2aWV3cyB3aXRoIHRoZSBwZXJzaXN0ZWRcbiAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cbiAgICAgICAgICAgIGUgPSBhd2FpdCBodShzLmxvY2FsU3RvcmUsIEpuKG5bMF0pKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHMud2MuZ2V0KHQpLCBuID0gYXdhaXQgaGEocywgZSk7XG4gICAgICAgICAgICAgICAgbi5zbmFwc2hvdCAmJiByLnB1c2gobi5zbmFwc2hvdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGb3IgcXVlcmllcyB0aGF0IG5ldmVyIGV4ZWN1dGVkIG9uIHRoaXMgY2xpZW50LCB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAvLyBhbGxvY2F0ZSB0aGUgdGFyZ2V0IGluIExvY2FsU3RvcmUgYW5kIGluaXRpYWxpemUgYSBuZXcgVmlldy5cbiAgICAgICAgICAgIGNvbnN0IG4gPSBhd2FpdCBkdShzLmxvY2FsU3RvcmUsIHQpO1xuICAgICAgICAgICAgZSA9IGF3YWl0IGh1KHMubG9jYWxTdG9yZSwgbiksIGF3YWl0IFFjKHMsIF9hKG4pLCB0LCBcbiAgICAgICAgICAgIC8qY3VycmVudD0qLyAhMSwgZS5yZXN1bWVUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaS5wdXNoKGUpO1xuICAgIH1cbiAgICByZXR1cm4gcy5kYy5udShyKSwgaTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYFF1ZXJ5YCBvYmplY3QgZnJvbSB0aGUgc3BlY2lmaWVkIGBUYXJnZXRgLiBUaGVyZSBpcyBubyB3YXkgdG9cbiAqIG9idGFpbiB0aGUgb3JpZ2luYWwgYFF1ZXJ5YCwgc28gd2Ugc3ludGhlc2l6ZSBhIGBRdWVyeWAgZnJvbSB0aGUgYFRhcmdldGBcbiAqIG9iamVjdC5cbiAqXG4gKiBUaGUgc3ludGhlc2l6ZWQgcmVzdWx0IG1pZ2h0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvcmlnaW5hbCBgUXVlcnlgLCBidXRcbiAqIHNpbmNlIHRoZSBzeW50aGVzaXplZCBgUXVlcnlgIHNob3VsZCByZXR1cm4gdGhlIHNhbWUgcmVzdWx0cyBhcyB0aGVcbiAqIG9yaWdpbmFsIG9uZSAob25seSB0aGUgcHJlc2VudGF0aW9uIG9mIHJlc3VsdHMgbWlnaHQgZGlmZmVyKSwgdGhlIHBvdGVudGlhbFxuICogZGlmZmVyZW5jZSB3aWxsIG5vdCBjYXVzZSBpc3N1ZXMuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBfYSh0KSB7XG4gICAgcmV0dXJuIEtuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIHQub3JkZXJCeSwgdC5maWx0ZXJzLCB0LmxpbWl0LCBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8gLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xufVxuXG4vKiogUmV0dXJucyB0aGUgSURzIG9mIHRoZSBjbGllbnRzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuICovXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuZnVuY3Rpb24gbWEodCkge1xuICAgIGNvbnN0IGUgPSBMKHQpO1xuICAgIHJldHVybiBMKEwoZS5sb2NhbFN0b3JlKS5wZXJzaXN0ZW5jZSkuJGkoKTtcbn1cblxuLyoqIEFwcGxpZXMgYSBxdWVyeSB0YXJnZXQgY2hhbmdlIGZyb20gYSBkaWZmZXJlbnQgdGFiLiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIGdhKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gTCh0KTtcbiAgICBpZiAoaS52YykgXG4gICAgLy8gSWYgd2UgcmVjZWl2ZSBhIHRhcmdldCBzdGF0ZSBub3RpZmljYXRpb24gdmlhIFdlYlN0b3JhZ2UsIHdlIGFyZVxuICAgIC8vIGVpdGhlciBhbHJlYWR5IHNlY29uZGFyeSBvciBhbm90aGVyIHRhYiBoYXMgdGFrZW4gdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgcmV0dXJuIHZvaWQgTihcIlN5bmNFbmdpbmVcIiwgXCJJZ25vcmluZyB1bmV4cGVjdGVkIHF1ZXJ5IHN0YXRlIG5vdGlmaWNhdGlvbi5cIik7XG4gICAgY29uc3QgciA9IGkuX2MuZ2V0KGUpO1xuICAgIGlmIChyICYmIHIubGVuZ3RoID4gMCkgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIFwiY3VycmVudFwiOlxuICAgICAgY2FzZSBcIm5vdC1jdXJyZW50XCI6XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBhd2FpdCB3dShpLmxvY2FsU3RvcmUsIHNzKHJbMF0pKSwgcyA9IG1pLmNyZWF0ZVN5bnRoZXNpemVkUmVtb3RlRXZlbnRGb3JDdXJyZW50Q2hhbmdlKGUsIFwiY3VycmVudFwiID09PSBuLCBWZS5FTVBUWV9CWVRFX1NUUklORyk7XG4gICAgICAgICAgICBhd2FpdCB1YShpLCB0LCBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICBhd2FpdCBsdShpLmxvY2FsU3RvcmUsIGUsIFxuICAgICAgICAvKiBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YSAqLyAhMCksIG5hKGksIGUsIHMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgTygpO1xuICAgIH1cbn1cblxuLyoqIEFkZHMgb3IgcmVtb3ZlcyBXYXRjaCB0YXJnZXRzIGZvciBxdWVyaWVzIGZyb20gZGlmZmVyZW50IHRhYnMuICovIGFzeW5jIGZ1bmN0aW9uIHlhKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gcGEodCk7XG4gICAgaWYgKHMudmMpIHtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcbiAgICAgICAgICAgIGlmIChzLl9jLmhhcyh0KSkge1xuICAgICAgICAgICAgICAgIC8vIEEgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlbiBhZGRlZCBpbiBhIHByZXZpb3VzIGF0dGVtcHRcbiAgICAgICAgICAgICAgICBOKFwiU3luY0VuZ2luZVwiLCBcIkFkZGluZyBhbiBhbHJlYWR5IGFjdGl2ZSB0YXJnZXQgXCIgKyB0KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGUgPSBhd2FpdCBkdShzLmxvY2FsU3RvcmUsIHQpLCBuID0gYXdhaXQgaHUocy5sb2NhbFN0b3JlLCBlKTtcbiAgICAgICAgICAgIGF3YWl0IFFjKHMsIF9hKGUpLCBuLnRhcmdldElkLCBcbiAgICAgICAgICAgIC8qY3VycmVudD0qLyAhMSwgbi5yZXN1bWVUb2tlbiksIEh1KHMucmVtb3RlU3RvcmUsIG4pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBuKSBcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0aWxsIGFjdGl2ZSBzaW5jZSB0aGUgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlblxuICAgICAgICAvLyByZW1vdmVkIGlmIGl0IGhhcyBiZWVuIHJlamVjdGVkIGJ5IHRoZSBiYWNrZW5kLlxuICAgICAgICBzLl9jLmhhcyh0KSAmJiBcbiAgICAgICAgLy8gUmVsZWFzZSBxdWVyaWVzIHRoYXQgYXJlIHN0aWxsIGFjdGl2ZS5cbiAgICAgICAgYXdhaXQgbHUocy5sb2NhbFN0b3JlLCB0LCBcbiAgICAgICAgLyoga2VlcFBlcnNpc3RlZFRhcmdldERhdGEgKi8gITEpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIEp1KHMucmVtb3RlU3RvcmUsIHQpLCBuYShzLCB0KTtcbiAgICAgICAgfSkpLmNhdGNoKHZ0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhKHQpIHtcbiAgICBjb25zdCBlID0gTCh0KTtcbiAgICByZXR1cm4gZS5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuYXBwbHlSZW1vdGVFdmVudCA9IFdjLmJpbmQobnVsbCwgZSksIGUucmVtb3RlU3RvcmUucmVtb3RlU3luY2VyLmdldFJlbW90ZUtleXNGb3JUYXJnZXQgPSBhYS5iaW5kKG51bGwsIGUpLCBcbiAgICBlLnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5yZWplY3RMaXN0ZW4gPSBKYy5iaW5kKG51bGwsIGUpLCBlLmRjLm51ID0gRGMuYmluZChudWxsLCBlLmV2ZW50TWFuYWdlciksIFxuICAgIGUuZGMuUGMgPSBDYy5iaW5kKG51bGwsIGUuZXZlbnRNYW5hZ2VyKSwgZTtcbn1cblxuZnVuY3Rpb24gSWEodCkge1xuICAgIGNvbnN0IGUgPSBMKHQpO1xuICAgIHJldHVybiBlLnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5hcHBseVN1Y2Nlc3NmdWxXcml0ZSA9IFljLmJpbmQobnVsbCwgZSksIGUucmVtb3RlU3RvcmUucmVtb3RlU3luY2VyLnJlamVjdEZhaWxlZFdyaXRlID0gWGMuYmluZChudWxsLCBlKSwgXG4gICAgZTtcbn1cblxuLyoqXG4gKiBMb2FkcyBhIEZpcmVzdG9yZSBidW5kbGUgaW50byB0aGUgU0RLLiBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB3aGVuXG4gKiB0aGUgYnVuZGxlIGZpbmlzaGVkIGxvYWRpbmcuXG4gKlxuICogQHBhcmFtIHN5bmNFbmdpbmUgLSBTeW5jRW5naW5lIHRvIHVzZS5cbiAqIEBwYXJhbSBidW5kbGVSZWFkZXIgLSBCdW5kbGUgdG8gbG9hZCBpbnRvIHRoZSBTREsuXG4gKiBAcGFyYW0gdGFzayAtIExvYWRCdW5kbGVUYXNrIHVzZWQgdG8gdXBkYXRlIHRoZSBsb2FkaW5nIHByb2dyZXNzIHRvIHB1YmxpYyBBUEkuXG4gKi8gZnVuY3Rpb24gVGEodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBMKHQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgKFxuICAgIC8qKiBMb2FkcyBhIGJ1bmRsZSBhbmQgcmV0dXJucyB0aGUgbGlzdCBvZiBhZmZlY3RlZCBjb2xsZWN0aW9uIGdyb3Vwcy4gKi9cbiAgICBhc3luYyBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgZS5nZXRNZXRhZGF0YSgpO1xuICAgICAgICAgICAgaWYgKGF3YWl0IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gTCh0KSwgcyA9IE5pKGUuY3JlYXRlVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJoYXNOZXdlckJ1bmRsZVwiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4ucXMuZ2V0QnVuZGxlTWV0YWRhdGEodCwgZS5pZCkpKS50aGVuKCh0ID0+ICEhdCAmJiB0LmNyZWF0ZVRpbWUuY29tcGFyZVRvKHMpID49IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICogU2F2ZXMgdGhlIGdpdmVuIGBCdW5kbGVNZXRhZGF0YWAgdG8gbG9jYWwgcGVyc2lzdGVuY2UuXG4gKi8gKHQubG9jYWxTdG9yZSwgcykpIHJldHVybiBhd2FpdCBlLmNsb3NlKCksIG4uX2NvbXBsZXRlV2l0aChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzTG9hZGVkOiB0LnRvdGFsRG9jdW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBieXRlc0xvYWRlZDogdC50b3RhbEJ5dGVzLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbERvY3VtZW50czogdC50b3RhbERvY3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxCeXRlczogdC50b3RhbEJ5dGVzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0ocykpLCBQcm9taXNlLnJlc29sdmUobmV3IFNldCk7XG4gICAgICAgICAgICBuLl91cGRhdGVQcm9ncmVzcyhPYyhzKSk7XG4gICAgICAgICAgICBjb25zdCBpID0gbmV3ICRjKHMsIHQubG9jYWxTdG9yZSwgZS5zZXJpYWxpemVyKTtcbiAgICAgICAgICAgIGxldCByID0gYXdhaXQgZS5iYygpO1xuICAgICAgICAgICAgZm9yICg7cjsgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGF3YWl0IGkuenUocik7XG4gICAgICAgICAgICAgICAgdCAmJiBuLl91cGRhdGVQcm9ncmVzcyh0KSwgciA9IGF3YWl0IGUuYmMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG8gPSBhd2FpdCBpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdWEodCwgby5KdSwgXG4gICAgICAgICAgICAvKiByZW1vdGVFdmVudCAqLyB2b2lkIDApLCBcbiAgICAgICAgICAgIC8vIFNhdmUgbWV0YWRhdGEsIHNvIGxvYWRpbmcgdGhlIHNhbWUgYnVuZGxlIHdpbGwgc2tpcC5cbiAgICAgICAgICAgIGF3YWl0IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gTCh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlNhdmUgYnVuZGxlXCIsIFwicmVhZHdyaXRlXCIsICh0ID0+IG4ucXMuc2F2ZUJ1bmRsZU1ldGFkYXRhKHQsIGUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIFJldHVybnMgYSBwcm9taXNlIG9mIGEgYE5hbWVkUXVlcnlgIGFzc29jaWF0ZWQgd2l0aCBnaXZlbiBxdWVyeSBuYW1lLiBQcm9taXNlXG4gKiByZXNvbHZlcyB0byB1bmRlZmluZWQgaWYgbm8gcGVyc2lzdGVkIGRhdGEgY2FuIGJlIGZvdW5kLlxuICovICh0LmxvY2FsU3RvcmUsIHMpLCBuLl9jb21wbGV0ZVdpdGgoby5wcm9ncmVzcyksIFByb21pc2UucmVzb2x2ZShvLkh1KTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgcmV0dXJuIE0oXCJTeW5jRW5naW5lXCIsIGBMb2FkaW5nIGJ1bmRsZSBmYWlsZWQgd2l0aCAke3R9YCksIG4uX2ZhaWxXaXRoKHQpLCBQcm9taXNlLnJlc29sdmUobmV3IFNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIFByb3ZpZGVzIGFsbCBjb21wb25lbnRzIG5lZWRlZCBmb3IgRmlyZXN0b3JlIHdpdGggaW4tbWVtb3J5IHBlcnNpc3RlbmNlLlxuICogVXNlcyBFYWdlckdDIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAqLykocywgZSwgbikudGhlbigodCA9PiB7XG4gICAgICAgIHMuc2hhcmVkQ2xpZW50U3RhdGUubm90aWZ5QnVuZGxlTG9hZGVkKHQpO1xuICAgIH0pKTtcbn1cblxuY2xhc3MgRWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN5bmNocm9uaXplVGFicyA9ICExO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gRnUodC5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCksIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSB0aGlzLmNyZWF0ZVNoYXJlZENsaWVudFN0YXRlKHQpLCBcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IHRoaXMuY3JlYXRlUGVyc2lzdGVuY2UodCksIGF3YWl0IHRoaXMucGVyc2lzdGVuY2Uuc3RhcnQoKSwgdGhpcy5sb2NhbFN0b3JlID0gdGhpcy5jcmVhdGVMb2NhbFN0b3JlKHQpLCBcbiAgICAgICAgdGhpcy5nY1NjaGVkdWxlciA9IHRoaXMuY3JlYXRlR2FyYmFnZUNvbGxlY3Rpb25TY2hlZHVsZXIodCwgdGhpcy5sb2NhbFN0b3JlKSwgdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIgPSB0aGlzLmNyZWF0ZUluZGV4QmFja2ZpbGxlclNjaGVkdWxlcih0LCB0aGlzLmxvY2FsU3RvcmUpO1xuICAgIH1cbiAgICBjcmVhdGVHYXJiYWdlQ29sbGVjdGlvblNjaGVkdWxlcih0LCBlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjcmVhdGVJbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIodCwgZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY3JlYXRlTG9jYWxTdG9yZSh0KSB7XG4gICAgICAgIHJldHVybiBzdSh0aGlzLnBlcnNpc3RlbmNlLCBuZXcgZXUsIHQuaW5pdGlhbFVzZXIsIHRoaXMuc2VyaWFsaXplcik7XG4gICAgfVxuICAgIGNyZWF0ZVBlcnNpc3RlbmNlKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLbyhRby56cywgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG4gICAgY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUodCkge1xuICAgICAgICByZXR1cm4gbmV3IGJ1O1xuICAgIH1cbiAgICBhc3luYyB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIHRoaXMuZ2NTY2hlZHVsZXIgJiYgdGhpcy5nY1NjaGVkdWxlci5zdG9wKCksIGF3YWl0IHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc2h1dGRvd24oKSwgXG4gICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2Uuc2h1dGRvd24oKTtcbiAgICB9XG59XG5cbmNsYXNzIEFhIGV4dGVuZHMgRWEge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5jYWNoZVNpemVCeXRlcyA9IHQ7XG4gICAgfVxuICAgIGNyZWF0ZUdhcmJhZ2VDb2xsZWN0aW9uU2NoZWR1bGVyKHQsIGUpIHtcbiAgICAgICAgRih0aGlzLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlIGluc3RhbmNlb2Ygam8pO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS5nYXJiYWdlQ29sbGVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IHBvKG4sIHQuYXN5bmNRdWV1ZSwgZSk7XG4gICAgfVxuICAgIGNyZWF0ZVBlcnNpc3RlbmNlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHZvaWQgMCAhPT0gdGhpcy5jYWNoZVNpemVCeXRlcyA/IHNvLndpdGhDYWNoZVNpemUodGhpcy5jYWNoZVNpemVCeXRlcykgOiBzby5ERUZBVUxUO1xuICAgICAgICByZXR1cm4gbmV3IEtvKCh0ID0+IGpvLnpzKHQsIGUpKSwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciBGaXJlc3RvcmUgd2l0aCBJbmRleGVkREIgcGVyc2lzdGVuY2UuXG4gKi8gY2xhc3MgdmEgZXh0ZW5kcyBFYSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLlZjID0gdCwgdGhpcy5jYWNoZVNpemVCeXRlcyA9IGUsIHRoaXMuZm9yY2VPd25lcnNoaXAgPSBuLCB0aGlzLnN5bmNocm9uaXplVGFicyA9ICExO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKHQpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZSh0KSwgYXdhaXQgdGhpcy5WYy5pbml0aWFsaXplKHRoaXMsIHQpLCBcbiAgICAgICAgLy8gRW5xdWV1ZSB3cml0ZXMgZnJvbSBhIHByZXZpb3VzIHNlc3Npb25cbiAgICAgICAgYXdhaXQgSWEodGhpcy5WYy5zeW5jRW5naW5lKSwgYXdhaXQgY2ModGhpcy5WYy5yZW1vdGVTdG9yZSksIFxuICAgICAgICAvLyBOT1RFOiBUaGlzIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgbGlzdGVuZXIsIHNvIHdlIG1ha2Ugc3VyZSB0b1xuICAgICAgICAvLyBzZXQgaXQgYWZ0ZXIgbG9jYWxTdG9yZSAvIHJlbW90ZVN0b3JlIGFyZSBzdGFydGVkLlxuICAgICAgICBhd2FpdCB0aGlzLnBlcnNpc3RlbmNlLklpKCgoKSA9PiAodGhpcy5nY1NjaGVkdWxlciAmJiAhdGhpcy5nY1NjaGVkdWxlci5zdGFydGVkICYmIHRoaXMuZ2NTY2hlZHVsZXIuc3RhcnQoKSwgXG4gICAgICAgIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyICYmICF0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlci5zdGFydGVkICYmIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0YXJ0KCksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKTtcbiAgICB9XG4gICAgY3JlYXRlTG9jYWxTdG9yZSh0KSB7XG4gICAgICAgIHJldHVybiBzdSh0aGlzLnBlcnNpc3RlbmNlLCBuZXcgZXUsIHQuaW5pdGlhbFVzZXIsIHRoaXMuc2VyaWFsaXplcik7XG4gICAgfVxuICAgIGNyZWF0ZUdhcmJhZ2VDb2xsZWN0aW9uU2NoZWR1bGVyKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUuZ2FyYmFnZUNvbGxlY3RvcjtcbiAgICAgICAgcmV0dXJuIG5ldyBwbyhuLCB0LmFzeW5jUXVldWUsIGUpO1xuICAgIH1cbiAgICBjcmVhdGVJbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIodCwgZSkge1xuICAgICAgICBjb25zdCBuID0gbmV3ICR0KGUsIHRoaXMucGVyc2lzdGVuY2UpO1xuICAgICAgICByZXR1cm4gbmV3IE10KHQuYXN5bmNRdWV1ZSwgbik7XG4gICAgfVxuICAgIGNyZWF0ZVBlcnNpc3RlbmNlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFpvKHQuZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQsIHQuZGF0YWJhc2VJbmZvLnBlcnNpc3RlbmNlS2V5KSwgbiA9IHZvaWQgMCAhPT0gdGhpcy5jYWNoZVNpemVCeXRlcyA/IHNvLndpdGhDYWNoZVNpemUodGhpcy5jYWNoZVNpemVCeXRlcykgOiBzby5ERUZBVUxUO1xuICAgICAgICByZXR1cm4gbmV3IEpvKHRoaXMuc3luY2hyb25pemVUYWJzLCBlLCB0LmNsaWVudElkLCBuLCB0LmFzeW5jUXVldWUsICR1KCksIE91KCksIHRoaXMuc2VyaWFsaXplciwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSwgISF0aGlzLmZvcmNlT3duZXJzaGlwKTtcbiAgICB9XG4gICAgY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUodCkge1xuICAgICAgICByZXR1cm4gbmV3IGJ1O1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhbGwgY29tcG9uZW50cyBuZWVkZWQgZm9yIEZpcmVzdG9yZSB3aXRoIG11bHRpLXRhYiBJbmRleGVkREJcbiAqIHBlcnNpc3RlbmNlLlxuICpcbiAqIEluIHRoZSBsZWdhY3kgY2xpZW50LCB0aGlzIHByb3ZpZGVyIGlzIHVzZWQgdG8gcHJvdmlkZSBib3RoIG11bHRpLXRhYiBhbmRcbiAqIG5vbi1tdWx0aS10YWIgcGVyc2lzdGVuY2Ugc2luY2Ugd2UgY2Fubm90IHRlbGwgYXQgYnVpbGQgdGltZSB3aGV0aGVyXG4gKiBgc3luY2hyb25pemVUYWJzYCB3aWxsIGJlIGVuYWJsZWQuXG4gKi8gY2xhc3MgUmEgZXh0ZW5kcyB2YSB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0LCBlLCAvKiBmb3JjZU93bmVyc2hpcD0gKi8gITEpLCB0aGlzLlZjID0gdCwgdGhpcy5jYWNoZVNpemVCeXRlcyA9IGUsIHRoaXMuc3luY2hyb25pemVUYWJzID0gITA7XG4gICAgfVxuICAgIGFzeW5jIGluaXRpYWxpemUodCkge1xuICAgICAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplKHQpO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5WYy5zeW5jRW5naW5lO1xuICAgICAgICB0aGlzLnNoYXJlZENsaWVudFN0YXRlIGluc3RhbmNlb2YgUHUgJiYgKHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc3luY0VuZ2luZSA9IHtcbiAgICAgICAgICAgIGpyOiBmYS5iaW5kKG51bGwsIGUpLFxuICAgICAgICAgICAgenI6IGdhLmJpbmQobnVsbCwgZSksXG4gICAgICAgICAgICBXcjogeWEuYmluZChudWxsLCBlKSxcbiAgICAgICAgICAgICRpOiBtYS5iaW5kKG51bGwsIGUpLFxuICAgICAgICAgICAgUXI6IGxhLmJpbmQobnVsbCwgZSlcbiAgICAgICAgfSwgYXdhaXQgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5zdGFydCgpKSwgXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBsaXN0ZW5lciwgc28gd2UgbWFrZSBzdXJlIHRvXG4gICAgICAgIC8vIHNldCBpdCBhZnRlciBsb2NhbFN0b3JlIC8gcmVtb3RlU3RvcmUgYXJlIHN0YXJ0ZWQuXG4gICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2UuSWkoKGFzeW5jIHQgPT4ge1xuICAgICAgICAgICAgYXdhaXQgZGEodGhpcy5WYy5zeW5jRW5naW5lLCB0KSwgdGhpcy5nY1NjaGVkdWxlciAmJiAodCAmJiAhdGhpcy5nY1NjaGVkdWxlci5zdGFydGVkID8gdGhpcy5nY1NjaGVkdWxlci5zdGFydCgpIDogdCB8fCB0aGlzLmdjU2NoZWR1bGVyLnN0b3AoKSksIFxuICAgICAgICAgICAgdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIgJiYgKHQgJiYgIXRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0YXJ0ZWQgPyB0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlci5zdGFydCgpIDogdCB8fCB0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlci5zdG9wKCkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNyZWF0ZVNoYXJlZENsaWVudFN0YXRlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9ICR1KCk7XG4gICAgICAgIGlmICghUHUuRChlKSkgdGhyb3cgbmV3IFUocS5VTklNUExFTUVOVEVELCBcIkluZGV4ZWREQiBwZXJzaXN0ZW5jZSBpcyBvbmx5IGF2YWlsYWJsZSBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0IExvY2FsU3RvcmFnZS5cIik7XG4gICAgICAgIGNvbnN0IG4gPSBabyh0LmRhdGFiYXNlSW5mby5kYXRhYmFzZUlkLCB0LmRhdGFiYXNlSW5mby5wZXJzaXN0ZW5jZUtleSk7XG4gICAgICAgIHJldHVybiBuZXcgUHUoZSwgdC5hc3luY1F1ZXVlLCBuLCB0LmNsaWVudElkLCB0LmluaXRpYWxVc2VyKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW5kIHdpcmVzIHRoZSBjb21wb25lbnRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbnRlcmZhY2Ugd2l0aCB0aGVcbiAqIG5ldHdvcmsuXG4gKi8gY2xhc3MgUGEge1xuICAgIGFzeW5jIGluaXRpYWxpemUodCwgZSkge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgfHwgKHRoaXMubG9jYWxTdG9yZSA9IHQubG9jYWxTdG9yZSwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSA9IHQuc2hhcmVkQ2xpZW50U3RhdGUsIFxuICAgICAgICB0aGlzLmRhdGFzdG9yZSA9IHRoaXMuY3JlYXRlRGF0YXN0b3JlKGUpLCB0aGlzLnJlbW90ZVN0b3JlID0gdGhpcy5jcmVhdGVSZW1vdGVTdG9yZShlKSwgXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gdGhpcy5jcmVhdGVFdmVudE1hbmFnZXIoZSksIHRoaXMuc3luY0VuZ2luZSA9IHRoaXMuY3JlYXRlU3luY0VuZ2luZShlLCBcbiAgICAgICAgLyogc3RhcnRBc1ByaW1hcnk9Ki8gIXQuc3luY2hyb25pemVUYWJzKSwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5vbmxpbmVTdGF0ZUhhbmRsZXIgPSB0ID0+IEhjKHRoaXMuc3luY0VuZ2luZSwgdCwgMSAvKiBPbmxpbmVTdGF0ZVNvdXJjZS5TaGFyZWRDbGllbnRTdGF0ZSAqLyksIFxuICAgICAgICB0aGlzLnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5oYW5kbGVDcmVkZW50aWFsQ2hhbmdlID0gY2EuYmluZChudWxsLCB0aGlzLnN5bmNFbmdpbmUpLCBcbiAgICAgICAgYXdhaXQgeWModGhpcy5yZW1vdGVTdG9yZSwgdGhpcy5zeW5jRW5naW5lLmlzUHJpbWFyeUNsaWVudCkpO1xuICAgIH1cbiAgICBjcmVhdGVFdmVudE1hbmFnZXIodCkge1xuICAgICAgICByZXR1cm4gbmV3IGJjO1xuICAgIH1cbiAgICBjcmVhdGVEYXRhc3RvcmUodCkge1xuICAgICAgICBjb25zdCBlID0gRnUodC5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCksIG4gPSAocyA9IHQuZGF0YWJhc2VJbmZvLCBuZXcgTXUocykpO1xuICAgICAgICB2YXIgcztcbiAgICAgICAgLyoqIFJldHVybiB0aGUgUGxhdGZvcm0tc3BlY2lmaWMgY29ubmVjdGl2aXR5IG1vbml0b3IuICovICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBLdSh0LCBlLCBuLCBzKTtcbiAgICAgICAgfSh0LmF1dGhDcmVkZW50aWFscywgdC5hcHBDaGVja0NyZWRlbnRpYWxzLCBuLCBlKTtcbiAgICB9XG4gICAgY3JlYXRlUmVtb3RlU3RvcmUodCkge1xuICAgICAgICByZXR1cm4gZSA9IHRoaXMubG9jYWxTdG9yZSwgbiA9IHRoaXMuZGF0YXN0b3JlLCBzID0gdC5hc3luY1F1ZXVlLCBpID0gdCA9PiBIYyh0aGlzLnN5bmNFbmdpbmUsIHQsIDAgLyogT25saW5lU3RhdGVTb3VyY2UuUmVtb3RlU3RvcmUgKi8pLCBcbiAgICAgICAgciA9IFN1LkQoKSA/IG5ldyBTdSA6IG5ldyBWdSwgbmV3IGp1KGUsIG4sIHMsIGksIHIpO1xuICAgICAgICB2YXIgZSwgbiwgcywgaSwgcjtcbiAgICAgICAgLyoqIFJlLWVuYWJsZXMgdGhlIG5ldHdvcmsuIElkZW1wb3RlbnQuICovICAgIH1cbiAgICBjcmVhdGVTeW5jRW5naW5lKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4sIFxuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE1hbmFnZXMgc3RhdGUgc3luY2hyb25pemF0aW9uIGluIG11bHRpLXRhYiBlbnZpcm9ubWVudHMuXG4gICAgICAgIHMsIGksIHIsIG8pIHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBuZXcgS2ModCwgZSwgbiwgcywgaSwgcik7XG4gICAgICAgICAgICByZXR1cm4gbyAmJiAodS52YyA9ICEwKSwgdTtcbiAgICAgICAgfSh0aGlzLmxvY2FsU3RvcmUsIHRoaXMucmVtb3RlU3RvcmUsIHRoaXMuZXZlbnRNYW5hZ2VyLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlLCB0LmluaXRpYWxVc2VyLCB0Lm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zLCBlKTtcbiAgICB9XG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IEwodCk7XG4gICAgICAgICAgICBOKFwiUmVtb3RlU3RvcmVcIiwgXCJSZW1vdGVTdG9yZSBzaHV0dGluZyBkb3duLlwiKSwgZS52dS5hZGQoNSAvKiBPZmZsaW5lQ2F1c2UuU2h1dGRvd24gKi8pLCBcbiAgICAgICAgICAgIGF3YWl0IFd1KGUpLCBlLlB1LnNodXRkb3duKCksIFxuICAgICAgICAgICAgLy8gU2V0IHRoZSBPbmxpbmVTdGF0ZSB0byBVbmtub3duIChyYXRoZXIgdGhhbiBPZmZsaW5lKSB0byBhdm9pZCBwb3RlbnRpYWxseVxuICAgICAgICAgICAgLy8gdHJpZ2dlcmluZyBzcHVyaW91cyBsaXN0ZW5lciBldmVudHMgd2l0aCBjYWNoZWQgZGF0YSwgZXRjLlxuICAgICAgICAgICAgZS5idS5zZXQoXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyk7XG4gICAgICAgIH0odGhpcy5yZW1vdGVTdG9yZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBIb3cgbWFueSBieXRlcyB0byByZWFkIGVhY2ggdGltZSB3aGVuIGBSZWFkYWJsZVN0cmVhbVJlYWRlci5yZWFkKClgIGlzXG4gKiBjYWxsZWQuIE9ubHkgYXBwbGljYWJsZSBmb3IgYnl0ZSBzdHJlYW1zIHRoYXQgd2UgY29udHJvbCAoZS5nLiB0aG9zZSBiYWNrZWRcbiAqIGJ5IGFuIFVJbnQ4QXJyYXkpLlxuICovXG4vKipcbiAqIEJ1aWxkcyBhIGBCeXRlU3RyZWFtUmVhZGVyYCBmcm9tIGEgVUludDhBcnJheS5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgZGF0YSBzb3VyY2UgdG8gdXNlLlxuICogQHBhcmFtIGJ5dGVzUGVyUmVhZCAtIEhvdyBtYW55IGJ5dGVzIGVhY2ggYHJlYWQoKWAgZnJvbSB0aGUgcmV0dXJuZWQgcmVhZGVyXG4gKiAgICAgICAgd2lsbCByZWFkLlxuICovXG5mdW5jdGlvbiBiYSh0LCBlID0gMTAyNDApIHtcbiAgICBsZXQgbiA9IDA7XG4gICAgLy8gVGhlIFR5cGVTY3JpcHQgZGVmaW5pdGlvbiBmb3IgUmVhZGFibGVTdHJlYW1SZWFkZXIgY2hhbmdlZC4gV2UgdXNlXG4gICAgLy8gYGFueWAgaGVyZSB0byBhbGxvdyB0aGlzIGNvZGUgdG8gY29tcGlsZSB3aXRoIGRpZmZlcmVudCB2ZXJzaW9ucy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80Mjk3MFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGFzeW5jIHJlYWQoKSB7XG4gICAgICAgICAgICBpZiAobiA8IHQuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LnNsaWNlKG4sIG4gKyBlKSxcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogITFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBuICs9IGUsIHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBjYW5jZWwoKSB7fSxcbiAgICAgICAgcmVsZWFzZUxvY2soKSB7fSxcbiAgICAgICAgY2xvc2VkOiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIE9uIHdlYiwgYSBgUmVhZGFibGVTdHJlYW1gIGlzIHdyYXBwZWQgYXJvdW5kIGJ5IGEgYEJ5dGVTdHJlYW1SZWFkZXJgLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLypcbiAqIEEgd3JhcHBlciBpbXBsZW1lbnRhdGlvbiBvZiBPYnNlcnZlcjxUPiB0aGF0IHdpbGwgZGlzcGF0Y2ggZXZlbnRzXG4gKiBhc3luY2hyb25vdXNseS4gVG8gYWxsb3cgaW1tZWRpYXRlIHNpbGVuY2luZywgYSBtdXRlIGNhbGwgaXMgYWRkZWQgd2hpY2hcbiAqIGNhdXNlcyBldmVudHMgc2NoZWR1bGVkIHRvIG5vIGxvbmdlciBiZSByYWlzZWQuXG4gKi9cbmNsYXNzIFZhIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gc2V0IHRvIHRydWUsIHdpbGwgbm90IHJhaXNlIGZ1dHVyZSBldmVudHMuIE5lY2Vzc2FyeSB0byBkZWFsIHdpdGhcbiAgICAgICAgICogYXN5bmMgZGV0YWNobWVudCBvZiBsaXN0ZW5lci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubXV0ZWQgPSAhMTtcbiAgICB9XG4gICAgbmV4dCh0KSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIubmV4dCAmJiB0aGlzLlNjKHRoaXMub2JzZXJ2ZXIubmV4dCwgdCk7XG4gICAgfVxuICAgIGVycm9yKHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5lcnJvciA/IHRoaXMuU2ModGhpcy5vYnNlcnZlci5lcnJvciwgdCkgOiBrKFwiVW5jYXVnaHQgRXJyb3IgaW4gc25hcHNob3QgbGlzdGVuZXI6XCIsIHQudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIERjKCkge1xuICAgICAgICB0aGlzLm11dGVkID0gITA7XG4gICAgfVxuICAgIFNjKHQsIGUpIHtcbiAgICAgICAgdGhpcy5tdXRlZCB8fCBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm11dGVkIHx8IHQoZSk7XG4gICAgICAgIH0pLCAwKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgYnVuZGxlLlxuICpcbiAqIFRha2VzIGEgYnVuZGxlIHN0cmVhbSBvciBidWZmZXIsIGFuZCBwcmVzZW50cyBhYnN0cmFjdGlvbnMgdG8gcmVhZCBidW5kbGVkXG4gKiBlbGVtZW50cyBvdXQgb2YgdGhlIHVuZGVybHlpbmcgY29udGVudC5cbiAqLyBjbGFzcyBTYSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSByZWFkZXIgdG8gcmVhZCBmcm9tIHVuZGVybHlpbmcgYmluYXJ5IGJ1bmRsZSBkYXRhIHNvdXJjZS4gKi9cbiAgICB0LCBlKSB7XG4gICAgICAgIHRoaXMuQ2MgPSB0LCB0aGlzLnNlcmlhbGl6ZXIgPSBlLCBcbiAgICAgICAgLyoqIENhY2hlZCBidW5kbGUgbWV0YWRhdGEuICovXG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgSywgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBidWZmZXIgdG8gaG9sZCBidW5kbGUgY29udGVudCwgYWNjdW11bGF0aW5nIGluY29tcGxldGUgZWxlbWVudFxuICAgICAgICAgKiBjb250ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheSwgdGhpcy54YyA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpLCBcbiAgICAgICAgLy8gUmVhZCB0aGUgbWV0YWRhdGEgKHdoaWNoIGlzIHRoZSBmaXJzdCBlbGVtZW50KS5cbiAgICAgICAgdGhpcy5OYygpLnRoZW4oKHQgPT4ge1xuICAgICAgICAgICAgdCAmJiB0LlF1KCkgPyB0aGlzLm1ldGFkYXRhLnJlc29sdmUodC5HdS5tZXRhZGF0YSkgOiB0aGlzLm1ldGFkYXRhLnJlamVjdChuZXcgRXJyb3IoYFRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBidW5kbGUgaXMgbm90IGEgbWV0YWRhdGEsIGl0IGlzXFxuICAgICAgICAgICAgICR7SlNPTi5zdHJpbmdpZnkobnVsbCA9PSB0ID8gdm9pZCAwIDogdC5HdSl9YCkpO1xuICAgICAgICB9KSwgKHQgPT4gdGhpcy5tZXRhZGF0YS5yZWplY3QodCkpKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkNjLmNhbmNlbCgpO1xuICAgIH1cbiAgICBhc3luYyBnZXRNZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGEucHJvbWlzZTtcbiAgICB9XG4gICAgYXN5bmMgYmMoKSB7XG4gICAgICAgIC8vIE1ha2VzIHN1cmUgbWV0YWRhdGEgaXMgcmVhZCBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoKSwgdGhpcy5OYygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBmcm9tIHRoZSBoZWFkIG9mIGludGVybmFsIGJ1ZmZlciwgYW5kIHB1bGxpbmcgbW9yZSBkYXRhIGZyb21cbiAgICAgKiB1bmRlcmx5aW5nIHN0cmVhbSBpZiBhIGNvbXBsZXRlIGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLCB1bnRpbCBhblxuICAgICAqIGVsZW1lbnQoaW5jbHVkaW5nIHRoZSBwcmVmaXhlZCBsZW5ndGggYW5kIHRoZSBKU09OIHN0cmluZykgaXMgZm91bmQuXG4gICAgICpcbiAgICAgKiBPbmNlIGEgY29tcGxldGUgZWxlbWVudCBpcyByZWFkLCBpdCBpcyBkcm9wcGVkIGZyb20gaW50ZXJuYWwgYnVmZmVyLlxuICAgICAqXG4gICAgICogUmV0dXJucyBlaXRoZXIgdGhlIGJ1bmRsZWQgZWxlbWVudCwgb3IgbnVsbCBpZiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBvZlxuICAgICAqIHRoZSBzdHJlYW0uXG4gICAgICovICAgIGFzeW5jIE5jKCkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgdGhpcy5rYygpO1xuICAgICAgICBpZiAobnVsbCA9PT0gdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnhjLmRlY29kZSh0KSwgbiA9IE51bWJlcihlKTtcbiAgICAgICAgaXNOYU4obikgJiYgdGhpcy5NYyhgbGVuZ3RoIHN0cmluZyAoJHtlfSkgaXMgbm90IHZhbGlkIG51bWJlcmApO1xuICAgICAgICBjb25zdCBzID0gYXdhaXQgdGhpcy4kYyhuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBrYyhKU09OLnBhcnNlKHMpLCB0Lmxlbmd0aCArIG4pO1xuICAgIH1cbiAgICAvKiogRmlyc3QgaW5kZXggb2YgJ3snIGZyb20gdGhlIHVuZGVybHlpbmcgYnVmZmVyLiAqLyAgICBPYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmZpbmRJbmRleCgodCA9PiB0ID09PSBcIntcIi5jaGFyQ29kZUF0KDApKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgaW50ZXJuYWwgYnVmZmVyLCB1bnRpbCB0aGUgZmlyc3QgJ3snLCBhbmRcbiAgICAgKiByZXR1cm4gdGhlIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBJZiByZWFjaGVkIGVuZCBvZiB0aGUgc3RyZWFtLCByZXR1cm5zIGEgbnVsbC5cbiAgICAgKi8gICAgYXN5bmMga2MoKSB7XG4gICAgICAgIGZvciAoO3RoaXMuT2MoKSA8IDA7ICkge1xuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMuRmMoKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnJva2Ugb3V0IG9mIHRoZSBsb29wIGJlY2F1c2UgdW5kZXJseWluZyBzdHJlYW0gaXMgY2xvc2VkLCBhbmQgdGhlcmVcbiAgICAgICAgLy8gaGFwcGVucyB0byBiZSBubyBtb3JlIGRhdGEgdG8gcHJvY2Vzcy5cbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuT2MoKTtcbiAgICAgICAgLy8gQnJva2Ugb3V0IG9mIHRoZSBsb29wIGJlY2F1c2UgdW5kZXJseWluZyBzdHJlYW0gaXMgY2xvc2VkLCBidXQgc3RpbGxcbiAgICAgICAgLy8gY2Fubm90IGZpbmQgYW4gb3BlbiBicmFja2V0LlxuICAgICAgICAgICAgICAgIHQgPCAwICYmIHRoaXMuTWMoXCJSZWFjaGVkIHRoZSBlbmQgb2YgYnVuZGxlIHdoZW4gYSBsZW5ndGggc3RyaW5nIGlzIGV4cGVjdGVkLlwiKTtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuYnVmZmVyLnNsaWNlKDAsIHQpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGludGVybmFsIGJ1ZmZlciB0byBkcm9wIHRoZSByZWFkIGxlbmd0aC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5zbGljZSh0KSwgZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgZnJvbSBhIHNwZWNpZmllZCBwb3NpdGlvbiBmcm9tIHRoZSBpbnRlcm5hbCBidWZmZXIsIGZvciBhIHNwZWNpZmllZFxuICAgICAqIG51bWJlciBvZiBieXRlcywgcHVsbGluZyBtb3JlIGRhdGEgZnJvbSB0aGUgdW5kZXJseWluZyBzdHJlYW0gaWYgbmVlZGVkLlxuICAgICAqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBkZWNvZGVkIGZyb20gdGhlIHJlYWQgYnl0ZXMuXG4gICAgICovICAgIGFzeW5jICRjKHQpIHtcbiAgICAgICAgZm9yICg7dGhpcy5idWZmZXIubGVuZ3RoIDwgdDsgKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLkZjKCkgJiYgdGhpcy5NYyhcIlJlYWNoZWQgdGhlIGVuZCBvZiBidW5kbGUgd2hlbiBtb3JlIGlzIGV4cGVjdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlID0gdGhpcy54Yy5kZWNvZGUodGhpcy5idWZmZXIuc2xpY2UoMCwgdCkpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGludGVybmFsIGJ1ZmZlciB0byBkcm9wIHRoZSByZWFkIGpzb24gc3RyaW5nLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKHQpLCBlO1xuICAgIH1cbiAgICBNYyh0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgdGhyb3cgdGhpcy5DYy5jYW5jZWwoKSwgbmV3IEVycm9yKGBJbnZhbGlkIGJ1bmRsZSBmb3JtYXQ6ICR7dH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVsbHMgbW9yZSBkYXRhIGZyb20gdW5kZXJseWluZyBzdHJlYW0gdG8gaW50ZXJuYWwgYnVmZmVyLlxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgc3RyZWFtIGlzIGZpbmlzaGVkLlxuICAgICAqLyAgICBhc3luYyBGYygpIHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IHRoaXMuQ2MucmVhZCgpO1xuICAgICAgICBpZiAoIXQuZG9uZSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyLmxlbmd0aCArIHQudmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgIGUuc2V0KHRoaXMuYnVmZmVyKSwgZS5zZXQodC52YWx1ZSwgdGhpcy5idWZmZXIubGVuZ3RoKSwgdGhpcy5idWZmZXIgPSBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0LmRvbmU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbnRlcm5hbCB0cmFuc2FjdGlvbiBvYmplY3QgcmVzcG9uc2libGUgZm9yIGFjY3VtdWxhdGluZyB0aGUgbXV0YXRpb25zIHRvXG4gKiBwZXJmb3JtIGFuZCB0aGUgYmFzZSB2ZXJzaW9ucyBmb3IgYW55IGRvY3VtZW50cyByZWFkLlxuICovXG5jbGFzcyBEYSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmRhdGFzdG9yZSA9IHQsIFxuICAgICAgICAvLyBUaGUgdmVyc2lvbiBvZiBlYWNoIGRvY3VtZW50IHRoYXQgd2FzIHJlYWQgZHVyaW5nIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgIHRoaXMucmVhZFZlcnNpb25zID0gbmV3IE1hcCwgdGhpcy5tdXRhdGlvbnMgPSBbXSwgdGhpcy5jb21taXR0ZWQgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRlZmVycmVkIHVzYWdlIGVycm9yIHRoYXQgb2NjdXJyZWQgcHJldmlvdXNseSBpbiB0aGlzIHRyYW5zYWN0aW9uIHRoYXRcbiAgICAgICAgICogd2lsbCBjYXVzZSB0aGUgdHJhbnNhY3Rpb24gdG8gZmFpbCBvbmNlIGl0IGFjdHVhbGx5IGNvbW1pdHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RXcml0ZUVycm9yID0gbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgb2YgZG9jdW1lbnRzIHRoYXQgaGF2ZSBiZWVuIHdyaXR0ZW4gaW4gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaGVuIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZSB3cml0ZSB0byB0aGUgc2FtZSBrZXkgaW4gYSB0cmFuc2FjdGlvbiwgYW55XG4gICAgICAgICAqIHdyaXRlcyBhZnRlciB0aGUgZmlyc3QgYXJlIGhhbmRsZWQgZGlmZmVyZW50bHkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndyaXR0ZW5Eb2NzID0gbmV3IFNldDtcbiAgICB9XG4gICAgYXN5bmMgbG9va3VwKHQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCksIHRoaXMubXV0YXRpb25zLmxlbmd0aCA+IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJGaXJlc3RvcmUgdHJhbnNhY3Rpb25zIHJlcXVpcmUgYWxsIHJlYWRzIHRvIGJlIGV4ZWN1dGVkIGJlZm9yZSBhbGwgd3JpdGVzLlwiKTtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IGFzeW5jIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBMKHQpLCBzID0gTGkobi5zZXJpYWxpemVyKSArIFwiL2RvY3VtZW50c1wiLCBpID0ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50czogZS5tYXAoKHQgPT4gJGkobi5zZXJpYWxpemVyLCB0KSkpXG4gICAgICAgICAgICB9LCByID0gYXdhaXQgbi52byhcIkJhdGNoR2V0RG9jdW1lbnRzXCIsIHMsIGksIGUubGVuZ3RoKSwgbyA9IG5ldyBNYXA7XG4gICAgICAgICAgICByLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBHaShuLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICAgICAgICAgIG8uc2V0KGUua2V5LnRvU3RyaW5nKCksIGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgdSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG8uZ2V0KHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgRighIWUpLCB1LnB1c2goZSk7XG4gICAgICAgICAgICB9KSksIHU7XG4gICAgICAgIH0odGhpcy5kYXRhc3RvcmUsIHQpO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKCh0ID0+IHRoaXMucmVjb3JkVmVyc2lvbih0KSkpLCBlO1xuICAgIH1cbiAgICBzZXQodCwgZSkge1xuICAgICAgICB0aGlzLndyaXRlKGUudG9NdXRhdGlvbih0LCB0aGlzLnByZWNvbmRpdGlvbih0KSkpLCB0aGlzLndyaXR0ZW5Eb2NzLmFkZCh0LnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICB1cGRhdGUodCwgZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53cml0ZShlLnRvTXV0YXRpb24odCwgdGhpcy5wcmVjb25kaXRpb25Gb3JVcGRhdGUodCkpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0V3JpdGVFcnJvciA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0dGVuRG9jcy5hZGQodC50b1N0cmluZygpKTtcbiAgICB9XG4gICAgZGVsZXRlKHQpIHtcbiAgICAgICAgdGhpcy53cml0ZShuZXcgWXModCwgdGhpcy5wcmVjb25kaXRpb24odCkpKSwgdGhpcy53cml0dGVuRG9jcy5hZGQodC50b1N0cmluZygpKTtcbiAgICB9XG4gICAgYXN5bmMgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5lbnN1cmVDb21taXROb3RDYWxsZWQoKSwgdGhpcy5sYXN0V3JpdGVFcnJvcikgdGhyb3cgdGhpcy5sYXN0V3JpdGVFcnJvcjtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMucmVhZFZlcnNpb25zO1xuICAgICAgICAvLyBGb3IgZWFjaCBtdXRhdGlvbiwgbm90ZSB0aGF0IHRoZSBkb2Mgd2FzIHdyaXR0ZW4uXG4gICAgICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0LmRlbGV0ZShlLmtleS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpLCBcbiAgICAgICAgLy8gRm9yIGVhY2ggZG9jdW1lbnQgdGhhdCB3YXMgcmVhZCBidXQgbm90IHdyaXR0ZW4gdG8sIHdlIHdhbnQgdG8gcGVyZm9ybVxuICAgICAgICAvLyBhIGB2ZXJpZnlgIG9wZXJhdGlvbi5cbiAgICAgICAgdC5mb3JFYWNoKCgodCwgZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IGh0LmZyb21QYXRoKGUpO1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnMucHVzaChuZXcgWHMobiwgdGhpcy5wcmVjb25kaXRpb24obikpKTtcbiAgICAgICAgfSkpLCBhd2FpdCBhc3luYyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gTCh0KSwgcyA9IExpKG4uc2VyaWFsaXplcikgKyBcIi9kb2N1bWVudHNcIiwgaSA9IHtcbiAgICAgICAgICAgICAgICB3cml0ZXM6IGUubWFwKCh0ID0+IGppKG4uc2VyaWFsaXplciwgdCkpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG4uSW8oXCJDb21taXRcIiwgcywgaSk7XG4gICAgICAgIH0odGhpcy5kYXRhc3RvcmUsIHRoaXMubXV0YXRpb25zKSwgdGhpcy5jb21taXR0ZWQgPSAhMDtcbiAgICB9XG4gICAgcmVjb3JkVmVyc2lvbih0KSB7XG4gICAgICAgIGxldCBlO1xuICAgICAgICBpZiAodC5pc0ZvdW5kRG9jdW1lbnQoKSkgZSA9IHQudmVyc2lvbjsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXQuaXNOb0RvY3VtZW50KCkpIHRocm93IE8oKTtcbiAgICAgICAgICAgIC8vIFJlcHJlc2VudCBhIGRlbGV0ZWQgZG9jIHVzaW5nIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgICAgIGUgPSBydC5taW4oKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KHQua2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgaWYgKCFlLmlzRXF1YWwobikpIFxuICAgICAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGZhaWwgbm8gbWF0dGVyIHdoYXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVShxLkFCT1JURUQsIFwiRG9jdW1lbnQgdmVyc2lvbiBjaGFuZ2VkIGJldHdlZW4gdHdvIHJlYWRzLlwiKTtcbiAgICAgICAgfSBlbHNlIHRoaXMucmVhZFZlcnNpb25zLnNldCh0LmtleS50b1N0cmluZygpLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGlzIGRvY3VtZW50IHdoZW4gaXQgd2FzIHJlYWQgaW4gdGhpcyB0cmFuc2FjdGlvbixcbiAgICAgKiBhcyBhIHByZWNvbmRpdGlvbiwgb3Igbm8gcHJlY29uZGl0aW9uIGlmIGl0IHdhcyBub3QgcmVhZC5cbiAgICAgKi8gICAgcHJlY29uZGl0aW9uKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMucmVhZFZlcnNpb25zLmdldCh0LnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gIXRoaXMud3JpdHRlbkRvY3MuaGFzKHQudG9TdHJpbmcoKSkgJiYgZSA/IGUuaXNFcXVhbChydC5taW4oKSkgPyBGcy5leGlzdHMoITEpIDogRnMudXBkYXRlVGltZShlKSA6IEZzLm5vbmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJlY29uZGl0aW9uIGZvciBhIGRvY3VtZW50IGlmIHRoZSBvcGVyYXRpb24gaXMgYW4gdXBkYXRlLlxuICAgICAqLyAgICBwcmVjb25kaXRpb25Gb3JVcGRhdGUodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KHQudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGEgZG9jdW1lbnQgaXMgd3JpdHRlbiwgd2Ugd2FudCB0byB0YWtlIGludG8gYWNjb3VudCB0aGVcbiAgICAgICAgLy8gcmVhZCB0aW1lIGFuZCBleGlzdGVuY2VcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud3JpdHRlbkRvY3MuaGFzKHQudG9TdHJpbmcoKSkgJiYgZSkge1xuICAgICAgICAgICAgaWYgKGUuaXNFcXVhbChydC5taW4oKSkpIFxuICAgICAgICAgICAgLy8gVGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QsIHNvIGZhaWwgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgLy8gVGhpcyBoYXMgdG8gYmUgdmFsaWRhdGVkIGxvY2FsbHkgYmVjYXVzZSB5b3UgY2FuJ3Qgc2VuZCBhXG4gICAgICAgICAgICAvLyBwcmVjb25kaXRpb24gdGhhdCBhIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICAgICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIGJhY2tlbmQgd3JpdGUgdG8gYmUgYW4gaW5zZXJ0LiBUaGlzIGlzIHRoZSByZXZlcnNlXG4gICAgICAgICAgICAvLyBvZiB3aGF0IHdlIHdhbnQsIHNpbmNlIHdlIHdhbnQgdG8gYXNzZXJ0IHRoYXQgdGhlIGRvY3VtZW50IGRvZXNuJ3RcbiAgICAgICAgICAgIC8vIGV4aXN0IGJ1dCB0aGVuIHNlbmQgdGhlIHVwZGF0ZSBhbmQgaGF2ZSBpdCBmYWlsLiBTaW5jZSB3ZSBjYW4ndFxuICAgICAgICAgICAgLy8gZXhwcmVzcyB0aGF0IHRvIHRoZSBiYWNrZW5kLCB3ZSBoYXZlIHRvIHZhbGlkYXRlIGxvY2FsbHkuXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGNhbiBjaGFuZ2Ugb25jZSB3ZSBjYW4gc2VuZCBzZXBhcmF0ZSB2ZXJpZnkgd3JpdGVzIGluIHRoZVxuICAgICAgICAgICAgLy8gdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIFwiQ2FuJ3QgdXBkYXRlIGEgZG9jdW1lbnQgdGhhdCBkb2Vzbid0IGV4aXN0LlwiKTtcbiAgICAgICAgICAgIC8vIERvY3VtZW50IGV4aXN0cywgYmFzZSBwcmVjb25kaXRpb24gb24gZG9jdW1lbnQgdXBkYXRlIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnMudXBkYXRlVGltZShlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2N1bWVudCB3YXMgbm90IHJlYWQsIHNvIHdlIGp1c3QgdXNlIHRoZSBwcmVjb25kaXRpb25zIGZvciBhIGJsaW5kXG4gICAgICAgIC8vIHVwZGF0ZS5cbiAgICAgICAgcmV0dXJuIEZzLmV4aXN0cyghMCk7XG4gICAgfVxuICAgIHdyaXRlKHQpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVDb21taXROb3RDYWxsZWQoKSwgdGhpcy5tdXRhdGlvbnMucHVzaCh0KTtcbiAgICB9XG4gICAgZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCkge31cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVHJhbnNhY3Rpb25SdW5uZXIgZW5jYXBzdWxhdGVzIHRoZSBsb2dpYyBuZWVkZWQgdG8gcnVuIGFuZCByZXRyeSB0cmFuc2FjdGlvbnNcbiAqIHdpdGggYmFja29mZi5cbiAqLyBjbGFzcyBDYSB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSB0LCB0aGlzLmRhdGFzdG9yZSA9IGUsIHRoaXMub3B0aW9ucyA9IG4sIHRoaXMudXBkYXRlRnVuY3Rpb24gPSBzLCBcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IGksIHRoaXMuQmMgPSBuLm1heEF0dGVtcHRzLCB0aGlzLnFvID0gbmV3IEJ1KHRoaXMuYXN5bmNRdWV1ZSwgXCJ0cmFuc2FjdGlvbl9yZXRyeVwiIC8qIFRpbWVySWQuVHJhbnNhY3Rpb25SZXRyeSAqLyk7XG4gICAgfVxuICAgIC8qKiBSdW5zIHRoZSB0cmFuc2FjdGlvbiBhbmQgc2V0cyB0aGUgcmVzdWx0IG9uIGRlZmVycmVkLiAqLyAgICBydW4oKSB7XG4gICAgICAgIHRoaXMuQmMgLT0gMSwgdGhpcy5MYygpO1xuICAgIH1cbiAgICBMYygpIHtcbiAgICAgICAgdGhpcy5xby5ObygoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBEYSh0aGlzLmRhdGFzdG9yZSksIGUgPSB0aGlzLnFjKHQpO1xuICAgICAgICAgICAgZSAmJiBlLnRoZW4oKGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiB0LmNvbW1pdCgpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5yZXNvbHZlKGUpO1xuICAgICAgICAgICAgICAgIH0pKS5jYXRjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVWModCk7XG4gICAgICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgICAgICB9KSkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVWModCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcWModCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMudXBkYXRlRnVuY3Rpb24odCk7XG4gICAgICAgICAgICByZXR1cm4gIUZ0KGUpICYmIGUuY2F0Y2ggJiYgZS50aGVuID8gZSA6ICh0aGlzLmRlZmVycmVkLnJlamVjdChFcnJvcihcIlRyYW5zYWN0aW9uIGNhbGxiYWNrIG11c3QgcmV0dXJuIGEgUHJvbWlzZVwiKSksIFxuICAgICAgICAgICAgbnVsbCk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCByZXRyeSBlcnJvcnMgdGhyb3duIGJ5IHVzZXIgcHJvdmlkZWQgdXBkYXRlRnVuY3Rpb24uXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZlcnJlZC5yZWplY3QodCksIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVWModCkge1xuICAgICAgICB0aGlzLkJjID4gMCAmJiB0aGlzLktjKHQpID8gKHRoaXMuQmMgLT0gMSwgdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKCgpID0+ICh0aGlzLkxjKCksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKSkgOiB0aGlzLmRlZmVycmVkLnJlamVjdCh0KTtcbiAgICB9XG4gICAgS2ModCkge1xuICAgICAgICBpZiAoXCJGaXJlYmFzZUVycm9yXCIgPT09IHQubmFtZSkge1xuICAgICAgICAgICAgLy8gSW4gdHJhbnNhY3Rpb25zLCB0aGUgYmFja2VuZCB3aWxsIGZhaWwgb3V0ZGF0ZWQgcmVhZHMgd2l0aCBGQUlMRURfUFJFQ09ORElUSU9OIGFuZFxuICAgICAgICAgICAgLy8gbm9uLW1hdGNoaW5nIGRvY3VtZW50IHZlcnNpb25zIHdpdGggQUJPUlRFRC4gVGhlc2UgZXJyb3JzIHNob3VsZCBiZSByZXRyaWVkLlxuICAgICAgICAgICAgY29uc3QgZSA9IHQuY29kZTtcbiAgICAgICAgICAgIHJldHVybiBcImFib3J0ZWRcIiA9PT0gZSB8fCBcImZhaWxlZC1wcmVjb25kaXRpb25cIiA9PT0gZSB8fCBcImFscmVhZHktZXhpc3RzXCIgPT09IGUgfHwgIW9pKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEZpcmVzdG9yZUNsaWVudCBpcyBhIHRvcC1sZXZlbCBjbGFzcyB0aGF0IGNvbnN0cnVjdHMgYW5kIG93bnMgYWxsIG9mIHRoZSAvL1xuICogcGllY2VzIG9mIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSAvL1xuICogYXN5bmMgcXVldWUgdGhhdCBpcyBzaGFyZWQgYnkgYWxsIG9mIHRoZSBvdGhlciBjb21wb25lbnRzIGluIHRoZSBzeXN0ZW0uIC8vXG4gKi9cbmNsYXNzIHhhIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBcbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXMgcXVldWUgcmVzcG9uc2libGUgZm9yIGFsbCBvZiBvdXIgaW50ZXJuYWwgcHJvY2Vzc2luZy4gV2hlblxuICAgICAqIHdlIGdldCBpbmNvbWluZyB3b3JrIGZyb20gdGhlIHVzZXIgKHZpYSBwdWJsaWMgQVBJKSBvciB0aGUgbmV0d29ya1xuICAgICAqIChpbmNvbWluZyBHUlBDIG1lc3NhZ2VzKSwgd2Ugc2hvdWxkIGFsd2F5cyBzY2hlZHVsZSBvbnRvIHRoaXMgcXVldWUuXG4gICAgICogVGhpcyBlbnN1cmVzIGFsbCBvZiBvdXIgd29yayBpcyBwcm9wZXJseSBzZXJpYWxpemVkIChlLmcuIHdlIGRvbid0XG4gICAgICogc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBvcGVyYXRpb24gd2hpbGUgdGhlIHByZXZpb3VzIG9uZSBpcyB3YWl0aW5nIGZvclxuICAgICAqIGFuIGFzeW5jIEkvTyB0byBjb21wbGV0ZSkuXG4gICAgICovXG4gICAgbiwgcykge1xuICAgICAgICB0aGlzLmF1dGhDcmVkZW50aWFscyA9IHQsIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscyA9IGUsIHRoaXMuYXN5bmNRdWV1ZSA9IG4sIHRoaXMuZGF0YWJhc2VJbmZvID0gcywgXG4gICAgICAgIHRoaXMudXNlciA9IFYuVU5BVVRIRU5USUNBVEVELCB0aGlzLmNsaWVudElkID0gdHQuQSgpLCB0aGlzLmF1dGhDcmVkZW50aWFsTGlzdGVuZXIgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSwgXG4gICAgICAgIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSwgdGhpcy5hdXRoQ3JlZGVudGlhbHMuc3RhcnQobiwgKGFzeW5jIHQgPT4ge1xuICAgICAgICAgICAgTihcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlJlY2VpdmVkIHVzZXI9XCIsIHQudWlkKSwgYXdhaXQgdGhpcy5hdXRoQ3JlZGVudGlhbExpc3RlbmVyKHQpLCBcbiAgICAgICAgICAgIHRoaXMudXNlciA9IHQ7XG4gICAgICAgIH0pKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLnN0YXJ0KG4sICh0ID0+IChOKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiUmVjZWl2ZWQgbmV3IGFwcCBjaGVjayB0b2tlbj1cIiwgdCksIFxuICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbExpc3RlbmVyKHQsIHRoaXMudXNlcikpKSk7XG4gICAgfVxuICAgIGFzeW5jIGdldENvbmZpZ3VyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhc3luY1F1ZXVlOiB0aGlzLmFzeW5jUXVldWUsXG4gICAgICAgICAgICBkYXRhYmFzZUluZm86IHRoaXMuZGF0YWJhc2VJbmZvLFxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICBhdXRoQ3JlZGVudGlhbHM6IHRoaXMuYXV0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgYXBwQ2hlY2tDcmVkZW50aWFsczogdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLFxuICAgICAgICAgICAgaW5pdGlhbFVzZXI6IHRoaXMudXNlcixcbiAgICAgICAgICAgIG1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zOiAxMDBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKHQpIHtcbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbExpc3RlbmVyID0gdDtcbiAgICB9XG4gICAgc2V0QXBwQ2hlY2tUb2tlbkNoYW5nZUxpc3RlbmVyKHQpIHtcbiAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxMaXN0ZW5lciA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGF0IHRoZSBjbGllbnQgaGFzIG5vdCBiZWVuIHRlcm1pbmF0ZWQuIEVuc3VyZXMgdGhhdCBvdGhlciBtZXRob2RzIG9uIC8vXG4gICAgICogdGhpcyBjbGFzcyBjYW5ub3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBjbGllbnQgaXMgdGVybWluYXRlZC4gLy9cbiAgICAgKi8gICAgdmVyaWZ5Tm90VGVybWluYXRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXN5bmNRdWV1ZS5pc1NodXR0aW5nRG93bikgdGhyb3cgbmV3IFUocS5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlRoZSBjbGllbnQgaGFzIGFscmVhZHkgYmVlbiB0ZXJtaW5hdGVkLlwiKTtcbiAgICB9XG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUuZW50ZXJSZXN0cmljdGVkTW9kZSgpO1xuICAgICAgICBjb25zdCB0ID0gbmV3IEs7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25saW5lQ29tcG9uZW50cyAmJiBhd2FpdCB0aGlzLl9vbmxpbmVDb21wb25lbnRzLnRlcm1pbmF0ZSgpLCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50cyAmJiBhd2FpdCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50cy50ZXJtaW5hdGUoKSwgXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNyZWRlbnRpYWxzIHByb3ZpZGVyIG11c3QgYmUgdGVybWluYXRlZCBhZnRlciBzaHV0dGluZyBkb3duIHRoZVxuICAgICAgICAgICAgICAgIC8vIFJlbW90ZVN0b3JlIGFzIGl0IHdpbGwgcHJldmVudCB0aGUgUmVtb3RlU3RvcmUgZnJvbSByZXRyaWV2aW5nIGF1dGhcbiAgICAgICAgICAgICAgICAvLyB0b2tlbnMuXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHMuc2h1dGRvd24oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLnNodXRkb3duKCksIHQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBFYyhlLCBcIkZhaWxlZCB0byBzaHV0ZG93biBwZXJzaXN0ZW5jZVwiKTtcbiAgICAgICAgICAgICAgICB0LnJlamVjdChuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCB0LnByb21pc2U7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBOYSh0LCBlKSB7XG4gICAgdC5hc3luY1F1ZXVlLnZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MoKSwgTihcIkZpcmVzdG9yZUNsaWVudFwiLCBcIkluaXRpYWxpemluZyBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJcIik7XG4gICAgY29uc3QgbiA9IGF3YWl0IHQuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgIGF3YWl0IGUuaW5pdGlhbGl6ZShuKTtcbiAgICBsZXQgcyA9IG4uaW5pdGlhbFVzZXI7XG4gICAgdC5zZXRDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIoKGFzeW5jIHQgPT4ge1xuICAgICAgICBzLmlzRXF1YWwodCkgfHwgKGF3YWl0IGl1KGUubG9jYWxTdG9yZSwgdCksIHMgPSB0KTtcbiAgICB9KSksIFxuICAgIC8vIFdoZW4gYSB1c2VyIGNhbGxzIGNsZWFyUGVyc2lzdGVuY2UoKSBpbiBvbmUgY2xpZW50LCBhbGwgb3RoZXIgY2xpZW50c1xuICAgIC8vIG5lZWQgdG8gYmUgdGVybWluYXRlZCB0byBhbGxvdyB0aGUgZGVsZXRlIHRvIHN1Y2NlZWQuXG4gICAgZS5wZXJzaXN0ZW5jZS5zZXREYXRhYmFzZURlbGV0ZWRMaXN0ZW5lcigoKCkgPT4gdC50ZXJtaW5hdGUoKSkpLCB0Ll9vZmZsaW5lQ29tcG9uZW50cyA9IGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGthKHQsIGUpIHtcbiAgICB0LmFzeW5jUXVldWUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcygpO1xuICAgIGNvbnN0IG4gPSBhd2FpdCAkYSh0KTtcbiAgICBOKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiSW5pdGlhbGl6aW5nIE9ubGluZUNvbXBvbmVudFByb3ZpZGVyXCIpO1xuICAgIGNvbnN0IHMgPSBhd2FpdCB0LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICBhd2FpdCBlLmluaXRpYWxpemUobiwgcyksIFxuICAgIC8vIFRoZSBDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIgb2YgdGhlIG9ubGluZSBjb21wb25lbnQgcHJvdmlkZXIgdGFrZXNcbiAgICAvLyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9mZmxpbmUgY29tcG9uZW50IHByb3ZpZGVyLlxuICAgIHQuc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKCh0ID0+IGdjKGUucmVtb3RlU3RvcmUsIHQpKSksIHQuc2V0QXBwQ2hlY2tUb2tlbkNoYW5nZUxpc3RlbmVyKCgodCwgbikgPT4gZ2MoZS5yZW1vdGVTdG9yZSwgbikpKSwgXG4gICAgdC5fb25saW5lQ29tcG9uZW50cyA9IGU7XG59XG5cbi8qKlxuICogRGVjaWRlcyB3aGV0aGVyIHRoZSBwcm92aWRlZCBlcnJvciBhbGxvd3MgdXMgdG8gZ3JhY2VmdWxseSBkaXNhYmxlXG4gKiBwZXJzaXN0ZW5jZSAoYXMgb3Bwb3NlZCB0byBjcmFzaGluZyB0aGUgY2xpZW50KS5cbiAqLyBmdW5jdGlvbiBNYSh0KSB7XG4gICAgcmV0dXJuIFwiRmlyZWJhc2VFcnJvclwiID09PSB0Lm5hbWUgPyB0LmNvZGUgPT09IHEuRkFJTEVEX1BSRUNPTkRJVElPTiB8fCB0LmNvZGUgPT09IHEuVU5JTVBMRU1FTlRFRCA6ICEoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgRE9NRXhjZXB0aW9uICYmIHQgaW5zdGFuY2VvZiBET01FeGNlcHRpb24pIHx8IChcbiAgICAvLyBXaGVuIHRoZSBicm93c2VyIGlzIG91dCBvZiBxdW90YSB3ZSBjb3VsZCBnZXQgZWl0aGVyIHF1b3RhIGV4Y2VlZGVkXG4gICAgLy8gb3IgYW4gYWJvcnRlZCBlcnJvciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZXJyb3IgaGFwcGVuZWQgZHVyaW5nXG4gICAgLy8gc2NoZW1hIG1pZ3JhdGlvbi5cbiAgICAyMiA9PT0gdC5jb2RlIHx8IDIwID09PSB0LmNvZGUgfHwgXG4gICAgLy8gRmlyZWZveCBQcml2YXRlIEJyb3dzaW5nIG1vZGUgZGlzYWJsZXMgSW5kZXhlZERiIGFuZCByZXR1cm5zXG4gICAgLy8gSU5WQUxJRF9TVEFURSBmb3IgYW55IHVzYWdlLlxuICAgIDExID09PSB0LmNvZGUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiAkYSh0KSB7XG4gICAgaWYgKCF0Ll9vZmZsaW5lQ29tcG9uZW50cykgaWYgKHQuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIpIHtcbiAgICAgICAgTihcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIHVzZXIgcHJvdmlkZWQgT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyXCIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgTmEodCwgdC5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlci5fb2ZmbGluZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlO1xuICAgICAgICAgICAgaWYgKCFNYShuKSkgdGhyb3cgbjtcbiAgICAgICAgICAgIE0oXCJFcnJvciB1c2luZyB1c2VyIHByb3ZpZGVkIGNhY2hlLiBGYWxsaW5nIGJhY2sgdG8gbWVtb3J5IGNhY2hlOiBcIiArIG4pLCBhd2FpdCBOYSh0LCBuZXcgRWEpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIE4oXCJGaXJlc3RvcmVDbGllbnRcIiwgXCJVc2luZyBkZWZhdWx0IE9mZmxpbmVDb21wb25lbnRQcm92aWRlclwiKSwgYXdhaXQgTmEodCwgbmV3IEVhKTtcbiAgICByZXR1cm4gdC5fb2ZmbGluZUNvbXBvbmVudHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIE9hKHQpIHtcbiAgICByZXR1cm4gdC5fb25saW5lQ29tcG9uZW50cyB8fCAodC5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciA/IChOKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiVXNpbmcgdXNlciBwcm92aWRlZCBPbmxpbmVDb21wb25lbnRQcm92aWRlclwiKSwgXG4gICAgYXdhaXQga2EodCwgdC5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlci5fb25saW5lKSkgOiAoTihcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIGRlZmF1bHQgT25saW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgIGF3YWl0IGthKHQsIG5ldyBQYSkpKSwgdC5fb25saW5lQ29tcG9uZW50cztcbn1cblxuZnVuY3Rpb24gRmEodCkge1xuICAgIHJldHVybiAkYSh0KS50aGVuKCh0ID0+IHQucGVyc2lzdGVuY2UpKTtcbn1cblxuZnVuY3Rpb24gQmEodCkge1xuICAgIHJldHVybiAkYSh0KS50aGVuKCh0ID0+IHQubG9jYWxTdG9yZSkpO1xufVxuXG5mdW5jdGlvbiBMYSh0KSB7XG4gICAgcmV0dXJuIE9hKHQpLnRoZW4oKHQgPT4gdC5yZW1vdGVTdG9yZSkpO1xufVxuXG5mdW5jdGlvbiBxYSh0KSB7XG4gICAgcmV0dXJuIE9hKHQpLnRoZW4oKHQgPT4gdC5zeW5jRW5naW5lKSk7XG59XG5cbmZ1bmN0aW9uIFVhKHQpIHtcbiAgICByZXR1cm4gT2EodCkudGhlbigodCA9PiB0LmRhdGFzdG9yZSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBLYSh0KSB7XG4gICAgY29uc3QgZSA9IGF3YWl0IE9hKHQpLCBuID0gZS5ldmVudE1hbmFnZXI7XG4gICAgcmV0dXJuIG4ub25MaXN0ZW4gPSBHYy5iaW5kKG51bGwsIGUuc3luY0VuZ2luZSksIG4ub25Vbmxpc3RlbiA9IGpjLmJpbmQobnVsbCwgZS5zeW5jRW5naW5lKSwgXG4gICAgbjtcbn1cblxuLyoqIEVuYWJsZXMgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiBhbmQgcmUtZW5xdWV1ZXMgYWxsIHBlbmRpbmcgb3BlcmF0aW9ucy4gKi8gZnVuY3Rpb24gR2EodCkge1xuICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgRmEodCksIG4gPSBhd2FpdCBMYSh0KTtcbiAgICAgICAgcmV0dXJuIGUuc2V0TmV0d29ya0VuYWJsZWQoITApLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gTCh0KTtcbiAgICAgICAgICAgIHJldHVybiBlLnZ1LmRlbGV0ZSgwIC8qIE9mZmxpbmVDYXVzZS5Vc2VyRGlzYWJsZWQgKi8pLCB6dShlKTtcbiAgICAgICAgfShuKTtcbiAgICB9KSk7XG59XG5cbi8qKiBEaXNhYmxlcyB0aGUgbmV0d29yayBjb25uZWN0aW9uLiBQZW5kaW5nIG9wZXJhdGlvbnMgd2lsbCBub3QgY29tcGxldGUuICovIGZ1bmN0aW9uIFFhKHQpIHtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IEZhKHQpLCBuID0gYXdhaXQgTGEodCk7XG4gICAgICAgIHJldHVybiBlLnNldE5ldHdvcmtFbmFibGVkKCExKSwgYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IEwodCk7XG4gICAgICAgICAgICBlLnZ1LmFkZCgwIC8qIE9mZmxpbmVDYXVzZS5Vc2VyRGlzYWJsZWQgKi8pLCBhd2FpdCBXdShlKSwgXG4gICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUgc28gZ2V0KClzIHJldHVybiBmcm9tIGNhY2hlLCBldGMuXG4gICAgICAgICAgICBlLmJ1LnNldChcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovKTtcbiAgICAgICAgfShuKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFsbCB3cml0ZXMgdGhhdCB3ZXJlIHBlbmRpbmcgYXQgdGhlIHRpbWVcbiAqIHRoaXMgbWV0aG9kIHdhcyBjYWxsZWQgcmVjZWl2ZWQgc2VydmVyIGFja25vd2xlZGdlbWVudC4gQW4gYWNrbm93bGVkZ2VtZW50XG4gKiBjYW4gYmUgZWl0aGVyIGFjY2VwdGFuY2Ugb3IgcmVqZWN0aW9uLlxuICovIGZ1bmN0aW9uIGphKHQsIGUpIHtcbiAgICBjb25zdCBuID0gbmV3IEs7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBhc3luYyBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwicmVhZCBkb2N1bWVudFwiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0RG9jdW1lbnQodCwgZSkpKTtcbiAgICAgICAgICAgIH0odCwgZSk7XG4gICAgICAgICAgICBzLmlzRm91bmREb2N1bWVudCgpID8gbi5yZXNvbHZlKHMpIDogcy5pc05vRG9jdW1lbnQoKSA/IG4ucmVzb2x2ZShudWxsKSA6IG4ucmVqZWN0KG5ldyBVKHEuVU5BVkFJTEFCTEUsIFwiRmFpbGVkIHRvIGdldCBkb2N1bWVudCBmcm9tIGNhY2hlLiAoSG93ZXZlciwgdGhpcyBkb2N1bWVudCBtYXkgZXhpc3Qgb24gdGhlIHNlcnZlci4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyAnc291cmNlJyBpbiB0aGUgR2V0T3B0aW9ucyB0byBhdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBkb2N1bWVudCBmcm9tIHRoZSBzZXJ2ZXIuKVwiKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBFYyh0LCBgRmFpbGVkIHRvIGdldCBkb2N1bWVudCAnJHtlfSBmcm9tIGNhY2hlYCk7XG4gICAgICAgICAgICBuLnJlamVjdChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAqIFJldHJpZXZlcyBhIGxhdGVuY3ktY29tcGVuc2F0ZWQgZG9jdW1lbnQgZnJvbSB0aGUgYmFja2VuZCB2aWEgYVxuICogU25hcHNob3RMaXN0ZW5lci5cbiAqLyAoYXdhaXQgQmEodCksIGUsIG4pKSksIG4ucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gemEodCwgZSwgbiA9IHt9KSB7XG4gICAgY29uc3QgcyA9IG5ldyBLO1xuICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gZnVuY3Rpb24odCwgZSwgbiwgcywgaSkge1xuICAgICAgICBjb25zdCByID0gbmV3IFZhKHtcbiAgICAgICAgICAgIG5leHQ6IHIgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBxdWVyeSBmaXJzdCBiZWZvcmUgcGFzc2luZyBldmVudCB0byB1c2VyIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gdXNlciBhY3Rpb25zIGFmZmVjdGluZyB0aGUgbm93IHN0YWxlIHF1ZXJ5LlxuICAgICAgICAgICAgICAgIGUuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gU2ModCwgbykpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gci5kb2NzLmhhcyhuKTtcbiAgICAgICAgICAgICAgICAhdSAmJiByLmZyb21DYWNoZSA/IFxuICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWYgd2UncmUgb25saW5lIGFuZCB0aGUgZG9jdW1lbnQgZG9lc24ndFxuICAgICAgICAgICAgICAgIC8vIGV4aXN0IHRoZW4gd2UgcmVzb2x2ZSB3aXRoIGEgZG9jLmV4aXN0cyBzZXQgdG8gZmFsc2UuIElmXG4gICAgICAgICAgICAgICAgLy8gd2UncmUgb2ZmbGluZSBob3dldmVyLCB3ZSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhpc1xuICAgICAgICAgICAgICAgIC8vIGNhc2UuIFR3byBvcHRpb25zOiAxKSBDYWNoZSB0aGUgbmVnYXRpdmUgcmVzcG9uc2UgZnJvbVxuICAgICAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIgc28gd2UgY2FuIGRlbGl2ZXIgdGhhdCBldmVuIHdoZW4geW91J3JlXG4gICAgICAgICAgICAgICAgLy8gb2ZmbGluZSAyKSBBY3R1YWxseSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhlIG9ubGluZSBjYXNlXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgICAgICAgICAgaS5yZWplY3QobmV3IFUocS5VTkFWQUlMQUJMRSwgXCJGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGJlY2F1c2UgdGhlIGNsaWVudCBpcyBvZmZsaW5lLlwiKSkgOiB1ICYmIHIuZnJvbUNhY2hlICYmIHMgJiYgXCJzZXJ2ZXJcIiA9PT0gcy5zb3VyY2UgPyBpLnJlamVjdChuZXcgVShxLlVOQVZBSUxBQkxFLCAnRmFpbGVkIHRvIGdldCBkb2N1bWVudCBmcm9tIHNlcnZlci4gKEhvd2V2ZXIsIHRoaXMgZG9jdW1lbnQgZG9lcyBleGlzdCBpbiB0aGUgbG9jYWwgY2FjaGUuIFJ1biBhZ2FpbiB3aXRob3V0IHNldHRpbmcgc291cmNlIHRvIFwic2VydmVyXCIgdG8gcmV0cmlldmUgdGhlIGNhY2hlZCBkb2N1bWVudC4pJykpIDogaS5yZXNvbHZlKHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB0ID0+IGkucmVqZWN0KHQpXG4gICAgICAgIH0pLCBvID0gbmV3IE5jKEduKG4ucGF0aCksIHIsIHtcbiAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6ICEwLFxuICAgICAgICAgICAgS3U6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gVmModCwgbyk7XG4gICAgfShhd2FpdCBLYSh0KSwgdC5hc3luY1F1ZXVlLCBlLCBuLCBzKSkpLCBzLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIFdhKHQsIGUpIHtcbiAgICBjb25zdCBuID0gbmV3IEs7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBhc3luYyBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgZnUodCwgZSwgXG4gICAgICAgICAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICEwKSwgaSA9IG5ldyBMYyhlLCBzLmlyKSwgciA9IGkuc2Mocy5kb2N1bWVudHMpLCBvID0gaS5hcHBseUNoYW5nZXMociwgXG4gICAgICAgICAgICAvKiB1cGRhdGVMaW1ib0RvY3VtZW50cz0gKi8gITEpO1xuICAgICAgICAgICAgbi5yZXNvbHZlKG8uc25hcHNob3QpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBjb25zdCBzID0gRWModCwgYEZhaWxlZCB0byBleGVjdXRlIHF1ZXJ5ICcke2V9IGFnYWluc3QgY2FjaGVgKTtcbiAgICAgICAgICAgIG4ucmVqZWN0KHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICogUmV0cmlldmVzIGEgbGF0ZW5jeS1jb21wZW5zYXRlZCBxdWVyeSBzbmFwc2hvdCBmcm9tIHRoZSBiYWNrZW5kIHZpYSBhXG4gKiBTbmFwc2hvdExpc3RlbmVyLlxuICovIChhd2FpdCBCYSh0KSwgZSwgbikpKSwgbi5wcm9taXNlO1xufVxuXG5mdW5jdGlvbiBIYSh0LCBlLCBuID0ge30pIHtcbiAgICBjb25zdCBzID0gbmV3IEs7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBuZXcgVmEoe1xuICAgICAgICAgICAgbmV4dDogbiA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgZS5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiBTYyh0LCBvKSkpLCBuLmZyb21DYWNoZSAmJiBcInNlcnZlclwiID09PSBzLnNvdXJjZSA/IGkucmVqZWN0KG5ldyBVKHEuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50cyBmcm9tIHNlcnZlci4gKEhvd2V2ZXIsIHRoZXNlIGRvY3VtZW50cyBtYXkgZXhpc3QgaW4gdGhlIGxvY2FsIGNhY2hlLiBSdW4gYWdhaW4gd2l0aG91dCBzZXR0aW5nIHNvdXJjZSB0byBcInNlcnZlclwiIHRvIHJldHJpZXZlIHRoZSBjYWNoZWQgZG9jdW1lbnRzLiknKSkgOiBpLnJlc29sdmUobik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHQgPT4gaS5yZWplY3QodClcbiAgICAgICAgfSksIG8gPSBuZXcgTmMobiwgciwge1xuICAgICAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogITAsXG4gICAgICAgICAgICBLdTogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBWYyh0LCBvKTtcbiAgICB9KGF3YWl0IEthKHQpLCB0LmFzeW5jUXVldWUsIGUsIG4sIHMpKSksIHMucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gSmEodCwgZSkge1xuICAgIGNvbnN0IG4gPSBuZXcgVmEoZSk7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIEwodCkua3UuYWRkKGUpLCBcbiAgICAgICAgLy8gSW1tZWRpYXRlbHkgZmlyZSBhbiBpbml0aWFsIGV2ZW50LCBpbmRpY2F0aW5nIGFsbCBleGlzdGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gYXJlIGluLXN5bmMuXG4gICAgICAgIGUubmV4dCgpO1xuICAgIH0oYXdhaXQgS2EodCksIG4pKSksICgpID0+IHtcbiAgICAgICAgbi5EYygpLCB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgTCh0KS5rdS5kZWxldGUoZSk7XG4gICAgICAgIH0oYXdhaXQgS2EodCksIG4pKSk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhbiB1cGRhdGVGdW5jdGlvbiBpbiB3aGljaCBhIHNldCBvZiByZWFkcyBhbmQgd3JpdGVzIGNhbiBiZSBwZXJmb3JtZWRcbiAqIGF0b21pY2FsbHkuIEluIHRoZSB1cGRhdGVGdW5jdGlvbiwgdGhlIGNsaWVudCBjYW4gcmVhZCBhbmQgd3JpdGUgdmFsdWVzXG4gKiB1c2luZyB0aGUgc3VwcGxpZWQgdHJhbnNhY3Rpb24gb2JqZWN0LiBBZnRlciB0aGUgdXBkYXRlRnVuY3Rpb24sIGFsbFxuICogY2hhbmdlcyB3aWxsIGJlIGNvbW1pdHRlZC4gSWYgYSByZXRyeWFibGUgZXJyb3Igb2NjdXJzIChleDogc29tZSBvdGhlclxuICogY2xpZW50IGhhcyBjaGFuZ2VkIGFueSBvZiB0aGUgZGF0YSByZWZlcmVuY2VkKSwgdGhlbiB0aGUgdXBkYXRlRnVuY3Rpb25cbiAqIHdpbGwgYmUgY2FsbGVkIGFnYWluIGFmdGVyIGEgYmFja29mZi4gSWYgdGhlIHVwZGF0ZUZ1bmN0aW9uIHN0aWxsIGZhaWxzXG4gKiBhZnRlciBhbGwgcmV0cmllcywgdGhlbiB0aGUgdHJhbnNhY3Rpb24gd2lsbCBiZSByZWplY3RlZC5cbiAqXG4gKiBUaGUgdHJhbnNhY3Rpb24gb2JqZWN0IHBhc3NlZCB0byB0aGUgdXBkYXRlRnVuY3Rpb24gY29udGFpbnMgbWV0aG9kcyBmb3JcbiAqIGFjY2Vzc2luZyBkb2N1bWVudHMgYW5kIGNvbGxlY3Rpb25zLiBVbmxpa2Ugb3RoZXIgZGF0YXN0b3JlIGFjY2VzcywgZGF0YVxuICogYWNjZXNzZWQgd2l0aCB0aGUgdHJhbnNhY3Rpb24gd2lsbCBub3QgcmVmbGVjdCBsb2NhbCBjaGFuZ2VzIHRoYXQgaGF2ZSBub3RcbiAqIGJlZW4gY29tbWl0dGVkLiBGb3IgdGhpcyByZWFzb24sIGl0IGlzIHJlcXVpcmVkIHRoYXQgYWxsIHJlYWRzIGFyZVxuICogcGVyZm9ybWVkIGJlZm9yZSBhbnkgd3JpdGVzLiBUcmFuc2FjdGlvbnMgbXVzdCBiZSBwZXJmb3JtZWQgd2hpbGUgb25saW5lLlxuICovIGZ1bmN0aW9uIFlhKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgbiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBoaSgpLmVuY29kZSh0KSA6IHQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNhKHQsIGUpO1xuICAgICAgICB9KGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVWludDhBcnJheSkgcmV0dXJuIGJhKHQsIGUpO1xuICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIGJhKG5ldyBVaW50OEFycmF5KHQpLCBlKTtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHJldHVybiB0LmdldFJlYWRlcigpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU291cmNlIG9mIGB0b0J5dGVTdHJlYW1SZWFkZXJgIGhhcyB0byBiZSBhIEFycmF5QnVmZmVyIG9yIFJlYWRhYmxlU3RyZWFtXCIpO1xuICAgICAgICB9KG4pLCBlKTtcbiAgICB9KG4sIEZ1KGUpKTtcbiAgICB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBUYShhd2FpdCBxYSh0KSwgaSwgcyk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBYYSh0LCBlKSB7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBMKHQpO1xuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuYW1lZCBxdWVyeVwiLCBcInJlYWRvbmx5XCIsICh0ID0+IG4ucXMuZ2V0TmFtZWRRdWVyeSh0LCBlKSkpO1xuICAgIH0oYXdhaXQgQmEodCksIGUpKSk7XG59XG5cbmZ1bmN0aW9uIFphKHQsIGUpIHtcbiAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IGFzeW5jIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IEwodCksIHMgPSBuLmluZGV4TWFuYWdlciwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkNvbmZpZ3VyZSBpbmRleGVzXCIsIFwicmVhZHdyaXRlXCIsICh0ID0+IHMuZ2V0RmllbGRJbmRleGVzKHQpLm5leHQoKG4gPT4gXG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgICAgIC8qKlxuICogQ29tcGFyZXMgdHdvIGFycmF5IGZvciBlcXVhbGl0eSB1c2luZyBjb21wYXJhdG9yLiBUaGUgbWV0aG9kIGNvbXB1dGVzIHRoZVxuICogaW50ZXJzZWN0aW9uIGFuZCBpbnZva2VzIGBvbkFkZGAgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBpbiBgYWZ0ZXJgIGJ1dCBub3RcbiAqIGBiZWZvcmVgLiBgb25SZW1vdmVgIGlzIGludm9rZWQgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gYGJlZm9yZWAgYnV0IG1pc3NpbmdcbiAqIGZyb20gYGFmdGVyYC5cbiAqXG4gKiBUaGUgbWV0aG9kIGNyZWF0ZXMgYSBjb3B5IG9mIGJvdGggYGJlZm9yZWAgYW5kIGBhZnRlcmAgYW5kIHJ1bnMgaW4gTyhuIGxvZ1xuICogbiksIHdoZXJlIG4gaXMgdGhlIHNpemUgb2YgdGhlIHR3byBsaXN0cy5cbiAqXG4gKiBAcGFyYW0gYmVmb3JlIC0gVGhlIGVsZW1lbnRzIHRoYXQgZXhpc3QgaW4gdGhlIG9yaWdpbmFsIGFycmF5LlxuICogQHBhcmFtIGFmdGVyIC0gVGhlIGVsZW1lbnRzIHRvIGRpZmYgYWdhaW5zdCB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKiBAcGFyYW0gY29tcGFyYXRvciAtIFRoZSBjb21wYXJhdG9yIGZvciB0aGUgZWxlbWVudHMgaW4gYmVmb3JlIGFuZCBhZnRlci5cbiAqIEBwYXJhbSBvbkFkZCAtIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBldmVyeSBlbGVtZW50IHRoYXQgaXMgcGFydCBvZiBgXG4gKiBhZnRlcmAgYnV0IG5vdCBgYmVmb3JlYC5cbiAqIEBwYXJhbSBvblJlbW92ZSAtIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBldmVyeSBlbGVtZW50IHRoYXQgaXMgcGFydCBvZlxuICogYGJlZm9yZWAgYnV0IG5vdCBgYWZ0ZXJgLlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQsIGUsIG4sIHMsIGkpIHtcbiAgICAgICAgICAgIHQgPSBbIC4uLnQgXSwgZSA9IFsgLi4uZSBdLCB0LnNvcnQobiksIGUuc29ydChuKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0Lmxlbmd0aCwgbyA9IGUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IHUgPSAwLCBjID0gMDtcbiAgICAgICAgICAgIGZvciAoO3UgPCBvICYmIGMgPCByOyApIHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbih0W2NdLCBlW3VdKTtcbiAgICAgICAgICAgICAgICByIDwgMCA/IFxuICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IHdhcyByZW1vdmVkIGlmIHRoZSBuZXh0IGVsZW1lbnQgaW4gb3VyIG9yZGVyZWRcbiAgICAgICAgICAgICAgICAvLyB3YWxrdGhyb3VnaCBpcyBvbmx5IGluIGBiZWZvcmVgLlxuICAgICAgICAgICAgICAgIGkodFtjKytdKSA6IHIgPiAwID8gXG4gICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgd2FzIGFkZGVkIGlmIHRoZSBuZXh0IGVsZW1lbnQgaW4gb3VyIG9yZGVyZWQgd2Fsa3Rocm91Z2hcbiAgICAgICAgICAgICAgICAvLyBpcyBvbmx5IGluIGBhZnRlcmAuXG4gICAgICAgICAgICAgICAgcyhlW3UrK10pIDogKHUrKywgYysrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoO3UgPCBvOyApIHMoZVt1KytdKTtcbiAgICAgICAgICAgIGZvciAoO2MgPCByOyApIGkodFtjKytdKTtcbiAgICAgICAgfShuLCBlLCB3dCwgKGUgPT4ge1xuICAgICAgICAgICAgaS5wdXNoKHMuYWRkRmllbGRJbmRleCh0LCBlKSk7XG4gICAgICAgIH0pLCAoZSA9PiB7XG4gICAgICAgICAgICBpLnB1c2gocy5kZWxldGVGaWVsZEluZGV4KHQsIGUpKTtcbiAgICAgICAgfSkpKSkubmV4dCgoKCkgPT4gUnQud2FpdEZvcihpKSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgLy8gVGhlIGZvcm1hdCBvZiB0aGUgTG9jYWxTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyB0aGUgY2xpZW50IHN0YXRlIGlzOlxuICAgIC8vICAgICBmaXJlc3RvcmVfY2xpZW50c188cGVyc2lzdGVuY2VfcHJlZml4Pl88aW5zdGFuY2Vfa2V5PlxuICAgIChhd2FpdCBCYSh0KSwgZSkpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29tcGFyZXMgdHdvIGBFeHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnNgIG9iamVjdHMgZm9yIGVxdWFsaXR5LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYEV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9uc2Agd2l0aCB0aGUgc2FtZVxuICogb3B0aW9uIHZhbHVlcyBhcyB0aGUgZ2l2ZW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHRoKHQpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gdC50aW1lb3V0U2Vjb25kcyAmJiAoZS50aW1lb3V0U2Vjb25kcyA9IHQudGltZW91dFNlY29uZHMpLCBlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBlaCA9IG5ldyBNYXA7XG5cbi8qKlxuICogQW4gaW5zdGFuY2UgbWFwIHRoYXQgZW5zdXJlcyBvbmx5IG9uZSBEYXRhc3RvcmUgZXhpc3RzIHBlciBGaXJlc3RvcmVcbiAqIGluc3RhbmNlLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZnVuY3Rpb24gbmgodCwgZSwgbikge1xuICAgIGlmICghbikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgRnVuY3Rpb24gJHt0fSgpIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBlbXB0eSAke2V9LmApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHR3byBib29sZWFuIG9wdGlvbnMgYXJlIG5vdCBzZXQgYXQgdGhlIHNhbWUgdGltZS5cbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIHNoKHQsIGUsIG4sIHMpIHtcbiAgICBpZiAoITAgPT09IGUgJiYgITAgPT09IHMpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYCR7dH0gYW5kICR7bn0gY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIuYCk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgYHBhdGhgIHJlZmVycyB0byBhIGRvY3VtZW50IChpbmRpY2F0ZWQgYnkgdGhlIGZhY3QgaXQgY29udGFpbnNcbiAqIGFuIGV2ZW4gbnVtYmVycyBvZiBzZWdtZW50cykuXG4gKi8gZnVuY3Rpb24gaWgodCkge1xuICAgIGlmICghaHQuaXNEb2N1bWVudEtleSh0KSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBkb2N1bWVudCByZWZlcmVuY2UuIERvY3VtZW50IHJlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgJHt0fSBoYXMgJHt0Lmxlbmd0aH0uYCk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgYHBhdGhgIHJlZmVycyB0byBhIGNvbGxlY3Rpb24gKGluZGljYXRlZCBieSB0aGUgZmFjdCBpdFxuICogY29udGFpbnMgYW4gb2RkIG51bWJlcnMgb2Ygc2VnbWVudHMpLlxuICovIGZ1bmN0aW9uIHJoKHQpIHtcbiAgICBpZiAoaHQuaXNEb2N1bWVudEtleSh0KSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBjb2xsZWN0aW9uIHJlZmVyZW5jZS4gQ29sbGVjdGlvbiByZWZlcmVuY2VzIG11c3QgaGF2ZSBhbiBvZGQgbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgJHt0fSBoYXMgJHt0Lmxlbmd0aH0uYCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGl0J3MgYSBub24tbnVsbCBvYmplY3Qgd2l0aG91dCBhIGN1c3RvbSBwcm90b3R5cGVcbiAqIChpLmUuIGV4Y2x1ZGVzIEFycmF5LCBEYXRlLCBldGMuKS5cbiAqL1xuLyoqIFJldHVybnMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgdHlwZSAvIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBpbnB1dC4gKi9cbmZ1bmN0aW9uIG9oKHQpIHtcbiAgICBpZiAodm9pZCAwID09PSB0KSByZXR1cm4gXCJ1bmRlZmluZWRcIjtcbiAgICBpZiAobnVsbCA9PT0gdCkgcmV0dXJuIFwibnVsbFwiO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4gdC5sZW5ndGggPiAyMCAmJiAodCA9IGAke3Quc3Vic3RyaW5nKDAsIDIwKX0uLi5gKSwgXG4gICAgSlNPTi5zdHJpbmdpZnkodCk7XG4gICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIHQpIHJldHVybiBcIlwiICsgdDtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIEFycmF5KSByZXR1cm4gXCJhbiBhcnJheVwiO1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBlID0gXG4gICAgICAgICAgICAvKiogdHJ5IHRvIGdldCB0aGUgY29uc3RydWN0b3IgbmFtZSBmb3IgYW4gb2JqZWN0LiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmICh0LmNvbnN0cnVjdG9yKSByZXR1cm4gdC5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gKiBDYXN0cyBgb2JqYCB0byBgVGAsIG9wdGlvbmFsbHkgdW53cmFwcGluZyBDb21wYXQgdHlwZXMgdG8gZXhwb3NlIHRoZVxuICogdW5kZXJseWluZyBpbnN0YW5jZS4gVGhyb3dzIGlmICBgb2JqYCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYFRgLlxuICpcbiAqIFRoaXMgY2FzdCBpcyB1c2VkIGluIHRoZSBMaXRlIGFuZCBGdWxsIFNESyB0byB2ZXJpZnkgaW5zdGFuY2UgdHlwZXMgZm9yXG4gKiBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBwdWJsaWMgQVBJLlxuICogQGludGVybmFsXG4gKi8gKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGUgPyBgYSBjdXN0b20gJHtlfSBvYmplY3RgIDogXCJhbiBvYmplY3RcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gXCJhIGZ1bmN0aW9uXCIgOiBPKCk7XG59XG5cbmZ1bmN0aW9uIHVoKHQsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmUpIHtcbiAgICBpZiAoXCJfZGVsZWdhdGVcIiBpbiB0ICYmIChcbiAgICAvLyBVbndyYXAgQ29tcGF0IHR5cGVzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0ID0gdC5fZGVsZWdhdGUpLCAhKHQgaW5zdGFuY2VvZiBlKSkge1xuICAgICAgICBpZiAoZS5uYW1lID09PSB0LmNvbnN0cnVjdG9yLm5hbWUpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUeXBlIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCBpbnN0YW5jZS4gRGlkIHlvdSBwYXNzIGEgcmVmZXJlbmNlIGZyb20gYSBkaWZmZXJlbnQgRmlyZXN0b3JlIFNESz9cIik7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBvaCh0KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEV4cGVjdGVkIHR5cGUgJyR7ZS5uYW1lfScsIGJ1dCBpdCB3YXM6ICR7bn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gY2godCwgZSkge1xuICAgIGlmIChlIDw9IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEZ1bmN0aW9uICR7dH0oKSByZXF1aXJlcyBhIHBvc2l0aXZlIG51bWJlciwgYnV0IGl0IHdhczogJHtlfS5gKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIHNldHRpbmdzKCkgZGVmYXVsdHM6XG4vKipcbiAqIEEgY29uY3JldGUgdHlwZSBkZXNjcmliaW5nIGFsbCB0aGUgdmFsdWVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdmlhIGFcbiAqIHVzZXItc3VwcGxpZWQgYEZpcmVzdG9yZVNldHRpbmdzYCBvYmplY3QuIFRoaXMgaXMgYSBzZXBhcmF0ZSB0eXBlIHNvIHRoYXRcbiAqIGRlZmF1bHRzIGNhbiBiZSBzdXBwbGllZCBhbmQgdGhlIHZhbHVlIGNhbiBiZSBjaGVja2VkIGZvciBlcXVhbGl0eS5cbiAqL1xuY2xhc3MgYWgge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdmFyIGUsIG47XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQuaG9zdCkge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdC5zc2wpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJDYW4ndCBwcm92aWRlIHNzbCBvcHRpb24gaWYgaG9zdCBvcHRpb24gaXMgbm90IHNldFwiKTtcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IFwiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tXCIsIHRoaXMuc3NsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHRoaXMuaG9zdCA9IHQuaG9zdCwgdGhpcy5zc2wgPSBudWxsID09PSAoZSA9IHQuc3NsKSB8fCB2b2lkIDAgPT09IGUgfHwgZTtcbiAgICAgICAgaWYgKHRoaXMuY3JlZGVudGlhbHMgPSB0LmNyZWRlbnRpYWxzLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSAhIXQuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgXG4gICAgICAgIHRoaXMuY2FjaGUgPSB0LmxvY2FsQ2FjaGUsIHZvaWQgMCA9PT0gdC5jYWNoZVNpemVCeXRlcykgdGhpcy5jYWNoZVNpemVCeXRlcyA9IDQxOTQzMDQwOyBlbHNlIHtcbiAgICAgICAgICAgIGlmICgtMSAhPT0gdC5jYWNoZVNpemVCeXRlcyAmJiB0LmNhY2hlU2l6ZUJ5dGVzIDwgMTA0ODU3NikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcImNhY2hlU2l6ZUJ5dGVzIG11c3QgYmUgYXQgbGVhc3QgMTA0ODU3NlwiKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSB0LmNhY2hlU2l6ZUJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIHNoKFwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZ1wiLCB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcsIFwiZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nXCIsIHQuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nKSwgXG4gICAgICAgIHRoaXMuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyA9ICEhdC5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nLCB0aGlzLmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgPyB0aGlzLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyA9ICExIDogdm9pZCAwID09PSB0LmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyA/IHRoaXMuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nID0gdHJ1ZSA6IFxuICAgICAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGNvZXJjZSB0aGUgdmFsdWUgdG8gYm9vbGVhbiBldmVuIHRob3VnaFxuICAgICAgICAvLyB0aGUgVHlwZVNjcmlwdCBjb21waWxlciBoYXMgbmFycm93ZWQgdGhlIHR5cGUgdG8gYm9vbGVhbiBhbHJlYWR5LlxuICAgICAgICAvLyBub2luc3BlY3Rpb24gUG9pbnRsZXNzQm9vbGVhbkV4cHJlc3Npb25KU1xuICAgICAgICB0aGlzLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyA9ICEhdC5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcsIFxuICAgICAgICB0aGlzLmV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9ucyA9IHRoKG51bGwgIT09IChuID0gdC5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMpICYmIHZvaWQgMCAhPT0gbiA/IG4gOiB7fSksIFxuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0LnRpbWVvdXRTZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHQudGltZW91dFNlY29uZHMpKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBpbnZhbGlkIGxvbmcgcG9sbGluZyB0aW1lb3V0OiAke3QudGltZW91dFNlY29uZHN9IChtdXN0IG5vdCBiZSBOYU4pYCk7XG4gICAgICAgICAgICAgICAgaWYgKHQudGltZW91dFNlY29uZHMgPCA1KSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBpbnZhbGlkIGxvbmcgcG9sbGluZyB0aW1lb3V0OiAke3QudGltZW91dFNlY29uZHN9IChtaW5pbXVtIGFsbG93ZWQgdmFsdWUgaXMgNSlgKTtcbiAgICAgICAgICAgICAgICBpZiAodC50aW1lb3V0U2Vjb25kcyA+IDMwKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBpbnZhbGlkIGxvbmcgcG9sbGluZyB0aW1lb3V0OiAke3QudGltZW91dFNlY29uZHN9IChtYXhpbXVtIGFsbG93ZWQgdmFsdWUgaXMgMzApYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAgICAgLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKi8gKHRoaXMuZXhwZXJpbWVudGFsTG9uZ1BvbGxpbmdPcHRpb25zKSwgdGhpcy51c2VGZXRjaFN0cmVhbXMgPSAhIXQudXNlRmV0Y2hTdHJlYW1zO1xuICAgIH1cbiAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdCA9PT0gdC5ob3N0ICYmIHRoaXMuc3NsID09PSB0LnNzbCAmJiB0aGlzLmNyZWRlbnRpYWxzID09PSB0LmNyZWRlbnRpYWxzICYmIHRoaXMuY2FjaGVTaXplQnl0ZXMgPT09IHQuY2FjaGVTaXplQnl0ZXMgJiYgdGhpcy5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nID09PSB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgJiYgdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPT09IHQuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nICYmIChlID0gdGhpcy5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMsIFxuICAgICAgICBuID0gdC5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMsIGUudGltZW91dFNlY29uZHMgPT09IG4udGltZW91dFNlY29uZHMpICYmIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9PT0gdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzICYmIHRoaXMudXNlRmV0Y2hTdHJlYW1zID09PSB0LnVzZUZldGNoU3RyZWFtcztcbiAgICAgICAgdmFyIGUsIG47XG4gICAgfVxufVxuXG5jbGFzcyBoaCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHRoaXMuX2F1dGhDcmVkZW50aWFscyA9IHQsIHRoaXMuX2FwcENoZWNrQ3JlZGVudGlhbHMgPSBlLCB0aGlzLl9kYXRhYmFzZUlkID0gbiwgXG4gICAgICAgIHRoaXMuX2FwcCA9IHMsIFxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBpdCdzIGEgRmlyZXN0b3JlIG9yIEZpcmVzdG9yZSBMaXRlIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJmaXJlc3RvcmUtbGl0ZVwiLCB0aGlzLl9wZXJzaXN0ZW5jZUtleSA9IFwiKGxpdGUpXCIsIHRoaXMuX3NldHRpbmdzID0gbmV3IGFoKHt9KSwgXG4gICAgICAgIHRoaXMuX3NldHRpbmdzRnJvemVuID0gITE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYEZpcmVzdG9yZWAgc2VydmljZVxuICAgICAqIGluc3RhbmNlLlxuICAgICAqLyAgICBnZXQgYXBwKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2FwcCkgdGhyb3cgbmV3IFUocS5GQUlMRURfUFJFQ09ORElUSU9OLCBcIkZpcmVzdG9yZSB3YXMgbm90IGluaXRpYWxpemVkIHVzaW5nIHRoZSBGaXJlYmFzZSBTREsuICdhcHAnIGlzIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHA7XG4gICAgfVxuICAgIGdldCBfaW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5nc0Zyb3plbjtcbiAgICB9XG4gICAgZ2V0IF90ZXJtaW5hdGVkKCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLl90ZXJtaW5hdGVUYXNrO1xuICAgIH1cbiAgICBfc2V0U2V0dGluZ3ModCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3NGcm96ZW4pIHRocm93IG5ldyBVKHEuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGFuZCBpdHMgc2V0dGluZ3MgY2FuIG5vIGxvbmdlciBiZSBjaGFuZ2VkLiBZb3UgY2FuIG9ubHkgbW9kaWZ5IHNldHRpbmdzIGJlZm9yZSBjYWxsaW5nIGFueSBvdGhlciBtZXRob2RzIG9uIGEgRmlyZXN0b3JlIG9iamVjdC5cIik7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IGFoKHQpLCB2b2lkIDAgIT09IHQuY3JlZGVudGlhbHMgJiYgKHRoaXMuX2F1dGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICghdCkgcmV0dXJuIG5ldyBRO1xuICAgICAgICAgICAgc3dpdGNoICh0LnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImZpcnN0UGFydHlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEgodC5zZXNzaW9uSW5kZXggfHwgXCIwXCIsIHQuaWFtVG9rZW4gfHwgbnVsbCwgdC5hdXRoVG9rZW5GYWN0b3J5IHx8IG51bGwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJwcm92aWRlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0LmNsaWVudDtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJtYWtlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXIgZmFpbGVkIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWwgdHlwZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSh0LmNyZWRlbnRpYWxzKSk7XG4gICAgfVxuICAgIF9nZXRTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzO1xuICAgIH1cbiAgICBfZnJlZXplU2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5nc0Zyb3plbiA9ICEwLCB0aGlzLl9zZXR0aW5ncztcbiAgICB9XG4gICAgX2RlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmF0ZVRhc2sgfHwgKHRoaXMuX3Rlcm1pbmF0ZVRhc2sgPSB0aGlzLl90ZXJtaW5hdGUoKSksIHRoaXMuX3Rlcm1pbmF0ZVRhc2s7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBgRmlyZXN0b3JlYCBpbnN0YW5jZS4gKi8gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXBwOiB0aGlzLl9hcHAsXG4gICAgICAgICAgICBkYXRhYmFzZUlkOiB0aGlzLl9kYXRhYmFzZUlkLFxuICAgICAgICAgICAgc2V0dGluZ3M6IHRoaXMuX3NldHRpbmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZXMgYWxsIGNvbXBvbmVudHMgdXNlZCBieSB0aGlzIGNsaWVudC4gU3ViY2xhc3NlcyBjYW4gb3ZlcnJpZGVcbiAgICAgKiB0aGlzIG1ldGhvZCB0byBjbGVhbiB1cCB0aGVpciBvd24gZGVwZW5kZW5jaWVzLCBidXQgbXVzdCBhbHNvIGNhbGwgdGhpc1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIE9ubHkgZXZlciBjYWxsZWQgb25jZS5cbiAgICAgKi8gICAgX3Rlcm1pbmF0ZSgpIHtcbiAgICAgICAgLyoqXG4gKiBSZW1vdmVzIGFsbCBjb21wb25lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgaW5zdGFuY2UuIE11c3QgYmUgY2FsbGVkXG4gKiB3aGVuIHRoZSBgRmlyZXN0b3JlYCBpbnN0YW5jZSBpcyB0ZXJtaW5hdGVkLlxuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gZWguZ2V0KHQpO1xuICAgICAgICAgICAgZSAmJiAoTihcIkNvbXBvbmVudFByb3ZpZGVyXCIsIFwiUmVtb3ZpbmcgRGF0YXN0b3JlXCIpLCBlaC5kZWxldGUodCksIGUudGVybWluYXRlKCkpO1xuICAgICAgICB9KHRoaXMpLCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogTW9kaWZ5IHRoaXMgaW5zdGFuY2UgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgQ2xvdWQgRmlyZXN0b3JlIGVtdWxhdG9yLlxuICpcbiAqIE5vdGU6IFRoaXMgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIHRoaXMgaW5zdGFuY2UgaGFzIGJlZW4gdXNlZCB0byBkbyBhbnlcbiAqIG9wZXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIFRoZSBgRmlyZXN0b3JlYCBpbnN0YW5jZSB0byBjb25maWd1cmUgdG8gY29ubmVjdCB0byB0aGVcbiAqIGVtdWxhdG9yLlxuICogQHBhcmFtIGhvc3QgLSB0aGUgZW11bGF0b3IgaG9zdCAoZXg6IGxvY2FsaG9zdCkuXG4gKiBAcGFyYW0gcG9ydCAtIHRoZSBlbXVsYXRvciBwb3J0IChleDogOTAwMCkuXG4gKiBAcGFyYW0gb3B0aW9ucy5tb2NrVXNlclRva2VuIC0gdGhlIG1vY2sgYXV0aCB0b2tlbiB0byB1c2UgZm9yIHVuaXQgdGVzdGluZ1xuICogU2VjdXJpdHkgUnVsZXMuXG4gKi8gZnVuY3Rpb24gbGgodCwgZSwgbiwgcyA9IHt9KSB7XG4gICAgdmFyIGk7XG4gICAgY29uc3QgciA9ICh0ID0gdWgodCwgaGgpKS5fZ2V0U2V0dGluZ3MoKSwgbyA9IGAke2V9OiR7bn1gO1xuICAgIGlmIChcImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbVwiICE9PSByLmhvc3QgJiYgci5ob3N0ICE9PSBvICYmIE0oXCJIb3N0IGhhcyBiZWVuIHNldCBpbiBib3RoIHNldHRpbmdzKCkgYW5kIGNvbm5lY3RGaXJlc3RvcmVFbXVsYXRvcigpLCBlbXVsYXRvciBob3N0IHdpbGwgYmUgdXNlZC5cIiksIFxuICAgIHQuX3NldFNldHRpbmdzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgciksIHtcbiAgICAgICAgaG9zdDogbyxcbiAgICAgICAgc3NsOiAhMVxuICAgIH0pKSwgcy5tb2NrVXNlclRva2VuKSB7XG4gICAgICAgIGxldCBlLCBuO1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygcy5tb2NrVXNlclRva2VuKSBlID0gcy5tb2NrVXNlclRva2VuLCBuID0gVi5NT0NLX1VTRVI7IGVsc2Uge1xuICAgICAgICAgICAgLy8gTGV0IGNyZWF0ZU1vY2tVc2VyVG9rZW4gdmFsaWRhdGUgZmlyc3QgKGNhdGNoZXMgY29tbW9uIG1pc3Rha2VzIGxpa2VcbiAgICAgICAgICAgIC8vIGludmFsaWQgZmllbGQgXCJ1aWRcIiBhbmQgbWlzc2luZyBmaWVsZCBcInN1YlwiIC8gXCJ1c2VyX2lkXCIuKVxuICAgICAgICAgICAgZSA9IGNyZWF0ZU1vY2tVc2VyVG9rZW4ocy5tb2NrVXNlclRva2VuLCBudWxsID09PSAoaSA9IHQuX2FwcCkgfHwgdm9pZCAwID09PSBpID8gdm9pZCAwIDogaS5vcHRpb25zLnByb2plY3RJZCk7XG4gICAgICAgICAgICBjb25zdCByID0gcy5tb2NrVXNlclRva2VuLnN1YiB8fCBzLm1vY2tVc2VyVG9rZW4udXNlcl9pZDtcbiAgICAgICAgICAgIGlmICghcikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XG4gICAgICAgICAgICBuID0gbmV3IFYocik7XG4gICAgICAgIH1cbiAgICAgICAgdC5fYXV0aENyZWRlbnRpYWxzID0gbmV3IGoobmV3IEcoZSwgbikpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBgRG9jdW1lbnRSZWZlcmVuY2VgIHJlZmVycyB0byBhIGRvY3VtZW50IGxvY2F0aW9uIGluIGEgRmlyZXN0b3JlIGRhdGFiYXNlXG4gKiBhbmQgY2FuIGJlIHVzZWQgdG8gd3JpdGUsIHJlYWQsIG9yIGxpc3RlbiB0byB0aGUgbG9jYXRpb24uIFRoZSBkb2N1bWVudCBhdFxuICogdGhlIHJlZmVyZW5jZWQgbG9jYXRpb24gbWF5IG9yIG1heSBub3QgZXhpc3QuXG4gKi8gY2xhc3MgZmgge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgXG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIHRoZSBgRmlyZXN0b3JlRGF0YUNvbnZlcnRlcmAgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZSwgbikge1xuICAgICAgICB0aGlzLmNvbnZlcnRlciA9IGUsIHRoaXMuX2tleSA9IG4sIFxuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBGaXJlc3RvcmUgcmVmZXJlbmNlLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcImRvY3VtZW50XCIsIHRoaXMuZmlyZXN0b3JlID0gdDtcbiAgICB9XG4gICAgZ2V0IF9wYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5LnBhdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBkb2N1bWVudCdzIGlkZW50aWZpZXIgd2l0aGluIGl0cyBjb2xsZWN0aW9uLlxuICAgICAqLyAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkucGF0aC5sYXN0U2VnbWVudCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBhdGggb2YgdGhlIHJlZmVyZW5jZWQgZG9jdW1lbnQgKHJlbGF0aXZlXG4gICAgICogdG8gdGhlIHJvb3Qgb2YgdGhlIGRhdGFiYXNlKS5cbiAgICAgKi8gICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkucGF0aC5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbGxlY3Rpb24gdGhpcyBgRG9jdW1lbnRSZWZlcmVuY2VgIGJlbG9uZ3MgdG8uXG4gICAgICovICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgd2godGhpcy5maXJlc3RvcmUsIHRoaXMuY29udmVydGVyLCB0aGlzLl9rZXkucGF0aC5wb3BMYXN0KCkpO1xuICAgIH1cbiAgICB3aXRoQ29udmVydGVyKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBmaCh0aGlzLmZpcmVzdG9yZSwgdCwgdGhpcy5fa2V5KTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBgUXVlcnlgIHJlZmVycyB0byBhIHF1ZXJ5IHdoaWNoIHlvdSBjYW4gcmVhZCBvciBsaXN0ZW4gdG8uIFlvdSBjYW4gYWxzb1xuICogY29uc3RydWN0IHJlZmluZWQgYFF1ZXJ5YCBvYmplY3RzIGJ5IGFkZGluZyBmaWx0ZXJzIGFuZCBvcmRlcmluZy5cbiAqLyBjbGFzcyBkaCB7XG4gICAgLy8gVGhpcyBpcyB0aGUgbGl0ZSB2ZXJzaW9uIG9mIHRoZSBRdWVyeSBjbGFzcyBpbiB0aGUgbWFpbiBTREsuXG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgcHJvdGVjdGVkICovXG4gICAgY29uc3RydWN0b3IodCwgXG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIHRoZSBgRmlyZXN0b3JlRGF0YUNvbnZlcnRlcmAgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZSwgbikge1xuICAgICAgICB0aGlzLmNvbnZlcnRlciA9IGUsIHRoaXMuX3F1ZXJ5ID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIEZpcmVzdG9yZSByZWZlcmVuY2UuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwicXVlcnlcIiwgdGhpcy5maXJlc3RvcmUgPSB0O1xuICAgIH1cbiAgICB3aXRoQ29udmVydGVyKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkaCh0aGlzLmZpcmVzdG9yZSwgdCwgdGhpcy5fcXVlcnkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBDb2xsZWN0aW9uUmVmZXJlbmNlYCBvYmplY3QgY2FuIGJlIHVzZWQgZm9yIGFkZGluZyBkb2N1bWVudHMsIGdldHRpbmdcbiAqIGRvY3VtZW50IHJlZmVyZW5jZXMsIGFuZCBxdWVyeWluZyBmb3IgZG9jdW1lbnRzICh1c2luZyB7QGxpbmsgKHF1ZXJ5OjEpfSkuXG4gKi8gY2xhc3Mgd2ggZXh0ZW5kcyBkaCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKHQsIGUsIEduKG4pKSwgdGhpcy5fcGF0aCA9IG4sIFxuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBGaXJlc3RvcmUgcmVmZXJlbmNlLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcImNvbGxlY3Rpb25cIjtcbiAgICB9XG4gICAgLyoqIFRoZSBjb2xsZWN0aW9uJ3MgaWRlbnRpZmllci4gKi8gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkucGF0aC5sYXN0U2VnbWVudCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBhdGggb2YgdGhlIHJlZmVyZW5jZWQgY29sbGVjdGlvbiAocmVsYXRpdmVcbiAgICAgKiB0byB0aGUgcm9vdCBvZiB0aGUgZGF0YWJhc2UpLlxuICAgICAqLyAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LnBhdGguY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjb250YWluaW5nIGBEb2N1bWVudFJlZmVyZW5jZWAgaWYgdGhpcyBpcyBhXG4gICAgICogc3ViY29sbGVjdGlvbi4gSWYgdGhpcyBpc24ndCBhIHN1YmNvbGxlY3Rpb24sIHRoZSByZWZlcmVuY2UgaXMgbnVsbC5cbiAgICAgKi8gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuX3BhdGgucG9wTGFzdCgpO1xuICAgICAgICByZXR1cm4gdC5pc0VtcHR5KCkgPyBudWxsIDogbmV3IGZoKHRoaXMuZmlyZXN0b3JlLCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsLCBuZXcgaHQodCkpO1xuICAgIH1cbiAgICB3aXRoQ29udmVydGVyKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3aCh0aGlzLmZpcmVzdG9yZSwgdCwgdGhpcy5fcGF0aCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfaCh0LCBlLCAuLi5uKSB7XG4gICAgaWYgKHQgPSBnZXRNb2R1bGFySW5zdGFuY2UodCksIG5oKFwiY29sbGVjdGlvblwiLCBcInBhdGhcIiwgZSksIHQgaW5zdGFuY2VvZiBoaCkge1xuICAgICAgICBjb25zdCBzID0gdXQuZnJvbVN0cmluZyhlLCAuLi5uKTtcbiAgICAgICAgcmV0dXJuIHJoKHMpLCBuZXcgd2godCwgLyogY29udmVydGVyPSAqLyBudWxsLCBzKTtcbiAgICB9XG4gICAge1xuICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgZmggfHwgdCBpbnN0YW5jZW9mIHdoKSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIkV4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGNvbGxlY3Rpb24oKSB0byBiZSBhIENvbGxlY3Rpb25SZWZlcmVuY2UsIGEgRG9jdW1lbnRSZWZlcmVuY2Ugb3IgRmlyZWJhc2VGaXJlc3RvcmVcIik7XG4gICAgICAgIGNvbnN0IHMgPSB0Ll9wYXRoLmNoaWxkKHV0LmZyb21TdHJpbmcoZSwgLi4ubikpO1xuICAgICAgICByZXR1cm4gcmgocyksIG5ldyB3aCh0LmZpcmVzdG9yZSwgXG4gICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgcyk7XG4gICAgfVxufVxuXG4vLyBUT0RPKGZpcmVzdG9yZWxpdGUpOiBDb25zaWRlciB1c2luZyBFcnJvckZhY3RvcnkgLVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9ibG9iLzAxMzFlMWYvcGFja2FnZXMvdXRpbC9zcmMvZXJyb3JzLnRzI0wxMDZcbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBgUXVlcnlgIGluc3RhbmNlIHRoYXQgaW5jbHVkZXMgYWxsIGRvY3VtZW50cyBpbiB0aGVcbiAqIGRhdGFiYXNlIHRoYXQgYXJlIGNvbnRhaW5lZCBpbiBhIGNvbGxlY3Rpb24gb3Igc3ViY29sbGVjdGlvbiB3aXRoIHRoZVxuICogZ2l2ZW4gYGNvbGxlY3Rpb25JZGAuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSByb290IGBGaXJlc3RvcmVgIGluc3RhbmNlLlxuICogQHBhcmFtIGNvbGxlY3Rpb25JZCAtIElkZW50aWZpZXMgdGhlIGNvbGxlY3Rpb25zIHRvIHF1ZXJ5IG92ZXIuIEV2ZXJ5XG4gKiBjb2xsZWN0aW9uIG9yIHN1YmNvbGxlY3Rpb24gd2l0aCB0aGlzIElEIGFzIHRoZSBsYXN0IHNlZ21lbnQgb2YgaXRzIHBhdGhcbiAqIHdpbGwgYmUgaW5jbHVkZWQuIENhbm5vdCBjb250YWluIGEgc2xhc2guXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBgUXVlcnlgLlxuICovIGZ1bmN0aW9uIG1oKHQsIGUpIHtcbiAgICBpZiAodCA9IHVoKHQsIGhoKSwgbmgoXCJjb2xsZWN0aW9uR3JvdXBcIiwgXCJjb2xsZWN0aW9uIGlkXCIsIGUpLCBlLmluZGV4T2YoXCIvXCIpID49IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgY29sbGVjdGlvbiBJRCAnJHtlfScgcGFzc2VkIHRvIGZ1bmN0aW9uIGNvbGxlY3Rpb25Hcm91cCgpLiBDb2xsZWN0aW9uIElEcyBtdXN0IG5vdCBjb250YWluICcvJy5gKTtcbiAgICByZXR1cm4gbmV3IGRoKHQsIFxuICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IFVuKHV0LmVtcHR5UGF0aCgpLCB0KTtcbiAgICB9KGUpKTtcbn1cblxuZnVuY3Rpb24gZ2godCwgZSwgLi4ubikge1xuICAgIGlmICh0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpLCBcbiAgICAvLyBXZSBhbGxvdyBvbWlzc2lvbiBvZiAncGF0aFN0cmluZycgYnV0IGV4cGxpY2l0bHkgcHJvaGliaXQgcGFzc2luZyBpbiBib3RoXG4gICAgLy8gJ3VuZGVmaW5lZCcgYW5kICdudWxsJy5cbiAgICAxID09PSBhcmd1bWVudHMubGVuZ3RoICYmIChlID0gdHQuQSgpKSwgbmgoXCJkb2NcIiwgXCJwYXRoXCIsIGUpLCB0IGluc3RhbmNlb2YgaGgpIHtcbiAgICAgICAgY29uc3QgcyA9IHV0LmZyb21TdHJpbmcoZSwgLi4ubik7XG4gICAgICAgIHJldHVybiBpaChzKSwgbmV3IGZoKHQsIFxuICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIG5ldyBodChzKSk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIGZoIHx8IHQgaW5zdGFuY2VvZiB3aCkpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBjb2xsZWN0aW9uKCkgdG8gYmUgYSBDb2xsZWN0aW9uUmVmZXJlbmNlLCBhIERvY3VtZW50UmVmZXJlbmNlIG9yIEZpcmViYXNlRmlyZXN0b3JlXCIpO1xuICAgICAgICBjb25zdCBzID0gdC5fcGF0aC5jaGlsZCh1dC5mcm9tU3RyaW5nKGUsIC4uLm4pKTtcbiAgICAgICAgcmV0dXJuIGloKHMpLCBuZXcgZmgodC5maXJlc3RvcmUsIHQgaW5zdGFuY2VvZiB3aCA/IHQuY29udmVydGVyIDogbnVsbCwgbmV3IGh0KHMpKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCByZWZlcmVuY2VzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0gbGVmdCAtIEEgcmVmZXJlbmNlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gcmlnaHQgLSBBIHJlZmVyZW5jZSB0byBjb21wYXJlLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlcyBwb2ludCB0byB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgc2FtZVxuICogRmlyZXN0b3JlIGRhdGFiYXNlLlxuICovIGZ1bmN0aW9uIHloKHQsIGUpIHtcbiAgICByZXR1cm4gdCA9IGdldE1vZHVsYXJJbnN0YW5jZSh0KSwgZSA9IGdldE1vZHVsYXJJbnN0YW5jZShlKSwgKHQgaW5zdGFuY2VvZiBmaCB8fCB0IGluc3RhbmNlb2Ygd2gpICYmIChlIGluc3RhbmNlb2YgZmggfHwgZSBpbnN0YW5jZW9mIHdoKSAmJiAodC5maXJlc3RvcmUgPT09IGUuZmlyZXN0b3JlICYmIHQucGF0aCA9PT0gZS5wYXRoICYmIHQuY29udmVydGVyID09PSBlLmNvbnZlcnRlcik7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBxdWVyaWVzIHBvaW50IHRvIHRoZSBzYW1lIGNvbGxlY3Rpb24gYW5kIGFwcGx5XG4gKiB0aGUgc2FtZSBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gbGVmdCAtIEEgYFF1ZXJ5YCB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IC0gQSBgUXVlcnlgIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSByZWZlcmVuY2VzIHBvaW50IHRvIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBzYW1lXG4gKiBGaXJlc3RvcmUgZGF0YWJhc2UuXG4gKi8gZnVuY3Rpb24gcGgodCwgZSkge1xuICAgIHJldHVybiB0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpLCBlID0gZ2V0TW9kdWxhckluc3RhbmNlKGUpLCB0IGluc3RhbmNlb2YgZGggJiYgZSBpbnN0YW5jZW9mIGRoICYmICh0LmZpcmVzdG9yZSA9PT0gZS5maXJlc3RvcmUgJiYgWm4odC5fcXVlcnksIGUuX3F1ZXJ5KSAmJiB0LmNvbnZlcnRlciA9PT0gZS5jb252ZXJ0ZXIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBJaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFRoZSBsYXN0IHByb21pc2UgaW4gdGhlIHF1ZXVlLlxuICAgICAgICB0aGlzLkdjID0gUHJvbWlzZS5yZXNvbHZlKCksIFxuICAgICAgICAvLyBBIGxpc3Qgb2YgcmV0cnlhYmxlIG9wZXJhdGlvbnMuIFJldHJ5YWJsZSBvcGVyYXRpb25zIGFyZSBydW4gaW4gb3JkZXIgYW5kXG4gICAgICAgIC8vIHJldHJpZWQgd2l0aCBiYWNrb2ZmLlxuICAgICAgICB0aGlzLlFjID0gW10sIFxuICAgICAgICAvLyBJcyB0aGlzIEFzeW5jUXVldWUgYmVpbmcgc2h1dCBkb3duPyBPbmNlIGl0IGlzIHNldCB0byB0cnVlLCBpdCB3aWxsIG5vdFxuICAgICAgICAvLyBiZSBjaGFuZ2VkIGFnYWluLlxuICAgICAgICB0aGlzLmpjID0gITEsIFxuICAgICAgICAvLyBPcGVyYXRpb25zIHNjaGVkdWxlZCB0byBiZSBxdWV1ZWQgaW4gdGhlIGZ1dHVyZS4gT3BlcmF0aW9ucyBhcmVcbiAgICAgICAgLy8gYXV0b21hdGljYWxseSByZW1vdmVkIGFmdGVyIHRoZXkgYXJlIHJ1biBvciBjYW5jZWxlZC5cbiAgICAgICAgdGhpcy56YyA9IFtdLCBcbiAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICB0aGlzLldjID0gbnVsbCwgXG4gICAgICAgIC8vIEZsYWcgc2V0IHdoaWxlIHRoZXJlJ3MgYW4gb3V0c3RhbmRpbmcgQXN5bmNRdWV1ZSBvcGVyYXRpb24sIHVzZWQgZm9yXG4gICAgICAgIC8vIGFzc2VydGlvbiBzYW5pdHktY2hlY2tzLlxuICAgICAgICB0aGlzLkhjID0gITEsIFxuICAgICAgICAvLyBFbmFibGVkIGR1cmluZyBzaHV0ZG93biBvbiBTYWZhcmkgdG8gcHJldmVudCBmdXR1cmUgYWNjZXNzIHRvIEluZGV4ZWREQi5cbiAgICAgICAgdGhpcy5KYyA9ICExLCBcbiAgICAgICAgLy8gTGlzdCBvZiBUaW1lcklkcyB0byBmYXN0LWZvcndhcmQgZGVsYXlzIGZvci5cbiAgICAgICAgdGhpcy5ZYyA9IFtdLCBcbiAgICAgICAgLy8gQmFja29mZiB0aW1lciB1c2VkIHRvIHNjaGVkdWxlIHJldHJpZXMgZm9yIHJldHJ5YWJsZSBvcGVyYXRpb25zXG4gICAgICAgIHRoaXMucW8gPSBuZXcgQnUodGhpcywgXCJhc3luY19xdWV1ZV9yZXRyeVwiIC8qIFRpbWVySWQuQXN5bmNRdWV1ZVJldHJ5ICovKSwgXG4gICAgICAgIC8vIFZpc2liaWxpdHkgaGFuZGxlciB0aGF0IHRyaWdnZXJzIGFuIGltbWVkaWF0ZSByZXRyeSBvZiBhbGwgcmV0cnlhYmxlXG4gICAgICAgIC8vIG9wZXJhdGlvbnMuIE1lYW50IHRvIHNwZWVkIHVwIHJlY292ZXJ5IHdoZW4gd2UgcmVnYWluIGZpbGUgc3lzdGVtIGFjY2Vzc1xuICAgICAgICAvLyBhZnRlciBwYWdlIGNvbWVzIGludG8gZm9yZWdyb3VuZC5cbiAgICAgICAgdGhpcy5YYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBPdSgpO1xuICAgICAgICAgICAgdCAmJiBOKFwiQXN5bmNRdWV1ZVwiLCBcIlZpc2liaWxpdHkgc3RhdGUgY2hhbmdlZCB0byBcIiArIHQudmlzaWJpbGl0eVN0YXRlKSwgdGhpcy5xby5NbygpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0ID0gT3UoKTtcbiAgICAgICAgdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQuYWRkRXZlbnRMaXN0ZW5lciAmJiB0LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuWGMpO1xuICAgIH1cbiAgICBnZXQgaXNTaHV0dGluZ0Rvd24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpjO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUgd2l0aG91dCB3YWl0aW5nIGZvciBpdCB0byBjb21wbGV0ZSAoaS5lLlxuICAgICAqIHdlIGlnbm9yZSB0aGUgUHJvbWlzZSByZXN1bHQpLlxuICAgICAqLyAgICBlbnF1ZXVlQW5kRm9yZ2V0KHQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLmVucXVldWUodCk7XG4gICAgfVxuICAgIGVucXVldWVBbmRGb3JnZXRFdmVuV2hpbGVSZXN0cmljdGVkKHQpIHtcbiAgICAgICAgdGhpcy5aYygpLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLnRhKHQpO1xuICAgIH1cbiAgICBlbnRlclJlc3RyaWN0ZWRNb2RlKHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmpjKSB7XG4gICAgICAgICAgICB0aGlzLmpjID0gITAsIHRoaXMuSmMgPSB0IHx8ICExO1xuICAgICAgICAgICAgY29uc3QgZSA9IE91KCk7XG4gICAgICAgICAgICBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5yZW1vdmVFdmVudExpc3RlbmVyICYmIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5YYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5xdWV1ZSh0KSB7XG4gICAgICAgIGlmICh0aGlzLlpjKCksIHRoaXMuamMpIFxuICAgICAgICAvLyBSZXR1cm4gYSBQcm9taXNlIHdoaWNoIG5ldmVyIHJlc29sdmVzLlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCgpID0+IHt9KSk7XG4gICAgICAgIC8vIENyZWF0ZSBhIGRlZmVycmVkIFByb21pc2UgdGhhdCB3ZSBjYW4gcmV0dXJuIHRvIHRoZSBjYWxsZWUuIFRoaXNcbiAgICAgICAgLy8gYWxsb3dzIHVzIHRvIHJldHVybiBhIFwiaGFuZ2luZyBQcm9taXNlXCIgb25seSB0byB0aGUgY2FsbGVlIGFuZCBzdGlsbFxuICAgICAgICAvLyBhZHZhbmNlIHRoZSBxdWV1ZSBldmVuIHdoZW4gdGhlIG9wZXJhdGlvbiBpcyBub3QgcnVuLlxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgSztcbiAgICAgICAgcmV0dXJuIHRoaXMudGEoKCgpID0+IHRoaXMuamMgJiYgdGhpcy5KYyA/IFByb21pc2UucmVzb2x2ZSgpIDogKHQoKS50aGVuKGUucmVzb2x2ZSwgZS5yZWplY3QpLCBcbiAgICAgICAgZS5wcm9taXNlKSkpLnRoZW4oKCgpID0+IGUucHJvbWlzZSkpO1xuICAgIH1cbiAgICBlbnF1ZXVlUmV0cnlhYmxlKHQpIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiAodGhpcy5RYy5wdXNoKHQpLCB0aGlzLmVhKCkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIG5leHQgb3BlcmF0aW9uIGZyb20gdGhlIHJldHJ5YWJsZSBxdWV1ZS4gSWYgdGhlIG9wZXJhdGlvbiBmYWlscyxcbiAgICAgKiByZXNjaGVkdWxlcyB3aXRoIGJhY2tvZmYuXG4gICAgICovICAgIGFzeW5jIGVhKCkge1xuICAgICAgICBpZiAoMCAhPT0gdGhpcy5RYy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5RY1swXSgpLCB0aGlzLlFjLnNoaWZ0KCksIHRoaXMucW8ucmVzZXQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUR0KHQpKSB0aHJvdyB0O1xuIC8vIEZhaWx1cmUgd2lsbCBiZSBoYW5kbGVkIGJ5IEFzeW5jUXVldWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTihcIkFzeW5jUXVldWVcIiwgXCJPcGVyYXRpb24gZmFpbGVkIHdpdGggcmV0cnlhYmxlIGVycm9yOiBcIiArIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5RYy5sZW5ndGggPiAwICYmIFxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGFkZGl0aW9uYWwgb3BlcmF0aW9ucywgd2UgcmUtc2NoZWR1bGUgYHJldHJ5TmV4dE9wKClgLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gcnVuIHJldHJ5YWJsZSBvcGVyYXRpb25zIHRoYXQgZmFpbGVkIGR1cmluZ1xuICAgICAgICAgICAgLy8gdGhlaXIgaW5pdGlhbCBhdHRlbXB0IHNpbmNlIHdlIGRvbid0IGtub3cgd2hldGhlciB0aGV5IGFyZSBhbHJlYWR5XG4gICAgICAgICAgICAvLyBlbnF1ZXVlZC4gSWYsIGZvciBleGFtcGxlLCBgb3AxYCwgYG9wMmAsIGBvcDNgIGFyZSBlbnF1ZXVlZCBhbmQgYG9wMWBcbiAgICAgICAgICAgIC8vIG5lZWRzIHRvICBiZSByZS1ydW4sIHdlIHdpbGwgcnVuIGBvcDFgLCBgb3AxYCwgYG9wMmAgdXNpbmcgdGhlXG4gICAgICAgICAgICAvLyBhbHJlYWR5IGVucXVldWVkIGNhbGxzIHRvIGByZXRyeU5leHRPcCgpYC4gYG9wMygpYCB3aWxsIHRoZW4gcnVuIGluIHRoZVxuICAgICAgICAgICAgLy8gY2FsbCBzY2hlZHVsZWQgaGVyZS5cbiAgICAgICAgICAgIC8vIFNpbmNlIGBiYWNrb2ZmQW5kUnVuKClgIGNhbmNlbHMgYW4gZXhpc3RpbmcgYmFja29mZiBhbmQgc2NoZWR1bGVzIGFcbiAgICAgICAgICAgIC8vIG5ldyBiYWNrb2ZmIG9uIGV2ZXJ5IGNhbGwsIHRoZXJlIGlzIG9ubHkgZXZlciBhIHNpbmdsZSBhZGRpdGlvbmFsXG4gICAgICAgICAgICAvLyBvcGVyYXRpb24gaW4gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgdGhpcy5xby5ObygoKCkgPT4gdGhpcy5lYSgpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGEodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5HYy50aGVuKCgoKSA9PiAodGhpcy5IYyA9ICEwLCB0KCkuY2F0Y2goKHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5XYyA9IHQsIHRoaXMuSGMgPSAhMTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBcbiAgICAgICAgICAgIC8qKlxuICogQ2hyb21lIGluY2x1ZGVzIEVycm9yLm1lc3NhZ2UgaW4gRXJyb3Iuc3RhY2suIE90aGVyIGJyb3dzZXJzIGRvIG5vdC5cbiAqIFRoaXMgcmV0dXJucyBleHBlY3RlZCBvdXRwdXQgb2YgbWVzc2FnZSArIHN0YWNrIHdoZW4gYXZhaWxhYmxlLlxuICogQHBhcmFtIGVycm9yIC0gRXJyb3Igb3IgRmlyZXN0b3JlRXJyb3JcbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGxldCBlID0gdC5tZXNzYWdlIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgdC5zdGFjayAmJiAoZSA9IHQuc3RhY2suaW5jbHVkZXModC5tZXNzYWdlKSA/IHQuc3RhY2sgOiB0Lm1lc3NhZ2UgKyBcIlxcblwiICsgdC5zdGFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAodCk7XG4gICAgICAgICAgICAvLyBSZS10aHJvdyB0aGUgZXJyb3Igc28gdGhhdCB0aGlzLnRhaWwgYmVjb21lcyBhIHJlamVjdGVkIFByb21pc2UgYW5kXG4gICAgICAgICAgICAvLyBhbGwgZnVydGhlciBhdHRlbXB0cyB0byBjaGFpbiAodmlhIC50aGVuKSB3aWxsIGp1c3Qgc2hvcnQtY2lyY3VpdFxuICAgICAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgcmVqZWN0ZWQgUHJvbWlzZS5cbiAgICAgICAgICAgIHRocm93IGsoXCJJTlRFUk5BTCBVTkhBTkRMRUQgRVJST1I6IFwiLCBlKSwgdDtcbiAgICAgICAgfSkpLnRoZW4oKHQgPT4gKHRoaXMuSGMgPSAhMSwgdCkpKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuR2MgPSBlLCBlO1xuICAgIH1cbiAgICBlbnF1ZXVlQWZ0ZXJEZWxheSh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuWmMoKSwgXG4gICAgICAgIC8vIEZhc3QtZm9yd2FyZCBkZWxheXMgZm9yIHRpbWVySWRzIHRoYXQgaGF2ZSBiZWVuIG92ZXJyaWRlbi5cbiAgICAgICAgdGhpcy5ZYy5pbmRleE9mKHQpID4gLTEgJiYgKGUgPSAwKTtcbiAgICAgICAgY29uc3QgcyA9IFRjLmNyZWF0ZUFuZFNjaGVkdWxlKHRoaXMsIHQsIGUsIG4sICh0ID0+IHRoaXMubmEodCkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuemMucHVzaChzKSwgcztcbiAgICB9XG4gICAgWmMoKSB7XG4gICAgICAgIHRoaXMuV2MgJiYgTygpO1xuICAgIH1cbiAgICB2ZXJpZnlPcGVyYXRpb25JblByb2dyZXNzKCkge31cbiAgICAvKipcbiAgICAgKiBXYWl0cyB1bnRpbCBhbGwgY3VycmVudGx5IHF1ZXVlZCB0YXNrcyBhcmUgZmluaXNoZWQgZXhlY3V0aW5nLiBEZWxheWVkXG4gICAgICogb3BlcmF0aW9ucyBhcmUgbm90IHJ1bi5cbiAgICAgKi8gICAgYXN5bmMgc2EoKSB7XG4gICAgICAgIC8vIE9wZXJhdGlvbnMgaW4gdGhlIHF1ZXVlIHByaW9yIHRvIGRyYWluaW5nIG1heSBoYXZlIGVucXVldWVkIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gb3BlcmF0aW9ucy4gS2VlcCBkcmFpbmluZyB0aGUgcXVldWUgdW50aWwgdGhlIHRhaWwgaXMgbm8gbG9uZ2VyIGFkdmFuY2VkLFxuICAgICAgICAvLyB3aGljaCBpbmRpY2F0ZXMgdGhhdCBubyBtb3JlIG5ldyBvcGVyYXRpb25zIHdlcmUgZW5xdWV1ZWQgYW5kIHRoYXQgYWxsXG4gICAgICAgIC8vIG9wZXJhdGlvbnMgd2VyZSBleGVjdXRlZC5cbiAgICAgICAgbGV0IHQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHQgPSB0aGlzLkdjLCBhd2FpdCB0O1xuICAgICAgICB9IHdoaWxlICh0ICE9PSB0aGlzLkdjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBEZXRlcm1pbmUgaWYgYSBkZWxheWVkIG9wZXJhdGlvbiB3aXRoIGEgcGFydGljdWxhciBUaW1lcklkXG4gICAgICogZXhpc3RzLlxuICAgICAqLyAgICBpYSh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLnpjKSBpZiAoZS50aW1lcklkID09PSB0KSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBSdW5zIHNvbWUgb3IgYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucyBlYXJseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXN0VGltZXJJZCAtIERlbGF5ZWQgb3BlcmF0aW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoaXMgVGltZXJJZFxuICAgICAqIHdpbGwgYmUgZHJhaW5lZC4gUGFzcyBUaW1lcklkLkFsbCB0byBydW4gYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGFsbCBvcGVyYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICovICAgIHJhKHQpIHtcbiAgICAgICAgLy8gTm90ZSB0aGF0IGRyYWluaW5nIG1heSBnZW5lcmF0ZSBtb3JlIGRlbGF5ZWQgb3BzLCBzbyB3ZSBkbyB0aGF0IGZpcnN0LlxuICAgICAgICByZXR1cm4gdGhpcy5zYSgpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFJ1biBvcHMgaW4gdGhlIHNhbWUgb3JkZXIgdGhleSdkIHJ1biBpZiB0aGV5IHJhbiBuYXR1cmFsbHkuXG4gICAgICAgICAgICB0aGlzLnpjLnNvcnQoKCh0LCBlKSA9PiB0LnRhcmdldFRpbWVNcyAtIGUudGFyZ2V0VGltZU1zKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy56YykgaWYgKGUuc2tpcERlbGF5KCksIFwiYWxsXCIgLyogVGltZXJJZC5BbGwgKi8gIT09IHQgJiYgZS50aW1lcklkID09PSB0KSBicmVhaztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNhKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBTa2lwIGFsbCBzdWJzZXF1ZW50IGRlbGF5cyBmb3IgYSB0aW1lciBpZC5cbiAgICAgKi8gICAgb2EodCkge1xuICAgICAgICB0aGlzLlljLnB1c2godCk7XG4gICAgfVxuICAgIC8qKiBDYWxsZWQgb25jZSBhIERlbGF5ZWRPcGVyYXRpb24gaXMgcnVuIG9yIGNhbmNlbGVkLiAqLyAgICBuYSh0KSB7XG4gICAgICAgIC8vIE5PVEU6IGluZGV4T2YgLyBzbGljZSBhcmUgTyhuKSwgYnV0IGRlbGF5ZWRPcGVyYXRpb25zIGlzIGV4cGVjdGVkIHRvIGJlIHNtYWxsLlxuICAgICAgICBjb25zdCBlID0gdGhpcy56Yy5pbmRleE9mKHQpO1xuICAgICAgICB0aGlzLnpjLnNwbGljZShlLCAxKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFRoKHQpIHtcbiAgICAvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYW4gb2JqZWN0IGFuZCBjb250YWlucyBhdCBsZWFzdCBvbmUgb2YgdGhlIHNwZWNpZmllZFxuICogbWV0aG9kcy5cbiAqL1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8IG51bGwgPT09IHQpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgbiA9IHQ7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSBpZiAodCBpbiBuICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygblt0XSkgcmV0dXJuICEwO1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB0YXNrIG9mIGxvYWRpbmcgYSBGaXJlc3RvcmUgYnVuZGxlLiBJdCBwcm92aWRlcyBwcm9ncmVzcyBvZiBidW5kbGVcbiAqIGxvYWRpbmcsIGFzIHdlbGwgYXMgdGFzayBjb21wbGV0aW9uIGFuZCBlcnJvciBldmVudHMuXG4gKlxuICogVGhlIEFQSSBpcyBjb21wYXRpYmxlIHdpdGggYFByb21pc2U8TG9hZEJ1bmRsZVRhc2tQcm9ncmVzcz5gLlxuICovICh0LCBbIFwibmV4dFwiLCBcImVycm9yXCIsIFwiY29tcGxldGVcIiBdKTtcbn1cblxuY2xhc3MgRWgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9wcm9ncmVzc09ic2VydmVyID0ge30sIHRoaXMuX3Rhc2tDb21wbGV0aW9uUmVzb2x2ZXIgPSBuZXcgSywgdGhpcy5fbGFzdFByb2dyZXNzID0ge1xuICAgICAgICAgICAgdGFza1N0YXRlOiBcIlJ1bm5pbmdcIixcbiAgICAgICAgICAgIHRvdGFsQnl0ZXM6IDAsXG4gICAgICAgICAgICB0b3RhbERvY3VtZW50czogMCxcbiAgICAgICAgICAgIGJ5dGVzTG9hZGVkOiAwLFxuICAgICAgICAgICAgZG9jdW1lbnRzTG9hZGVkOiAwXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBmdW5jdGlvbnMgdG8gbGlzdGVuIHRvIGJ1bmRsZSBsb2FkaW5nIHByb2dyZXNzIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gbmV4dCAtIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgcHJvZ3Jlc3MgdXBkYXRlIGZyb20gYnVuZGxlIGxvYWRpbmcuIFR5cGljYWxseSBgbmV4dGAgY2FsbHMgb2NjdXJcbiAgICAgKiAgIGVhY2ggdGltZSBhIEZpcmVzdG9yZSBkb2N1bWVudCBpcyBsb2FkZWQgZnJvbSB0aGUgYnVuZGxlLlxuICAgICAqIEBwYXJhbSBlcnJvciAtIENhbGxlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgYnVuZGxlIGxvYWRpbmcuIFRoZSB0YXNrIGFib3J0cyBhZnRlciByZXBvcnRpbmcgdGhlXG4gICAgICogICBlcnJvciwgYW5kIHRoZXJlIHNob3VsZCBiZSBubyBtb3JlIHVwZGF0ZXMgYWZ0ZXIgdGhpcy5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgLSBDYWxsZWQgd2hlbiB0aGUgbG9hZGluZyB0YXNrIGlzIGNvbXBsZXRlLlxuICAgICAqLyAgICBvblByb2dyZXNzKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlciA9IHtcbiAgICAgICAgICAgIG5leHQ6IHQsXG4gICAgICAgICAgICBlcnJvcjogZSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBuXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgdGhlIGBQcm9taXNlPExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3M+LmNhdGNoYCBpbnRlcmZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb25SZWplY3RlZCAtIENhbGxlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgYnVuZGxlIGxvYWRpbmcuXG4gICAgICovICAgIGNhdGNoKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rhc2tDb21wbGV0aW9uUmVzb2x2ZXIucHJvbWlzZS5jYXRjaCh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyB0aGUgYFByb21pc2U8TG9hZEJ1bmRsZVRhc2tQcm9ncmVzcz4udGhlbmAgaW50ZXJmYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9uRnVsZmlsbGVkIC0gQ2FsbGVkIG9uIHRoZSBjb21wbGV0aW9uIG9mIHRoZSBsb2FkaW5nIHRhc2sgd2l0aCBhIGZpbmFsIGBMb2FkQnVuZGxlVGFza1Byb2dyZXNzYCB1cGRhdGUuXG4gICAgICogICBUaGUgdXBkYXRlIHdpbGwgYWx3YXlzIGhhdmUgaXRzIGB0YXNrU3RhdGVgIHNldCB0byBgXCJTdWNjZXNzXCJgLlxuICAgICAqIEBwYXJhbSBvblJlamVjdGVkIC0gQ2FsbGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBidW5kbGUgbG9hZGluZy5cbiAgICAgKi8gICAgdGhlbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YXNrQ29tcGxldGlvblJlc29sdmVyLnByb21pc2UudGhlbih0LCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgYWxsIG9ic2VydmVycyB0aGF0IGJ1bmRsZSBsb2FkaW5nIGhhcyBjb21wbGV0ZWQsIHdpdGggYSBwcm92aWRlZFxuICAgICAqIGBMb2FkQnVuZGxlVGFza1Byb2dyZXNzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqLyAgICBfY29tcGxldGVXaXRoKHQpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlUHJvZ3Jlc3ModCksIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIuY29tcGxldGUgJiYgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5jb21wbGV0ZSgpLCBcbiAgICAgICAgdGhpcy5fdGFza0NvbXBsZXRpb25SZXNvbHZlci5yZXNvbHZlKHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyBhbGwgb2JzZXJ2ZXJzIHRoYXQgYnVuZGxlIGxvYWRpbmcgaGFzIGZhaWxlZCwgd2l0aCBhIHByb3ZpZGVkXG4gICAgICogYEVycm9yYCBhcyB0aGUgcmVhc29uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi8gICAgX2ZhaWxXaXRoKHQpIHtcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzLnRhc2tTdGF0ZSA9IFwiRXJyb3JcIiwgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5uZXh0ICYmIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIubmV4dCh0aGlzLl9sYXN0UHJvZ3Jlc3MpLCBcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5lcnJvciAmJiB0aGlzLl9wcm9ncmVzc09ic2VydmVyLmVycm9yKHQpLCB0aGlzLl90YXNrQ29tcGxldGlvblJlc29sdmVyLnJlamVjdCh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgYSBwcm9ncmVzcyB1cGRhdGUgb2YgbG9hZGluZyBhIGJ1bmRsZS5cbiAgICAgKiBAcGFyYW0gcHJvZ3Jlc3MgLSBUaGUgbmV3IHByb2dyZXNzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi8gICAgX3VwZGF0ZVByb2dyZXNzKHQpIHtcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzID0gdCwgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5uZXh0ICYmIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIubmV4dCh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gaW5kaWNhdGUgdGhlIExSVSBnYXJiYWdlIGNvbGxlY3Rpb24gc2hvdWxkIGJlIGRpc2FibGVkLlxuICogU2V0IHRoaXMgdmFsdWUgYXMgdGhlIGBjYWNoZVNpemVCeXRlc2Agb24gdGhlIHNldHRpbmdzIHBhc3NlZCB0byB0aGVcbiAqIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlLlxuICovIGNvbnN0IEFoID0gLTE7XG5cbi8qKlxuICogVGhlIENsb3VkIEZpcmVzdG9yZSBzZXJ2aWNlIGludGVyZmFjZS5cbiAqXG4gKiBEbyBub3QgY2FsbCB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LiBJbnN0ZWFkLCB1c2Uge0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9LlxuICovIGNsYXNzIHZoIGV4dGVuZHMgaGgge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICBzdXBlcih0LCBlLCBuLCBzKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGl0J3MgYSB7QGxpbmsgRmlyZXN0b3JlfSBvciBGaXJlc3RvcmUgTGl0ZSBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZmlyZXN0b3JlXCIsIHRoaXMuX3F1ZXVlID0gbmV3IEloLCB0aGlzLl9wZXJzaXN0ZW5jZUtleSA9IChudWxsID09IHMgPyB2b2lkIDAgOiBzLm5hbWUpIHx8IFwiW0RFRkFVTFRdXCI7XG4gICAgfVxuICAgIF90ZXJtaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJlc3RvcmVDbGllbnQgfHwgXG4gICAgICAgIC8vIFRoZSBjbGllbnQgbXVzdCBiZSBpbml0aWFsaXplZCB0byBlbnN1cmUgdGhhdCBhbGwgc3Vic2VxdWVudCBBUElcbiAgICAgICAgLy8gdXNhZ2UgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgVmgodGhpcyksIHRoaXMuX2ZpcmVzdG9yZUNsaWVudC50ZXJtaW5hdGUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEZpcmVzdG9yZX0gd2l0aCB0aGUgcHJvdmlkZWQgc2V0dGluZ3MuXG4gKiBDYW4gb25seSBiZSBjYWxsZWQgYmVmb3JlIGFueSBvdGhlciBmdW5jdGlvbiwgaW5jbHVkaW5nXG4gKiB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uIElmIHRoZSBjdXN0b20gc2V0dGluZ3MgYXJlIGVtcHR5LCB0aGlzIGZ1bmN0aW9uIGlzXG4gKiBlcXVpdmFsZW50IHRvIGNhbGxpbmcge0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9LlxuICpcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHdpdGggd2hpY2ggdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHdpbGxcbiAqIGJlIGFzc29jaWF0ZWQuXG4gKiBAcGFyYW0gc2V0dGluZ3MgLSBBIHNldHRpbmdzIG9iamVjdCB0byBjb25maWd1cmUgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlLlxuICogQHBhcmFtIGRhdGFiYXNlSWQgLSBUaGUgbmFtZSBvZiBkYXRhYmFzZS5cbiAqIEByZXR1cm5zIEEgbmV3bHkgaW5pdGlhbGl6ZWQge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKi8gZnVuY3Rpb24gUmgodCwgZSwgbikge1xuICAgIG4gfHwgKG4gPSBcIihkZWZhdWx0KVwiKTtcbiAgICBjb25zdCBzID0gX2dldFByb3ZpZGVyKHQsIFwiZmlyZXN0b3JlXCIpO1xuICAgIGlmIChzLmlzSW5pdGlhbGl6ZWQobikpIHtcbiAgICAgICAgY29uc3QgdCA9IHMuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IG5cbiAgICAgICAgfSksIGkgPSBzLmdldE9wdGlvbnMobik7XG4gICAgICAgIGlmIChkZWVwRXF1YWwoaSwgZSkpIHJldHVybiB0O1xuICAgICAgICB0aHJvdyBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHdpdGggZGlmZmVyZW50IG9wdGlvbnMuIFRvIGF2b2lkIHRoaXMgZXJyb3IsIGNhbGwgaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIHdpdGggdGhlIHNhbWUgb3B0aW9ucyBhcyB3aGVuIGl0IHdhcyBvcmlnaW5hbGx5IGNhbGxlZCwgb3IgY2FsbCBnZXRGaXJlc3RvcmUoKSB0byByZXR1cm4gdGhlIGFscmVhZHkgaW5pdGlhbGl6ZWQgaW5zdGFuY2UuXCIpO1xuICAgIH1cbiAgICBpZiAodm9pZCAwICE9PSBlLmNhY2hlU2l6ZUJ5dGVzICYmIHZvaWQgMCAhPT0gZS5sb2NhbENhY2hlKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIFwiY2FjaGUgYW5kIGNhY2hlU2l6ZUJ5dGVzIGNhbm5vdCBiZSBzcGVjaWZpZWQgYXQgdGhlIHNhbWUgdGltZSBhcyBjYWNoZVNpemVCeXRlcyB3aWxsYmUgZGVwcmVjYXRlZC4gSW5zdGVhZCwgc3BlY2lmeSB0aGUgY2FjaGUgc2l6ZSBpbiB0aGUgY2FjaGUgb2JqZWN0XCIpO1xuICAgIGlmICh2b2lkIDAgIT09IGUuY2FjaGVTaXplQnl0ZXMgJiYgLTEgIT09IGUuY2FjaGVTaXplQnl0ZXMgJiYgZS5jYWNoZVNpemVCeXRlcyA8IDEwNDg1NzYpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJjYWNoZVNpemVCeXRlcyBtdXN0IGJlIGF0IGxlYXN0IDEwNDg1NzZcIik7XG4gICAgcmV0dXJuIHMuaW5pdGlhbGl6ZSh7XG4gICAgICAgIG9wdGlvbnM6IGUsXG4gICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogblxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBQaChlLCBuKSB7XG4gICAgY29uc3QgcyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgPyBlIDogZ2V0QXBwKCksIGkgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gZSA6IG4gfHwgXCIoZGVmYXVsdClcIiwgciA9IF9nZXRQcm92aWRlcihzLCBcImZpcmVzdG9yZVwiKS5nZXRJbW1lZGlhdGUoe1xuICAgICAgICBpZGVudGlmaWVyOiBpXG4gICAgfSk7XG4gICAgaWYgKCFyLl9pbml0aWFsaXplZCkge1xuICAgICAgICBjb25zdCB0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0KFwiZmlyZXN0b3JlXCIpO1xuICAgICAgICB0ICYmIGxoKHIsIC4uLnQpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBiaCh0KSB7XG4gICAgcmV0dXJuIHQuX2ZpcmVzdG9yZUNsaWVudCB8fCBWaCh0KSwgdC5fZmlyZXN0b3JlQ2xpZW50LnZlcmlmeU5vdFRlcm1pbmF0ZWQoKSwgdC5fZmlyZXN0b3JlQ2xpZW50O1xufVxuXG5mdW5jdGlvbiBWaCh0KSB7XG4gICAgdmFyIGUsIG4sIHM7XG4gICAgY29uc3QgaSA9IHQuX2ZyZWV6ZVNldHRpbmdzKCksIHIgPSBmdW5jdGlvbih0LCBlLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBuZXcgJGUodCwgZSwgbiwgcy5ob3N0LCBzLnNzbCwgcy5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nLCBzLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZywgdGgocy5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMpLCBzLnVzZUZldGNoU3RyZWFtcyk7XG4gICAgfSh0Ll9kYXRhYmFzZUlkLCAobnVsbCA9PT0gKGUgPSB0Ll9hcHApIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUub3B0aW9ucy5hcHBJZCkgfHwgXCJcIiwgdC5fcGVyc2lzdGVuY2VLZXksIGkpO1xuICAgIHQuX2ZpcmVzdG9yZUNsaWVudCA9IG5ldyB4YSh0Ll9hdXRoQ3JlZGVudGlhbHMsIHQuX2FwcENoZWNrQ3JlZGVudGlhbHMsIHQuX3F1ZXVlLCByKSwgXG4gICAgKG51bGwgPT09IChuID0gaS5jYWNoZSkgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyKSAmJiAobnVsbCA9PT0gKHMgPSBpLmNhY2hlKSB8fCB2b2lkIDAgPT09IHMgPyB2b2lkIDAgOiBzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlcikgJiYgKHQuX2ZpcmVzdG9yZUNsaWVudC5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciA9IHtcbiAgICAgICAgX29mZmxpbmVLaW5kOiBpLmNhY2hlLmtpbmQsXG4gICAgICAgIF9vZmZsaW5lOiBpLmNhY2hlLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIsXG4gICAgICAgIF9vbmxpbmU6IGkuY2FjaGUuX29ubGluZUNvbXBvbmVudFByb3ZpZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5hYmxlIHBlcnNpc3RlbnQgc3RvcmFnZSwgaWYgcG9zc2libGUuXG4gKlxuICogTXVzdCBiZSBjYWxsZWQgYmVmb3JlIGFueSBvdGhlciBmdW5jdGlvbnMgKG90aGVyIHRoYW5cbiAqIHtAbGluayBpbml0aWFsaXplRmlyZXN0b3JlfSwge0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9IG9yXG4gKiB7QGxpbmsgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZX0uXG4gKlxuICogSWYgdGhpcyBmYWlscywgYGVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlKClgIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlIGl0XG4gKiByZXR1cm5zLiBOb3RlIHRoYXQgZXZlbiBhZnRlciB0aGlzIGZhaWx1cmUsIHRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB3aWxsXG4gKiByZW1haW4gdXNhYmxlLCBob3dldmVyIG9mZmxpbmUgcGVyc2lzdGVuY2Ugd2lsbCBiZSBkaXNhYmxlZC5cbiAqXG4gKiBUaGVyZSBhcmUgc2V2ZXJhbCByZWFzb25zIHdoeSB0aGlzIGNhbiBmYWlsLCB3aGljaCBjYW4gYmUgaWRlbnRpZmllZCBieVxuICogdGhlIGBjb2RlYCBvbiB0aGUgZXJyb3IuXG4gKlxuICogICAqIGZhaWxlZC1wcmVjb25kaXRpb246IFRoZSBhcHAgaXMgYWxyZWFkeSBvcGVuIGluIGFub3RoZXIgYnJvd3NlciB0YWIuXG4gKiAgICogdW5pbXBsZW1lbnRlZDogVGhlIGJyb3dzZXIgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIG9mZmxpbmVcbiAqICAgICBwZXJzaXN0ZW5jZSBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBQZXJzaXN0ZW5jZSBjYW5ub3QgYmUgdXNlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIFRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB0byBlbmFibGUgcGVyc2lzdGVuY2UgZm9yLlxuICogQHBhcmFtIHBlcnNpc3RlbmNlU2V0dGluZ3MgLSBPcHRpb25hbCBzZXR0aW5ncyBvYmplY3QgdG8gY29uZmlndXJlXG4gKiBwZXJzaXN0ZW5jZS5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVwcmVzZW50cyBzdWNjZXNzZnVsbHkgZW5hYmxpbmcgcGVyc2lzdGVudCBzdG9yYWdlLlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gSW5zdGVhZCwgc2V0XG4gKiBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgIHRvIGFuIGluc3RhbmNlIG9mIGBJbmRleGVkRGJMb2NhbENhY2hlYCB0b1xuICogdHVybiBvbiBJbmRleGVkRGIgY2FjaGUuIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aGVuIGBGaXJlc3RvcmVTZXR0aW5ncy5jYWNoZWBcbiAqIGlzIGFscmVhZHkgc3BlY2lmaWVkIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICovIGZ1bmN0aW9uIFNoKHQsIGUpIHtcbiAgICBCaCh0ID0gdWgodCwgdmgpKTtcbiAgICBjb25zdCBuID0gYmgodCk7XG4gICAgaWYgKG4uX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIpIHRocm93IG5ldyBVKHEuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJTREsgY2FjaGUgaXMgYWxyZWFkeSBzcGVjaWZpZWQuXCIpO1xuICAgIE0oXCJlbmFibGVJbmRleGVkRGJQZXJzaXN0ZW5jZSgpIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLCB5b3UgY2FuIHVzZSBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgIGluc3RlYWQuXCIpO1xuICAgIGNvbnN0IHMgPSB0Ll9mcmVlemVTZXR0aW5ncygpLCBpID0gbmV3IFBhO1xuICAgIHJldHVybiBDaChuLCBpLCBuZXcgdmEoaSwgcy5jYWNoZVNpemVCeXRlcywgbnVsbCA9PSBlID8gdm9pZCAwIDogZS5mb3JjZU93bmVyc2hpcCkpO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGVuYWJsZSBtdWx0aS10YWIgcGVyc2lzdGVudCBzdG9yYWdlLCBpZiBwb3NzaWJsZS4gSWYgZW5hYmxlZFxuICogYWNyb3NzIGFsbCB0YWJzLCBhbGwgb3BlcmF0aW9ucyBzaGFyZSBhY2Nlc3MgdG8gbG9jYWwgcGVyc2lzdGVuY2UsIGluY2x1ZGluZ1xuICogc2hhcmVkIGV4ZWN1dGlvbiBvZiBxdWVyaWVzIGFuZCBsYXRlbmN5LWNvbXBlbnNhdGVkIGxvY2FsIGRvY3VtZW50IHVwZGF0ZXNcbiAqIGFjcm9zcyBhbGwgY29ubmVjdGVkIGluc3RhbmNlcy5cbiAqXG4gKiBJZiB0aGlzIGZhaWxzLCBgZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpYCB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZVxuICogaXQgcmV0dXJucy4gTm90ZSB0aGF0IGV2ZW4gYWZ0ZXIgdGhpcyBmYWlsdXJlLCB0aGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2Ugd2lsbFxuICogcmVtYWluIHVzYWJsZSwgaG93ZXZlciBvZmZsaW5lIHBlcnNpc3RlbmNlIHdpbGwgYmUgZGlzYWJsZWQuXG4gKlxuICogVGhlcmUgYXJlIHNldmVyYWwgcmVhc29ucyB3aHkgdGhpcyBjYW4gZmFpbCwgd2hpY2ggY2FuIGJlIGlkZW50aWZpZWQgYnlcbiAqIHRoZSBgY29kZWAgb24gdGhlIGVycm9yLlxuICpcbiAqICAgKiBmYWlsZWQtcHJlY29uZGl0aW9uOiBUaGUgYXBwIGlzIGFscmVhZHkgb3BlbiBpbiBhbm90aGVyIGJyb3dzZXIgdGFiIGFuZFxuICogICAgIG11bHRpLXRhYiBpcyBub3QgZW5hYmxlZC5cbiAqICAgKiB1bmltcGxlbWVudGVkOiBUaGUgYnJvd3NlciBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgb2ZmbGluZVxuICogICAgIHBlcnNpc3RlbmNlIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBUaGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgdG8gZW5hYmxlIHBlcnNpc3RlbmNlIGZvci5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVwcmVzZW50cyBzdWNjZXNzZnVsbHkgZW5hYmxpbmcgcGVyc2lzdGVudFxuICogc3RvcmFnZS5cbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIG1ham9yIHJlbGVhc2UuIEluc3RlYWQsIHNldFxuICogYEZpcmVzdG9yZVNldHRpbmdzLmNhY2hlYCB0byBhbiBpbnN0YW5jZSBvZiBgSW5kZXhlZERiTG9jYWxDYWNoZWAgdG9cbiAqIHR1cm4gb24gaW5kZXhlZGRiIGNhY2hlLiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2hlbiBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgXG4gKiBpcyBhbHJlYWR5IHNwZWNpZmllZCB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAqLyBmdW5jdGlvbiBEaCh0KSB7XG4gICAgQmgodCA9IHVoKHQsIHZoKSk7XG4gICAgY29uc3QgZSA9IGJoKHQpO1xuICAgIGlmIChlLl91bmluaXRpYWxpemVkQ29tcG9uZW50c1Byb3ZpZGVyKSB0aHJvdyBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiU0RLIGNhY2hlIGlzIGFscmVhZHkgc3BlY2lmaWVkLlwiKTtcbiAgICBNKFwiZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLCB5b3UgY2FuIHVzZSBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgIGluc3RlYWQuXCIpO1xuICAgIGNvbnN0IG4gPSB0Ll9mcmVlemVTZXR0aW5ncygpLCBzID0gbmV3IFBhO1xuICAgIHJldHVybiBDaChlLCBzLCBuZXcgUmEocywgbi5jYWNoZVNpemVCeXRlcykpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBib3RoIHRoZSBgT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyYCBhbmQgYE9ubGluZUNvbXBvbmVudFByb3ZpZGVyYC5cbiAqIElmIHRoZSBvcGVyYXRpb24gZmFpbHMgd2l0aCBhIHJlY292ZXJhYmxlIGVycm9yIChzZWVcbiAqIGBjYW5SZWNvdmVyRnJvbUluZGV4ZWREYkVycm9yKClgIGJlbG93KSwgdGhlIHJldHVybmVkIFByb21pc2UgaXMgcmVqZWN0ZWRcbiAqIGJ1dCB0aGUgY2xpZW50IHJlbWFpbnMgdXNhYmxlLlxuICovIGZ1bmN0aW9uIENoKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gbmV3IEs7XG4gICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBOYSh0LCBuKSwgYXdhaXQga2EodCwgZSksIHMucmVzb2x2ZSgpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdDtcbiAgICAgICAgICAgIGlmICghTWEoZSkpIHRocm93IGU7XG4gICAgICAgICAgICBNKFwiRXJyb3IgZW5hYmxpbmcgaW5kZXhlZGRiIGNhY2hlLiBGYWxsaW5nIGJhY2sgdG8gbWVtb3J5IGNhY2hlOiBcIiArIGUpLCBzLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pKS50aGVuKCgoKSA9PiBzLnByb21pc2UpKTtcbn1cblxuLyoqXG4gKiBDbGVhcnMgdGhlIHBlcnNpc3RlbnQgc3RvcmFnZS4gVGhpcyBpbmNsdWRlcyBwZW5kaW5nIHdyaXRlcyBhbmQgY2FjaGVkXG4gKiBkb2N1bWVudHMuXG4gKlxuICogTXVzdCBiZSBjYWxsZWQgd2hpbGUgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIGlzIG5vdCBzdGFydGVkIChhZnRlciB0aGUgYXBwIGlzXG4gKiB0ZXJtaW5hdGVkIG9yIHdoZW4gdGhlIGFwcCBpcyBmaXJzdCBpbml0aWFsaXplZCkuIE9uIHN0YXJ0dXAsIHRoaXMgZnVuY3Rpb25cbiAqIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBvdGhlciBmdW5jdGlvbnMgKG90aGVyIHRoYW4ge0BsaW5rXG4gKiBpbml0aWFsaXplRmlyZXN0b3JlfSBvciB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0pKS4gSWYgdGhlIHtAbGluayBGaXJlc3RvcmV9XG4gKiBpbnN0YW5jZSBpcyBzdGlsbCBydW5uaW5nLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIGVycm9yIGNvZGVcbiAqIG9mIGBmYWlsZWQtcHJlY29uZGl0aW9uYC5cbiAqXG4gKiBOb3RlOiBgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpYCBpcyBwcmltYXJpbHkgaW50ZW5kZWQgdG8gaGVscCB3cml0ZVxuICogcmVsaWFibGUgdGVzdHMgdGhhdCB1c2UgQ2xvdWQgRmlyZXN0b3JlLiBJdCB1c2VzIGFuIGVmZmljaWVudCBtZWNoYW5pc20gZm9yXG4gKiBkcm9wcGluZyBleGlzdGluZyBkYXRhIGJ1dCBkb2VzIG5vdCBhdHRlbXB0IHRvIHNlY3VyZWx5IG92ZXJ3cml0ZSBvclxuICogb3RoZXJ3aXNlIG1ha2UgY2FjaGVkIGRhdGEgdW5yZWNvdmVyYWJsZS4gRm9yIGFwcGxpY2F0aW9ucyB0aGF0IGFyZSBzZW5zaXRpdmVcbiAqIHRvIHRoZSBkaXNjbG9zdXJlIG9mIGNhY2hlZCBkYXRhIGluIGJldHdlZW4gdXNlciBzZXNzaW9ucywgd2Ugc3Ryb25nbHlcbiAqIHJlY29tbWVuZCBub3QgZW5hYmxpbmcgcGVyc2lzdGVuY2UgYXQgYWxsLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBUaGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgdG8gY2xlYXIgcGVyc2lzdGVuY2UgZm9yLlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSBwZXJzaXN0ZW50IHN0b3JhZ2UgaXNcbiAqIGNsZWFyZWQuIE90aGVyd2lzZSwgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci5cbiAqLyBmdW5jdGlvbiB4aCh0KSB7XG4gICAgaWYgKHQuX2luaXRpYWxpemVkICYmICF0Ll90ZXJtaW5hdGVkKSB0aHJvdyBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiUGVyc2lzdGVuY2UgY2FuIG9ubHkgYmUgY2xlYXJlZCBiZWZvcmUgYSBGaXJlc3RvcmUgaW5zdGFuY2UgaXMgaW5pdGlhbGl6ZWQgb3IgYWZ0ZXIgaXQgaXMgdGVybWluYXRlZC5cIik7XG4gICAgY29uc3QgZSA9IG5ldyBLO1xuICAgIHJldHVybiB0Ll9xdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0RXZlbldoaWxlUmVzdHJpY3RlZCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmICghYnQuRCgpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQgKyBcIm1haW5cIjtcbiAgICAgICAgICAgICAgICBhd2FpdCBidC5kZWxldGUoZSk7XG4gICAgICAgICAgICB9KFpvKHQuX2RhdGFiYXNlSWQsIHQuX3BlcnNpc3RlbmNlS2V5KSksIGUucmVzb2x2ZSgpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBlLnJlamVjdCh0KTtcbiAgICAgICAgfVxuICAgIH0pKSwgZS5wcm9taXNlO1xufVxuXG4vKipcbiAqIFdhaXRzIHVudGlsIGFsbCBjdXJyZW50bHkgcGVuZGluZyB3cml0ZXMgZm9yIHRoZSBhY3RpdmUgdXNlciBoYXZlIGJlZW5cbiAqIGFja25vd2xlZGdlZCBieSB0aGUgYmFja2VuZC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyBpbW1lZGlhdGVseSBpZiB0aGVyZSBhcmUgbm8gb3V0c3RhbmRpbmcgd3JpdGVzLlxuICogT3RoZXJ3aXNlLCB0aGUgcHJvbWlzZSB3YWl0cyBmb3IgYWxsIHByZXZpb3VzbHkgaXNzdWVkIHdyaXRlcyAoaW5jbHVkaW5nXG4gKiB0aG9zZSB3cml0dGVuIGluIGEgcHJldmlvdXMgYXBwIHNlc3Npb24pLCBidXQgaXQgZG9lcyBub3Qgd2FpdCBmb3Igd3JpdGVzXG4gKiB0aGF0IHdlcmUgYWRkZWQgYWZ0ZXIgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZC4gSWYgeW91IHdhbnQgdG8gd2FpdCBmb3JcbiAqIGFkZGl0aW9uYWwgd3JpdGVzLCBjYWxsIGB3YWl0Rm9yUGVuZGluZ1dyaXRlcygpYCBhZ2Fpbi5cbiAqXG4gKiBBbnkgb3V0c3RhbmRpbmcgYHdhaXRGb3JQZW5kaW5nV3JpdGVzKClgIHByb21pc2VzIGFyZSByZWplY3RlZCBkdXJpbmcgdXNlclxuICogY2hhbmdlcy5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB3aGljaCByZXNvbHZlcyB3aGVuIGFsbCBjdXJyZW50bHkgcGVuZGluZyB3cml0ZXMgaGF2ZSBiZWVuXG4gKiBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmQuXG4gKi8gZnVuY3Rpb24gTmgodCkge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgSztcbiAgICAgICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBaYyhhd2FpdCBxYSh0KSwgZSkpKSwgZS5wcm9taXNlO1xuICAgIH0oYmgodCA9IHVoKHQsIHZoKSkpO1xufVxuXG4vKipcbiAqIFJlLWVuYWJsZXMgdXNlIG9mIHRoZSBuZXR3b3JrIGZvciB0aGlzIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIGFmdGVyIGEgcHJpb3JcbiAqIGNhbGwgdG8ge0BsaW5rIGRpc2FibGVOZXR3b3JrfS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IGlzIHJlc29sdmVkIG9uY2UgdGhlIG5ldHdvcmsgaGFzIGJlZW4gZW5hYmxlZC5cbiAqLyBmdW5jdGlvbiBraCh0KSB7XG4gICAgcmV0dXJuIEdhKGJoKHQgPSB1aCh0LCB2aCkpKTtcbn1cblxuLyoqXG4gKiBEaXNhYmxlcyBuZXR3b3JrIHVzYWdlIGZvciB0aGlzIGluc3RhbmNlLiBJdCBjYW4gYmUgcmUtZW5hYmxlZCB2aWEge0BsaW5rXG4gKiBlbmFibGVOZXR3b3JrfS4gV2hpbGUgdGhlIG5ldHdvcmsgaXMgZGlzYWJsZWQsIGFueSBzbmFwc2hvdCBsaXN0ZW5lcnMsXG4gKiBgZ2V0RG9jKClgIG9yIGBnZXREb2NzKClgIGNhbGxzIHdpbGwgcmV0dXJuIHJlc3VsdHMgZnJvbSBjYWNoZSwgYW5kIGFueSB3cml0ZVxuICogb3BlcmF0aW9ucyB3aWxsIGJlIHF1ZXVlZCB1bnRpbCB0aGUgbmV0d29yayBpcyByZXN0b3JlZC5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IGlzIHJlc29sdmVkIG9uY2UgdGhlIG5ldHdvcmsgaGFzIGJlZW4gZGlzYWJsZWQuXG4gKi8gZnVuY3Rpb24gTWgodCkge1xuICAgIHJldHVybiBRYShiaCh0ID0gdWgodCwgdmgpKSk7XG59XG5cbi8qKlxuICogVGVybWluYXRlcyB0aGUgcHJvdmlkZWQge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKlxuICogQWZ0ZXIgY2FsbGluZyBgdGVybWluYXRlKClgIG9ubHkgdGhlIGBjbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlKClgIGZ1bmN0aW9uXG4gKiBtYXkgYmUgdXNlZC4gQW55IG90aGVyIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYSBgRmlyZXN0b3JlRXJyb3JgLlxuICpcbiAqIFRvIHJlc3RhcnQgYWZ0ZXIgdGVybWluYXRpb24sIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBGaXJlYmFzZUZpcmVzdG9yZSB3aXRoXG4gKiB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKlxuICogVGVybWluYXRpb24gZG9lcyBub3QgY2FuY2VsIGFueSBwZW5kaW5nIHdyaXRlcywgYW5kIGFueSBwcm9taXNlcyB0aGF0IGFyZVxuICogYXdhaXRpbmcgYSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgd2lsbCBub3QgYmUgcmVzb2x2ZWQuIElmIHlvdSBoYXZlXG4gKiBwZXJzaXN0ZW5jZSBlbmFibGVkLCB0aGUgbmV4dCB0aW1lIHlvdSBzdGFydCB0aGlzIGluc3RhbmNlLCBpdCB3aWxsIHJlc3VtZVxuICogc2VuZGluZyB0aGVzZSB3cml0ZXMgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBOb3RlOiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgY2FsbGluZyBgdGVybWluYXRlKClgIGlzIG5vdCByZXF1aXJlZC4gVGhpc1xuICogZnVuY3Rpb24gaXMgdXNlZnVsIG9ubHkgd2hlbiB5b3Ugd2FudCB0byBmb3JjZSB0aGlzIGluc3RhbmNlIHRvIHJlbGVhc2UgYWxsXG4gKiBvZiBpdHMgcmVzb3VyY2VzIG9yIGluIGNvbWJpbmF0aW9uIHdpdGggYGNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgdG9cbiAqIGVuc3VyZSB0aGF0IGFsbCBsb2NhbCBzdGF0ZSBpcyBkZXN0cm95ZWQgYmV0d2VlbiB0ZXN0IHJ1bnMuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSBpbnN0YW5jZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHlcbiAqIHRlcm1pbmF0ZWQuXG4gKi8gZnVuY3Rpb24gJGgodCkge1xuICAgIHJldHVybiBfcmVtb3ZlU2VydmljZUluc3RhbmNlKHQuYXBwLCBcImZpcmVzdG9yZVwiLCB0Ll9kYXRhYmFzZUlkLmRhdGFiYXNlKSwgdC5fZGVsZXRlKCk7XG59XG5cbi8qKlxuICogTG9hZHMgYSBGaXJlc3RvcmUgYnVuZGxlIGludG8gdGhlIGxvY2FsIGNhY2hlLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBUaGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgdG8gbG9hZCBidW5kbGVzIGZvci5cbiAqIEBwYXJhbSBidW5kbGVEYXRhIC0gQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgYnVuZGxlIHRvIGJlIGxvYWRlZC4gVmFsaWRcbiAqIG9iamVjdHMgYXJlIGBBcnJheUJ1ZmZlcmAsIGBSZWFkYWJsZVN0cmVhbTxVaW50OEFycmF5PmAgb3IgYHN0cmluZ2AuXG4gKlxuICogQHJldHVybnMgQSBgTG9hZEJ1bmRsZVRhc2tgIG9iamVjdCwgd2hpY2ggbm90aWZpZXMgY2FsbGVycyB3aXRoIHByb2dyZXNzXG4gKiB1cGRhdGVzLCBhbmQgY29tcGxldGlvbiBvciBlcnJvciBldmVudHMuIEl0IGNhbiBiZSB1c2VkIGFzIGFcbiAqIGBQcm9taXNlPExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3M+YC5cbiAqLyBmdW5jdGlvbiBPaCh0LCBlKSB7XG4gICAgY29uc3QgbiA9IGJoKHQgPSB1aCh0LCB2aCkpLCBzID0gbmV3IEVoO1xuICAgIHJldHVybiBZYShuLCB0Ll9kYXRhYmFzZUlkLCBlLCBzKSwgcztcbn1cblxuLyoqXG4gKiBSZWFkcyBhIEZpcmVzdG9yZSB7QGxpbmsgUXVlcnl9IGZyb20gbG9jYWwgY2FjaGUsIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuXG4gKiBuYW1lLlxuICpcbiAqIFRoZSBuYW1lZCBxdWVyaWVzIGFyZSBwYWNrYWdlZCAgaW50byBidW5kbGVzIG9uIHRoZSBzZXJ2ZXIgc2lkZSAoYWxvbmdcbiAqIHdpdGggcmVzdWx0aW5nIGRvY3VtZW50cyksIGFuZCBsb2FkZWQgdG8gbG9jYWwgY2FjaGUgdXNpbmcgYGxvYWRCdW5kbGVgLiBPbmNlXG4gKiBpbiBsb2NhbCBjYWNoZSwgdXNlIHRoaXMgbWV0aG9kIHRvIGV4dHJhY3QgYSB7QGxpbmsgUXVlcnl9IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIFRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB0byByZWFkIHRoZSBxdWVyeSBmcm9tLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcXVlcnkuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IGlzIHJlc29sdmVkIHdpdGggdGhlIFF1ZXJ5IG9yIGBudWxsYC5cbiAqLyBmdW5jdGlvbiBGaCh0LCBlKSB7XG4gICAgcmV0dXJuIFhhKGJoKHQgPSB1aCh0LCB2aCkpLCBlKS50aGVuKChlID0+IGUgPyBuZXcgZGgodCwgbnVsbCwgZS5xdWVyeSkgOiBudWxsKSk7XG59XG5cbmZ1bmN0aW9uIEJoKHQpIHtcbiAgICBpZiAodC5faW5pdGlhbGl6ZWQgfHwgdC5fdGVybWluYXRlZCkgdGhyb3cgbmV3IFUocS5GQUlMRURfUFJFQ09ORElUSU9OLCBcIkZpcmVzdG9yZSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQgYW5kIHBlcnNpc3RlbmNlIGNhbiBubyBsb25nZXIgYmUgZW5hYmxlZC4gWW91IGNhbiBvbmx5IGVuYWJsZSBwZXJzaXN0ZW5jZSBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgbWV0aG9kcyBvbiBhIEZpcmVzdG9yZSBvYmplY3QuXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhbiBhZ2dyZWdhdGlvbiB0aGF0IGNhbiBiZSBwZXJmb3JtZWQgYnkgRmlyZXN0b3JlLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5jbGFzcyBMaCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEFnZ3JlZ2F0ZUZpZWxkPFQ+XG4gICAgICogQHBhcmFtIF9hZ2dyZWdhdGVUeXBlIFNwZWNpZmllcyB0aGUgdHlwZSBvZiBhZ2dyZWdhdGlvbiBvcGVyYXRpb24gdG8gcGVyZm9ybS5cbiAgICAgKiBAcGFyYW0gX2ludGVybmFsRmllbGRQYXRoIE9wdGlvbmFsbHkgc3BlY2lmaWVzIHRoZSBmaWVsZCB0aGF0IGlzIGFnZ3JlZ2F0ZWQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8gVE9ETyAoc3VtL2F2ZykgbWFrZSBhZ2dyZWdhdGVUeXBlIHB1YmxpYyB3aGVuIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZFxuICAgIHQgPSBcImNvdW50XCIsIGUpIHtcbiAgICAgICAgdGhpcy5fYWdncmVnYXRlVHlwZSA9IHQsIHRoaXMuX2ludGVybmFsRmllbGRQYXRoID0gZSwgXG4gICAgICAgIC8qKiBBIHR5cGUgc3RyaW5nIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcIkFnZ3JlZ2F0ZUZpZWxkXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSByZXN1bHRzIG9mIGV4ZWN1dGluZyBhbiBhZ2dyZWdhdGlvbiBxdWVyeS5cbiAqLyBjbGFzcyBxaCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuX3VzZXJEYXRhV3JpdGVyID0gZSwgdGhpcy5fZGF0YSA9IG4sIFxuICAgICAgICAvKiogQSB0eXBlIHN0cmluZyB0byB1bmlxdWVseSBpZGVudGlmeSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJBZ2dyZWdhdGVRdWVyeVNuYXBzaG90XCIsIHRoaXMucXVlcnkgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIHRoZSBhZ2dyZWdhdGlvbnMgcGVyZm9ybWVkIG92ZXIgdGhlIHVuZGVybHlpbmdcbiAgICAgKiBxdWVyeS5cbiAgICAgKlxuICAgICAqIFRoZSBrZXlzIG9mIHRoZSByZXR1cm5lZCBvYmplY3Qgd2lsbCBiZSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAgICAgKiBgQWdncmVnYXRlU3BlY2Agb2JqZWN0IHNwZWNpZmllZCB0byB0aGUgYWdncmVnYXRpb24gbWV0aG9kLCBhbmQgdGhlIHZhbHVlc1xuICAgICAqIHdpbGwgYmUgdGhlIGNvcnJlc3BvbmRpbmcgYWdncmVnYXRpb24gcmVzdWx0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGFnZ3JlZ2F0aW9ucyBwZXJmb3JtZWQgb3ZlciB0aGUgdW5kZXJseWluZ1xuICAgICAqIHF1ZXJ5LlxuICAgICAqLyAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydE9iamVjdE1hcCh0aGlzLl9kYXRhKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGltbXV0YWJsZSBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGFycmF5IG9mIGJ5dGVzLlxuICovIGNsYXNzIFVoIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5fYnl0ZVN0cmluZyA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEJ5dGVzYCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gQmFzZTY0IHN0cmluZywgY29udmVydGluZyBpdCB0b1xuICAgICAqIGJ5dGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhc2U2NCAtIFRoZSBCYXNlNjQgc3RyaW5nIHVzZWQgdG8gY3JlYXRlIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21CYXNlNjRTdHJpbmcodCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaChWZS5mcm9tQmFzZTY0U3RyaW5nKHQpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgZGF0YSBmcm9tIEJhc2U2NCBzdHJpbmc6IFwiICsgdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgQnl0ZXNgIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBVaW50OEFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFycmF5IC0gVGhlIFVpbnQ4QXJyYXkgdXNlZCB0byBjcmVhdGUgdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqLyAgICBzdGF0aWMgZnJvbVVpbnQ4QXJyYXkodCkge1xuICAgICAgICByZXR1cm4gbmV3IFVoKFZlLmZyb21VaW50OEFycmF5KHQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBieXRlcyBhcyBhIEJhc2U2NC1lbmNvZGVkIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBCYXNlNjQtZW5jb2RlZCBzdHJpbmcgY3JlYXRlZCBmcm9tIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgdG9CYXNlNjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ieXRlU3RyaW5nLnRvQmFzZTY0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHVuZGVybHlpbmcgYnl0ZXMgaW4gYSBuZXcgYFVpbnQ4QXJyYXlgLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFVpbnQ4QXJyYXkgY3JlYXRlZCBmcm9tIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgdG9VaW50OEFycmF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnl0ZVN0cmluZy50b1VpbnQ4QXJyYXkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJCeXRlcyhiYXNlNjQ6IFwiICsgdGhpcy50b0Jhc2U2NCgpICsgXCIpXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBCeXRlc2Agb2JqZWN0IGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBUaGUgYEJ5dGVzYCBvYmplY3QgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBgQnl0ZXNgIG9iamVjdCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVTdHJpbmcuaXNFcXVhbCh0Ll9ieXRlU3RyaW5nKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgYEZpZWxkUGF0aGAgcmVmZXJzIHRvIGEgZmllbGQgaW4gYSBkb2N1bWVudC4gVGhlIHBhdGggbWF5IGNvbnNpc3Qgb2YgYVxuICogc2luZ2xlIGZpZWxkIG5hbWUgKHJlZmVycmluZyB0byBhIHRvcC1sZXZlbCBmaWVsZCBpbiB0aGUgZG9jdW1lbnQpLCBvciBhXG4gKiBsaXN0IG9mIGZpZWxkIG5hbWVzIChyZWZlcnJpbmcgdG8gYSBuZXN0ZWQgZmllbGQgaW4gdGhlIGRvY3VtZW50KS5cbiAqXG4gKiBDcmVhdGUgYSBgRmllbGRQYXRoYCBieSBwcm92aWRpbmcgZmllbGQgbmFtZXMuIElmIG1vcmUgdGhhbiBvbmUgZmllbGRcbiAqIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBwYXRoIHdpbGwgcG9pbnQgdG8gYSBuZXN0ZWQgZmllbGQgaW4gYSBkb2N1bWVudC5cbiAqLyBjbGFzcyBLaCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBGaWVsZFBhdGhgIGZyb20gdGhlIHByb3ZpZGVkIGZpZWxkIG5hbWVzLiBJZiBtb3JlIHRoYW4gb25lIGZpZWxkXG4gICAgICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkTmFtZXMgLSBBIGxpc3Qgb2YgZmllbGQgbmFtZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoLi4udCkge1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHQubGVuZ3RoOyArK2UpIGlmICgwID09PSB0W2VdLmxlbmd0aCkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZmllbGQgbmFtZSBhdCBhcmd1bWVudCAkKGkgKyAxKS4gRmllbGQgbmFtZXMgbXVzdCBub3QgYmUgZW1wdHkuXCIpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFBhdGggPSBuZXcgYXQodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBGaWVsZFBhdGhgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBUaGUgYEZpZWxkUGF0aGAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBgRmllbGRQYXRoYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsUGF0aC5pc0VxdWFsKHQuX2ludGVybmFsUGF0aCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBzcGVjaWFsIHNlbnRpbmVsIGBGaWVsZFBhdGhgIHRvIHJlZmVyIHRvIHRoZSBJRCBvZiBhIGRvY3VtZW50LlxuICogSXQgY2FuIGJlIHVzZWQgaW4gcXVlcmllcyB0byBzb3J0IG9yIGZpbHRlciBieSB0aGUgZG9jdW1lbnQgSUQuXG4gKi8gZnVuY3Rpb24gR2goKSB7XG4gICAgcmV0dXJuIG5ldyBLaChcIl9fbmFtZV9fXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTZW50aW5lbCB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIHdyaXRpbmcgZG9jdW1lbnQgZmllbGRzIHdpdGggYHNldCgpYFxuICogb3IgYHVwZGF0ZSgpYC5cbiAqLyBjbGFzcyBRaCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIF9tZXRob2ROYW1lIC0gVGhlIHB1YmxpYyBBUEkgZW5kcG9pbnQgdGhhdCByZXR1cm5zIHRoaXMgY2xhc3MuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgICAgdGhpcy5fbWV0aG9kTmFtZSA9IHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbW11dGFibGUgb2JqZWN0IHJlcHJlc2VudGluZyBhIGdlb2dyYXBoaWMgbG9jYXRpb24gaW4gRmlyZXN0b3JlLiBUaGVcbiAqIGxvY2F0aW9uIGlzIHJlcHJlc2VudGVkIGFzIGxhdGl0dWRlL2xvbmdpdHVkZSBwYWlyLlxuICpcbiAqIExhdGl0dWRlIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlIG9mIFstOTAsIDkwXS5cbiAqIExvbmdpdHVkZSB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSBvZiBbLTE4MCwgMTgwXS5cbiAqLyBjbGFzcyBqaCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbW11dGFibGUgYEdlb1BvaW50YCBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQgbGF0aXR1ZGUgYW5kXG4gICAgICogbG9uZ2l0dWRlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gbGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgYXMgbnVtYmVyIGJldHdlZW4gLTkwIGFuZCA5MC5cbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSBhcyBudW1iZXIgYmV0d2VlbiAtMTgwIGFuZCAxODAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBpZiAoIWlzRmluaXRlKHQpIHx8IHQgPCAtOTAgfHwgdCA+IDkwKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIFwiTGF0aXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAsIGJ1dCB3YXM6IFwiICsgdCk7XG4gICAgICAgIGlmICghaXNGaW5pdGUoZSkgfHwgZSA8IC0xODAgfHwgZSA+IDE4MCkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIkxvbmdpdHVkZSBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLCBidXQgd2FzOiBcIiArIGUpO1xuICAgICAgICB0aGlzLl9sYXQgPSB0LCB0aGlzLl9sb25nID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGxhdGl0dWRlIG9mIHRoaXMgYEdlb1BvaW50YCBpbnN0YW5jZS5cbiAgICAgKi8gICAgZ2V0IGxhdGl0dWRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbG9uZ2l0dWRlIG9mIHRoaXMgYEdlb1BvaW50YCBpbnN0YW5jZS5cbiAgICAgKi8gICAgZ2V0IGxvbmdpdHVkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBHZW9Qb2ludGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciAtIFRoZSBgR2VvUG9pbnRgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYEdlb1BvaW50YCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICBpc0VxdWFsKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhdCA9PT0gdC5fbGF0ICYmIHRoaXMuX2xvbmcgPT09IHQuX2xvbmc7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBHZW9Qb2ludC4gKi8gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGF0aXR1ZGU6IHRoaXMuX2xhdCxcbiAgICAgICAgICAgIGxvbmdpdHVkZTogdGhpcy5fbG9uZ1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY3R1YWxseSBwcml2YXRlIHRvIEpTIGNvbnN1bWVycyBvZiBvdXIgQVBJLCBzbyB0aGlzIGZ1bmN0aW9uIGlzIHByZWZpeGVkXG4gICAgICogd2l0aCBhbiB1bmRlcnNjb3JlLlxuICAgICAqLyAgICBfY29tcGFyZVRvKHQpIHtcbiAgICAgICAgcmV0dXJuIGV0KHRoaXMuX2xhdCwgdC5fbGF0KSB8fCBldCh0aGlzLl9sb25nLCB0Ll9sb25nKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IHpoID0gL15fXy4qX18kLztcblxuLyoqIFRoZSByZXN1bHQgb2YgcGFyc2luZyBkb2N1bWVudCBkYXRhIChlLmcuIGZvciBhIHNldERhdGEgY2FsbCkuICovIGNsYXNzIFdoIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHQsIHRoaXMuZmllbGRNYXNrID0gZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBuO1xuICAgIH1cbiAgICB0b011dGF0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuZmllbGRNYXNrID8gbmV3IHpzKHQsIHRoaXMuZGF0YSwgdGhpcy5maWVsZE1hc2ssIGUsIHRoaXMuZmllbGRUcmFuc2Zvcm1zKSA6IG5ldyBqcyh0LCB0aGlzLmRhdGEsIGUsIHRoaXMuZmllbGRUcmFuc2Zvcm1zKTtcbiAgICB9XG59XG5cbi8qKiBUaGUgcmVzdWx0IG9mIHBhcnNpbmcgXCJ1cGRhdGVcIiBkYXRhIChpLmUuIGZvciBhbiB1cGRhdGVEYXRhIGNhbGwpLiAqLyBjbGFzcyBIaCB7XG4gICAgY29uc3RydWN0b3IodCwgXG4gICAgLy8gVGhlIGZpZWxkTWFzayBkb2VzIG5vdCBpbmNsdWRlIGRvY3VtZW50IHRyYW5zZm9ybXMuXG4gICAgZSwgbikge1xuICAgICAgICB0aGlzLmRhdGEgPSB0LCB0aGlzLmZpZWxkTWFzayA9IGUsIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gbjtcbiAgICB9XG4gICAgdG9NdXRhdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgenModCwgdGhpcy5kYXRhLCB0aGlzLmZpZWxkTWFzaywgZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gSmgodCkge1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSAwIC8qIFVzZXJEYXRhU291cmNlLlNldCAqLyA6XG4gLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIGNhc2UgMiAvKiBVc2VyRGF0YVNvdXJjZS5NZXJnZVNldCAqLyA6XG4gLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBVc2VyRGF0YVNvdXJjZS5VcGRhdGUgKi8gOlxuICAgICAgICByZXR1cm4gITA7XG5cbiAgICAgIGNhc2UgMyAvKiBVc2VyRGF0YVNvdXJjZS5Bcmd1bWVudCAqLyA6XG4gICAgICBjYXNlIDQgLyogVXNlckRhdGFTb3VyY2UuQXJyYXlBcmd1bWVudCAqLyA6XG4gICAgICAgIHJldHVybiAhMTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgTygpO1xuICAgIH1cbn1cblxuLyoqIEEgXCJjb250ZXh0XCIgb2JqZWN0IHBhc3NlZCBhcm91bmQgd2hpbGUgcGFyc2luZyB1c2VyIGRhdGEuICovIGNsYXNzIFloIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIFBhcnNlQ29udGV4dCB3aXRoIHRoZSBnaXZlbiBzb3VyY2UgYW5kIHBhdGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgZm9yIHRoZSBwYXJzZXIuXG4gICAgICogQHBhcmFtIGRhdGFiYXNlSWQgLSBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIEZpcmVzdG9yZSBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplciAtIFRoZSBzZXJpYWxpemVyIHRvIHVzZSB0byBnZW5lcmF0ZSB0aGUgVmFsdWUgcHJvdG8uXG4gICAgICogQHBhcmFtIGlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgLSBXaGV0aGVyIHRvIGlnbm9yZSB1bmRlZmluZWQgcHJvcGVydGllc1xuICAgICAqIHJhdGhlciB0aGFuIHRocm93LlxuICAgICAqIEBwYXJhbSBmaWVsZFRyYW5zZm9ybXMgLSBBIG11dGFibGUgbGlzdCBvZiBmaWVsZCB0cmFuc2Zvcm1zIGVuY291bnRlcmVkXG4gICAgICogd2hpbGUgcGFyc2luZyB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gZmllbGRNYXNrIC0gQSBtdXRhYmxlIGxpc3Qgb2YgZmllbGQgcGF0aHMgZW5jb3VudGVyZWQgd2hpbGUgcGFyc2luZ1xuICAgICAqIHRoZSBkYXRhLlxuICAgICAqXG4gICAgICogVE9ETyhiLzM0ODcxMTMxKTogV2UgZG9uJ3Qgc3VwcG9ydCBhcnJheSBwYXRocyByaWdodCBub3csIHNvIHBhdGggY2FuIGJlXG4gICAgICogbnVsbCB0byBpbmRpY2F0ZSB0aGUgY29udGV4dCByZXByZXNlbnRzIGFueSBsb2NhdGlvbiB3aXRoaW4gYW4gYXJyYXkgKGluXG4gICAgICogd2hpY2ggY2FzZSBjZXJ0YWluIGZlYXR1cmVzIHdpbGwgbm90IHdvcmsgYW5kIGVycm9ycyB3aWxsIGJlIHNvbWV3aGF0XG4gICAgICogY29tcHJvbWlzZWQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4sIHMsIGksIHIpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHQsIHRoaXMuZGF0YWJhc2VJZCA9IGUsIHRoaXMuc2VyaWFsaXplciA9IG4sIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9IHMsIFxuICAgICAgICAvLyBNaW5vciBoYWNrOiBJZiBmaWVsZFRyYW5zZm9ybXMgaXMgdW5kZWZpbmVkLCB3ZSBhc3N1bWUgdGhpcyBpcyBhblxuICAgICAgICAvLyBleHRlcm5hbCBjYWxsIGFuZCB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoZSBlbnRpcmUgcGF0aC5cbiAgICAgICAgdm9pZCAwID09PSBpICYmIHRoaXMudWEoKSwgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBpIHx8IFtdLCB0aGlzLmZpZWxkTWFzayA9IHIgfHwgW107XG4gICAgfVxuICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wYXRoO1xuICAgIH1cbiAgICBnZXQgY2EoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmNhO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBjb250ZXh0IHdpdGggdGhlIHNwZWNpZmllZCBzZXR0aW5ncyBvdmVyd3JpdHRlbi4gKi8gICAgYWEodCkge1xuICAgICAgICByZXR1cm4gbmV3IFloKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyksIHQpLCB0aGlzLmRhdGFiYXNlSWQsIHRoaXMuc2VyaWFsaXplciwgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzLCB0aGlzLmZpZWxkVHJhbnNmb3JtcywgdGhpcy5maWVsZE1hc2spO1xuICAgIH1cbiAgICBoYSh0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBjb25zdCBuID0gbnVsbCA9PT0gKGUgPSB0aGlzLnBhdGgpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuY2hpbGQodCksIHMgPSB0aGlzLmFhKHtcbiAgICAgICAgICAgIHBhdGg6IG4sXG4gICAgICAgICAgICBsYTogITFcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzLmZhKHQpLCBzO1xuICAgIH1cbiAgICBkYSh0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBjb25zdCBuID0gbnVsbCA9PT0gKGUgPSB0aGlzLnBhdGgpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuY2hpbGQodCksIHMgPSB0aGlzLmFhKHtcbiAgICAgICAgICAgIHBhdGg6IG4sXG4gICAgICAgICAgICBsYTogITFcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzLnVhKCksIHM7XG4gICAgfVxuICAgIHdhKHQpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogV2UgZG9uJ3Qgc3VwcG9ydCBhcnJheSBwYXRocyByaWdodCBub3c7IHNvIG1ha2UgcGF0aFxuICAgICAgICAvLyB1bmRlZmluZWQuXG4gICAgICAgIHJldHVybiB0aGlzLmFhKHtcbiAgICAgICAgICAgIHBhdGg6IHZvaWQgMCxcbiAgICAgICAgICAgIGxhOiAhMFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2EodCkge1xuICAgICAgICByZXR1cm4gZ2wodCwgdGhpcy5zZXR0aW5ncy5tZXRob2ROYW1lLCB0aGlzLnNldHRpbmdzLm1hIHx8ICExLCB0aGlzLnBhdGgsIHRoaXMuc2V0dGluZ3MuZ2EpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyAndHJ1ZScgaWYgJ2ZpZWxkUGF0aCcgd2FzIHRyYXZlcnNlZCB3aGVuIGNyZWF0aW5nIHRoaXMgY29udGV4dC4gKi8gICAgY29udGFpbnModCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmZpZWxkTWFzay5maW5kKChlID0+IHQuaXNQcmVmaXhPZihlKSkpIHx8IHZvaWQgMCAhPT0gdGhpcy5maWVsZFRyYW5zZm9ybXMuZmluZCgoZSA9PiB0LmlzUHJlZml4T2YoZS5maWVsZCkpKTtcbiAgICB9XG4gICAgdWEoKSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IFJlbW92ZSBudWxsIGNoZWNrIG9uY2Ugd2UgaGF2ZSBwcm9wZXIgcGF0aHMgZm9yIGZpZWxkc1xuICAgICAgICAvLyB3aXRoaW4gYXJyYXlzLlxuICAgICAgICBpZiAodGhpcy5wYXRoKSBmb3IgKGxldCB0ID0gMDsgdCA8IHRoaXMucGF0aC5sZW5ndGg7IHQrKykgdGhpcy5mYSh0aGlzLnBhdGguZ2V0KHQpKTtcbiAgICB9XG4gICAgZmEodCkge1xuICAgICAgICBpZiAoMCA9PT0gdC5sZW5ndGgpIHRocm93IHRoaXMuX2EoXCJEb2N1bWVudCBmaWVsZHMgbXVzdCBub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIGlmIChKaCh0aGlzLmNhKSAmJiB6aC50ZXN0KHQpKSB0aHJvdyB0aGlzLl9hKCdEb2N1bWVudCBmaWVsZHMgY2Fubm90IGJlZ2luIGFuZCBlbmQgd2l0aCBcIl9fXCInKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBwYXJzaW5nIHJhdyB1c2VyIGlucHV0IChwcm92aWRlZCB2aWEgdGhlIEFQSSkgaW50byBpbnRlcm5hbCBtb2RlbFxuICogY2xhc3Nlcy5cbiAqLyBjbGFzcyBYaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSwgbikge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSB0LCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSBlLCB0aGlzLnNlcmlhbGl6ZXIgPSBuIHx8IEZ1KHQpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyB0b3AtbGV2ZWwgcGFyc2UgY29udGV4dC4gKi8gICAgeWEodCwgZSwgbiwgcyA9ICExKSB7XG4gICAgICAgIHJldHVybiBuZXcgWWgoe1xuICAgICAgICAgICAgY2E6IHQsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiBlLFxuICAgICAgICAgICAgZ2E6IG4sXG4gICAgICAgICAgICBwYXRoOiBhdC5lbXB0eVBhdGgoKSxcbiAgICAgICAgICAgIGxhOiAhMSxcbiAgICAgICAgICAgIG1hOiBzXG4gICAgICAgIH0sIHRoaXMuZGF0YWJhc2VJZCwgdGhpcy5zZXJpYWxpemVyLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gWmgodCkge1xuICAgIGNvbnN0IGUgPSB0Ll9mcmVlemVTZXR0aW5ncygpLCBuID0gRnUodC5fZGF0YWJhc2VJZCk7XG4gICAgcmV0dXJuIG5ldyBYaCh0Ll9kYXRhYmFzZUlkLCAhIWUuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgbik7XG59XG5cbi8qKiBQYXJzZSBkb2N1bWVudCBkYXRhIGZyb20gYSBzZXQoKSBjYWxsLiAqLyBmdW5jdGlvbiB0bCh0LCBlLCBuLCBzLCBpLCByID0ge30pIHtcbiAgICBjb25zdCBvID0gdC55YShyLm1lcmdlIHx8IHIubWVyZ2VGaWVsZHMgPyAyIC8qIFVzZXJEYXRhU291cmNlLk1lcmdlU2V0ICovIDogMCAvKiBVc2VyRGF0YVNvdXJjZS5TZXQgKi8gLCBlLCBuLCBpKTtcbiAgICBkbChcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIG8sIHMpO1xuICAgIGNvbnN0IHUgPSBsbChzLCBvKTtcbiAgICBsZXQgYywgYTtcbiAgICBpZiAoci5tZXJnZSkgYyA9IG5ldyBSZShvLmZpZWxkTWFzayksIGEgPSBvLmZpZWxkVHJhbnNmb3JtczsgZWxzZSBpZiAoci5tZXJnZUZpZWxkcykge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByLm1lcmdlRmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gd2woZSwgcywgbik7XG4gICAgICAgICAgICBpZiAoIW8uY29udGFpbnMoaSkpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEZpZWxkICcke2l9JyBpcyBzcGVjaWZpZWQgaW4geW91ciBmaWVsZCBtYXNrIGJ1dCBtaXNzaW5nIGZyb20geW91ciBpbnB1dCBkYXRhLmApO1xuICAgICAgICAgICAgeWwodCwgaSkgfHwgdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIGMgPSBuZXcgUmUodCksIGEgPSBvLmZpZWxkVHJhbnNmb3Jtcy5maWx0ZXIoKHQgPT4gYy5jb3ZlcnModC5maWVsZCkpKTtcbiAgICB9IGVsc2UgYyA9IG51bGwsIGEgPSBvLmZpZWxkVHJhbnNmb3JtcztcbiAgICByZXR1cm4gbmV3IFdoKG5ldyB1bih1KSwgYywgYSk7XG59XG5cbmNsYXNzIGVsIGV4dGVuZHMgUWgge1xuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgaWYgKDIgLyogVXNlckRhdGFTb3VyY2UuTWVyZ2VTZXQgKi8gIT09IHQuY2EpIHRocm93IDEgLyogVXNlckRhdGFTb3VyY2UuVXBkYXRlICovID09PSB0LmNhID8gdC5fYShgJHt0aGlzLl9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgdXBkYXRlIGRhdGFgKSA6IHQuX2EoYCR7dGhpcy5fbWV0aG9kTmFtZX0oKSBjYW5ub3QgYmUgdXNlZCB3aXRoIHNldCgpIHVubGVzcyB5b3UgcGFzcyB7bWVyZ2U6dHJ1ZX1gKTtcbiAgICAgICAgLy8gTm8gdHJhbnNmb3JtIHRvIGFkZCBmb3IgYSBkZWxldGUsIGJ1dCB3ZSBuZWVkIHRvIGFkZCBpdCB0byBvdXJcbiAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cbiAgICAgICAgcmV0dXJuIHQuZmllbGRNYXNrLnB1c2godC5wYXRoKSwgbnVsbDtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgZWw7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjaGlsZCBjb250ZXh0IGZvciBwYXJzaW5nIFNlcmlhbGl6YWJsZUZpZWxkVmFsdWVzLlxuICpcbiAqIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gY2FsbGluZyBgUGFyc2VDb250ZXh0LmNvbnRleHRXaXRoYCBiZWNhdXNlIGl0IGtlZXBzXG4gKiB0aGUgZmllbGRUcmFuc2Zvcm1zIGFuZCBmaWVsZE1hc2sgc2VwYXJhdGUuXG4gKlxuICogVGhlIGNyZWF0ZWQgY29udGV4dCBoYXMgaXRzIGBkYXRhU291cmNlYCBzZXQgdG8gYFVzZXJEYXRhU291cmNlLkFyZ3VtZW50YC5cbiAqIEFsdGhvdWdoIHRoZXNlIHZhbHVlcyBhcmUgdXNlZCB3aXRoIHdyaXRlcywgYW55IGVsZW1lbnRzIGluIHRoZXNlIEZpZWxkVmFsdWVzXG4gKiBhcmUgbm90IGNvbnNpZGVyZWQgd3JpdGVzIHNpbmNlIHRoZXkgY2Fubm90IGNvbnRhaW4gYW55IEZpZWxkVmFsdWUgc2VudGluZWxzLFxuICogZXRjLlxuICpcbiAqIEBwYXJhbSBmaWVsZFZhbHVlIC0gVGhlIHNlbnRpbmVsIEZpZWxkVmFsdWUgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhIGNoaWxkXG4gKiAgICAgY29udGV4dC5cbiAqIEBwYXJhbSBjb250ZXh0IC0gVGhlIHBhcmVudCBjb250ZXh0LlxuICogQHBhcmFtIGFycmF5RWxlbWVudCAtIFdoZXRoZXIgb3Igbm90IHRoZSBGaWVsZFZhbHVlIGhhcyBhbiBhcnJheS5cbiAqLyBmdW5jdGlvbiBubCh0LCBlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBZaCh7XG4gICAgICAgIGNhOiAzIC8qIFVzZXJEYXRhU291cmNlLkFyZ3VtZW50ICovICxcbiAgICAgICAgZ2E6IGUuc2V0dGluZ3MuZ2EsXG4gICAgICAgIG1ldGhvZE5hbWU6IHQuX21ldGhvZE5hbWUsXG4gICAgICAgIGxhOiBuXG4gICAgfSwgZS5kYXRhYmFzZUlkLCBlLnNlcmlhbGl6ZXIsIGUuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyk7XG59XG5cbmNsYXNzIHNsIGV4dGVuZHMgUWgge1xuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNcyh0LnBhdGgsIG5ldyBicyk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIHNsO1xuICAgIH1cbn1cblxuY2xhc3MgaWwgZXh0ZW5kcyBRaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0KSwgdGhpcy5wYSA9IGU7XG4gICAgfVxuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5sKHRoaXMsIHQsIFxuICAgICAgICAvKmFycmF5PSovICEwKSwgbiA9IHRoaXMucGEubWFwKCh0ID0+IGhsKHQsIGUpKSksIHMgPSBuZXcgVnMobik7XG4gICAgICAgIHJldHVybiBuZXcgTXModC5wYXRoLCBzKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogSW1wbGVtZW50IGlzRXF1YWxzXG4gICAgICAgIHJldHVybiB0aGlzID09PSB0O1xuICAgIH1cbn1cblxuY2xhc3MgcmwgZXh0ZW5kcyBRaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0KSwgdGhpcy5wYSA9IGU7XG4gICAgfVxuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5sKHRoaXMsIHQsIFxuICAgICAgICAvKmFycmF5PSovICEwKSwgbiA9IHRoaXMucGEubWFwKCh0ID0+IGhsKHQsIGUpKSksIHMgPSBuZXcgRHMobik7XG4gICAgICAgIHJldHVybiBuZXcgTXModC5wYXRoLCBzKTtcbiAgICB9XG4gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogSW1wbGVtZW50IGlzRXF1YWxzXG4gICAgICAgIHJldHVybiB0aGlzID09PSB0O1xuICAgIH1cbn1cblxuY2xhc3Mgb2wgZXh0ZW5kcyBRaCB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcih0KSwgdGhpcy5JYSA9IGU7XG4gICAgfVxuICAgIF90b0ZpZWxkVHJhbnNmb3JtKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyB4cyh0LnNlcmlhbGl6ZXIsIEVzKHQuc2VyaWFsaXplciwgdGhpcy5JYSkpO1xuICAgICAgICByZXR1cm4gbmV3IE1zKHQucGF0aCwgZSk7XG4gICAgfVxuICAgIGlzRXF1YWwodCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9XG59XG5cbi8qKiBQYXJzZSB1cGRhdGUgZGF0YSBmcm9tIGFuIHVwZGF0ZSgpIGNhbGwuICovIGZ1bmN0aW9uIHVsKHQsIGUsIG4sIHMpIHtcbiAgICBjb25zdCBpID0gdC55YSgxIC8qIFVzZXJEYXRhU291cmNlLlVwZGF0ZSAqLyAsIGUsIG4pO1xuICAgIGRsKFwiRGF0YSBtdXN0IGJlIGFuIG9iamVjdCwgYnV0IGl0IHdhczpcIiwgaSwgcyk7XG4gICAgY29uc3QgciA9IFtdLCBvID0gdW4uZW1wdHkoKTtcbiAgICBnZShzLCAoKHQsIHMpID0+IHtcbiAgICAgICAgY29uc3QgdSA9IG1sKGUsIHQsIG4pO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgcyA9IGdldE1vZHVsYXJJbnN0YW5jZShzKTtcbiAgICAgICAgY29uc3QgYyA9IGkuZGEodSk7XG4gICAgICAgIGlmIChzIGluc3RhbmNlb2YgZWwpIFxuICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cbiAgICAgICAgci5wdXNoKHUpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBobChzLCBjKTtcbiAgICAgICAgICAgIG51bGwgIT0gdCAmJiAoci5wdXNoKHUpLCBvLnNldCh1LCB0KSk7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3QgdSA9IG5ldyBSZShyKTtcbiAgICByZXR1cm4gbmV3IEhoKG8sIHUsIGkuZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqIFBhcnNlIHVwZGF0ZSBkYXRhIGZyb20gYSBsaXN0IG9mIGZpZWxkL3ZhbHVlIGFyZ3VtZW50cy4gKi8gZnVuY3Rpb24gY2wodCwgZSwgbiwgcywgaSwgcikge1xuICAgIGNvbnN0IG8gPSB0LnlhKDEgLyogVXNlckRhdGFTb3VyY2UuVXBkYXRlICovICwgZSwgbiksIHUgPSBbIHdsKGUsIHMsIG4pIF0sIGMgPSBbIGkgXTtcbiAgICBpZiAoci5sZW5ndGggJSAyICE9IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEZ1bmN0aW9uICR7ZX0oKSBuZWVkcyB0byBiZSBjYWxsZWQgd2l0aCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMgdGhhdCBhbHRlcm5hdGUgYmV0d2VlbiBmaWVsZCBuYW1lcyBhbmQgdmFsdWVzLmApO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgci5sZW5ndGg7IHQgKz0gMikgdS5wdXNoKHdsKGUsIHJbdF0pKSwgYy5wdXNoKHJbdCArIDFdKTtcbiAgICBjb25zdCBhID0gW10sIGggPSB1bi5lbXB0eSgpO1xuICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciB0byBwaWNrIHRoZSBsYXN0IHZhbHVlIGZvciBhIGZpZWxkIGlmIHRoZVxuICAgIC8vIHVzZXIgc3BlY2lmaWVkIHRoZSBmaWVsZCBtdWx0aXBsZSB0aW1lcy5cbiAgICBmb3IgKGxldCB0ID0gdS5sZW5ndGggLSAxOyB0ID49IDA7IC0tdCkgaWYgKCF5bChhLCB1W3RdKSkge1xuICAgICAgICBjb25zdCBlID0gdVt0XTtcbiAgICAgICAgbGV0IG4gPSBjW3RdO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgbiA9IGdldE1vZHVsYXJJbnN0YW5jZShuKTtcbiAgICAgICAgY29uc3QgcyA9IG8uZGEoZSk7XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgZWwpIFxuICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cbiAgICAgICAgYS5wdXNoKGUpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBobChuLCBzKTtcbiAgICAgICAgICAgIG51bGwgIT0gdCAmJiAoYS5wdXNoKGUpLCBoLnNldChlLCB0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbCA9IG5ldyBSZShhKTtcbiAgICByZXR1cm4gbmV3IEhoKGgsIGwsIG8uZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIFwicXVlcnkgdmFsdWVcIiAoZS5nLiB2YWx1ZSBpbiBhIHdoZXJlIGZpbHRlciBvciBhIHZhbHVlIGluIGEgY3Vyc29yXG4gKiBib3VuZCkuXG4gKlxuICogQHBhcmFtIGFsbG93QXJyYXlzIC0gV2hldGhlciB0aGUgcXVlcnkgdmFsdWUgaXMgYW4gYXJyYXkgdGhhdCBtYXkgZGlyZWN0bHlcbiAqIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGUuZy4gdGhlIG9wZXJhbmQgb2YgYW4gYGluYCBxdWVyeSkuXG4gKi8gZnVuY3Rpb24gYWwodCwgZSwgbiwgcyA9ICExKSB7XG4gICAgcmV0dXJuIGhsKG4sIHQueWEocyA/IDQgLyogVXNlckRhdGFTb3VyY2UuQXJyYXlBcmd1bWVudCAqLyA6IDMgLyogVXNlckRhdGFTb3VyY2UuQXJndW1lbnQgKi8gLCBlKSk7XG59XG5cbi8qKlxuICogUGFyc2VzIHVzZXIgZGF0YSB0byBQcm90b2J1ZiBWYWx1ZXMuXG4gKlxuICogQHBhcmFtIGlucHV0IC0gRGF0YSB0byBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gY29udGV4dCAtIEEgY29udGV4dCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhdGggYmVpbmcgcGFyc2VkLFxuICogdGhlIHNvdXJjZSBvZiB0aGUgZGF0YSBiZWluZyBwYXJzZWQsIGV0Yy5cbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdmFsdWUsIG9yIG51bGwgaWYgdGhlIHZhbHVlIHdhcyBhIEZpZWxkVmFsdWUgc2VudGluZWxcbiAqIHRoYXQgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIHBhcnNlZCBkYXRhLlxuICovIGZ1bmN0aW9uIGhsKHQsIGUpIHtcbiAgICBpZiAoZmwoXG4gICAgLy8gVW53cmFwIHRoZSBBUEkgdHlwZSBmcm9tIHRoZSBDb21wYXQgU0RLLiBUaGlzIHdpbGwgcmV0dXJuIHRoZSBBUEkgdHlwZVxuICAgIC8vIGZyb20gZmlyZXN0b3JlLWV4cC5cbiAgICB0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpKSkgcmV0dXJuIGRsKFwiVW5zdXBwb3J0ZWQgZmllbGQgdmFsdWU6XCIsIGUsIHQpLCBsbCh0LCBlKTtcbiAgICBpZiAodCBpbnN0YW5jZW9mIFFoKSBcbiAgICAvLyBGaWVsZFZhbHVlcyB1c3VhbGx5IHBhcnNlIGludG8gdHJhbnNmb3JtcyAoZXhjZXB0IGRlbGV0ZUZpZWxkKCkpXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBkbyBub3Qgd2FudCB0byBpbmNsdWRlIHRoaXMgZmllbGQgaW4gb3VyIHBhcnNlZCBkYXRhXG4gICAgLy8gKGFzIGRvaW5nIHNvIHdpbGwgb3ZlcndyaXRlIHRoZSBmaWVsZCBkaXJlY3RseSBwcmlvciB0byB0aGUgdHJhbnNmb3JtXG4gICAgLy8gdHJ5aW5nIHRvIHRyYW5zZm9ybSBpdCkuIFNvIHdlIGRvbid0IGFkZCB0aGlzIGxvY2F0aW9uIHRvXG4gICAgLy8gY29udGV4dC5maWVsZE1hc2sgYW5kIHdlIHJldHVybiBudWxsIGFzIG91ciBwYXJzaW5nIHJlc3VsdC5cbiAgICAvKipcbiAqIFwiUGFyc2VzXCIgdGhlIHByb3ZpZGVkIEZpZWxkVmFsdWVJbXBsLCBhZGRpbmcgYW55IG5lY2Vzc2FyeSB0cmFuc2Zvcm1zIHRvXG4gKiBjb250ZXh0LmZpZWxkVHJhbnNmb3Jtcy5cbiAqL1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFNlbnRpbmVscyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCB3cml0ZXMsIGFuZCBub3Qgd2l0aGluIGFycmF5cy5cbiAgICAgICAgaWYgKCFKaChlLmNhKSkgdGhyb3cgZS5fYShgJHt0Ll9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB1cGRhdGUoKSBhbmQgc2V0KClgKTtcbiAgICAgICAgaWYgKCFlLnBhdGgpIHRocm93IGUuX2EoYCR7dC5fbWV0aG9kTmFtZX0oKSBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbnNpZGUgYXJyYXlzYCk7XG4gICAgICAgIGNvbnN0IG4gPSB0Ll90b0ZpZWxkVHJhbnNmb3JtKGUpO1xuICAgICAgICBuICYmIGUuZmllbGRUcmFuc2Zvcm1zLnB1c2gobik7XG4gICAgfVxuICAgIC8qKlxuICogSGVscGVyIHRvIHBhcnNlIGEgc2NhbGFyIHZhbHVlIChpLmUuIG5vdCBhbiBPYmplY3QsIEFycmF5LCBvciBGaWVsZFZhbHVlKVxuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdmFsdWVcbiAqLyAodCwgZSksIG51bGw7XG4gICAgaWYgKHZvaWQgMCA9PT0gdCAmJiBlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpIFxuICAgIC8vIElmIHRoZSBpbnB1dCBpcyB1bmRlZmluZWQgaXQgY2FuIG5ldmVyIHBhcnRpY2lwYXRlIGluIHRoZSBmaWVsZE1hc2ssIHNvXG4gICAgLy8gZG9uJ3QgaGFuZGxlIHRoaXMgYmVsb3cuIElmIGBpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzYCBpcyBmYWxzZSxcbiAgICAvLyBgcGFyc2VTY2FsYXJWYWx1ZWAgd2lsbCByZWplY3QgYW4gdW5kZWZpbmVkIHZhbHVlLlxuICAgIHJldHVybiBudWxsO1xuICAgIGlmIChcbiAgICAvLyBJZiBjb250ZXh0LnBhdGggaXMgbnVsbCB3ZSBhcmUgaW5zaWRlIGFuIGFycmF5IGFuZCB3ZSBkb24ndCBzdXBwb3J0XG4gICAgLy8gZmllbGQgbWFzayBwYXRocyBtb3JlIGdyYW51bGFyIHRoYW4gdGhlIHRvcC1sZXZlbCBhcnJheS5cbiAgICBlLnBhdGggJiYgZS5maWVsZE1hc2sucHVzaChlLnBhdGgpLCB0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogSW5jbHVkZSB0aGUgcGF0aCBjb250YWluaW5nIHRoZSBhcnJheSBpbiB0aGUgZXJyb3JcbiAgICAgICAgLy8gbWVzc2FnZS5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgSU4gcXVlcmllcywgdGhlIHBhcnNlZCBkYXRhIGlzIGFuIGFycmF5IChyZXByZXNlbnRpbmdcbiAgICAgICAgLy8gdGhlIHNldCBvZiB2YWx1ZXMgdG8gYmUgaW5jbHVkZWQgZm9yIHRoZSBJTiBxdWVyeSkgdGhhdCBtYXkgZGlyZWN0bHlcbiAgICAgICAgLy8gY29udGFpbiBhZGRpdGlvbmFsIGFycmF5cyAoZWFjaCByZXByZXNlbnRpbmcgYW4gaW5kaXZpZHVhbCBmaWVsZFxuICAgICAgICAvLyB2YWx1ZSksIHNvIHdlIGRpc2FibGUgdGhpcyB2YWxpZGF0aW9uLlxuICAgICAgICBpZiAoZS5zZXR0aW5ncy5sYSAmJiA0IC8qIFVzZXJEYXRhU291cmNlLkFycmF5QXJndW1lbnQgKi8gIT09IGUuY2EpIHRocm93IGUuX2EoXCJOZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGhsKGksIGUud2EocykpO1xuICAgICAgICAgICAgICAgIG51bGwgPT0gdCAmJiAoXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBpbmNsdWRlIG51bGxzIGluIHRoZSBhcnJheSBmb3IgZmllbGRzIGJlaW5nIHJlcGxhY2VkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIHNlbnRpbmVsLlxuICAgICAgICAgICAgICAgIHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgICAgICB9KSwgbi5wdXNoKHQpLCBzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0LCBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKG51bGwgPT09ICh0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpKSkgcmV0dXJuIHtcbiAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIHQpIHJldHVybiBFcyhlLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICBpZiAoXCJib29sZWFuXCIgPT0gdHlwZW9mIHQpIHJldHVybiB7XG4gICAgICAgICAgICBib29sZWFuVmFsdWU6IHRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB7XG4gICAgICAgICAgICBzdHJpbmdWYWx1ZTogdFxuICAgICAgICB9O1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpdC5mcm9tRGF0ZSh0KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wVmFsdWU6IERpKGUuc2VyaWFsaXplciwgbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBpdCkge1xuICAgICAgICAgICAgLy8gRmlyZXN0b3JlIGJhY2tlbmQgdHJ1bmNhdGVzIHByZWNpc2lvbiBkb3duIHRvIG1pY3Jvc2Vjb25kcy4gVG8gZW5zdXJlXG4gICAgICAgICAgICAvLyBvZmZsaW5lIG1vZGUgd29ya3MgdGhlIHNhbWUgd2l0aCByZWdhcmRzIHRvIHRydW5jYXRpb24sIHBlcmZvcm0gdGhlXG4gICAgICAgICAgICAvLyB0cnVuY2F0aW9uIGltbWVkaWF0ZWx5IHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIGJhY2tlbmQgdG8gZG8gdGhhdC5cbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgaXQodC5zZWNvbmRzLCAxZTMgKiBNYXRoLmZsb29yKHQubmFub3NlY29uZHMgLyAxZTMpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wVmFsdWU6IERpKGUuc2VyaWFsaXplciwgbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBqaCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogdC5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHQubG9uZ2l0dWRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgVWgpIHJldHVybiB7XG4gICAgICAgICAgICBieXRlc1ZhbHVlOiBDaShlLnNlcmlhbGl6ZXIsIHQuX2J5dGVTdHJpbmcpXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgZmgpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmRhdGFiYXNlSWQsIHMgPSB0LmZpcmVzdG9yZS5fZGF0YWJhc2VJZDtcbiAgICAgICAgICAgIGlmICghcy5pc0VxdWFsKG4pKSB0aHJvdyBlLl9hKGBEb2N1bWVudCByZWZlcmVuY2UgaXMgZm9yIGRhdGFiYXNlICR7cy5wcm9qZWN0SWR9LyR7cy5kYXRhYmFzZX0gYnV0IHNob3VsZCBiZSBmb3IgZGF0YWJhc2UgJHtuLnByb2plY3RJZH0vJHtuLmRhdGFiYXNlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VWYWx1ZToga2kodC5maXJlc3RvcmUuX2RhdGFiYXNlSWQgfHwgZS5kYXRhYmFzZUlkLCB0Ll9rZXkucGF0aClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZS5fYShgVW5zdXBwb3J0ZWQgZmllbGQgdmFsdWU6ICR7b2godCl9YCk7XG4gICAgfVxuICAgIC8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYW4gb2JqZWN0IGxvb2tzIGxpa2UgYSBKU09OIG9iamVjdCB0aGF0IHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAqIGludG8gYSBzdHJ1Y3QuIE5vcm1hbCBjbGFzcy9wcm90b3R5cGUgaW5zdGFuY2VzIGFyZSBjb25zaWRlcmVkIHRvIGxvb2sgbGlrZVxuICogSlNPTiBvYmplY3RzIHNpbmNlIHRoZXkgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhIHN0cnVjdCB2YWx1ZS4gQXJyYXlzLCBEYXRlcyxcbiAqIEdlb1BvaW50cywgZXRjLiBhcmUgbm90IGNvbnNpZGVyZWQgdG8gbG9vayBsaWtlIEpTT04gb2JqZWN0cyBzaW5jZSB0aGV5IG1hcFxuICogdG8gc3BlY2lmaWMgRmllbGRWYWx1ZSB0eXBlcyBvdGhlciB0aGFuIE9iamVjdFZhbHVlLlxuICovICh0LCBlKTtcbn1cblxuZnVuY3Rpb24gbGwodCwgZSkge1xuICAgIGNvbnN0IG4gPSB7fTtcbiAgICByZXR1cm4geWUodCkgPyBcbiAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZW1wdHkgb2JqZWN0LCB3ZSBleHBsaWNpdGx5IGFkZCBpdCB0byB0aGUgdXBkYXRlXG4gICAgLy8gbWFzayB0byBlbnN1cmUgdGhhdCB0aGUgc2VydmVyIGNyZWF0ZXMgYSBtYXAgZW50cnkuXG4gICAgZS5wYXRoICYmIGUucGF0aC5sZW5ndGggPiAwICYmIGUuZmllbGRNYXNrLnB1c2goZS5wYXRoKSA6IGdlKHQsICgodCwgcykgPT4ge1xuICAgICAgICBjb25zdCBpID0gaGwocywgZS5oYSh0KSk7XG4gICAgICAgIG51bGwgIT0gaSAmJiAoblt0XSA9IGkpO1xuICAgIH0pKSwge1xuICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgZmllbGRzOiBuXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBmbCh0KSB7XG4gICAgcmV0dXJuICEoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCBudWxsID09PSB0IHx8IHQgaW5zdGFuY2VvZiBBcnJheSB8fCB0IGluc3RhbmNlb2YgRGF0ZSB8fCB0IGluc3RhbmNlb2YgaXQgfHwgdCBpbnN0YW5jZW9mIGpoIHx8IHQgaW5zdGFuY2VvZiBVaCB8fCB0IGluc3RhbmNlb2YgZmggfHwgdCBpbnN0YW5jZW9mIFFoKTtcbn1cblxuZnVuY3Rpb24gZGwodCwgZSwgbikge1xuICAgIGlmICghZmwobikgfHwgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdCAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpID09PSBPYmplY3QucHJvdG90eXBlIHx8IG51bGwgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSk7XG4gICAgfShuKSkge1xuICAgICAgICBjb25zdCBzID0gb2gobik7XG4gICAgICAgIHRocm93IFwiYW4gb2JqZWN0XCIgPT09IHMgPyBlLl9hKHQgKyBcIiBhIGN1c3RvbSBvYmplY3RcIikgOiBlLl9hKHQgKyBcIiBcIiArIHMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBjYWxscyBmcm9tRG90U2VwYXJhdGVkU3RyaW5nKCkgYnV0IHdyYXBzIGFueSBlcnJvciB0aHJvd24uXG4gKi8gZnVuY3Rpb24gd2wodCwgZSwgbikge1xuICAgIGlmICgoXG4gICAgLy8gSWYgcmVxdWlyZWQsIHJlcGxhY2UgdGhlIEZpZWxkUGF0aCBDb21wYXQgY2xhc3Mgd2l0aCB3aXRoIHRoZSBmaXJlc3RvcmUtZXhwXG4gICAgLy8gRmllbGRQYXRoLlxuICAgIGUgPSBnZXRNb2R1bGFySW5zdGFuY2UoZSkpIGluc3RhbmNlb2YgS2gpIHJldHVybiBlLl9pbnRlcm5hbFBhdGg7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHJldHVybiBtbCh0LCBlKTtcbiAgICB0aHJvdyBnbChcIkZpZWxkIHBhdGggYXJndW1lbnRzIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcgb3IgXCIsIHQsIFxuICAgIC8qIGhhc0NvbnZlcnRlcj0gKi8gITEsIFxuICAgIC8qIHBhdGg9ICovIHZvaWQgMCwgbik7XG59XG5cbi8qKlxuICogTWF0Y2hlcyBhbnkgY2hhcmFjdGVycyBpbiBhIGZpZWxkIHBhdGggc3RyaW5nIHRoYXQgYXJlIHJlc2VydmVkLlxuICovIGNvbnN0IF9sID0gbmV3IFJlZ0V4cChcIlt+XFxcXCovXFxcXFtcXFxcXV1cIik7XG5cbi8qKlxuICogV3JhcHMgZnJvbURvdFNlcGFyYXRlZFN0cmluZyB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgYWJvdXQgdGhlIG1ldGhvZCB0aGF0XG4gKiB3YXMgdGhyb3duLlxuICogQHBhcmFtIG1ldGhvZE5hbWUgLSBUaGUgcHVibGljbHkgdmlzaWJsZSBtZXRob2QgbmFtZVxuICogQHBhcmFtIHBhdGggLSBUaGUgZG90LXNlcGFyYXRlZCBzdHJpbmcgZm9ybSBvZiBhIGZpZWxkIHBhdGggd2hpY2ggd2lsbCBiZVxuICogc3BsaXQgb24gZG90cy5cbiAqIEBwYXJhbSB0YXJnZXREb2MgLSBUaGUgZG9jdW1lbnQgYWdhaW5zdCB3aGljaCB0aGUgZmllbGQgcGF0aCB3aWxsIGJlXG4gKiBldmFsdWF0ZWQuXG4gKi8gZnVuY3Rpb24gbWwodCwgZSwgbikge1xuICAgIGlmIChlLnNlYXJjaChfbCkgPj0gMCkgdGhyb3cgZ2woYEludmFsaWQgZmllbGQgcGF0aCAoJHtlfSkuIFBhdGhzIG11c3Qgbm90IGNvbnRhaW4gJ34nLCAnKicsICcvJywgJ1snLCBvciAnXSdgLCB0LCBcbiAgICAvKiBoYXNDb252ZXJ0ZXI9ICovICExLCBcbiAgICAvKiBwYXRoPSAqLyB2b2lkIDAsIG4pO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgS2goLi4uZS5zcGxpdChcIi5cIikpLl9pbnRlcm5hbFBhdGg7XG4gICAgfSBjYXRjaCAocykge1xuICAgICAgICB0aHJvdyBnbChgSW52YWxpZCBmaWVsZCBwYXRoICgke2V9KS4gUGF0aHMgbXVzdCBub3QgYmUgZW1wdHksIGJlZ2luIHdpdGggJy4nLCBlbmQgd2l0aCAnLicsIG9yIGNvbnRhaW4gJy4uJ2AsIHQsIFxuICAgICAgICAvKiBoYXNDb252ZXJ0ZXI9ICovICExLCBcbiAgICAgICAgLyogcGF0aD0gKi8gdm9pZCAwLCBuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdsKHQsIGUsIG4sIHMsIGkpIHtcbiAgICBjb25zdCByID0gcyAmJiAhcy5pc0VtcHR5KCksIG8gPSB2b2lkIDAgIT09IGk7XG4gICAgbGV0IHUgPSBgRnVuY3Rpb24gJHtlfSgpIGNhbGxlZCB3aXRoIGludmFsaWQgZGF0YWA7XG4gICAgbiAmJiAodSArPSBcIiAodmlhIGB0b0ZpcmVzdG9yZSgpYClcIiksIHUgKz0gXCIuIFwiO1xuICAgIGxldCBjID0gXCJcIjtcbiAgICByZXR1cm4gKHIgfHwgbykgJiYgKGMgKz0gXCIgKGZvdW5kXCIsIHIgJiYgKGMgKz0gYCBpbiBmaWVsZCAke3N9YCksIG8gJiYgKGMgKz0gYCBpbiBkb2N1bWVudCAke2l9YCksIFxuICAgIGMgKz0gXCIpXCIpLCBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIHUgKyB0ICsgYyk7XG59XG5cbi8qKiBDaGVja3MgYGhheXN0YWNrYCBpZiBGaWVsZFBhdGggYG5lZWRsZWAgaXMgcHJlc2VudC4gUnVucyBpbiBPKG4pLiAqLyBmdW5jdGlvbiB5bCh0LCBlKSB7XG4gICAgcmV0dXJuIHQuc29tZSgodCA9PiB0LmlzRXF1YWwoZSkpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBgRG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbnMgZGF0YSByZWFkIGZyb20gYSBkb2N1bWVudCBpbiB5b3VyIEZpcmVzdG9yZVxuICogZGF0YWJhc2UuIFRoZSBkYXRhIGNhbiBiZSBleHRyYWN0ZWQgd2l0aCBgLmRhdGEoKWAgb3IgYC5nZXQoPGZpZWxkPilgIHRvXG4gKiBnZXQgYSBzcGVjaWZpYyBmaWVsZC5cbiAqXG4gKiBGb3IgYSBgRG9jdW1lbnRTbmFwc2hvdGAgdGhhdCBwb2ludHMgdG8gYSBub24tZXhpc3RpbmcgZG9jdW1lbnQsIGFueSBkYXRhXG4gKiBhY2Nlc3Mgd2lsbCByZXR1cm4gJ3VuZGVmaW5lZCcuIFlvdSBjYW4gdXNlIHRoZSBgZXhpc3RzKClgIG1ldGhvZCB0b1xuICogZXhwbGljaXRseSB2ZXJpZnkgYSBkb2N1bWVudCdzIGV4aXN0ZW5jZS5cbiAqLyBjbGFzcyBwbCB7XG4gICAgLy8gTm90ZTogVGhpcyBjbGFzcyBpcyBzdHJpcHBlZCBkb3duIHZlcnNpb24gb2YgdGhlIERvY3VtZW50U25hcHNob3QgaW5cbiAgICAvLyB0aGUgbGVnYWN5IFNESy4gVGhlIGNoYW5nZXMgYXJlOlxuICAgIC8vIC0gTm8gc3VwcG9ydCBmb3IgU25hcHNob3RNZXRhZGF0YS5cbiAgICAvLyAtIE5vIHN1cHBvcnQgZm9yIFNuYXBzaG90T3B0aW9ucy5cbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciBwcm90ZWN0ZWQgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IHQsIHRoaXMuX3VzZXJEYXRhV3JpdGVyID0gZSwgdGhpcy5fa2V5ID0gbiwgdGhpcy5fZG9jdW1lbnQgPSBzLCBcbiAgICAgICAgdGhpcy5fY29udmVydGVyID0gaTtcbiAgICB9XG4gICAgLyoqIFByb3BlcnR5IG9mIHRoZSBgRG9jdW1lbnRTbmFwc2hvdGAgdGhhdCBwcm92aWRlcyB0aGUgZG9jdW1lbnQncyBJRC4gKi8gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5LnBhdGgubGFzdFNlZ21lbnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGBEb2N1bWVudFJlZmVyZW5jZWAgZm9yIHRoZSBkb2N1bWVudCBpbmNsdWRlZCBpbiB0aGUgYERvY3VtZW50U25hcHNob3RgLlxuICAgICAqLyAgICBnZXQgcmVmKCkge1xuICAgICAgICByZXR1cm4gbmV3IGZoKHRoaXMuX2ZpcmVzdG9yZSwgdGhpcy5fY29udmVydGVyLCB0aGlzLl9rZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduYWxzIHdoZXRoZXIgb3Igbm90IHRoZSBkb2N1bWVudCBhdCB0aGUgc25hcHNob3QncyBsb2NhdGlvbiBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBkb2N1bWVudCBleGlzdHMuXG4gICAgICovICAgIGV4aXN0cygpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuX2RvY3VtZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgYXMgYW4gYE9iamVjdGAuIFJldHVybnMgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgb3IgYHVuZGVmaW5lZGBcbiAgICAgKiBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi8gICAgZGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29udmVydGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHVzZSB0aGUgY29udmVydGVyIGFuZCBjcmVhdGUgYSBuZXcgRG9jdW1lbnRTbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIGlmIGEgY29udmVydGVyIGhhcyBiZWVuIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgSWwodGhpcy5fZmlyZXN0b3JlLCB0aGlzLl91c2VyRGF0YVdyaXRlciwgdGhpcy5fa2V5LCB0aGlzLl9kb2N1bWVudCwgXG4gICAgICAgICAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udmVydGVyLmZyb21GaXJlc3RvcmUodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydFZhbHVlKHRoaXMuX2RvY3VtZW50LmRhdGEudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZmllbGQgc3BlY2lmaWVkIGJ5IGBmaWVsZFBhdGhgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IG9yIGZpZWxkIGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIHBhdGggKGZvciBleGFtcGxlICdmb28nIG9yICdmb28uYmFyJykgdG8gYSBzcGVjaWZpY1xuICAgICAqIGZpZWxkLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGF0IHRoZSBzcGVjaWZpZWQgZmllbGQgbG9jYXRpb24gb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2hcbiAgICAgKiBmaWVsZCBleGlzdHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIC8vIFdlIGFyZSB1c2luZyBgYW55YCBoZXJlIHRvIGF2b2lkIGFuIGV4cGxpY2l0IGNhc3QgYnkgb3VyIHVzZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZ2V0KHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZG9jdW1lbnQuZGF0YS5maWVsZChUbChcIkRvY3VtZW50U25hcHNob3QuZ2V0XCIsIHQpKTtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBlKSByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydFZhbHVlKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbnMgZGF0YSByZWFkIGZyb20gYSBkb2N1bWVudCBpbiB5b3VyXG4gKiBGaXJlc3RvcmUgZGF0YWJhc2UgYXMgcGFydCBvZiBhIHF1ZXJ5LiBUaGUgZG9jdW1lbnQgaXMgZ3VhcmFudGVlZCB0byBleGlzdFxuICogYW5kIGl0cyBkYXRhIGNhbiBiZSBleHRyYWN0ZWQgd2l0aCBgLmRhdGEoKWAgb3IgYC5nZXQoPGZpZWxkPilgIHRvIGdldCBhXG4gKiBzcGVjaWZpYyBmaWVsZC5cbiAqXG4gKiBBIGBRdWVyeURvY3VtZW50U25hcHNob3RgIG9mZmVycyB0aGUgc2FtZSBBUEkgc3VyZmFjZSBhcyBhXG4gKiBgRG9jdW1lbnRTbmFwc2hvdGAuIFNpbmNlIHF1ZXJ5IHJlc3VsdHMgY29udGFpbiBvbmx5IGV4aXN0aW5nIGRvY3VtZW50cywgdGhlXG4gKiBgZXhpc3RzYCBwcm9wZXJ0eSB3aWxsIGFsd2F5cyBiZSB0cnVlIGFuZCBgZGF0YSgpYCB3aWxsIG5ldmVyIHJldHVyblxuICogJ3VuZGVmaW5lZCcuXG4gKi8gY2xhc3MgSWwgZXh0ZW5kcyBwbCB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybnMgQW4gYE9iamVjdGAgY29udGFpbmluZyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZGF0YSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBjYWxscyBgZnJvbURvdFNlcGFyYXRlZFN0cmluZygpYCBidXQgd3JhcHMgYW55IGVycm9yIHRocm93bi5cbiAqLyBmdW5jdGlvbiBUbCh0LCBlKSB7XG4gICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBtbCh0LCBlKSA6IGUgaW5zdGFuY2VvZiBLaCA/IGUuX2ludGVybmFsUGF0aCA6IGUuX2RlbGVnYXRlLl9pbnRlcm5hbFBhdGg7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIEVsKHQpIHtcbiAgICBpZiAoXCJMXCIgLyogTGltaXRUeXBlLkxhc3QgKi8gPT09IHQubGltaXRUeXBlICYmIDAgPT09IHQuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCkgdGhyb3cgbmV3IFUocS5VTklNUExFTUVOVEVELCBcImxpbWl0VG9MYXN0KCkgcXVlcmllcyByZXF1aXJlIHNwZWNpZnlpbmcgYXQgbGVhc3Qgb25lIG9yZGVyQnkoKSBjbGF1c2VcIik7XG59XG5cbi8qKlxuICogQW4gYEFwcGxpYWJsZUNvbnN0cmFpbnRgIGlzIGFuIGFic3RyYWN0aW9uIG9mIGEgY29uc3RyYWludCB0aGF0IGNhbiBiZSBhcHBsaWVkXG4gKiB0byBhIEZpcmVzdG9yZSBxdWVyeS5cbiAqLyBjbGFzcyBBbCB7fVxuXG4vKipcbiAqIEEgYFF1ZXJ5Q29uc3RyYWludGAgaXMgdXNlZCB0byBuYXJyb3cgdGhlIHNldCBvZiBkb2N1bWVudHMgcmV0dXJuZWQgYnkgYVxuICogRmlyZXN0b3JlIHF1ZXJ5LiBgUXVlcnlDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIHdoZXJlfSxcbiAqIHtAbGluayBvcmRlckJ5fSwge0BsaW5rIChzdGFydEF0OjEpfSwge0BsaW5rIChzdGFydEFmdGVyOjEpfSwge0BsaW5rXG4gKiAoZW5kQmVmb3JlOjEpfSwge0BsaW5rIChlbmRBdDoxKX0sIHtAbGluayBsaW1pdH0sIHtAbGluayBsaW1pdFRvTGFzdH0gYW5kXG4gKiBjYW4gdGhlbiBiZSBwYXNzZWQgdG8ge0BsaW5rIChxdWVyeToxKX0gdG8gY3JlYXRlIGEgbmV3IHF1ZXJ5IGluc3RhbmNlIHRoYXRcbiAqIGFsc28gY29udGFpbnMgdGhpcyBgUXVlcnlDb25zdHJhaW50YC5cbiAqLyBjbGFzcyB2bCBleHRlbmRzIEFsIHt9XG5cbmZ1bmN0aW9uIFJsKHQsIGUsIC4uLm4pIHtcbiAgICBsZXQgcyA9IFtdO1xuICAgIGUgaW5zdGFuY2VvZiBBbCAmJiBzLnB1c2goZSksIHMgPSBzLmNvbmNhdChuKSwgZnVuY3Rpb24odCkge1xuICAgICAgICBjb25zdCBlID0gdC5maWx0ZXIoKHQgPT4gdCBpbnN0YW5jZW9mIFZsKSkubGVuZ3RoLCBuID0gdC5maWx0ZXIoKHQgPT4gdCBpbnN0YW5jZW9mIFBsKSkubGVuZ3RoO1xuICAgICAgICBpZiAoZSA+IDEgfHwgZSA+IDAgJiYgbiA+IDApIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkUXVlcnkuIFdoZW4gdXNpbmcgY29tcG9zaXRlIGZpbHRlcnMsIHlvdSBjYW5ub3QgdXNlIG1vcmUgdGhhbiBvbmUgZmlsdGVyIGF0IHRoZSB0b3AgbGV2ZWwuIENvbnNpZGVyIG5lc3RpbmcgdGhlIG11bHRpcGxlIGZpbHRlcnMgd2l0aGluIGFuIGBhbmQoLi4uKWAgc3RhdGVtZW50LiBGb3IgZXhhbXBsZTogY2hhbmdlIGBxdWVyeShxdWVyeSwgd2hlcmUoLi4uKSwgb3IoLi4uKSlgIHRvIGBxdWVyeShxdWVyeSwgYW5kKHdoZXJlKC4uLiksIG9yKC4uLikpKWAuXCIpO1xuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKlxuICogQ29udmVydHMgRmlyZXN0b3JlJ3MgaW50ZXJuYWwgdHlwZXMgdG8gdGhlIEphdmFTY3JpcHQgdHlwZXMgdGhhdCB3ZSBleHBvc2VcbiAqIHRvIHRoZSB1c2VyLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIChzKTtcbiAgICBmb3IgKGNvbnN0IGUgb2YgcykgdCA9IGUuX2FwcGx5KHQpO1xuICAgIHJldHVybiB0O1xufVxuXG4vKipcbiAqIEEgYFF1ZXJ5RmllbGRGaWx0ZXJDb25zdHJhaW50YCBpcyB1c2VkIHRvIG5hcnJvdyB0aGUgc2V0IG9mIGRvY3VtZW50cyByZXR1cm5lZCBieVxuICogYSBGaXJlc3RvcmUgcXVlcnkgYnkgZmlsdGVyaW5nIG9uIG9uZSBvciBtb3JlIGRvY3VtZW50IGZpZWxkcy5cbiAqIGBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludGBzIGFyZSBjcmVhdGVkIGJ5IGludm9raW5nIHtAbGluayB3aGVyZX0gYW5kIGNhbiB0aGVuXG4gKiBiZSBwYXNzZWQgdG8ge0BsaW5rIChxdWVyeToxKX0gdG8gY3JlYXRlIGEgbmV3IHF1ZXJ5IGluc3RhbmNlIHRoYXQgYWxzbyBjb250YWluc1xuICogdGhpcyBgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnRgLlxuICovIGNsYXNzIFBsIGV4dGVuZHMgdmwge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUsIG4pIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5fZmllbGQgPSB0LCB0aGlzLl9vcCA9IGUsIHRoaXMuX3ZhbHVlID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIHF1ZXJ5IGNvbnN0cmFpbnQgKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJ3aGVyZVwiO1xuICAgIH1cbiAgICBzdGF0aWMgX2NyZWF0ZSh0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGwodCwgZSwgbik7XG4gICAgfVxuICAgIF9hcHBseSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLl9wYXJzZSh0KTtcbiAgICAgICAgcmV0dXJuIFFsKHQuX3F1ZXJ5LCBlKSwgbmV3IGRoKHQuZmlyZXN0b3JlLCB0LmNvbnZlcnRlciwgWW4odC5fcXVlcnksIGUpKTtcbiAgICB9XG4gICAgX3BhcnNlKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFpoKHQuZmlyZXN0b3JlKSwgbiA9IGZ1bmN0aW9uKHQsIGUsIG4sIHMsIGksIHIsIG8pIHtcbiAgICAgICAgICAgIGxldCB1O1xuICAgICAgICAgICAgaWYgKGkuaXNLZXlGaWVsZCgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiYXJyYXktY29udGFpbnNcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOUyAqLyA9PT0gciB8fCBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLyA9PT0gcikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBRdWVyeS4gWW91IGNhbid0IHBlcmZvcm0gJyR7cn0nIHF1ZXJpZXMgb24gZG9jdW1lbnRJZCgpLmApO1xuICAgICAgICAgICAgICAgIGlmIChcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gPT09IHIgfHwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gPT09IHIpIHtcbiAgICAgICAgICAgICAgICAgICAgR2wobywgcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIG8pIGUucHVzaChLbChzLCB0LCBuKSk7XG4gICAgICAgICAgICAgICAgICAgIHUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHUgPSBLbChzLCB0LCBvKTtcbiAgICAgICAgICAgIH0gZWxzZSBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gIT09IHIgJiYgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gIT09IHIgJiYgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gIT09IHIgfHwgR2wobywgciksIFxuICAgICAgICAgICAgdSA9IGFsKG4sIGUsIG8sIFxuICAgICAgICAgICAgLyogYWxsb3dBcnJheXM9ICovIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA9PT0gciB8fCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyA9PT0gcik7XG4gICAgICAgICAgICByZXR1cm4gbW4uY3JlYXRlKGksIHIsIHUpO1xuICAgICAgICB9KHQuX3F1ZXJ5LCBcIndoZXJlXCIsIGUsIHQuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCB0aGlzLl9maWVsZCwgdGhpcy5fb3AsIHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnR9IHRoYXQgZW5mb3JjZXMgdGhhdCBkb2N1bWVudHNcbiAqIG11c3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIGZpZWxkIGFuZCB0aGF0IHRoZSB2YWx1ZSBzaG91bGQgc2F0aXNmeSB0aGVcbiAqIHJlbGF0aW9uIGNvbnN0cmFpbnQgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIGZpZWxkUGF0aCAtIFRoZSBwYXRoIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSBvcFN0ciAtIFRoZSBvcGVyYXRpb24gc3RyaW5nIChlLmcgXCImbHQ7XCIsIFwiJmx0Oz1cIiwgXCI9PVwiLCBcIiZsdDtcIixcbiAqICAgXCImbHQ7PVwiLCBcIiE9XCIpLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGZvciBjb21wYXJpc29uXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnR9LlxuICovIGZ1bmN0aW9uIGJsKHQsIGUsIG4pIHtcbiAgICBjb25zdCBzID0gZSwgaSA9IFRsKFwid2hlcmVcIiwgdCk7XG4gICAgcmV0dXJuIFBsLl9jcmVhdGUoaSwgcywgbik7XG59XG5cbi8qKlxuICogQSBgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50YCBpcyB1c2VkIHRvIG5hcnJvdyB0aGUgc2V0IG9mIGRvY3VtZW50c1xuICogcmV0dXJuZWQgYnkgYSBGaXJlc3RvcmUgcXVlcnkgYnkgcGVyZm9ybWluZyB0aGUgbG9naWNhbCBPUiBvciBBTkQgb2YgbXVsdGlwbGVcbiAqIHtAbGluayBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludH1zIG9yIHtAbGluayBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnR9cy5cbiAqIGBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZyB7QGxpbmsgb3J9IG9yXG4gKiB7QGxpbmsgYW5kfSBhbmQgY2FuIHRoZW4gYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhIG5ldyBxdWVyeVxuICogaW5zdGFuY2UgdGhhdCBhbHNvIGNvbnRhaW5zIHRoZSBgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBWbCBleHRlbmRzIEFsIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgdCwgZSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSB0LCB0aGlzLl9xdWVyeUNvbnN0cmFpbnRzID0gZTtcbiAgICB9XG4gICAgc3RhdGljIF9jcmVhdGUodCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IFZsKHQsIGUpO1xuICAgIH1cbiAgICBfcGFyc2UodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5fcXVlcnlDb25zdHJhaW50cy5tYXAoKGUgPT4gZS5fcGFyc2UodCkpKS5maWx0ZXIoKHQgPT4gdC5nZXRGaWx0ZXJzKCkubGVuZ3RoID4gMCkpO1xuICAgICAgICByZXR1cm4gMSA9PT0gZS5sZW5ndGggPyBlWzBdIDogZ24uY3JlYXRlKGUsIHRoaXMuX2dldE9wZXJhdG9yKCkpO1xuICAgIH1cbiAgICBfYXBwbHkodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5fcGFyc2UodCk7XG4gICAgICAgIHJldHVybiAwID09PSBlLmdldEZpbHRlcnMoKS5sZW5ndGggPyB0IDogKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGxldCBuID0gdDtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLmdldEZsYXR0ZW5lZEZpbHRlcnMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzKSBRbChuLCB0KSwgbiA9IFluKG4sIHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrcyBpZiBhbnkgb2YgdGhlIHByb3ZpZGVkIGZpbHRlciBvcGVyYXRvcnMgYXJlIGluY2x1ZGVkIGluIHRoZSBnaXZlbiBsaXN0IG9mIGZpbHRlcnMgYW5kXG4gICAgICAgIC8vIHJldHVybnMgdGhlIGZpcnN0IG9uZSB0aGF0IGlzLCBvciBudWxsIGlmIG5vbmUgYXJlLlxuICAgICAgICAodC5fcXVlcnksIGUpLCBuZXcgZGgodC5maXJlc3RvcmUsIHQuY29udmVydGVyLCBZbih0Ll9xdWVyeSwgZSkpKTtcbiAgICB9XG4gICAgX2dldFF1ZXJ5Q29uc3RyYWludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeUNvbnN0cmFpbnRzO1xuICAgIH1cbiAgICBfZ2V0T3BlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBcImFuZFwiID09PSB0aGlzLnR5cGUgPyBcImFuZFwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLkFORCAqLyA6IFwib3JcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5PUiAqLztcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50fSB0aGF0IGlzIGEgZGlzanVuY3Rpb24gb2ZcbiAqIHRoZSBnaXZlbiBmaWx0ZXIgY29uc3RyYWludHMuIEEgZGlzanVuY3Rpb24gZmlsdGVyIGluY2x1ZGVzIGEgZG9jdW1lbnQgaWYgaXRcbiAqIHNhdGlzZmllcyBhbnkgb2YgdGhlIGdpdmVuIGZpbHRlcnMuXG4gKlxuICogQHBhcmFtIHF1ZXJ5Q29uc3RyYWludHMgLSBPcHRpb25hbC4gVGhlIGxpc3Qgb2ZcbiAqIHtAbGluayBRdWVyeUZpbHRlckNvbnN0cmFpbnR9cyB0byBwZXJmb3JtIGEgZGlzanVuY3Rpb24gZm9yLiBUaGVzZSBtdXN0IGJlXG4gKiBjcmVhdGVkIHdpdGggY2FsbHMgdG8ge0BsaW5rIHdoZXJlfSwge0BsaW5rIG9yfSwgb3Ige0BsaW5rIGFuZH0uXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCB7QGxpbmsgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50fS5cbiAqLyBmdW5jdGlvbiBTbCguLi50KSB7XG4gICAgLy8gT25seSBzdXBwb3J0IFF1ZXJ5RmlsdGVyQ29uc3RyYWludHNcbiAgICByZXR1cm4gdC5mb3JFYWNoKCh0ID0+IHpsKFwib3JcIiwgdCkpKSwgVmwuX2NyZWF0ZShcIm9yXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuT1IgKi8gLCB0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHtAbGluayBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnR9IHRoYXQgaXMgYSBjb25qdW5jdGlvbiBvZlxuICogdGhlIGdpdmVuIGZpbHRlciBjb25zdHJhaW50cy4gQSBjb25qdW5jdGlvbiBmaWx0ZXIgaW5jbHVkZXMgYSBkb2N1bWVudCBpZiBpdFxuICogc2F0aXNmaWVzIGFsbCBvZiB0aGUgZ2l2ZW4gZmlsdGVycy5cbiAqXG4gKiBAcGFyYW0gcXVlcnlDb25zdHJhaW50cyAtIE9wdGlvbmFsLiBUaGUgbGlzdCBvZlxuICoge0BsaW5rIFF1ZXJ5RmlsdGVyQ29uc3RyYWludH1zIHRvIHBlcmZvcm0gYSBjb25qdW5jdGlvbiBmb3IuIFRoZXNlIG11c3QgYmVcbiAqIGNyZWF0ZWQgd2l0aCBjYWxscyB0byB7QGxpbmsgd2hlcmV9LCB7QGxpbmsgb3J9LCBvciB7QGxpbmsgYW5kfS5cbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIHtAbGluayBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnR9LlxuICovIGZ1bmN0aW9uIERsKC4uLnQpIHtcbiAgICAvLyBPbmx5IHN1cHBvcnQgUXVlcnlGaWx0ZXJDb25zdHJhaW50c1xuICAgIHJldHVybiB0LmZvckVhY2goKHQgPT4gemwoXCJhbmRcIiwgdCkpKSwgVmwuX2NyZWF0ZShcImFuZFwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLkFORCAqLyAsIHQpO1xufVxuXG4vKipcbiAqIEEgYFF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnRgIGlzIHVzZWQgdG8gc29ydCB0aGUgc2V0IG9mIGRvY3VtZW50cyByZXR1cm5lZCBieSBhXG4gKiBGaXJlc3RvcmUgcXVlcnkuIGBRdWVyeU9yZGVyQnlDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmdcbiAqIHtAbGluayBvcmRlckJ5fSBhbmQgY2FuIHRoZW4gYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhIG5ldyBxdWVyeVxuICogaW5zdGFuY2UgdGhhdCBhbHNvIGNvbnRhaW5zIHRoaXMgYFF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnRgLlxuICpcbiAqIE5vdGU6IERvY3VtZW50cyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBvcmRlckJ5IGZpZWxkIHdpbGwgbm90IGJlIHByZXNlbnQgaW5cbiAqIHRoZSBxdWVyeSByZXN1bHQuXG4gKi8gY2xhc3MgQ2wgZXh0ZW5kcyB2bCB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLl9maWVsZCA9IHQsIHRoaXMuX2RpcmVjdGlvbiA9IGUsIFxuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwib3JkZXJCeVwiO1xuICAgIH1cbiAgICBzdGF0aWMgX2NyZWF0ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2wodCwgZSk7XG4gICAgfVxuICAgIF9hcHBseSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5zdGFydEF0KSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IG11c3Qgbm90IGNhbGwgc3RhcnRBdCgpIG9yIHN0YXJ0QWZ0ZXIoKSBiZWZvcmUgY2FsbGluZyBvcmRlckJ5KCkuXCIpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQuZW5kQXQpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgbXVzdCBub3QgY2FsbCBlbmRBdCgpIG9yIGVuZEJlZm9yZSgpIGJlZm9yZSBjYWxsaW5nIG9yZGVyQnkoKS5cIik7XG4gICAgICAgICAgICBjb25zdCBzID0gbmV3IGRuKGUsIG4pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gam4odCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3Qgb3JkZXIgYnkuIEl0IG11c3QgbWF0Y2ggYW55IGluZXF1YWxpdHkuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB6bih0KTtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gbiAmJiBqbCh0LCBuLCBlLmZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KHQsIHMpLCBzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQ3JlYXRlIGEgYEJvdW5kYCBmcm9tIGEgcXVlcnkgYW5kIGEgZG9jdW1lbnQuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBgQm91bmRgIHdpbGwgYWx3YXlzIGluY2x1ZGUgdGhlIGtleSBvZiB0aGUgZG9jdW1lbnRcbiAqIGFuZCBzbyBvbmx5IHRoZSBwcm92aWRlZCBkb2N1bWVudCB3aWxsIGNvbXBhcmUgZXF1YWwgdG8gdGhlIHJldHVybmVkXG4gKiBwb3NpdGlvbi5cbiAqXG4gKiBXaWxsIHRocm93IGlmIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBjb250YWluIGFsbCBmaWVsZHMgb2YgdGhlIG9yZGVyIGJ5XG4gKiBvZiB0aGUgcXVlcnkgb3IgaWYgYW55IG9mIHRoZSBmaWVsZHMgaW4gdGhlIG9yZGVyIGJ5IGFyZSBhbiB1bmNvbW1pdHRlZFxuICogc2VydmVyIHRpbWVzdGFtcC5cbiAqLyAodC5fcXVlcnksIHRoaXMuX2ZpZWxkLCB0aGlzLl9kaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gbmV3IGRoKHQuZmlyZXN0b3JlLCB0LmNvbnZlcnRlciwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0ZSB0aGF0IG9yZGVyQnkgZG9lcyBub3QgbGlzdCB0aGUgc2FtZSBrZXkgdHdpY2UuXG4gICAgICAgICAgICBjb25zdCBuID0gdC5leHBsaWNpdE9yZGVyQnkuY29uY2F0KFsgZSBdKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW4odC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgbiwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xuICAgICAgICB9KHQuX3F1ZXJ5LCBlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlPcmRlckJ5Q29uc3RyYWludH0gdGhhdCBzb3J0cyB0aGUgcXVlcnkgcmVzdWx0IGJ5IHRoZVxuICogc3BlY2lmaWVkIGZpZWxkLCBvcHRpb25hbGx5IGluIGRlc2NlbmRpbmcgb3JkZXIgaW5zdGVhZCBvZiBhc2NlbmRpbmcuXG4gKlxuICogTm90ZTogRG9jdW1lbnRzIHRoYXQgZG8gbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCBmaWVsZCB3aWxsIG5vdCBiZSBwcmVzZW50XG4gKiBpbiB0aGUgcXVlcnkgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSBmaWVsZFBhdGggLSBUaGUgZmllbGQgdG8gc29ydCBieS5cbiAqIEBwYXJhbSBkaXJlY3Rpb25TdHIgLSBPcHRpb25hbCBkaXJlY3Rpb24gdG8gc29ydCBieSAoJ2FzYycgb3IgJ2Rlc2MnKS4gSWZcbiAqIG5vdCBzcGVjaWZpZWQsIG9yZGVyIHdpbGwgYmUgYXNjZW5kaW5nLlxuICogQHJldHVybnMgVGhlIGNyZWF0ZWQge0BsaW5rIFF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnR9LlxuICovIGZ1bmN0aW9uIHhsKHQsIGUgPSBcImFzY1wiKSB7XG4gICAgY29uc3QgbiA9IGUsIHMgPSBUbChcIm9yZGVyQnlcIiwgdCk7XG4gICAgcmV0dXJuIENsLl9jcmVhdGUocywgbik7XG59XG5cbi8qKlxuICogQSBgUXVlcnlMaW1pdENvbnN0cmFpbnRgIGlzIHVzZWQgdG8gbGltaXQgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgcmV0dXJuZWQgYnlcbiAqIGEgRmlyZXN0b3JlIHF1ZXJ5LlxuICogYFF1ZXJ5TGltaXRDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIGxpbWl0fSBvclxuICoge0BsaW5rIGxpbWl0VG9MYXN0fSBhbmQgY2FuIHRoZW4gYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhIG5ld1xuICogcXVlcnkgaW5zdGFuY2UgdGhhdCBhbHNvIGNvbnRhaW5zIHRoaXMgYFF1ZXJ5TGltaXRDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBObCBleHRlbmRzIHZsIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgdCwgZSwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSB0LCB0aGlzLl9saW1pdCA9IGUsIHRoaXMuX2xpbWl0VHlwZSA9IG47XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBObCh0LCBlLCBuKTtcbiAgICB9XG4gICAgX2FwcGx5KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkaCh0LmZpcmVzdG9yZSwgdC5jb252ZXJ0ZXIsIFhuKHQuX3F1ZXJ5LCB0aGlzLl9saW1pdCwgdGhpcy5fbGltaXRUeXBlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlMaW1pdENvbnN0cmFpbnR9IHRoYXQgb25seSByZXR1cm5zIHRoZSBmaXJzdCBtYXRjaGluZ1xuICogZG9jdW1lbnRzLlxuICpcbiAqIEBwYXJhbSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnlMaW1pdENvbnN0cmFpbnR9LlxuICovIGZ1bmN0aW9uIGtsKHQpIHtcbiAgICByZXR1cm4gY2goXCJsaW1pdFwiLCB0KSwgTmwuX2NyZWF0ZShcImxpbWl0XCIsIHQsIFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBRdWVyeUxpbWl0Q29uc3RyYWludH0gdGhhdCBvbmx5IHJldHVybnMgdGhlIGxhc3QgbWF0Y2hpbmdcbiAqIGRvY3VtZW50cy5cbiAqXG4gKiBZb3UgbXVzdCBzcGVjaWZ5IGF0IGxlYXN0IG9uZSBgb3JkZXJCeWAgY2xhdXNlIGZvciBgbGltaXRUb0xhc3RgIHF1ZXJpZXMsXG4gKiBvdGhlcndpc2UgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGR1cmluZyBleGVjdXRpb24uXG4gKlxuICogQHBhcmFtIGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHtAbGluayBRdWVyeUxpbWl0Q29uc3RyYWludH0uXG4gKi8gZnVuY3Rpb24gTWwodCkge1xuICAgIHJldHVybiBjaChcImxpbWl0VG9MYXN0XCIsIHQpLCBObC5fY3JlYXRlKFwibGltaXRUb0xhc3RcIiwgdCwgXCJMXCIgLyogTGltaXRUeXBlLkxhc3QgKi8pO1xufVxuXG4vKipcbiAqIEEgYFF1ZXJ5U3RhcnRBdENvbnN0cmFpbnRgIGlzIHVzZWQgdG8gZXhjbHVkZSBkb2N1bWVudHMgZnJvbSB0aGUgc3RhcnQgb2YgYVxuICogcmVzdWx0IHNldCByZXR1cm5lZCBieSBhIEZpcmVzdG9yZSBxdWVyeS5cbiAqIGBRdWVyeVN0YXJ0QXRDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIChzdGFydEF0OjEpfSBvclxuICoge0BsaW5rIChzdGFydEFmdGVyOjEpfSBhbmQgY2FuIHRoZW4gYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhXG4gKiBuZXcgcXVlcnkgaW5zdGFuY2UgdGhhdCBhbHNvIGNvbnRhaW5zIHRoaXMgYFF1ZXJ5U3RhcnRBdENvbnN0cmFpbnRgLlxuICovIGNsYXNzICRsIGV4dGVuZHMgdmwge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIHF1ZXJ5IGNvbnN0cmFpbnQgKi9cbiAgICB0LCBlLCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMudHlwZSA9IHQsIHRoaXMuX2RvY09yRmllbGRzID0gZSwgdGhpcy5faW5jbHVzaXZlID0gbjtcbiAgICB9XG4gICAgc3RhdGljIF9jcmVhdGUodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gbmV3ICRsKHQsIGUsIG4pO1xuICAgIH1cbiAgICBfYXBwbHkodCkge1xuICAgICAgICBjb25zdCBlID0gVWwodCwgdGhpcy50eXBlLCB0aGlzLl9kb2NPckZpZWxkcywgdGhpcy5faW5jbHVzaXZlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBkaCh0LmZpcmVzdG9yZSwgdC5jb252ZXJ0ZXIsIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW4odC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCBlLCB0LmVuZEF0KTtcbiAgICAgICAgfSh0Ll9xdWVyeSwgZSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gT2woLi4udCkge1xuICAgIHJldHVybiAkbC5fY3JlYXRlKFwic3RhcnRBdFwiLCB0LCBcbiAgICAvKmluY2x1c2l2ZT0qLyAhMCk7XG59XG5cbmZ1bmN0aW9uIEZsKC4uLnQpIHtcbiAgICByZXR1cm4gJGwuX2NyZWF0ZShcInN0YXJ0QWZ0ZXJcIiwgdCwgXG4gICAgLyppbmNsdXNpdmU9Ki8gITEpO1xufVxuXG4vKipcbiAqIEEgYFF1ZXJ5RW5kQXRDb25zdHJhaW50YCBpcyB1c2VkIHRvIGV4Y2x1ZGUgZG9jdW1lbnRzIGZyb20gdGhlIGVuZCBvZiBhXG4gKiByZXN1bHQgc2V0IHJldHVybmVkIGJ5IGEgRmlyZXN0b3JlIHF1ZXJ5LlxuICogYFF1ZXJ5RW5kQXRDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIChlbmRBdDoxKX0gb3JcbiAqIHtAbGluayAoZW5kQmVmb3JlOjEpfSBhbmQgY2FuIHRoZW4gYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhIG5ld1xuICogcXVlcnkgaW5zdGFuY2UgdGhhdCBhbHNvIGNvbnRhaW5zIHRoaXMgYFF1ZXJ5RW5kQXRDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBCbCBleHRlbmRzIHZsIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgdCwgZSwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSB0LCB0aGlzLl9kb2NPckZpZWxkcyA9IGUsIHRoaXMuX2luY2x1c2l2ZSA9IG47XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbCh0LCBlLCBuKTtcbiAgICB9XG4gICAgX2FwcGx5KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IFVsKHQsIHRoaXMudHlwZSwgdGhpcy5fZG9jT3JGaWVsZHMsIHRoaXMuX2luY2x1c2l2ZSk7XG4gICAgICAgIHJldHVybiBuZXcgZGgodC5maXJlc3RvcmUsIHQuY29udmVydGVyLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIHQuZXhwbGljaXRPcmRlckJ5LnNsaWNlKCksIHQuZmlsdGVycy5zbGljZSgpLCB0LmxpbWl0LCB0LmxpbWl0VHlwZSwgdC5zdGFydEF0LCBlKTtcbiAgICAgICAgfSh0Ll9xdWVyeSwgZSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gTGwoLi4udCkge1xuICAgIHJldHVybiBCbC5fY3JlYXRlKFwiZW5kQmVmb3JlXCIsIHQsIFxuICAgIC8qaW5jbHVzaXZlPSovICExKTtcbn1cblxuZnVuY3Rpb24gcWwoLi4udCkge1xuICAgIHJldHVybiBCbC5fY3JlYXRlKFwiZW5kQXRcIiwgdCwgXG4gICAgLyppbmNsdXNpdmU9Ki8gITApO1xufVxuXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGJvdW5kIGZyb20gYSBkb2N1bWVudCBvciBmaWVsZHMgKi8gZnVuY3Rpb24gVWwodCwgZSwgbiwgcykge1xuICAgIGlmIChuWzBdID0gZ2V0TW9kdWxhckluc3RhbmNlKG5bMF0pLCBuWzBdIGluc3RhbmNlb2YgcGwpIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBzLCBpKSB7XG4gICAgICAgIGlmICghcykgdGhyb3cgbmV3IFUocS5OT1RfRk9VTkQsIGBDYW4ndCB1c2UgYSBEb2N1bWVudFNuYXBzaG90IHRoYXQgZG9lc24ndCBleGlzdCBmb3IgJHtufSgpLmApO1xuICAgICAgICBjb25zdCByID0gW107XG4gICAgICAgIC8vIEJlY2F1c2UgcGVvcGxlIGV4cGVjdCB0byBjb250aW51ZS9lbmQgYSBxdWVyeSBhdCB0aGUgZXhhY3QgZG9jdW1lbnRcbiAgICAgICAgLy8gcHJvdmlkZWQsIHdlIG5lZWQgdG8gdXNlIHRoZSBpbXBsaWNpdCBzb3J0IG9yZGVyIHJhdGhlciB0aGFuIHRoZSBleHBsaWNpdFxuICAgICAgICAvLyBzb3J0IG9yZGVyLCBiZWNhdXNlIGl0J3MgZ3VhcmFudGVlZCB0byBjb250YWluIHRoZSBkb2N1bWVudCBrZXkuIFRoYXQgd2F5XG4gICAgICAgIC8vIHRoZSBwb3NpdGlvbiBiZWNvbWVzIHVuYW1iaWd1b3VzIGFuZCB0aGUgcXVlcnkgY29udGludWVzL2VuZHMgZXhhY3RseSBhdFxuICAgICAgICAvLyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQuIFdpdGhvdXQgdGhlIGtleSAoYnkgdXNpbmcgdGhlIGV4cGxpY2l0IHNvcnRcbiAgICAgICAgLy8gb3JkZXJzKSwgbXVsdGlwbGUgZG9jdW1lbnRzIGNvdWxkIG1hdGNoIHRoZSBwb3NpdGlvbiwgeWllbGRpbmcgZHVwbGljYXRlXG4gICAgICAgIC8vIHJlc3VsdHMuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIEhuKHQpKSBpZiAobi5maWVsZC5pc0tleUZpZWxkKCkpIHIucHVzaChXZShlLCBzLmtleSkpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBzLmRhdGEuZmllbGQobi5maWVsZCk7XG4gICAgICAgICAgICBpZiAoTmUodCkpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgJ0ludmFsaWQgcXVlcnkuIFlvdSBhcmUgdHJ5aW5nIHRvIHN0YXJ0IG9yIGVuZCBhIHF1ZXJ5IHVzaW5nIGEgZG9jdW1lbnQgZm9yIHdoaWNoIHRoZSBmaWVsZCBcIicgKyBuLmZpZWxkICsgJ1wiIGlzIGFuIHVuY29tbWl0dGVkIHNlcnZlciB0aW1lc3RhbXAuIChTaW5jZSB0aGUgdmFsdWUgb2YgdGhpcyBmaWVsZCBpcyB1bmtub3duLCB5b3UgY2Fubm90IHN0YXJ0L2VuZCBhIHF1ZXJ5IHdpdGggaXQuKScpO1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbi5maWVsZC5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBZb3UgYXJlIHRyeWluZyB0byBzdGFydCBvciBlbmQgYSBxdWVyeSB1c2luZyBhIGRvY3VtZW50IGZvciB3aGljaCB0aGUgZmllbGQgJyR7dH0nICh1c2VkIGFzIHRoZSBvcmRlckJ5KSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGhuKHIsIGkpO1xuICAgIH1cbiAgICAvKipcbiAqIENvbnZlcnRzIGEgbGlzdCBvZiBmaWVsZCB2YWx1ZXMgdG8gYSBgQm91bmRgIGZvciB0aGUgZ2l2ZW4gcXVlcnkuXG4gKi8gKHQuX3F1ZXJ5LCB0LmZpcmVzdG9yZS5fZGF0YWJhc2VJZCwgZSwgblswXS5fZG9jdW1lbnQsIHMpO1xuICAgIHtcbiAgICAgICAgY29uc3QgaSA9IFpoKHQuZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4sIHMsIGksIHIpIHtcbiAgICAgICAgICAgIC8vIFVzZSBleHBsaWNpdCBvcmRlciBieSdzIGJlY2F1c2UgaXQgaGFzIHRvIG1hdGNoIHRoZSBxdWVyeSB0aGUgdXNlciBtYWRlXG4gICAgICAgICAgICBjb25zdCBvID0gdC5leHBsaWNpdE9yZGVyQnk7XG4gICAgICAgICAgICBpZiAoaS5sZW5ndGggPiBvLmxlbmd0aCkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkIHRvICR7c30oKS4gVGhlIG51bWJlciBvZiBhcmd1bWVudHMgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvcmRlckJ5KCkgY2xhdXNlc2ApO1xuICAgICAgICAgICAgY29uc3QgdSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGlbcl07XG4gICAgICAgICAgICAgICAgaWYgKG9bcl0uZmllbGQuaXNLZXlGaWVsZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBjKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBFeHBlY3RlZCBhIHN0cmluZyBmb3IgZG9jdW1lbnQgSUQgaW4gJHtzfSgpLCBidXQgZ290IGEgJHt0eXBlb2YgY31gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFXbih0KSAmJiAtMSAhPT0gYy5pbmRleE9mKFwiL1wiKSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gYW5kIG9yZGVyaW5nIGJ5IGRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHBhc3NlZCB0byAke3N9KCkgbXVzdCBiZSBhIHBsYWluIGRvY3VtZW50IElELCBidXQgJyR7Y30nIGNvbnRhaW5zIGEgc2xhc2guYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnBhdGguY2hpbGQodXQuZnJvbVN0cmluZyhjKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaHQuaXNEb2N1bWVudEtleShuKSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gZ3JvdXAgYW5kIG9yZGVyaW5nIGJ5IGRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHBhc3NlZCB0byAke3N9KCkgbXVzdCByZXN1bHQgaW4gYSB2YWxpZCBkb2N1bWVudCBwYXRoLCBidXQgJyR7bn0nIGlzIG5vdCBiZWNhdXNlIGl0IGNvbnRhaW5zIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMuYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgaHQobik7XG4gICAgICAgICAgICAgICAgICAgIHUucHVzaChXZShlLCBpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGFsKG4sIHMsIGMpO1xuICAgICAgICAgICAgICAgICAgICB1LnB1c2godCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBobih1LCByKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gYGRvY3VtZW50SWRWYWx1ZWAgaW50byBhIGBSZWZlcmVuY2VWYWx1ZWAsIHRocm93aW5nXG4gKiBhcHByb3ByaWF0ZSBlcnJvcnMgaWYgdGhlIHZhbHVlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYSBgRG9jdW1lbnRSZWZlcmVuY2VgXG4gKiBvciBgc3RyaW5nYCwgb3IgaWYgdGhlIHN0cmluZyBpcyBtYWxmb3JtZWQuXG4gKi8gKHQuX3F1ZXJ5LCB0LmZpcmVzdG9yZS5fZGF0YWJhc2VJZCwgaSwgZSwgbiwgcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBLbCh0LCBlLCBuKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIChuID0gZ2V0TW9kdWxhckluc3RhbmNlKG4pKSkge1xuICAgICAgICBpZiAoXCJcIiA9PT0gbikgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgd2l0aCBkb2N1bWVudElkKCksIHlvdSBtdXN0IHByb3ZpZGUgYSB2YWxpZCBkb2N1bWVudCBJRCwgYnV0IGl0IHdhcyBhbiBlbXB0eSBzdHJpbmcuXCIpO1xuICAgICAgICBpZiAoIVduKGUpICYmIC0xICE9PSBuLmluZGV4T2YoXCIvXCIpKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBieSBkb2N1bWVudElkKCksIHlvdSBtdXN0IHByb3ZpZGUgYSBwbGFpbiBkb2N1bWVudCBJRCwgYnV0ICcke259JyBjb250YWlucyBhICcvJyBjaGFyYWN0ZXIuYCk7XG4gICAgICAgIGNvbnN0IHMgPSBlLnBhdGguY2hpbGQodXQuZnJvbVN0cmluZyhuKSk7XG4gICAgICAgIGlmICghaHQuaXNEb2N1bWVudEtleShzKSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gZ3JvdXAgYnkgZG9jdW1lbnRJZCgpLCB0aGUgdmFsdWUgcHJvdmlkZWQgbXVzdCByZXN1bHQgaW4gYSB2YWxpZCBkb2N1bWVudCBwYXRoLCBidXQgJyR7c30nIGlzIG5vdCBiZWNhdXNlIGl0IGhhcyBhbiBvZGQgbnVtYmVyIG9mIHNlZ21lbnRzICgke3MubGVuZ3RofSkuYCk7XG4gICAgICAgIHJldHVybiBXZSh0LCBuZXcgaHQocykpO1xuICAgIH1cbiAgICBpZiAobiBpbnN0YW5jZW9mIGZoKSByZXR1cm4gV2UodCwgbi5fa2V5KTtcbiAgICB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIHdpdGggZG9jdW1lbnRJZCgpLCB5b3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgc3RyaW5nIG9yIGEgRG9jdW1lbnRSZWZlcmVuY2UsIGJ1dCBpdCB3YXM6ICR7b2gobil9LmApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSB2YWx1ZSBwYXNzZWQgaW50byBhIGRpc2p1bmN0aXZlIGZpbHRlciBzYXRpc2ZpZXMgYWxsXG4gKiBhcnJheSByZXF1aXJlbWVudHMuXG4gKi8gZnVuY3Rpb24gR2wodCwgZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0KSB8fCAwID09PSB0Lmxlbmd0aCkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBRdWVyeS4gQSBub24tZW1wdHkgYXJyYXkgaXMgcmVxdWlyZWQgZm9yICcke2UudG9TdHJpbmcoKX0nIGZpbHRlcnMuYCk7XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gb3BlcmF0b3IsIHJldHVybnMgdGhlIHNldCBvZiBvcGVyYXRvcnMgdGhhdCBjYW5ub3QgYmUgdXNlZCB3aXRoIGl0LlxuICpcbiAqIFRoaXMgaXMgbm90IGEgY29tcHJlaGVuc2l2ZSBjaGVjaywgYW5kIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHJlbW92ZWQgaW4gdGhlXG4gKiBsb25nIHRlcm0uIFZhbGlkYXRpb25zIHNob3VsZCBvY2N1ciBpbiB0aGUgRmlyZXN0b3JlIGJhY2tlbmQuXG4gKlxuICogT3BlcmF0b3JzIGluIGEgcXVlcnkgbXVzdCBhZGhlcmUgdG8gdGhlIGZvbGxvd2luZyBzZXQgb2YgcnVsZXM6XG4gKiAxLiBPbmx5IG9uZSBpbmVxdWFsaXR5IHBlciBxdWVyeS5cbiAqIDIuIGBOT1RfSU5gIGNhbm5vdCBiZSB1c2VkIHdpdGggYXJyYXksIGRpc2p1bmN0aXZlLCBvciBgTk9UX0VRVUFMYCBvcGVyYXRvcnMuXG4gKi8gZnVuY3Rpb24gUWwodCwgZSkge1xuICAgIGlmIChlLmlzSW5lcXVhbGl0eSgpKSB7XG4gICAgICAgIGNvbnN0IG4gPSB6bih0KSwgcyA9IGUuZmllbGQ7XG4gICAgICAgIGlmIChudWxsICE9PSBuICYmICFuLmlzRXF1YWwocykpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIEFsbCB3aGVyZSBmaWx0ZXJzIHdpdGggYW4gaW5lcXVhbGl0eSAoPCwgPD0sICE9LCBub3QtaW4sID4sIG9yID49KSBtdXN0IGJlIG9uIHRoZSBzYW1lIGZpZWxkLiBCdXQgeW91IGhhdmUgaW5lcXVhbGl0eSBmaWx0ZXJzIG9uICcke24udG9TdHJpbmcoKX0nIGFuZCAnJHtzLnRvU3RyaW5nKCl9J2ApO1xuICAgICAgICBjb25zdCBpID0gam4odCk7XG4gICAgICAgIG51bGwgIT09IGkgJiYgamwodCwgcywgaSk7XG4gICAgfVxuICAgIGNvbnN0IG4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSBmb3IgKGNvbnN0IHQgb2Ygbi5nZXRGbGF0dGVuZWRGaWx0ZXJzKCkpIGlmIChlLmluZGV4T2YodC5vcCkgPj0gMCkgcmV0dXJuIHQub3A7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0odC5maWx0ZXJzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gWyBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovICwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gXTtcblxuICAgICAgICAgIGNhc2UgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gOlxuICAgICAgICAgIGNhc2UgXCJpblwiIC8qIE9wZXJhdG9yLklOICovIDpcbiAgICAgICAgICAgIHJldHVybiBbIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovIF07XG5cbiAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovIDpcbiAgICAgICAgICAgIHJldHVybiBbIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgXCJpblwiIC8qIE9wZXJhdG9yLklOICovICwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gLCBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovIF07XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfShlLm9wKSk7XG4gICAgaWYgKG51bGwgIT09IG4pIFxuICAgIC8vIFNwZWNpYWwgY2FzZSB3aGVuIGl0J3MgYSBkdXBsaWNhdGUgb3AgdG8gZ2l2ZSBhIHNsaWdodGx5IGNsZWFyZXIgZXJyb3IgbWVzc2FnZS5cbiAgICB0aHJvdyBuID09PSBlLm9wID8gbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSAnJHtlLm9wLnRvU3RyaW5nKCl9JyBmaWx0ZXIuYCkgOiBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBZb3UgY2Fubm90IHVzZSAnJHtlLm9wLnRvU3RyaW5nKCl9JyBmaWx0ZXJzIHdpdGggJyR7bi50b1N0cmluZygpfScgZmlsdGVycy5gKTtcbn1cblxuZnVuY3Rpb24gamwodCwgZSwgbikge1xuICAgIGlmICghbi5pc0VxdWFsKGUpKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBZb3UgaGF2ZSBhIHdoZXJlIGZpbHRlciB3aXRoIGFuIGluZXF1YWxpdHkgKDwsIDw9LCAhPSwgbm90LWluLCA+LCBvciA+PSkgb24gZmllbGQgJyR7ZS50b1N0cmluZygpfScgYW5kIHNvIHlvdSBtdXN0IGFsc28gdXNlICcke2UudG9TdHJpbmcoKX0nIGFzIHlvdXIgZmlyc3QgYXJndW1lbnQgdG8gb3JkZXJCeSgpLCBidXQgeW91ciBmaXJzdCBvcmRlckJ5KCkgaXMgb24gZmllbGQgJyR7bi50b1N0cmluZygpfScgaW5zdGVhZC5gKTtcbn1cblxuZnVuY3Rpb24gemwodCwgZSkge1xuICAgIGlmICghKGUgaW5zdGFuY2VvZiBQbCB8fCBlIGluc3RhbmNlb2YgVmwpKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIGBGdW5jdGlvbiAke3R9KCkgcmVxdWlyZXMgQXBwbGlhYmxlQ29uc3RyYWludHMgY3JlYXRlZCB3aXRoIGEgY2FsbCB0byAnd2hlcmUoLi4uKScsICdvciguLi4pJywgb3IgJ2FuZCguLi4pJy5gKTtcbn1cblxuY2xhc3MgV2wge1xuICAgIGNvbnZlcnRWYWx1ZSh0LCBlID0gXCJub25lXCIpIHtcbiAgICAgICAgc3dpdGNoIChMZSh0KSkge1xuICAgICAgICAgIGNhc2UgMCAvKiBUeXBlT3JkZXIuTnVsbFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgY2FzZSAxIC8qIFR5cGVPcmRlci5Cb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQuYm9vbGVhblZhbHVlO1xuXG4gICAgICAgICAgY2FzZSAyIC8qIFR5cGVPcmRlci5OdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gQ2UodC5pbnRlZ2VyVmFsdWUgfHwgdC5kb3VibGVWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDMgLyogVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUaW1lc3RhbXAodC50aW1lc3RhbXBWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDQgLyogVHlwZU9yZGVyLlNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRTZXJ2ZXJUaW1lc3RhbXAodCwgZSk7XG5cbiAgICAgICAgICBjYXNlIDUgLyogVHlwZU9yZGVyLlN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0LnN0cmluZ1ZhbHVlO1xuXG4gICAgICAgICAgY2FzZSA2IC8qIFR5cGVPcmRlci5CbG9iVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEJ5dGVzKHhlKHQuYnl0ZXNWYWx1ZSkpO1xuXG4gICAgICAgICAgY2FzZSA3IC8qIFR5cGVPcmRlci5SZWZWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0UmVmZXJlbmNlKHQucmVmZXJlbmNlVmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA4IC8qIFR5cGVPcmRlci5HZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRHZW9Qb2ludCh0Lmdlb1BvaW50VmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA5IC8qIFR5cGVPcmRlci5BcnJheVZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRBcnJheSh0LmFycmF5VmFsdWUsIGUpO1xuXG4gICAgICAgICAgY2FzZSAxMCAvKiBUeXBlT3JkZXIuT2JqZWN0VmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydE9iamVjdCh0Lm1hcFZhbHVlLCBlKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBPKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udmVydE9iamVjdCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRPYmplY3RNYXAodC5maWVsZHMsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi8gICAgY29udmVydE9iamVjdE1hcCh0LCBlID0gXCJub25lXCIpIHtcbiAgICAgICAgY29uc3QgbiA9IHt9O1xuICAgICAgICByZXR1cm4gZ2UodCwgKCh0LCBzKSA9PiB7XG4gICAgICAgICAgICBuW3RdID0gdGhpcy5jb252ZXJ0VmFsdWUocywgZSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9XG4gICAgY29udmVydEdlb1BvaW50KHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBqaChDZSh0LmxhdGl0dWRlKSwgQ2UodC5sb25naXR1ZGUpKTtcbiAgICB9XG4gICAgY29udmVydEFycmF5KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICh0LnZhbHVlcyB8fCBbXSkubWFwKCh0ID0+IHRoaXMuY29udmVydFZhbHVlKHQsIGUpKSk7XG4gICAgfVxuICAgIGNvbnZlcnRTZXJ2ZXJUaW1lc3RhbXAodCwgZSkge1xuICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICBjYXNlIFwicHJldmlvdXNcIjpcbiAgICAgICAgICAgIGNvbnN0IG4gPSBrZSh0KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IG4gPyBudWxsIDogdGhpcy5jb252ZXJ0VmFsdWUobiwgZSk7XG5cbiAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUaW1lc3RhbXAoTWUodCkpO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnZlcnRUaW1lc3RhbXAodCkge1xuICAgICAgICBjb25zdCBlID0gRGUodCk7XG4gICAgICAgIHJldHVybiBuZXcgaXQoZS5zZWNvbmRzLCBlLm5hbm9zKTtcbiAgICB9XG4gICAgY29udmVydERvY3VtZW50S2V5KHQsIGUpIHtcbiAgICAgICAgY29uc3QgbiA9IHV0LmZyb21TdHJpbmcodCk7XG4gICAgICAgIEYodXIobikpO1xuICAgICAgICBjb25zdCBzID0gbmV3IE9lKG4uZ2V0KDEpLCBuLmdldCgzKSksIGkgPSBuZXcgaHQobi5wb3BGaXJzdCg1KSk7XG4gICAgICAgIHJldHVybiBzLmlzRXF1YWwoZSkgfHwgXG4gICAgICAgIC8vIFRPRE8oYi82NDEzMDIwMik6IFNvbWVob3cgc3VwcG9ydCBmb3JlaWduIHJlZmVyZW5jZXMuXG4gICAgICAgIGsoYERvY3VtZW50ICR7aX0gY29udGFpbnMgYSBkb2N1bWVudCByZWZlcmVuY2Ugd2l0aGluIGEgZGlmZmVyZW50IGRhdGFiYXNlICgke3MucHJvamVjdElkfS8ke3MuZGF0YWJhc2V9KSB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLiBJdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSByZWZlcmVuY2UgaW4gdGhlIGN1cnJlbnQgZGF0YWJhc2UgKCR7ZS5wcm9qZWN0SWR9LyR7ZS5kYXRhYmFzZX0pIGluc3RlYWQuYCksIFxuICAgICAgICBpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29udmVydHMgY3VzdG9tIG1vZGVsIG9iamVjdCBvZiB0eXBlIFQgaW50byBgRG9jdW1lbnREYXRhYCBieSBhcHBseWluZyB0aGVcbiAqIGNvbnZlcnRlciBpZiBpdCBleGlzdHMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHdoZW4gY29udmVydGluZyB1c2VyIG9iamVjdHMgdG8gYERvY3VtZW50RGF0YWBcbiAqIGJlY2F1c2Ugd2Ugd2FudCB0byBwcm92aWRlIHRoZSB1c2VyIHdpdGggYSBtb3JlIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgaWZcbiAqIHRoZWlyIGBzZXQoKWAgb3IgZmFpbHMgZHVlIHRvIGludmFsaWQgZGF0YSBvcmlnaW5hdGluZyBmcm9tIGEgYHRvRmlyZXN0b3JlKClgXG4gKiBjYWxsLlxuICovIGZ1bmN0aW9uIEhsKHQsIGUsIG4pIHtcbiAgICBsZXQgcztcbiAgICAvLyBDYXN0IHRvIGBhbnlgIGluIG9yZGVyIHRvIHNhdGlzZnkgdGhlIHVuaW9uIHR5cGUgY29uc3RyYWludCBvblxuICAgIC8vIHRvRmlyZXN0b3JlKCkuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gcyA9IHQgPyBuICYmIChuLm1lcmdlIHx8IG4ubWVyZ2VGaWVsZHMpID8gdC50b0ZpcmVzdG9yZShlLCBuKSA6IHQudG9GaXJlc3RvcmUoZSkgOiBlLCBcbiAgICBzO1xufVxuXG5jbGFzcyBKbCBleHRlbmRzIFdsIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZmlyZXN0b3JlID0gdDtcbiAgICB9XG4gICAgY29udmVydEJ5dGVzKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaCh0KTtcbiAgICB9XG4gICAgY29udmVydFJlZmVyZW5jZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmNvbnZlcnREb2N1bWVudEtleSh0LCB0aGlzLmZpcmVzdG9yZS5fZGF0YWJhc2VJZCk7XG4gICAgICAgIHJldHVybiBuZXcgZmgodGhpcy5maXJlc3RvcmUsIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDcmVhdGUgYW4gQWdncmVnYXRlRmllbGQgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgc3VtIG9mXG4gKiBhIHNwZWNpZmllZCBmaWVsZCBvdmVyIGEgcmFuZ2Ugb2YgZG9jdW1lbnRzIGluIHRoZSByZXN1bHQgc2V0IG9mIGEgcXVlcnkuXG4gKiBAcGFyYW0gZmllbGQgU3BlY2lmaWVzIHRoZSBmaWVsZCB0byBzdW0gYWNyb3NzIHRoZSByZXN1bHQgc2V0LlxuICogQGludGVybmFsIFRPRE8gKHN1bS9hdmcpIHJlbW92ZSB3aGVuIHB1YmxpY1xuICovIGZ1bmN0aW9uIFlsKHQpIHtcbiAgICByZXR1cm4gbmV3IExoKFwic3VtXCIsIHdsKFwic3VtXCIsIHQpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gQWdncmVnYXRlRmllbGQgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgYXZlcmFnZSBvZlxuICogYSBzcGVjaWZpZWQgZmllbGQgb3ZlciBhIHJhbmdlIG9mIGRvY3VtZW50cyBpbiB0aGUgcmVzdWx0IHNldCBvZiBhIHF1ZXJ5LlxuICogQHBhcmFtIGZpZWxkIFNwZWNpZmllcyB0aGUgZmllbGQgdG8gYXZlcmFnZSBhY3Jvc3MgdGhlIHJlc3VsdCBzZXQuXG4gKiBAaW50ZXJuYWwgVE9ETyAoc3VtL2F2ZykgcmVtb3ZlIHdoZW4gcHVibGljXG4gKi8gZnVuY3Rpb24gWGwodCkge1xuICAgIHJldHVybiBuZXcgTGgoXCJhdmdcIiwgd2woXCJhdmVyYWdlXCIsIHQpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gQWdncmVnYXRlRmllbGQgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgY291bnQgb2ZcbiAqIGRvY3VtZW50cyBpbiB0aGUgcmVzdWx0IHNldCBvZiBhIHF1ZXJ5LlxuICogQGludGVybmFsIFRPRE8gKHN1bS9hdmcpIHJlbW92ZSB3aGVuIHB1YmxpY1xuICovIGZ1bmN0aW9uIFpsKCkge1xuICAgIHJldHVybiBuZXcgTGgoXCJjb3VudFwiKTtcbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gJ0FnZ3JlZ2F0ZUZpZWxkYCBpbnN0YW5jZXMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSBsZWZ0IENvbXBhcmUgdGhpcyBBZ2dyZWdhdGVGaWVsZCB0byB0aGUgYHJpZ2h0YC5cbiAqIEBwYXJhbSByaWdodCBDb21wYXJlIHRoaXMgQWdncmVnYXRlRmllbGQgdG8gdGhlIGBsZWZ0YC5cbiAqIEBpbnRlcm5hbCBUT0RPIChzdW0vYXZnKSByZW1vdmUgd2hlbiBwdWJsaWNcbiAqLyBmdW5jdGlvbiB0Zih0LCBlKSB7XG4gICAgdmFyIG4sIHM7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBMaCAmJiBlIGluc3RhbmNlb2YgTGggJiYgdC5fYWdncmVnYXRlVHlwZSA9PT0gZS5fYWdncmVnYXRlVHlwZSAmJiAobnVsbCA9PT0gKG4gPSB0Ll9pbnRlcm5hbEZpZWxkUGF0aCkgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5jYW5vbmljYWxTdHJpbmcoKSkgPT09IChudWxsID09PSAocyA9IGUuX2ludGVybmFsRmllbGRQYXRoKSB8fCB2b2lkIDAgPT09IHMgPyB2b2lkIDAgOiBzLmNhbm9uaWNhbFN0cmluZygpKTtcbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIGluc3RhbmNlcyBmb3IgZXF1YWxpdHkuXG4gKlxuICogVHdvIGBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90YCBpbnN0YW5jZXMgYXJlIGNvbnNpZGVyZWQgXCJlcXVhbFwiIGlmIHRoZXkgaGF2ZVxuICogdW5kZXJseWluZyBxdWVyaWVzIHRoYXQgY29tcGFyZSBlcXVhbCwgYW5kIHRoZSBzYW1lIGRhdGEuXG4gKlxuICogQHBhcmFtIGxlZnQgLSBUaGUgZmlyc3QgYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gcmlnaHQgLSBUaGUgc2Vjb25kIGBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90YCB0byBjb21wYXJlLlxuICpcbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgXCJlcXVhbFwiLCBhcyBkZWZpbmVkIGFib3ZlLCBvciBgZmFsc2VgXG4gKiBvdGhlcndpc2UuXG4gKi8gZnVuY3Rpb24gZWYodCwgZSkge1xuICAgIHJldHVybiBwaCh0LnF1ZXJ5LCBlLnF1ZXJ5KSAmJiBkZWVwRXF1YWwodC5kYXRhKCksIGUuZGF0YSgpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogTWV0YWRhdGEgYWJvdXQgYSBzbmFwc2hvdCwgZGVzY3JpYmluZyB0aGUgc3RhdGUgb2YgdGhlIHNuYXBzaG90LlxuICovIGNsYXNzIG5mIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nV3JpdGVzID0gdCwgdGhpcy5mcm9tQ2FjaGUgPSBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgU25hcHNob3RNZXRhZGF0YWAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciAtIFRoZSBgU25hcHNob3RNZXRhZGF0YWAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBgU25hcHNob3RNZXRhZGF0YWAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1BlbmRpbmdXcml0ZXMgPT09IHQuaGFzUGVuZGluZ1dyaXRlcyAmJiB0aGlzLmZyb21DYWNoZSA9PT0gdC5mcm9tQ2FjaGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91ciBGaXJlc3RvcmVcbiAqIGRhdGFiYXNlLiBUaGUgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0b1xuICogZ2V0IGEgc3BlY2lmaWMgZmllbGQuXG4gKlxuICogRm9yIGEgYERvY3VtZW50U25hcHNob3RgIHRoYXQgcG9pbnRzIHRvIGEgbm9uLWV4aXN0aW5nIGRvY3VtZW50LCBhbnkgZGF0YVxuICogYWNjZXNzIHdpbGwgcmV0dXJuICd1bmRlZmluZWQnLiBZb3UgY2FuIHVzZSB0aGUgYGV4aXN0cygpYCBtZXRob2QgdG9cbiAqIGV4cGxpY2l0bHkgdmVyaWZ5IGEgZG9jdW1lbnQncyBleGlzdGVuY2UuXG4gKi8gY2xhc3Mgc2YgZXh0ZW5kcyBwbCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgcHJvdGVjdGVkICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcywgaSwgcikge1xuICAgICAgICBzdXBlcih0LCBlLCBuLCBzLCByKSwgdGhpcy5fZmlyZXN0b3JlID0gdCwgdGhpcy5fZmlyZXN0b3JlSW1wbCA9IHQsIHRoaXMubWV0YWRhdGEgPSBpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBkYXRhIGV4aXN0cy4gVHJ1ZSBpZiB0aGUgZG9jdW1lbnQgZXhpc3RzLlxuICAgICAqLyAgICBleGlzdHMoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5leGlzdHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmXG4gICAgICogdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBgc2VydmVyVGltZXN0YW1wKClgIHZhbHVlcyB0aGF0IGhhdmUgbm90IHlldCBiZWVuXG4gICAgICogc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWQgYXMgYG51bGxgLiBZb3UgY2FuIG92ZXJyaWRlXG4gICAgICogdGhpcyBieSBwYXNzaW5nIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IGRhdGEgaXMgcmV0cmlldmVkIGZyb21cbiAgICAgKiB0aGUgc25hcHNob3QgKGZvciBleGFtcGxlIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciBzZXJ2ZXIgdGltZXN0YW1wcyB0aGF0XG4gICAgICogaGF2ZSBub3QgeWV0IGJlZW4gc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlKS5cbiAgICAgKiBAcmV0dXJucyBBbiBgT2JqZWN0YCBjb250YWluaW5nIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IG9yIGB1bmRlZmluZWRgIGlmXG4gICAgICogdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICovICAgIGRhdGEodCA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLl9kb2N1bWVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnZlcnRlcikge1xuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB1c2UgdGhlIGNvbnZlcnRlciBhbmQgY3JlYXRlIGEgbmV3IERvY3VtZW50U25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyBpZiBhIGNvbnZlcnRlciBoYXMgYmVlbiBwcm92aWRlZC5cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IHJmKHRoaXMuX2ZpcmVzdG9yZSwgdGhpcy5fdXNlckRhdGFXcml0ZXIsIHRoaXMuX2tleSwgdGhpcy5fZG9jdW1lbnQsIHRoaXMubWV0YWRhdGEsIFxuICAgICAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRlci5mcm9tRmlyZXN0b3JlKGUsIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZSh0aGlzLl9kb2N1bWVudC5kYXRhLnZhbHVlLCB0LnNlcnZlclRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZmllbGQgc3BlY2lmaWVkIGJ5IGBmaWVsZFBhdGhgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IG9yIGZpZWxkIGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBhIGBzZXJ2ZXJUaW1lc3RhbXAoKWAgdGhhdCBoYXMgbm90IHlldCBiZWVuIHNldCB0b1xuICAgICAqIGl0cyBmaW5hbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGFzIGBudWxsYC4gWW91IGNhbiBvdmVycmlkZSB0aGlzIGJ5XG4gICAgICogcGFzc2luZyBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZFBhdGggLSBUaGUgcGF0aCAoZm9yIGV4YW1wbGUgJ2Zvbycgb3IgJ2Zvby5iYXInKSB0byBhIHNwZWNpZmljXG4gICAgICogZmllbGQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IHRoZSBmaWVsZCBpcyByZXRyaWV2ZWRcbiAgICAgKiBmcm9tIHRoZSBzbmFwc2hvdCAoZm9yIGV4YW1wbGUgdGhlIGRlc2lyZWQgYmVoYXZpb3IgZm9yIHNlcnZlciB0aW1lc3RhbXBzXG4gICAgICogdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUpLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGF0IHRoZSBzcGVjaWZpZWQgZmllbGQgbG9jYXRpb24gb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2hcbiAgICAgKiBmaWVsZCBleGlzdHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIC8vIFdlIGFyZSB1c2luZyBgYW55YCBoZXJlIHRvIGF2b2lkIGFuIGV4cGxpY2l0IGNhc3QgYnkgb3VyIHVzZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZ2V0KHQsIGUgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5fZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9kb2N1bWVudC5kYXRhLmZpZWxkKFRsKFwiRG9jdW1lbnRTbmFwc2hvdC5nZXRcIiwgdCkpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IG4pIHJldHVybiB0aGlzLl91c2VyRGF0YVdyaXRlci5jb252ZXJ0VmFsdWUobiwgZS5zZXJ2ZXJUaW1lc3RhbXBzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBRdWVyeURvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91clxuICogRmlyZXN0b3JlIGRhdGFiYXNlIGFzIHBhcnQgb2YgYSBxdWVyeS4gVGhlIGRvY3VtZW50IGlzIGd1YXJhbnRlZWQgdG8gZXhpc3RcbiAqIGFuZCBpdHMgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0byBnZXQgYVxuICogc3BlY2lmaWMgZmllbGQuXG4gKlxuICogQSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBvZmZlcnMgdGhlIHNhbWUgQVBJIHN1cmZhY2UgYXMgYVxuICogYERvY3VtZW50U25hcHNob3RgLiBTaW5jZSBxdWVyeSByZXN1bHRzIGNvbnRhaW4gb25seSBleGlzdGluZyBkb2N1bWVudHMsIHRoZVxuICogYGV4aXN0c2AgcHJvcGVydHkgd2lsbCBhbHdheXMgYmUgdHJ1ZSBhbmQgYGRhdGEoKWAgd2lsbCBuZXZlciByZXR1cm5cbiAqICd1bmRlZmluZWQnLlxuICovIGNsYXNzIHJmIGV4dGVuZHMgc2Yge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudCBhcyBhbiBgT2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIGBzZXJ2ZXJUaW1lc3RhbXAoKWAgdmFsdWVzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW5cbiAgICAgKiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBgbnVsbGAuIFlvdSBjYW4gb3ZlcnJpZGVcbiAgICAgKiB0aGlzIGJ5IHBhc3NpbmcgYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgb2JqZWN0IHRvIGNvbmZpZ3VyZSBob3cgZGF0YSBpcyByZXRyaWV2ZWQgZnJvbVxuICAgICAqIHRoZSBzbmFwc2hvdCAoZm9yIGV4YW1wbGUgdGhlIGRlc2lyZWQgYmVoYXZpb3IgZm9yIHNlcnZlciB0aW1lc3RhbXBzIHRoYXRcbiAgICAgKiBoYXZlIG5vdCB5ZXQgYmVlbiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUpLlxuICAgICAqIEByZXR1cm5zIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgZGF0YSh0ID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRhdGEodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYFF1ZXJ5U25hcHNob3RgIGNvbnRhaW5zIHplcm8gb3IgbW9yZSBgRG9jdW1lbnRTbmFwc2hvdGAgb2JqZWN0c1xuICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHRzIG9mIGEgcXVlcnkuIFRoZSBkb2N1bWVudHMgY2FuIGJlIGFjY2Vzc2VkIGFzIGFuXG4gKiBhcnJheSB2aWEgdGhlIGBkb2NzYCBwcm9wZXJ0eSBvciBlbnVtZXJhdGVkIHVzaW5nIHRoZSBgZm9yRWFjaGAgbWV0aG9kLiBUaGVcbiAqIG51bWJlciBvZiBkb2N1bWVudHMgY2FuIGJlIGRldGVybWluZWQgdmlhIHRoZSBgZW1wdHlgIGFuZCBgc2l6ZWBcbiAqIHByb3BlcnRpZXMuXG4gKi8gY2xhc3Mgb2Yge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IodCwgZSwgbiwgcykge1xuICAgICAgICB0aGlzLl9maXJlc3RvcmUgPSB0LCB0aGlzLl91c2VyRGF0YVdyaXRlciA9IGUsIHRoaXMuX3NuYXBzaG90ID0gcywgdGhpcy5tZXRhZGF0YSA9IG5ldyBuZihzLmhhc1BlbmRpbmdXcml0ZXMsIHMuZnJvbUNhY2hlKSwgXG4gICAgICAgIHRoaXMucXVlcnkgPSBuO1xuICAgIH1cbiAgICAvKiogQW4gYXJyYXkgb2YgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGBRdWVyeVNuYXBzaG90YC4gKi8gICAgZ2V0IGRvY3MoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZSA9PiB0LnB1c2goZSkpKSwgdDtcbiAgICB9XG4gICAgLyoqIFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc25hcHNob3QuZG9jcy5zaXplO1xuICAgIH1cbiAgICAvKiogVHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovICAgIGdldCBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW51bWVyYXRlcyBhbGwgb2YgdGhlIGRvY3VtZW50cyBpbiB0aGUgYFF1ZXJ5U25hcHNob3RgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2l0aCBhIGBRdWVyeURvY3VtZW50U25hcHNob3RgIGZvclxuICAgICAqIGVhY2ggZG9jdW1lbnQgaW4gdGhlIHNuYXBzaG90LlxuICAgICAqIEBwYXJhbSB0aGlzQXJnIC0gVGhlIGB0aGlzYCBiaW5kaW5nIGZvciB0aGUgY2FsbGJhY2suXG4gICAgICovICAgIGZvckVhY2godCwgZSkge1xuICAgICAgICB0aGlzLl9zbmFwc2hvdC5kb2NzLmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgdC5jYWxsKGUsIG5ldyByZih0aGlzLl9maXJlc3RvcmUsIHRoaXMuX3VzZXJEYXRhV3JpdGVyLCBuLmtleSwgbiwgbmV3IG5mKHRoaXMuX3NuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyhuLmtleSksIHRoaXMuX3NuYXBzaG90LmZyb21DYWNoZSksIHRoaXMucXVlcnkuY29udmVydGVyKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZG9jdW1lbnRzIGNoYW5nZXMgc2luY2UgdGhlIGxhc3Qgc25hcHNob3QuIElmIHRoaXNcbiAgICAgKiBpcyB0aGUgZmlyc3Qgc25hcHNob3QsIGFsbCBkb2N1bWVudHMgd2lsbCBiZSBpbiB0aGUgbGlzdCBhcyAnYWRkZWQnXG4gICAgICogY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gYFNuYXBzaG90TGlzdGVuT3B0aW9uc2AgdGhhdCBjb250cm9sIHdoZXRoZXIgbWV0YWRhdGEtb25seVxuICAgICAqIGNoYW5nZXMgKGkuZS4gb25seSBgRG9jdW1lbnRTbmFwc2hvdC5tZXRhZGF0YWAgY2hhbmdlZCkgc2hvdWxkIHRyaWdnZXJcbiAgICAgKiBzbmFwc2hvdCBldmVudHMuXG4gICAgICovICAgIGRvY0NoYW5nZXModCA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGUgPSAhIXQuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcztcbiAgICAgICAgaWYgKGUgJiYgdGhpcy5fc25hcHNob3QuZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMpIHRocm93IG5ldyBVKHEuSU5WQUxJRF9BUkdVTUVOVCwgXCJUbyBpbmNsdWRlIG1ldGFkYXRhIGNoYW5nZXMgd2l0aCB5b3VyIGRvY3VtZW50IGNoYW5nZXMsIHlvdSBtdXN0IGFsc28gcGFzcyB7IGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6dHJ1ZSB9IHRvIG9uU25hcHNob3QoKS5cIik7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRDaGFuZ2VzICYmIHRoaXMuX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzID09PSBlIHx8ICh0aGlzLl9jYWNoZWRDaGFuZ2VzID0gXG4gICAgICAgIC8qKiBDYWxjdWxhdGVzIHRoZSBhcnJheSBvZiBgRG9jdW1lbnRDaGFuZ2VgcyBmb3IgYSBnaXZlbiBgVmlld1NuYXBzaG90YC4gKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKHQuX3NuYXBzaG90Lm9sZERvY3MuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGUgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0Ll9zbmFwc2hvdC5kb2NDaGFuZ2VzLm1hcCgobiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgcmYodC5fZmlyZXN0b3JlLCB0Ll91c2VyRGF0YVdyaXRlciwgbi5kb2Mua2V5LCBuLmRvYywgbmV3IG5mKHQuX3NuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyhuLmRvYy5rZXkpLCB0Ll9zbmFwc2hvdC5mcm9tQ2FjaGUpLCB0LnF1ZXJ5LmNvbnZlcnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmRvYywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jOiBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkSW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXg6IGUrK1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBBIGBEb2N1bWVudFNldGAgdGhhdCBpcyB1cGRhdGVkIGluY3JlbWVudGFsbHkgYXMgY2hhbmdlcyBhcmUgYXBwbGllZCB0byB1c2VcbiAgICAgICAgICAgICAgICAvLyB0byBsb29rdXAgdGhlIGluZGV4IG9mIGEgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSB0Ll9zbmFwc2hvdC5vbGREb2NzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0Ll9zbmFwc2hvdC5kb2NDaGFuZ2VzLmZpbHRlcigodCA9PiBlIHx8IDMgLyogQ2hhbmdlVHlwZS5NZXRhZGF0YSAqLyAhPT0gdC50eXBlKSkubWFwKChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyByZih0Ll9maXJlc3RvcmUsIHQuX3VzZXJEYXRhV3JpdGVyLCBlLmRvYy5rZXksIGUuZG9jLCBuZXcgbmYodC5fc25hcHNob3QubXV0YXRlZEtleXMuaGFzKGUuZG9jLmtleSksIHQuX3NuYXBzaG90LmZyb21DYWNoZSksIHQucXVlcnkuY29udmVydGVyKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAtMSwgciA9IC0xO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovICE9PSBlLnR5cGUgJiYgKGkgPSBuLmluZGV4T2YoZS5kb2Mua2V5KSwgbiA9IG4uZGVsZXRlKGUuZG9jLmtleSkpLCBcbiAgICAgICAgICAgICAgICAgICAgMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gIT09IGUudHlwZSAmJiAobiA9IG4uYWRkKGUuZG9jKSwgciA9IG4uaW5kZXhPZihlLmRvYy5rZXkpKSwgXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHVmKGUudHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2M6IHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRJbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4OiByXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KHRoaXMsIGUpLCB0aGlzLl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyA9IGUpLCB0aGlzLl9jYWNoZWRDaGFuZ2VzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdWYodCkge1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gOlxuICAgICAgICByZXR1cm4gXCJhZGRlZFwiO1xuXG4gICAgICBjYXNlIDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA6XG4gICAgICBjYXNlIDMgLyogQ2hhbmdlVHlwZS5NZXRhZGF0YSAqLyA6XG4gICAgICAgIHJldHVybiBcIm1vZGlmaWVkXCI7XG5cbiAgICAgIGNhc2UgMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gOlxuICAgICAgICByZXR1cm4gXCJyZW1vdmVkXCI7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBPKCk7XG4gICAgfVxufVxuXG4vLyBUT0RPKGZpcmVzdG9yZWV4cCk6IEFkZCB0ZXN0cyBmb3Igc25hcHNob3RFcXVhbCB3aXRoIGRpZmZlcmVudCBzbmFwc2hvdFxuLy8gbWV0YWRhdGFcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBzbmFwc2hvdHMgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSBsZWZ0IC0gQSBzbmFwc2hvdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IC0gQSBzbmFwc2hvdCB0byBjb21wYXJlLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc25hcHNob3RzIGFyZSBlcXVhbC5cbiAqLyBmdW5jdGlvbiBjZih0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBzZiAmJiBlIGluc3RhbmNlb2Ygc2YgPyB0Ll9maXJlc3RvcmUgPT09IGUuX2ZpcmVzdG9yZSAmJiB0Ll9rZXkuaXNFcXVhbChlLl9rZXkpICYmIChudWxsID09PSB0Ll9kb2N1bWVudCA/IG51bGwgPT09IGUuX2RvY3VtZW50IDogdC5fZG9jdW1lbnQuaXNFcXVhbChlLl9kb2N1bWVudCkpICYmIHQuX2NvbnZlcnRlciA9PT0gZS5fY29udmVydGVyIDogdCBpbnN0YW5jZW9mIG9mICYmIGUgaW5zdGFuY2VvZiBvZiAmJiAodC5fZmlyZXN0b3JlID09PSBlLl9maXJlc3RvcmUgJiYgcGgodC5xdWVyeSwgZS5xdWVyeSkgJiYgdC5tZXRhZGF0YS5pc0VxdWFsKGUubWV0YWRhdGEpICYmIHQuX3NuYXBzaG90LmlzRXF1YWwoZS5fc25hcHNob3QpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYC5cbiAqXG4gKiBOb3RlOiBgZ2V0RG9jKClgIGF0dGVtcHRzIHRvIHByb3ZpZGUgdXAtdG8tZGF0ZSBkYXRhIHdoZW4gcG9zc2libGUgYnkgd2FpdGluZ1xuICogZm9yIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBidXQgaXQgbWF5IHJldHVybiBjYWNoZWQgZGF0YSBvciBmYWlsIGlmIHlvdSBhcmVcbiAqIG9mZmxpbmUgYW5kIHRoZSBzZXJ2ZXIgY2Fubm90IGJlIHJlYWNoZWQuIFRvIHNwZWNpZnkgdGhpcyBiZWhhdmlvciwgaW52b2tlXG4gKiB7QGxpbmsgZ2V0RG9jRnJvbUNhY2hlfSBvciB7QGxpbmsgZ2V0RG9jRnJvbVNlcnZlcn0uXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2Ugb2YgdGhlIGRvY3VtZW50IHRvIGZldGNoLlxuICogQHJldHVybnMgQSBQcm9taXNlIHJlc29sdmVkIHdpdGggYSBgRG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbmluZyB0aGVcbiAqIGN1cnJlbnQgZG9jdW1lbnQgY29udGVudHMuXG4gKi8gZnVuY3Rpb24gYWYodCkge1xuICAgIHQgPSB1aCh0LCBmaCk7XG4gICAgY29uc3QgZSA9IHVoKHQuZmlyZXN0b3JlLCB2aCk7XG4gICAgcmV0dXJuIHphKGJoKGUpLCB0Ll9rZXkpLnRoZW4oKG4gPT4gQWYoZSwgdCwgbikpKTtcbn1cblxuY2xhc3MgaGYgZXh0ZW5kcyBXbCB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmZpcmVzdG9yZSA9IHQ7XG4gICAgfVxuICAgIGNvbnZlcnRCeXRlcyh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWgodCk7XG4gICAgfVxuICAgIGNvbnZlcnRSZWZlcmVuY2UodCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5jb252ZXJ0RG9jdW1lbnRLZXkodCwgdGhpcy5maXJlc3RvcmUuX2RhdGFiYXNlSWQpO1xuICAgICAgICByZXR1cm4gbmV3IGZoKHRoaXMuZmlyZXN0b3JlLCAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWFkcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhpcyBgRG9jdW1lbnRSZWZlcmVuY2VgIGZyb20gY2FjaGUuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIHRoZSBkb2N1bWVudCBpcyBub3QgY3VycmVudGx5IGNhY2hlZC5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCByZXNvbHZlZCB3aXRoIGEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5pbmcgdGhlXG4gKiBjdXJyZW50IGRvY3VtZW50IGNvbnRlbnRzLlxuICovIGZ1bmN0aW9uIGxmKHQpIHtcbiAgICB0ID0gdWgodCwgZmgpO1xuICAgIGNvbnN0IGUgPSB1aCh0LmZpcmVzdG9yZSwgdmgpLCBuID0gYmgoZSksIHMgPSBuZXcgaGYoZSk7XG4gICAgcmV0dXJuIGphKG4sIHQuX2tleSkudGhlbigobiA9PiBuZXcgc2YoZSwgcywgdC5fa2V5LCBuLCBuZXcgbmYobnVsbCAhPT0gbiAmJiBuLmhhc0xvY2FsTXV0YXRpb25zLCBcbiAgICAvKiBmcm9tQ2FjaGU9ICovICEwKSwgdC5jb252ZXJ0ZXIpKSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYCBmcm9tIHRoZSBzZXJ2ZXIuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIHRoZSBuZXR3b3JrIGlzIG5vdCBhdmFpbGFibGUuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgd2l0aCBhIGBEb2N1bWVudFNuYXBzaG90YCBjb250YWluaW5nIHRoZVxuICogY3VycmVudCBkb2N1bWVudCBjb250ZW50cy5cbiAqLyBmdW5jdGlvbiBmZih0KSB7XG4gICAgdCA9IHVoKHQsIGZoKTtcbiAgICBjb25zdCBlID0gdWgodC5maXJlc3RvcmUsIHZoKTtcbiAgICByZXR1cm4gemEoYmgoZSksIHQuX2tleSwge1xuICAgICAgICBzb3VyY2U6IFwic2VydmVyXCJcbiAgICB9KS50aGVuKChuID0+IEFmKGUsIHQsIG4pKSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHF1ZXJ5IGFuZCByZXR1cm5zIHRoZSByZXN1bHRzIGFzIGEgYFF1ZXJ5U25hcHNob3RgLlxuICpcbiAqIE5vdGU6IGBnZXREb2NzKClgIGF0dGVtcHRzIHRvIHByb3ZpZGUgdXAtdG8tZGF0ZSBkYXRhIHdoZW4gcG9zc2libGUgYnlcbiAqIHdhaXRpbmcgZm9yIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBidXQgaXQgbWF5IHJldHVybiBjYWNoZWQgZGF0YSBvciBmYWlsIGlmXG4gKiB5b3UgYXJlIG9mZmxpbmUgYW5kIHRoZSBzZXJ2ZXIgY2Fubm90IGJlIHJlYWNoZWQuIFRvIHNwZWNpZnkgdGhpcyBiZWhhdmlvcixcbiAqIGludm9rZSB7QGxpbmsgZ2V0RG9jc0Zyb21DYWNoZX0gb3Ige0BsaW5rIGdldERvY3NGcm9tU2VydmVyfS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gZGYodCkge1xuICAgIHQgPSB1aCh0LCBkaCk7XG4gICAgY29uc3QgZSA9IHVoKHQuZmlyZXN0b3JlLCB2aCksIG4gPSBiaChlKSwgcyA9IG5ldyBoZihlKTtcbiAgICByZXR1cm4gRWwodC5fcXVlcnkpLCBIYShuLCB0Ll9xdWVyeSkudGhlbigobiA9PiBuZXcgb2YoZSwgcywgdCwgbikpKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcXVlcnkgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMgYXMgYSBgUXVlcnlTbmFwc2hvdGAgZnJvbSBjYWNoZS5cbiAqIFJldHVybnMgYW4gZW1wdHkgcmVzdWx0IHNldCBpZiBubyBkb2N1bWVudHMgbWF0Y2hpbmcgdGhlIHF1ZXJ5IGFyZSBjdXJyZW50bHlcbiAqIGNhY2hlZC5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gd2YodCkge1xuICAgIHQgPSB1aCh0LCBkaCk7XG4gICAgY29uc3QgZSA9IHVoKHQuZmlyZXN0b3JlLCB2aCksIG4gPSBiaChlKSwgcyA9IG5ldyBoZihlKTtcbiAgICByZXR1cm4gV2EobiwgdC5fcXVlcnkpLnRoZW4oKG4gPT4gbmV3IG9mKGUsIHMsIHQsIG4pKSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHF1ZXJ5IGFuZCByZXR1cm5zIHRoZSByZXN1bHRzIGFzIGEgYFF1ZXJ5U25hcHNob3RgIGZyb20gdGhlXG4gKiBzZXJ2ZXIuIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIG5ldHdvcmsgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gX2YodCkge1xuICAgIHQgPSB1aCh0LCBkaCk7XG4gICAgY29uc3QgZSA9IHVoKHQuZmlyZXN0b3JlLCB2aCksIG4gPSBiaChlKSwgcyA9IG5ldyBoZihlKTtcbiAgICByZXR1cm4gSGEobiwgdC5fcXVlcnksIHtcbiAgICAgICAgc291cmNlOiBcInNlcnZlclwiXG4gICAgfSkudGhlbigobiA9PiBuZXcgb2YoZSwgcywgdCwgbikpKTtcbn1cblxuZnVuY3Rpb24gbWYodCwgZSwgbikge1xuICAgIHQgPSB1aCh0LCBmaCk7XG4gICAgY29uc3QgcyA9IHVoKHQuZmlyZXN0b3JlLCB2aCksIGkgPSBIbCh0LmNvbnZlcnRlciwgZSwgbik7XG4gICAgcmV0dXJuIEVmKHMsIFsgdGwoWmgocyksIFwic2V0RG9jXCIsIHQuX2tleSwgaSwgbnVsbCAhPT0gdC5jb252ZXJ0ZXIsIG4pLnRvTXV0YXRpb24odC5fa2V5LCBGcy5ub25lKCkpIF0pO1xufVxuXG5mdW5jdGlvbiBnZih0LCBlLCBuLCAuLi5zKSB7XG4gICAgdCA9IHVoKHQsIGZoKTtcbiAgICBjb25zdCBpID0gdWgodC5maXJlc3RvcmUsIHZoKSwgciA9IFpoKGkpO1xuICAgIGxldCBvO1xuICAgIG8gPSBcInN0cmluZ1wiID09IHR5cGVvZiAoXG4gICAgLy8gRm9yIENvbXBhdCB0eXBlcywgd2UgaGF2ZSB0byBcImV4dHJhY3RcIiB0aGUgdW5kZXJseWluZyB0eXBlcyBiZWZvcmVcbiAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgZSA9IGdldE1vZHVsYXJJbnN0YW5jZShlKSkgfHwgZSBpbnN0YW5jZW9mIEtoID8gY2wociwgXCJ1cGRhdGVEb2NcIiwgdC5fa2V5LCBlLCBuLCBzKSA6IHVsKHIsIFwidXBkYXRlRG9jXCIsIHQuX2tleSwgZSk7XG4gICAgcmV0dXJuIEVmKGksIFsgby50b011dGF0aW9uKHQuX2tleSwgRnMuZXhpc3RzKCEwKSkgXSk7XG59XG5cbi8qKlxuICogRGVsZXRlcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhlIHNwZWNpZmllZCBgRG9jdW1lbnRSZWZlcmVuY2VgLlxuICpcbiAqIEBwYXJhbSByZWZlcmVuY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gZGVsZXRlLlxuICogQHJldHVybnMgQSBQcm9taXNlIHJlc29sdmVkIG9uY2UgdGhlIGRvY3VtZW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogZGVsZXRlZCBmcm9tIHRoZSBiYWNrZW5kIChub3RlIHRoYXQgaXQgd29uJ3QgcmVzb2x2ZSB3aGlsZSB5b3UncmUgb2ZmbGluZSkuXG4gKi8gZnVuY3Rpb24geWYodCkge1xuICAgIHJldHVybiBFZih1aCh0LmZpcmVzdG9yZSwgdmgpLCBbIG5ldyBZcyh0Ll9rZXksIEZzLm5vbmUoKSkgXSk7XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGRvY3VtZW50IHRvIHNwZWNpZmllZCBgQ29sbGVjdGlvblJlZmVyZW5jZWAgd2l0aCB0aGUgZ2l2ZW4gZGF0YSxcbiAqIGFzc2lnbmluZyBpdCBhIGRvY3VtZW50IElEIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjb2xsZWN0aW9uIHRvIGFkZCB0aGlzIGRvY3VtZW50IHRvLlxuICogQHBhcmFtIGRhdGEgLSBBbiBPYmplY3QgY29udGFpbmluZyB0aGUgZGF0YSBmb3IgdGhlIG5ldyBkb2N1bWVudC5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHJlc29sdmVkIHdpdGggYSBgRG9jdW1lbnRSZWZlcmVuY2VgIHBvaW50aW5nIHRvIHRoZVxuICogbmV3bHkgY3JlYXRlZCBkb2N1bWVudCBhZnRlciBpdCBoYXMgYmVlbiB3cml0dGVuIHRvIHRoZSBiYWNrZW5kIChOb3RlIHRoYXQgaXRcbiAqIHdvbid0IHJlc29sdmUgd2hpbGUgeW91J3JlIG9mZmxpbmUpLlxuICovIGZ1bmN0aW9uIHBmKHQsIGUpIHtcbiAgICBjb25zdCBuID0gdWgodC5maXJlc3RvcmUsIHZoKSwgcyA9IGdoKHQpLCBpID0gSGwodC5jb252ZXJ0ZXIsIGUpO1xuICAgIHJldHVybiBFZihuLCBbIHRsKFpoKHQuZmlyZXN0b3JlKSwgXCJhZGREb2NcIiwgcy5fa2V5LCBpLCBudWxsICE9PSB0LmNvbnZlcnRlciwge30pLnRvTXV0YXRpb24ocy5fa2V5LCBGcy5leGlzdHMoITEpKSBdKS50aGVuKCgoKSA9PiBzKSk7XG59XG5cbmZ1bmN0aW9uIElmKHQsIC4uLmUpIHtcbiAgICB2YXIgbiwgcywgaTtcbiAgICB0ID0gZ2V0TW9kdWxhckluc3RhbmNlKHQpO1xuICAgIGxldCByID0ge1xuICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiAhMVxuICAgIH0sIG8gPSAwO1xuICAgIFwib2JqZWN0XCIgIT0gdHlwZW9mIGVbb10gfHwgVGgoZVtvXSkgfHwgKHIgPSBlW29dLCBvKyspO1xuICAgIGNvbnN0IHUgPSB7XG4gICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6IHIuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlc1xuICAgIH07XG4gICAgaWYgKFRoKGVbb10pKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlW29dO1xuICAgICAgICBlW29dID0gbnVsbCA9PT0gKG4gPSB0Lm5leHQpIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uYmluZCh0KSwgZVtvICsgMV0gPSBudWxsID09PSAocyA9IHQuZXJyb3IpIHx8IHZvaWQgMCA9PT0gcyA/IHZvaWQgMCA6IHMuYmluZCh0KSwgXG4gICAgICAgIGVbbyArIDJdID0gbnVsbCA9PT0gKGkgPSB0LmNvbXBsZXRlKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLmJpbmQodCk7XG4gICAgfVxuICAgIGxldCBjLCBhLCBoO1xuICAgIGlmICh0IGluc3RhbmNlb2YgZmgpIGEgPSB1aCh0LmZpcmVzdG9yZSwgdmgpLCBoID0gR24odC5fa2V5LnBhdGgpLCBjID0ge1xuICAgICAgICBuZXh0OiBuID0+IHtcbiAgICAgICAgICAgIGVbb10gJiYgZVtvXShBZihhLCB0LCBuKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBlW28gKyAxXSxcbiAgICAgICAgY29tcGxldGU6IGVbbyArIDJdXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGNvbnN0IG4gPSB1aCh0LCBkaCk7XG4gICAgICAgIGEgPSB1aChuLmZpcmVzdG9yZSwgdmgpLCBoID0gbi5fcXVlcnk7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgaGYoYSk7XG4gICAgICAgIGMgPSB7XG4gICAgICAgICAgICBuZXh0OiB0ID0+IHtcbiAgICAgICAgICAgICAgICBlW29dICYmIGVbb10obmV3IG9mKGEsIHMsIG4sIHQpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZVtvICsgMV0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZVtvICsgMl1cbiAgICAgICAgfSwgRWwodC5fcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbiwgcykge1xuICAgICAgICBjb25zdCBpID0gbmV3IFZhKHMpLCByID0gbmV3IE5jKGUsIGksIG4pO1xuICAgICAgICByZXR1cm4gdC5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IFZjKGF3YWl0IEthKHQpLCByKSkpLCAoKSA9PiB7XG4gICAgICAgICAgICBpLkRjKCksIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBTYyhhd2FpdCBLYSh0KSwgcikpKTtcbiAgICAgICAgfTtcbiAgICB9KGJoKGEpLCBoLCB1LCBjKTtcbn1cblxuZnVuY3Rpb24gVGYodCwgZSkge1xuICAgIHJldHVybiBKYShiaCh0ID0gdWgodCwgdmgpKSwgVGgoZSkgPyBlIDoge1xuICAgICAgICBuZXh0OiBlXG4gICAgfSk7XG59XG5cbi8qKlxuICogTG9jYWxseSB3cml0ZXMgYG11dGF0aW9uc2Agb24gdGhlIGFzeW5jIHF1ZXVlLlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gRWYodCwgZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgSztcbiAgICAgICAgcmV0dXJuIHQuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiB6Yyhhd2FpdCBxYSh0KSwgZSwgbikpKSwgbi5wcm9taXNlO1xuICAgIH0oYmgodCksIGUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEge0BsaW5rIFZpZXdTbmFwc2hvdH0gdGhhdCBjb250YWlucyB0aGUgc2luZ2xlIGRvY3VtZW50IHNwZWNpZmllZCBieSBgcmVmYFxuICogdG8gYSB7QGxpbmsgRG9jdW1lbnRTbmFwc2hvdH0uXG4gKi8gZnVuY3Rpb24gQWYodCwgZSwgbikge1xuICAgIGNvbnN0IHMgPSBuLmRvY3MuZ2V0KGUuX2tleSksIGkgPSBuZXcgaGYodCk7XG4gICAgcmV0dXJuIG5ldyBzZih0LCBpLCBlLl9rZXksIHMsIG5ldyBuZihuLmhhc1BlbmRpbmdXcml0ZXMsIG4uZnJvbUNhY2hlKSwgZS5jb252ZXJ0ZXIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSByZXN1bHQgc2V0IG9mIHRoZSBnaXZlbiBxdWVyeSxcbiAqIHdpdGhvdXQgYWN0dWFsbHkgZG93bmxvYWRpbmcgdGhlIGRvY3VtZW50cy5cbiAqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHRvIGNvdW50IHRoZSBkb2N1bWVudHMgaXMgZWZmaWNpZW50IGJlY2F1c2Ugb25seSB0aGVcbiAqIGZpbmFsIGNvdW50LCBub3QgdGhlIGRvY3VtZW50cycgZGF0YSwgaXMgZG93bmxvYWRlZC4gVGhpcyBmdW5jdGlvbiBjYW4gZXZlblxuICogY291bnQgdGhlIGRvY3VtZW50cyBpZiB0aGUgcmVzdWx0IHNldCB3b3VsZCBiZSBwcm9oaWJpdGl2ZWx5IGxhcmdlIHRvXG4gKiBkb3dubG9hZCBlbnRpcmVseSAoZS5nLiB0aG91c2FuZHMgb2YgZG9jdW1lbnRzKS5cbiAqXG4gKiBUaGUgcmVzdWx0IHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlciBpcyBwcmVzZW50ZWQsIHVuYWx0ZXJlZCwgd2l0aG91dFxuICogY29uc2lkZXJpbmcgYW55IGxvY2FsIHN0YXRlLiBUaGF0IGlzLCBkb2N1bWVudHMgaW4gdGhlIGxvY2FsIGNhY2hlIGFyZSBub3RcbiAqIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiwgbmVpdGhlciBhcmUgbG9jYWwgbW9kaWZpY2F0aW9ucyBub3QgeWV0XG4gKiBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgc2VydmVyLiBQcmV2aW91c2x5LWRvd25sb2FkZWQgcmVzdWx0cywgaWYgYW55LCBhcmUgbm90XG4gKiB1c2VkOiBldmVyeSByZXF1ZXN0IHVzaW5nIHRoaXMgc291cmNlIG5lY2Vzc2FyaWx5IGludm9sdmVzIGEgcm91bmQgdHJpcCB0b1xuICogdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgd2hvc2UgcmVzdWx0IHNldCBzaXplIHRvIGNhbGN1bGF0ZS5cbiAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgY291bnQ7IHRoZSBjb3VudCBjYW4gYmVcbiAqIHJldHJpZXZlZCBmcm9tIGBzbmFwc2hvdC5kYXRhKCkuY291bnRgLCB3aGVyZSBgc25hcHNob3RgIGlzIHRoZVxuICogYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIHRvIHdoaWNoIHRoZSByZXR1cm5lZCBQcm9taXNlIHJlc29sdmVzLlxuICovIGZ1bmN0aW9uIHZmKHQpIHtcbiAgICByZXR1cm4gUmYodCwge1xuICAgICAgICBjb3VudDogWmwoKVxuICAgIH0pO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNwZWNpZmllZCBhZ2dyZWdhdGlvbnMgb3ZlciB0aGUgZG9jdW1lbnRzIGluIHRoZSByZXN1bHRcbiAqIHNldCBvZiB0aGUgZ2l2ZW4gcXVlcnksIHdpdGhvdXQgYWN0dWFsbHkgZG93bmxvYWRpbmcgdGhlIGRvY3VtZW50cy5cbiAqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHRvIHBlcmZvcm0gYWdncmVnYXRpb25zIGlzIGVmZmljaWVudCBiZWNhdXNlIG9ubHkgdGhlXG4gKiBmaW5hbCBhZ2dyZWdhdGlvbiB2YWx1ZXMsIG5vdCB0aGUgZG9jdW1lbnRzJyBkYXRhLCBpcyBkb3dubG9hZGVkLiBUaGlzXG4gKiBmdW5jdGlvbiBjYW4gZXZlbiBwZXJmb3JtIGFnZ3JlZ2F0aW9ucyBvZiB0aGUgZG9jdW1lbnRzIGlmIHRoZSByZXN1bHQgc2V0XG4gKiB3b3VsZCBiZSBwcm9oaWJpdGl2ZWx5IGxhcmdlIHRvIGRvd25sb2FkIGVudGlyZWx5IChlLmcuIHRob3VzYW5kcyBvZiBkb2N1bWVudHMpLlxuICpcbiAqIFRoZSByZXN1bHQgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIGlzIHByZXNlbnRlZCwgdW5hbHRlcmVkLCB3aXRob3V0XG4gKiBjb25zaWRlcmluZyBhbnkgbG9jYWwgc3RhdGUuIFRoYXQgaXMsIGRvY3VtZW50cyBpbiB0aGUgbG9jYWwgY2FjaGUgYXJlIG5vdFxuICogdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLCBuZWl0aGVyIGFyZSBsb2NhbCBtb2RpZmljYXRpb25zIG5vdCB5ZXRcbiAqIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzZXJ2ZXIuIFByZXZpb3VzbHktZG93bmxvYWRlZCByZXN1bHRzLCBpZiBhbnksIGFyZSBub3RcbiAqIHVzZWQ6IGV2ZXJ5IHJlcXVlc3QgdXNpbmcgdGhpcyBzb3VyY2UgbmVjZXNzYXJpbHkgaW52b2x2ZXMgYSByb3VuZCB0cmlwIHRvXG4gKiB0aGUgc2VydmVyLlxuICpcbiAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgd2hvc2UgcmVzdWx0IHNldCB0byBhZ2dyZWdhdGUgb3Zlci5cbiAqIEBwYXJhbSBhZ2dyZWdhdGVTcGVjIEFuIGBBZ2dyZWdhdGVTcGVjYCBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGFnZ3JlZ2F0ZXNcbiAqIHRvIHBlcmZvcm0gb3ZlciB0aGUgcmVzdWx0IHNldC4gVGhlIEFnZ3JlZ2F0ZVNwZWMgc3BlY2lmaWVzIGFsaWFzZXMgZm9yIGVhY2hcbiAqIGFnZ3JlZ2F0ZSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIGFnZ3JlZ2F0ZSByZXN1bHQuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgYWdncmVnYXRlU25hcHNob3QgPSBhd2FpdCBnZXRBZ2dyZWdhdGVGcm9tU2VydmVyKHF1ZXJ5LCB7XG4gKiAgIGNvdW50T2ZEb2NzOiBjb3VudCgpLFxuICogICB0b3RhbEhvdXJzOiBzdW0oJ2hvdXJzJyksXG4gKiAgIGF2ZXJhZ2VTY29yZTogYXZlcmFnZSgnc2NvcmUnKVxuICogfSk7XG4gKlxuICogY29uc3QgY291bnRPZkRvY3M6IG51bWJlciA9IGFnZ3JlZ2F0ZVNuYXBzaG90LmRhdGEoKS5jb3VudE9mRG9jcztcbiAqIGNvbnN0IHRvdGFsSG91cnM6IG51bWJlciA9IGFnZ3JlZ2F0ZVNuYXBzaG90LmRhdGEoKS50b3RhbEhvdXJzO1xuICogY29uc3QgYXZlcmFnZVNjb3JlOiBudW1iZXIgfCBudWxsID0gYWdncmVnYXRlU25hcHNob3QuZGF0YSgpLmF2ZXJhZ2VTY29yZTtcbiAqIGBgYFxuICogQGludGVybmFsIFRPRE8gKHN1bS9hdmcpIHJlbW92ZSB3aGVuIHB1YmxpY1xuICovIGZ1bmN0aW9uIFJmKHQsIGUpIHtcbiAgICBjb25zdCBuID0gdWgodC5maXJlc3RvcmUsIHZoKSwgcyA9IGJoKG4pLCBpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBjb25zdCBuID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBpbiB0KSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgcykgJiYgbi5wdXNoKGUodFtzXSwgcywgdCkpO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9KGUsICgodCwgZSkgPT4gbmV3IG5pKGUsIHQuX2FnZ3JlZ2F0ZVR5cGUsIHQuX2ludGVybmFsRmllbGRQYXRoKSkpO1xuICAgIC8vIFJ1biB0aGUgYWdncmVnYXRpb24gYW5kIGNvbnZlcnQgdGhlIHJlc3VsdHNcbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IEs7XG4gICAgICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyAoc3VtL2F2Zykgc2hvdWxkIHdlIHVwZGF0ZSB0aGlzIHRvIHVzZSB0aGUgZXZlbnQgbWFuYWdlcj9cbiAgICAgICAgICAgIC8vIEltcGxlbWVudCBhbmQgY2FsbCBleGVjdXRlQWdncmVnYXRlUXVlcnlWaWFTbmFwc2hvdExpc3RlbmVyLCBzaW1pbGFyXG4gICAgICAgICAgICAvLyB0byB0aGUgaW1wbGVtZW50YXRpb24gaW4gZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRzVmlhU25hcHNob3RMaXN0ZW5lclxuICAgICAgICAgICAgLy8gYWJvdmVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzI3NzYyODM4NCk6IGNoZWNrIGBjYW5Vc2VOZXR3b3JrKClgIGFuZCBoYW5kbGUgbXVsdGktdGFiLlxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBhd2FpdCBVYSh0KTtcbiAgICAgICAgICAgICAgICBzLnJlc29sdmUoR3UoaSwgZSwgbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIHMucmVqZWN0KHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIHMucHJvbWlzZTtcbiAgICB9KHMsIHQuX3F1ZXJ5LCBpKS50aGVuKChlID0+IFxuICAgIC8qKlxuICogQ29udmVydHMgdGhlIGNvcmUgYWdncmVncmF0aW9uIHJlc3VsdCB0byBhbiBgQWdncmVnYXRlUXVlcnlTbmFwc2hvdGBcbiAqIHRoYXQgY2FuIGJlIHJldHVybmVkIHRvIHRoZSBjb25zdW1lci5cbiAqIEBwYXJhbSBxdWVyeVxuICogQHBhcmFtIGFnZ3JlZ2F0ZVJlc3VsdCBDb3JlIGFnZ3JlZ2F0aW9uIHJlc3VsdFxuICogQGludGVybmFsXG4gKi9cbiAgICBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgaGYodCk7XG4gICAgICAgIHJldHVybiBuZXcgcWgoZSwgcywgbik7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIChuLCB0LCBlKSkpO1xufVxuXG5jbGFzcyBQZiB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIm1lbW9yeVwiLCB0aGlzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBQYSwgKG51bGwgPT0gdCA/IHZvaWQgMCA6IHQuZ2FyYmFnZUNvbGxlY3RvcikgPyB0aGlzLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgPSB0LmdhcmJhZ2VDb2xsZWN0b3IuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA6IHRoaXMuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBFYTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogdGhpcy5raW5kXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jbGFzcyBiZiB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgICBsZXQgZTtcbiAgICAgICAgdGhpcy5raW5kID0gXCJwZXJzaXN0ZW50XCIsIChudWxsID09IHQgPyB2b2lkIDAgOiB0LnRhYk1hbmFnZXIpID8gKHQudGFiTWFuYWdlci5faW5pdGlhbGl6ZSh0KSwgXG4gICAgICAgIGUgPSB0LnRhYk1hbmFnZXIpIDogKGUgPSAkZih2b2lkIDApLCBlLl9pbml0aWFsaXplKHQpKSwgdGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIgPSBlLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciwgXG4gICAgICAgIHRoaXMuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA9IGUuX29mZmxpbmVDb21wb25lbnRQcm92aWRlcjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogdGhpcy5raW5kXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jbGFzcyBWZiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMua2luZCA9IFwibWVtb3J5RWFnZXJcIiwgdGhpcy5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyID0gbmV3IEVhO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmRcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNsYXNzIFNmIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMua2luZCA9IFwibWVtb3J5THJ1XCIsIHRoaXMuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBBYSh0KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogdGhpcy5raW5kXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYE1lbW9yeUVhZ2VyR2FyYmFnZUNvbGxlY3RvcmAuIFRoaXMgaXMgYWxzbyB0aGVcbiAqIGRlZmF1bHQgZ2FyYmFnZSBjb2xsZWN0b3IgdW5sZXNzIGl0IGlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkIG90aGVyd2lzZS5cbiAqLyBmdW5jdGlvbiBEZigpIHtcbiAgICByZXR1cm4gbmV3IFZmO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYE1lbW9yeUxydUdhcmJhZ2VDb2xsZWN0b3JgLlxuICpcbiAqIEEgdGFyZ2V0IHNpemUgY2FuIGJlIHNwZWNpZmllZCBhcyBwYXJ0IG9mIHRoZSBzZXR0aW5nIHBhcmFtZXRlci4gVGhlXG4gKiBjb2xsZWN0b3Igd2lsbCBzdGFydCBkZWxldGluZyBkb2N1bWVudHMgb25jZSB0aGUgY2FjaGUgc2l6ZSBleGNlZWRzXG4gKiB0aGUgZ2l2ZW4gc2l6ZS4gVGhlIGRlZmF1bHQgY2FjaGUgc2l6ZSBpcyA0ME1CICg0MCAqIDEwMjQgKiAxMDI0IGJ5dGVzKS5cbiAqLyBmdW5jdGlvbiBDZih0KSB7XG4gICAgcmV0dXJuIG5ldyBTZihudWxsID09IHQgPyB2b2lkIDAgOiB0LmNhY2hlU2l6ZUJ5dGVzKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBNZW1vcnlMb2NhbENhY2hlYC4gVGhlIGluc3RhbmNlIGNhbiBiZSBzZXQgdG9cbiAqIGBGaXJlc3RvcmVTZXR0aW5ncy5jYWNoZWAgdG8gdGVsbCB0aGUgU0RLIHdoaWNoIGNhY2hlIGxheWVyIHRvIHVzZS5cbiAqLyBmdW5jdGlvbiB4Zih0KSB7XG4gICAgcmV0dXJuIG5ldyBQZih0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBQZXJzaXN0ZW50TG9jYWxDYWNoZWAuIFRoZSBpbnN0YW5jZSBjYW4gYmUgc2V0IHRvXG4gKiBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgIHRvIHRlbGwgdGhlIFNESyB3aGljaCBjYWNoZSBsYXllciB0byB1c2UuXG4gKlxuICogUGVyc2lzdGVudCBjYWNoZSBjYW5ub3QgYmUgdXNlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQuXG4gKi8gZnVuY3Rpb24gTmYodCkge1xuICAgIHJldHVybiBuZXcgYmYodCk7XG59XG5cbmNsYXNzIGtmIHtcbiAgICBjb25zdHJ1Y3Rvcih0KSB7XG4gICAgICAgIHRoaXMuZm9yY2VPd25lcnNoaXAgPSB0LCB0aGlzLmtpbmQgPSBcInBlcnNpc3RlbnRTaW5nbGVUYWJcIjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogdGhpcy5raW5kXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqLyAgICBfaW5pdGlhbGl6ZSh0KSB7XG4gICAgICAgIHRoaXMuX29ubGluZUNvbXBvbmVudFByb3ZpZGVyID0gbmV3IFBhLCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgPSBuZXcgdmEodGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIsIG51bGwgPT0gdCA/IHZvaWQgMCA6IHQuY2FjaGVTaXplQnl0ZXMsIHRoaXMuZm9yY2VPd25lcnNoaXApO1xuICAgIH1cbn1cblxuY2xhc3MgTWYge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIlBlcnNpc3RlbnRNdWx0aXBsZVRhYlwiO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovICAgIF9pbml0aWFsaXplKHQpIHtcbiAgICAgICAgdGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIgPSBuZXcgUGEsIHRoaXMuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBSYSh0aGlzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciwgbnVsbCA9PSB0ID8gdm9pZCAwIDogdC5jYWNoZVNpemVCeXRlcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYFBlcnNpc3RlbnRTaW5nbGVUYWJNYW5hZ2VyYC5cbiAqXG4gKiBAcGFyYW0gc2V0dGluZ3MgQ29uZmlndXJlcyB0aGUgY3JlYXRlZCB0YWIgbWFuYWdlci5cbiAqLyBmdW5jdGlvbiAkZih0KSB7XG4gICAgcmV0dXJuIG5ldyBrZihudWxsID09IHQgPyB2b2lkIDAgOiB0LmZvcmNlT3duZXJzaGlwKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBQZXJzaXN0ZW50TXVsdGlwbGVUYWJNYW5hZ2VyYC5cbiAqLyBmdW5jdGlvbiBPZigpIHtcbiAgICByZXR1cm4gbmV3IE1mO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBGZiA9IHtcbiAgICBtYXhBdHRlbXB0czogNVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSB3cml0ZSBiYXRjaCwgdXNlZCB0byBwZXJmb3JtIG11bHRpcGxlIHdyaXRlcyBhcyBhIHNpbmdsZSBhdG9taWMgdW5pdC5cbiAqXG4gKiBBIGBXcml0ZUJhdGNoYCBvYmplY3QgY2FuIGJlIGFjcXVpcmVkIGJ5IGNhbGxpbmcge0BsaW5rIHdyaXRlQmF0Y2h9LiBJdFxuICogcHJvdmlkZXMgbWV0aG9kcyBmb3IgYWRkaW5nIHdyaXRlcyB0byB0aGUgd3JpdGUgYmF0Y2guIE5vbmUgb2YgdGhlIHdyaXRlc1xuICogd2lsbCBiZSBjb21taXR0ZWQgKG9yIHZpc2libGUgbG9jYWxseSkgdW50aWwge0BsaW5rIFdyaXRlQmF0Y2guY29tbWl0fSBpc1xuICogY2FsbGVkLlxuICovXG5jbGFzcyBCZiB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IHQsIHRoaXMuX2NvbW1pdEhhbmRsZXIgPSBlLCB0aGlzLl9tdXRhdGlvbnMgPSBbXSwgdGhpcy5fY29tbWl0dGVkID0gITEsIFxuICAgICAgICB0aGlzLl9kYXRhUmVhZGVyID0gWmgodCk7XG4gICAgfVxuICAgIHNldCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuX3ZlcmlmeU5vdENvbW1pdHRlZCgpO1xuICAgICAgICBjb25zdCBzID0gTGYodCwgdGhpcy5fZmlyZXN0b3JlKSwgaSA9IEhsKHMuY29udmVydGVyLCBlLCBuKSwgciA9IHRsKHRoaXMuX2RhdGFSZWFkZXIsIFwiV3JpdGVCYXRjaC5zZXRcIiwgcy5fa2V5LCBpLCBudWxsICE9PSBzLmNvbnZlcnRlciwgbik7XG4gICAgICAgIHJldHVybiB0aGlzLl9tdXRhdGlvbnMucHVzaChyLnRvTXV0YXRpb24ocy5fa2V5LCBGcy5ub25lKCkpKSwgdGhpcztcbiAgICB9XG4gICAgdXBkYXRlKHQsIGUsIG4sIC4uLnMpIHtcbiAgICAgICAgdGhpcy5fdmVyaWZ5Tm90Q29tbWl0dGVkKCk7XG4gICAgICAgIGNvbnN0IGkgPSBMZih0LCB0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgbGV0IHI7XG4gICAgICAgIHJldHVybiByID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgKGUgPSBnZXRNb2R1bGFySW5zdGFuY2UoZSkpIHx8IGUgaW5zdGFuY2VvZiBLaCA/IGNsKHRoaXMuX2RhdGFSZWFkZXIsIFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgaS5fa2V5LCBlLCBuLCBzKSA6IHVsKHRoaXMuX2RhdGFSZWFkZXIsIFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgaS5fa2V5LCBlKSwgXG4gICAgICAgIHRoaXMuX211dGF0aW9ucy5wdXNoKHIudG9NdXRhdGlvbihpLl9rZXksIEZzLmV4aXN0cyghMCkpKSwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhlIHByb3ZpZGVkIHtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRSZWYgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmUgZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJucyBUaGlzIGBXcml0ZUJhdGNoYCBpbnN0YW5jZS4gVXNlZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICAgICAqLyAgICBkZWxldGUodCkge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDb21taXR0ZWQoKTtcbiAgICAgICAgY29uc3QgZSA9IExmKHQsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9tdXRhdGlvbnMgPSB0aGlzLl9tdXRhdGlvbnMuY29uY2F0KG5ldyBZcyhlLl9rZXksIEZzLm5vbmUoKSkpLCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21taXRzIGFsbCBvZiB0aGUgd3JpdGVzIGluIHRoaXMgd3JpdGUgYmF0Y2ggYXMgYSBzaW5nbGUgYXRvbWljIHVuaXQuXG4gICAgICpcbiAgICAgKiBUaGUgcmVzdWx0IG9mIHRoZXNlIHdyaXRlcyB3aWxsIG9ubHkgYmUgcmVmbGVjdGVkIGluIGRvY3VtZW50IHJlYWRzIHRoYXRcbiAgICAgKiBvY2N1ciBhZnRlciB0aGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcy4gSWYgdGhlIGNsaWVudCBpcyBvZmZsaW5lLCB0aGVcbiAgICAgKiB3cml0ZSBmYWlscy4gSWYgeW91IHdvdWxkIGxpa2UgdG8gc2VlIGxvY2FsIG1vZGlmaWNhdGlvbnMgb3IgYnVmZmVyIHdyaXRlc1xuICAgICAqIHVudGlsIHRoZSBjbGllbnQgaXMgb25saW5lLCB1c2UgdGhlIGZ1bGwgRmlyZXN0b3JlIFNESy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgYFByb21pc2VgIHJlc29sdmVkIG9uY2UgYWxsIG9mIHRoZSB3cml0ZXMgaW4gdGhlIGJhdGNoIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWxseSB3cml0dGVuIHRvIHRoZSBiYWNrZW5kIGFzIGFuIGF0b21pYyB1bml0IChub3RlIHRoYXQgaXQgd29uJ3RcbiAgICAgKiByZXNvbHZlIHdoaWxlIHlvdSdyZSBvZmZsaW5lKS5cbiAgICAgKi8gICAgY29tbWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyaWZ5Tm90Q29tbWl0dGVkKCksIHRoaXMuX2NvbW1pdHRlZCA9ICEwLCB0aGlzLl9tdXRhdGlvbnMubGVuZ3RoID4gMCA/IHRoaXMuX2NvbW1pdEhhbmRsZXIodGhpcy5fbXV0YXRpb25zKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBfdmVyaWZ5Tm90Q29tbWl0dGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY29tbWl0dGVkKSB0aHJvdyBuZXcgVShxLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSB3cml0ZSBiYXRjaCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgYWZ0ZXIgY29tbWl0KCkgaGFzIGJlZW4gY2FsbGVkLlwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIExmKHQsIGUpIHtcbiAgICBpZiAoKHQgPSBnZXRNb2R1bGFySW5zdGFuY2UodCkpLmZpcmVzdG9yZSAhPT0gZSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIlByb3ZpZGVkIGRvY3VtZW50IHJlZmVyZW5jZSBpcyBmcm9tIGEgZGlmZmVyZW50IEZpcmVzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgcmV0dXJuIHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUT0RPKG1yc2NobWlkdCkgQ29uc2lkZXIgdXNpbmcgYEJhc2VUcmFuc2FjdGlvbmAgYXMgdGhlIGJhc2UgY2xhc3MgaW4gdGhlXG4vLyBsZWdhY3kgU0RLLlxuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHRyYW5zYWN0aW9uLlxuICpcbiAqIFRoZSBgVHJhbnNhY3Rpb25gIG9iamVjdCBwYXNzZWQgdG8gYSB0cmFuc2FjdGlvbidzIGB1cGRhdGVGdW5jdGlvbmAgcHJvdmlkZXNcbiAqIHRoZSBtZXRob2RzIHRvIHJlYWQgYW5kIHdyaXRlIGRhdGEgd2l0aGluIHRoZSB0cmFuc2FjdGlvbiBjb250ZXh0LiBTZWVcbiAqIHtAbGluayBydW5UcmFuc2FjdGlvbn0uXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGEgdHJhbnNhY3Rpb24uXG4gKlxuICogVGhlIGBUcmFuc2FjdGlvbmAgb2JqZWN0IHBhc3NlZCB0byBhIHRyYW5zYWN0aW9uJ3MgYHVwZGF0ZUZ1bmN0aW9uYCBwcm92aWRlc1xuICogdGhlIG1ldGhvZHMgdG8gcmVhZCBhbmQgd3JpdGUgZGF0YSB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uIGNvbnRleHQuIFNlZVxuICoge0BsaW5rIHJ1blRyYW5zYWN0aW9ufS5cbiAqL1xuY2xhc3MgcWYgZXh0ZW5kcyBjbGFzcyB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IHQsIHRoaXMuX3RyYW5zYWN0aW9uID0gZSwgdGhpcy5fZGF0YVJlYWRlciA9IFpoKHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyB0aGUgZG9jdW1lbnQgcmVmZXJlbmNlZCBieSB0aGUgcHJvdmlkZWQge0BsaW5rIERvY3VtZW50UmVmZXJlbmNlfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudFJlZiAtIEEgcmVmZXJlbmNlIHRvIHRoZSBkb2N1bWVudCB0byBiZSByZWFkLlxuICAgICAqIEByZXR1cm5zIEEgYERvY3VtZW50U25hcHNob3RgIHdpdGggdGhlIHJlYWQgZGF0YS5cbiAgICAgKi8gICAgZ2V0KHQpIHtcbiAgICAgICAgY29uc3QgZSA9IExmKHQsIHRoaXMuX2ZpcmVzdG9yZSksIG4gPSBuZXcgSmwodGhpcy5fZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zYWN0aW9uLmxvb2t1cChbIGUuX2tleSBdKS50aGVuKCh0ID0+IHtcbiAgICAgICAgICAgIGlmICghdCB8fCAxICE9PSB0Lmxlbmd0aCkgcmV0dXJuIE8oKTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0WzBdO1xuICAgICAgICAgICAgaWYgKHMuaXNGb3VuZERvY3VtZW50KCkpIHJldHVybiBuZXcgcGwodGhpcy5fZmlyZXN0b3JlLCBuLCBzLmtleSwgcywgZS5jb252ZXJ0ZXIpO1xuICAgICAgICAgICAgaWYgKHMuaXNOb0RvY3VtZW50KCkpIHJldHVybiBuZXcgcGwodGhpcy5fZmlyZXN0b3JlLCBuLCBlLl9rZXksIG51bGwsIGUuY29udmVydGVyKTtcbiAgICAgICAgICAgIHRocm93IE8oKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXQodCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gTGYodCwgdGhpcy5fZmlyZXN0b3JlKSwgaSA9IEhsKHMuY29udmVydGVyLCBlLCBuKSwgciA9IHRsKHRoaXMuX2RhdGFSZWFkZXIsIFwiVHJhbnNhY3Rpb24uc2V0XCIsIHMuX2tleSwgaSwgbnVsbCAhPT0gcy5jb252ZXJ0ZXIsIG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNhY3Rpb24uc2V0KHMuX2tleSwgciksIHRoaXM7XG4gICAgfVxuICAgIHVwZGF0ZSh0LCBlLCBuLCAuLi5zKSB7XG4gICAgICAgIGNvbnN0IGkgPSBMZih0LCB0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgbGV0IHI7XG4gICAgICAgIHJldHVybiByID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgKGUgPSBnZXRNb2R1bGFySW5zdGFuY2UoZSkpIHx8IGUgaW5zdGFuY2VvZiBLaCA/IGNsKHRoaXMuX2RhdGFSZWFkZXIsIFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIGkuX2tleSwgZSwgbiwgcykgOiB1bCh0aGlzLl9kYXRhUmVhZGVyLCBcIlRyYW5zYWN0aW9uLnVwZGF0ZVwiLCBpLl9rZXksIGUpLCBcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24udXBkYXRlKGkuX2tleSwgciksIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoZSBwcm92aWRlZCB7QGxpbmsgRG9jdW1lbnRSZWZlcmVuY2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50UmVmIC0gQSByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IHRvIGJlIGRlbGV0ZWQuXG4gICAgICogQHJldHVybnMgVGhpcyBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBVc2VkIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gICAgICovICAgIGRlbGV0ZSh0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBMZih0LCB0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNhY3Rpb24uZGVsZXRlKGUuX2tleSksIHRoaXM7XG4gICAgfVxufSB7XG4gICAgLy8gVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBzYW1lIGxvZ2ljIGFzIHRoZSBUcmFuc2FjdGlvbiBBUEkgaW4gdGhlIExpdGUgU0RLXG4gICAgLy8gYnV0IGlzIHN1YmNsYXNzZWQgaW4gb3JkZXIgdG8gcmV0dXJuIGl0cyBvd24gRG9jdW1lbnRTbmFwc2hvdCB0eXBlcy5cbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgICAgc3VwZXIodCwgZSksIHRoaXMuX2ZpcmVzdG9yZSA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBkb2N1bWVudCByZWZlcmVuY2VkIGJ5IHRoZSBwcm92aWRlZCB7QGxpbmsgRG9jdW1lbnRSZWZlcmVuY2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50UmVmIC0gQSByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IHRvIGJlIHJlYWQuXG4gICAgICogQHJldHVybnMgQSBgRG9jdW1lbnRTbmFwc2hvdGAgd2l0aCB0aGUgcmVhZCBkYXRhLlxuICAgICAqLyAgICBnZXQodCkge1xuICAgICAgICBjb25zdCBlID0gTGYodCwgdGhpcy5fZmlyZXN0b3JlKSwgbiA9IG5ldyBoZih0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KHQpLnRoZW4oKHQgPT4gbmV3IHNmKHRoaXMuX2ZpcmVzdG9yZSwgbiwgZS5fa2V5LCB0Ll9kb2N1bWVudCwgbmV3IG5mKFxuICAgICAgICAvKiBoYXNQZW5kaW5nV3JpdGVzPSAqLyAhMSwgXG4gICAgICAgIC8qIGZyb21DYWNoZT0gKi8gITEpLCBlLmNvbnZlcnRlcikpKTtcbiAgICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIGdpdmVuIGB1cGRhdGVGdW5jdGlvbmAgYW5kIHRoZW4gYXR0ZW1wdHMgdG8gY29tbWl0IHRoZSBjaGFuZ2VzXG4gKiBhcHBsaWVkIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24uIElmIGFueSBkb2N1bWVudCByZWFkIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb25cbiAqIGhhcyBjaGFuZ2VkLCBDbG91ZCBGaXJlc3RvcmUgcmV0cmllcyB0aGUgYHVwZGF0ZUZ1bmN0aW9uYC4gSWYgaXQgZmFpbHMgdG9cbiAqIGNvbW1pdCBhZnRlciA1IGF0dGVtcHRzLCB0aGUgdHJhbnNhY3Rpb24gZmFpbHMuXG4gKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHdyaXRlcyBhbGxvd2VkIGluIGEgc2luZ2xlIHRyYW5zYWN0aW9uIGlzIDUwMC5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gQSByZWZlcmVuY2UgdG8gdGhlIEZpcmVzdG9yZSBkYXRhYmFzZSB0byBydW4gdGhpc1xuICogdHJhbnNhY3Rpb24gYWdhaW5zdC5cbiAqIEBwYXJhbSB1cGRhdGVGdW5jdGlvbiAtIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb25cbiAqIGNvbnRleHQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgb2JqZWN0IHRvIGNvbmZpZ3VyZSBtYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyB0b1xuICogY29tbWl0LlxuICogQHJldHVybnMgSWYgdGhlIHRyYW5zYWN0aW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgb3Igd2FzIGV4cGxpY2l0bHkgYWJvcnRlZFxuICogKHRoZSBgdXBkYXRlRnVuY3Rpb25gIHJldHVybmVkIGEgZmFpbGVkIHByb21pc2UpLCB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGVcbiAqIGB1cGRhdGVGdW5jdGlvbiBgaXMgcmV0dXJuZWQgaGVyZS4gT3RoZXJ3aXNlLCBpZiB0aGUgdHJhbnNhY3Rpb24gZmFpbGVkLCBhXG4gKiByZWplY3RlZCBwcm9taXNlIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgZmFpbHVyZSBlcnJvciBpcyByZXR1cm5lZC5cbiAqLyBmdW5jdGlvbiBVZih0LCBlLCBuKSB7XG4gICAgdCA9IHVoKHQsIHZoKTtcbiAgICBjb25zdCBzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBGZiksIG4pO1xuICAgICFmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh0Lm1heEF0dGVtcHRzIDwgMSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIk1heCBhdHRlbXB0cyBtdXN0IGJlIGF0IGxlYXN0IDFcIik7XG4gICAgfShzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBjb25zdCBzID0gbmV3IEs7XG4gICAgICAgIHJldHVybiB0LmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IGF3YWl0IFVhKHQpO1xuICAgICAgICAgICAgbmV3IENhKHQuYXN5bmNRdWV1ZSwgaSwgbiwgZSwgcykucnVuKCk7XG4gICAgICAgIH0pKSwgcy5wcm9taXNlO1xuICAgIH0oYmgodCksIChuID0+IGUobmV3IHFmKHQsIG4pKSksIHMpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2VudGluZWwgZm9yIHVzZSB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gb3JcbiAqIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gd2l0aCBge21lcmdlOiB0cnVlfWAgdG8gbWFyayBhIGZpZWxkIGZvciBkZWxldGlvbi5cbiAqLyBmdW5jdGlvbiBLZigpIHtcbiAgICByZXR1cm4gbmV3IGVsKFwiZGVsZXRlRmllbGRcIik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNlbnRpbmVsIHVzZWQgd2l0aCB7QGxpbmsgQGZpcmViYXNlL2ZpcmVzdG9yZS9saXRlIyhzZXREb2M6MSl9IG9yIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gdG9cbiAqIGluY2x1ZGUgYSBzZXJ2ZXItZ2VuZXJhdGVkIHRpbWVzdGFtcCBpbiB0aGUgd3JpdHRlbiBkYXRhLlxuICovIGZ1bmN0aW9uIEdmKCkge1xuICAgIHJldHVybiBuZXcgc2woXCJzZXJ2ZXJUaW1lc3RhbXBcIik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpYWwgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gb3Ige0BsaW5rXG4gKiBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gdGhhdCB0ZWxscyB0aGUgc2VydmVyIHRvIHVuaW9uIHRoZSBnaXZlbiBlbGVtZW50cyB3aXRoIGFueSBhcnJheVxuICogdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgc2VydmVyLiBFYWNoIHNwZWNpZmllZCBlbGVtZW50IHRoYXQgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdCBpbiB0aGUgYXJyYXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kLiBJZiB0aGUgZmllbGQgYmVpbmdcbiAqIG1vZGlmaWVkIGlzIG5vdCBhbHJlYWR5IGFuIGFycmF5IGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCBhbiBhcnJheVxuICogY29udGFpbmluZyBleGFjdGx5IHRoZSBzcGVjaWZpZWQgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRzIC0gVGhlIGVsZW1lbnRzIHRvIHVuaW9uIGludG8gdGhlIGFycmF5LlxuICogQHJldHVybnMgVGhlIGBGaWVsZFZhbHVlYCBzZW50aW5lbCBmb3IgdXNlIGluIGEgY2FsbCB0byBgc2V0RG9jKClgIG9yXG4gKiBgdXBkYXRlRG9jKClgLlxuICovIGZ1bmN0aW9uIFFmKC4uLnQpIHtcbiAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcbiAgICAvLyB1cGRhdGUoKSBzaW5jZSB3ZSdkIG5lZWQgdGhlIEZpcmVzdG9yZSBpbnN0YW5jZSB0byBkbyB0aGlzLlxuICAgIHJldHVybiBuZXcgaWwoXCJhcnJheVVuaW9uXCIsIHQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzcGVjaWFsIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgKHNldERvYzoxKX0gb3Ige0BsaW5rXG4gKiB1cGRhdGVEb2M6MX0gdGhhdCB0ZWxscyB0aGUgc2VydmVyIHRvIHJlbW92ZSB0aGUgZ2l2ZW4gZWxlbWVudHMgZnJvbSBhbnlcbiAqIGFycmF5IHZhbHVlIHRoYXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIHNlcnZlci4gQWxsIGluc3RhbmNlcyBvZiBlYWNoIGVsZW1lbnRcbiAqIHNwZWNpZmllZCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuIElmIHRoZSBmaWVsZCBiZWluZyBtb2RpZmllZCBpcyBub3RcbiAqIGFscmVhZHkgYW4gYXJyYXkgaXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIGFuIGVtcHR5IGFycmF5LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50cyAtIFRoZSBlbGVtZW50cyB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyBUaGUgYEZpZWxkVmFsdWVgIHNlbnRpbmVsIGZvciB1c2UgaW4gYSBjYWxsIHRvIGBzZXREb2MoKWAgb3JcbiAqIGB1cGRhdGVEb2MoKWBcbiAqLyBmdW5jdGlvbiBqZiguLi50KSB7XG4gICAgLy8gTk9URTogV2UgZG9uJ3QgYWN0dWFsbHkgcGFyc2UgdGhlIGRhdGEgdW50aWwgaXQncyB1c2VkIGluIHNldCgpIG9yXG4gICAgLy8gdXBkYXRlKCkgc2luY2Ugd2UnZCBuZWVkIHRoZSBGaXJlc3RvcmUgaW5zdGFuY2UgdG8gZG8gdGhpcy5cbiAgICByZXR1cm4gbmV3IHJsKFwiYXJyYXlSZW1vdmVcIiwgdCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpYWwgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gb3Ige0BsaW5rXG4gKiBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gdGhhdCB0ZWxscyB0aGUgc2VydmVyIHRvIGluY3JlbWVudCB0aGUgZmllbGQncyBjdXJyZW50IHZhbHVlIGJ5XG4gKiB0aGUgZ2l2ZW4gdmFsdWUuXG4gKlxuICogSWYgZWl0aGVyIHRoZSBvcGVyYW5kIG9yIHRoZSBjdXJyZW50IGZpZWxkIHZhbHVlIHVzZXMgZmxvYXRpbmcgcG9pbnRcbiAqIHByZWNpc2lvbiwgYWxsIGFyaXRobWV0aWMgZm9sbG93cyBJRUVFIDc1NCBzZW1hbnRpY3MuIElmIGJvdGggdmFsdWVzIGFyZVxuICogaW50ZWdlcnMsIHZhbHVlcyBvdXRzaWRlIG9mIEphdmFTY3JpcHQncyBzYWZlIG51bWJlciByYW5nZVxuICogKGBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUmAgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYCkgYXJlIGFsc28gc3ViamVjdCB0b1xuICogcHJlY2lzaW9uIGxvc3MuIEZ1cnRoZXJtb3JlLCBvbmNlIHByb2Nlc3NlZCBieSB0aGUgRmlyZXN0b3JlIGJhY2tlbmQsIGFsbFxuICogaW50ZWdlciBvcGVyYXRpb25zIGFyZSBjYXBwZWQgYmV0d2VlbiAtMl42MyBhbmQgMl42My0xLlxuICpcbiAqIElmIHRoZSBjdXJyZW50IGZpZWxkIHZhbHVlIGlzIG5vdCBvZiB0eXBlIGBudW1iZXJgLCBvciBpZiB0aGUgZmllbGQgZG9lcyBub3RcbiAqIHlldCBleGlzdCwgdGhlIHRyYW5zZm9ybWF0aW9uIHNldHMgdGhlIGZpZWxkIHRvIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gbiAtIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgYnkuXG4gKiBAcmV0dXJucyBUaGUgYEZpZWxkVmFsdWVgIHNlbnRpbmVsIGZvciB1c2UgaW4gYSBjYWxsIHRvIGBzZXREb2MoKWAgb3JcbiAqIGB1cGRhdGVEb2MoKWBcbiAqLyBmdW5jdGlvbiB6Zih0KSB7XG4gICAgcmV0dXJuIG5ldyBvbChcImluY3JlbWVudFwiLCB0KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhIHdyaXRlIGJhdGNoLCB1c2VkIGZvciBwZXJmb3JtaW5nIG11bHRpcGxlIHdyaXRlcyBhcyBhIHNpbmdsZVxuICogYXRvbWljIG9wZXJhdGlvbi4gVGhlIG1heGltdW0gbnVtYmVyIG9mIHdyaXRlcyBhbGxvd2VkIGluIGEgc2luZ2xlIHtAbGluayBXcml0ZUJhdGNofVxuICogaXMgNTAwLlxuICpcbiAqIFVubGlrZSB0cmFuc2FjdGlvbnMsIHdyaXRlIGJhdGNoZXMgYXJlIHBlcnNpc3RlZCBvZmZsaW5lIGFuZCB0aGVyZWZvcmUgYXJlXG4gKiBwcmVmZXJhYmxlIHdoZW4geW91IGRvbid0IG5lZWQgdG8gY29uZGl0aW9uIHlvdXIgd3JpdGVzIG9uIHJlYWQgZGF0YS5cbiAqXG4gKiBAcmV0dXJucyBBIHtAbGluayBXcml0ZUJhdGNofSB0aGF0IGNhbiBiZSB1c2VkIHRvIGF0b21pY2FsbHkgZXhlY3V0ZSBtdWx0aXBsZVxuICogd3JpdGVzLlxuICovIGZ1bmN0aW9uIFdmKHQpIHtcbiAgICByZXR1cm4gYmgodCA9IHVoKHQsIHZoKSksIG5ldyBCZih0LCAoZSA9PiBFZih0LCBlKSkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiBIZih0LCBlKSB7XG4gICAgdmFyIG47XG4gICAgY29uc3QgcyA9IGJoKHQgPSB1aCh0LCB2aCkpO1xuICAgIGlmICghcy5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciB8fCBcIm1lbW9yeVwiID09PSAobnVsbCA9PT0gKG4gPSBzLl91bmluaXRpYWxpemVkQ29tcG9uZW50c1Byb3ZpZGVyKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLl9vZmZsaW5lS2luZCkpIFxuICAgIC8vIFBPUlRJTkcgTk9URTogV2UgZG9uJ3QgcmV0dXJuIGFuIGVycm9yIGlmIHRoZSB1c2VyIGhhcyBub3QgZW5hYmxlZFxuICAgIC8vIHBlcnNpc3RlbmNlIHNpbmNlIGBlbmFibGVJbmRleGVkZGJQZXJzaXN0ZW5jZSgpYCBjYW4gZmFpbCBvbiB0aGUgV2ViLlxuICAgIHJldHVybiBNKFwiQ2Fubm90IGVuYWJsZSBpbmRleGVzIHdoZW4gcGVyc2lzdGVuY2UgaXMgZGlzYWJsZWRcIiksIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGNvbnN0IGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGUgPSBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsIFwiRmFpbGVkIHRvIHBhcnNlIEpTT046IFwiICsgKG51bGwgPT0gdCA/IHZvaWQgMCA6IHQubWVzc2FnZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KHQpIDogdCwgbiA9IFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlLmluZGV4ZXMpKSBmb3IgKGNvbnN0IHQgb2YgZS5pbmRleGVzKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gSmYodCwgXCJjb2xsZWN0aW9uR3JvdXBcIiksIHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQuZmllbGRzKSkgZm9yIChjb25zdCBlIG9mIHQuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG1sKFwic2V0SW5kZXhDb25maWd1cmF0aW9uXCIsIEpmKGUsIFwiZmllbGRQYXRoXCIpKTtcbiAgICAgICAgICAgICAgICBcIkNPTlRBSU5TXCIgPT09IGUuYXJyYXlDb25maWcgPyBzLnB1c2gobmV3IF90KHQsIDIgLyogSW5kZXhLaW5kLkNPTlRBSU5TICovKSkgOiBcIkFTQ0VORElOR1wiID09PSBlLm9yZGVyID8gcy5wdXNoKG5ldyBfdCh0LCAwIC8qIEluZGV4S2luZC5BU0NFTkRJTkcgKi8pKSA6IFwiREVTQ0VORElOR1wiID09PSBlLm9yZGVyICYmIHMucHVzaChuZXcgX3QodCwgMSAvKiBJbmRleEtpbmQuREVTQ0VORElORyAqLykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbi5wdXNoKG5ldyBsdChsdC5VTktOT1dOX0lELCBlLCBzLCBndC5lbXB0eSgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfShlKTtcbiAgICByZXR1cm4gWmEocywgaSk7XG59XG5cbmZ1bmN0aW9uIEpmKHQsIGUpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgdFtlXSkgdGhyb3cgbmV3IFUocS5JTlZBTElEX0FSR1VNRU5ULCBcIk1pc3Npbmcgc3RyaW5nIHZhbHVlIGZvcjogXCIgKyBlKTtcbiAgICByZXR1cm4gdFtlXTtcbn1cblxuLyoqXG4gKiBDbG91ZCBGaXJlc3RvcmVcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqLyAhZnVuY3Rpb24odCwgZSA9ICEwKSB7XG4gICAgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgUyA9IHQ7XG4gICAgfShTREtfVkVSU0lPTiksIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KFwiZmlyZXN0b3JlXCIsICgodCwge2luc3RhbmNlSWRlbnRpZmllcjogbiwgb3B0aW9uczogc30pID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHQuZ2V0UHJvdmlkZXIoXCJhcHBcIikuZ2V0SW1tZWRpYXRlKCksIHIgPSBuZXcgdmgobmV3IHoodC5nZXRQcm92aWRlcihcImF1dGgtaW50ZXJuYWxcIikpLCBuZXcgWSh0LmdldFByb3ZpZGVyKFwiYXBwLWNoZWNrLWludGVybmFsXCIpKSwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmFwcGx5KHQub3B0aW9ucywgWyBcInByb2plY3RJZFwiIF0pKSB0aHJvdyBuZXcgVShxLklOVkFMSURfQVJHVU1FTlQsICdcInByb2plY3RJZFwiIG5vdCBwcm92aWRlZCBpbiBmaXJlYmFzZS5pbml0aWFsaXplQXBwLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPZSh0Lm9wdGlvbnMucHJvamVjdElkLCBlKTtcbiAgICAgICAgfShpLCBuKSwgaSk7XG4gICAgICAgIHJldHVybiBzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICB1c2VGZXRjaFN0cmVhbXM6IGVcbiAgICAgICAgfSwgcyksIHIuX3NldFNldHRpbmdzKHMpLCByO1xuICAgIH0pLCBcIlBVQkxJQ1wiKS5zZXRNdWx0aXBsZUluc3RhbmNlcyghMCkpLCByZWdpc3RlclZlcnNpb24oYiwgXCIzLjEyLjJcIiwgdCksIFxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXG4gICAgcmVnaXN0ZXJWZXJzaW9uKGIsIFwiMy4xMi4yXCIsIFwiZXNtMjAxN1wiKTtcbn0oKTtcblxuZXhwb3J0IHsgV2wgYXMgQWJzdHJhY3RVc2VyRGF0YVdyaXRlciwgTGggYXMgQWdncmVnYXRlRmllbGQsIHFoIGFzIEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3QsIFVoIGFzIEJ5dGVzLCBBaCBhcyBDQUNIRV9TSVpFX1VOTElNSVRFRCwgd2ggYXMgQ29sbGVjdGlvblJlZmVyZW5jZSwgZmggYXMgRG9jdW1lbnRSZWZlcmVuY2UsIHNmIGFzIERvY3VtZW50U25hcHNob3QsIEtoIGFzIEZpZWxkUGF0aCwgUWggYXMgRmllbGRWYWx1ZSwgdmggYXMgRmlyZXN0b3JlLCBVIGFzIEZpcmVzdG9yZUVycm9yLCBqaCBhcyBHZW9Qb2ludCwgRWggYXMgTG9hZEJ1bmRsZVRhc2ssIGRoIGFzIFF1ZXJ5LCBWbCBhcyBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnQsIHZsIGFzIFF1ZXJ5Q29uc3RyYWludCwgcmYgYXMgUXVlcnlEb2N1bWVudFNuYXBzaG90LCBCbCBhcyBRdWVyeUVuZEF0Q29uc3RyYWludCwgUGwgYXMgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnQsIE5sIGFzIFF1ZXJ5TGltaXRDb25zdHJhaW50LCBDbCBhcyBRdWVyeU9yZGVyQnlDb25zdHJhaW50LCBvZiBhcyBRdWVyeVNuYXBzaG90LCAkbCBhcyBRdWVyeVN0YXJ0QXRDb25zdHJhaW50LCBuZiBhcyBTbmFwc2hvdE1ldGFkYXRhLCBpdCBhcyBUaW1lc3RhbXAsIHFmIGFzIFRyYW5zYWN0aW9uLCBCZiBhcyBXcml0ZUJhdGNoLCBPZSBhcyBfRGF0YWJhc2VJZCwgaHQgYXMgX0RvY3VtZW50S2V5LCBYIGFzIF9FbXB0eUFwcENoZWNrVG9rZW5Qcm92aWRlciwgUSBhcyBfRW1wdHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciwgYXQgYXMgX0ZpZWxkUGF0aCwgY2kgYXMgX1Rlc3RpbmdIb29rcywgdWggYXMgX2Nhc3QsIEIgYXMgX2RlYnVnQXNzZXJ0LCBiZSBhcyBfaXNCYXNlNjRBdmFpbGFibGUsIE0gYXMgX2xvZ1dhcm4sIHNoIGFzIF92YWxpZGF0ZUlzTm90VXNlZFRvZ2V0aGVyLCBwZiBhcyBhZGREb2MsIHRmIGFzIGFnZ3JlZ2F0ZUZpZWxkRXF1YWwsIGVmIGFzIGFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RFcXVhbCwgRGwgYXMgYW5kLCBqZiBhcyBhcnJheVJlbW92ZSwgUWYgYXMgYXJyYXlVbmlvbiwgWGwgYXMgYXZlcmFnZSwgeGggYXMgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSwgX2ggYXMgY29sbGVjdGlvbiwgbWggYXMgY29sbGVjdGlvbkdyb3VwLCBsaCBhcyBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IsIFpsIGFzIGNvdW50LCB5ZiBhcyBkZWxldGVEb2MsIEtmIGFzIGRlbGV0ZUZpZWxkLCBNaCBhcyBkaXNhYmxlTmV0d29yaywgZ2ggYXMgZG9jLCBHaCBhcyBkb2N1bWVudElkLCBTaCBhcyBlbmFibGVJbmRleGVkRGJQZXJzaXN0ZW5jZSwgRGggYXMgZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSwga2ggYXMgZW5hYmxlTmV0d29yaywgcWwgYXMgZW5kQXQsIExsIGFzIGVuZEJlZm9yZSwgYmggYXMgZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZCwgRWYgYXMgZXhlY3V0ZVdyaXRlLCBSZiBhcyBnZXRBZ2dyZWdhdGVGcm9tU2VydmVyLCB2ZiBhcyBnZXRDb3VudEZyb21TZXJ2ZXIsIGFmIGFzIGdldERvYywgbGYgYXMgZ2V0RG9jRnJvbUNhY2hlLCBmZiBhcyBnZXREb2NGcm9tU2VydmVyLCBkZiBhcyBnZXREb2NzLCB3ZiBhcyBnZXREb2NzRnJvbUNhY2hlLCBfZiBhcyBnZXREb2NzRnJvbVNlcnZlciwgUGggYXMgZ2V0RmlyZXN0b3JlLCB6ZiBhcyBpbmNyZW1lbnQsIFJoIGFzIGluaXRpYWxpemVGaXJlc3RvcmUsIGtsIGFzIGxpbWl0LCBNbCBhcyBsaW1pdFRvTGFzdCwgT2ggYXMgbG9hZEJ1bmRsZSwgRGYgYXMgbWVtb3J5RWFnZXJHYXJiYWdlQ29sbGVjdG9yLCB4ZiBhcyBtZW1vcnlMb2NhbENhY2hlLCBDZiBhcyBtZW1vcnlMcnVHYXJiYWdlQ29sbGVjdG9yLCBGaCBhcyBuYW1lZFF1ZXJ5LCBJZiBhcyBvblNuYXBzaG90LCBUZiBhcyBvblNuYXBzaG90c0luU3luYywgU2wgYXMgb3IsIHhsIGFzIG9yZGVyQnksIE5mIGFzIHBlcnNpc3RlbnRMb2NhbENhY2hlLCBPZiBhcyBwZXJzaXN0ZW50TXVsdGlwbGVUYWJNYW5hZ2VyLCAkZiBhcyBwZXJzaXN0ZW50U2luZ2xlVGFiTWFuYWdlciwgUmwgYXMgcXVlcnksIHBoIGFzIHF1ZXJ5RXF1YWwsIHloIGFzIHJlZkVxdWFsLCBVZiBhcyBydW5UcmFuc2FjdGlvbiwgR2YgYXMgc2VydmVyVGltZXN0YW1wLCBtZiBhcyBzZXREb2MsIEhmIGFzIHNldEluZGV4Q29uZmlndXJhdGlvbiwgeCBhcyBzZXRMb2dMZXZlbCwgY2YgYXMgc25hcHNob3RFcXVhbCwgRmwgYXMgc3RhcnRBZnRlciwgT2wgYXMgc3RhcnRBdCwgWWwgYXMgc3VtLCAkaCBhcyB0ZXJtaW5hdGUsIGdmIGFzIHVwZGF0ZURvYywgTmggYXMgd2FpdEZvclBlbmRpbmdXcml0ZXMsIGJsIGFzIHdoZXJlLCBXZiBhcyB3cml0ZUJhdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovXG5cbmltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tIFwiZmlyZWJhc2UvYXBwXCI7XG5pbXBvcnQge1xuICBnZXRGaXJlc3RvcmUsXG4gIGNvbGxlY3Rpb24sXG4gIGRvYyxcbiAgZ2V0RG9jLFxuICBnZXREb2NzLFxuICBzZXREb2MsXG59IGZyb20gXCJmaXJlYmFzZS9maXJlc3RvcmVcIjtcblxuY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuQVBJX0tFWSxcbiAgYXV0aERvbWFpbjogXCJ3aGVyZS1pcy13YWxkby00ZWI4Zi5maXJlYmFzZWFwcC5jb21cIixcbiAgcHJvamVjdElkOiBcIndoZXJlLWlzLXdhbGRvLTRlYjhmXCIsXG4gIHN0b3JhZ2VCdWNrZXQ6IFwid2hlcmUtaXMtd2FsZG8tNGViOGYuYXBwc3BvdC5jb21cIixcbiAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiNzIxMTQ3NzgyNTQ1XCIsXG4gIGFwcElkOiBcIjE6NzIxMTQ3NzgyNTQ1OndlYjozNWQ5NzZkY2Q3ODc3YzhiNzQyNjMwXCIsXG59O1xuXG5jb25zdCBhcHAgPSBpbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKTtcblxuY29uc3QgZGIgPSBnZXRGaXJlc3RvcmUoYXBwKTtcblxuZXhwb3J0IHsgYXBwLCBkYiwgY29sbGVjdGlvbiwgZG9jLCBnZXREb2MsIGdldERvY3MsIHNldERvYyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tc2hhZG93ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgZGIsIGNvbGxlY3Rpb24sIGRvYywgZ2V0RG9jLCBnZXREb2NzLCBzZXREb2MgfSBmcm9tIFwiLi9maXJlYmFzZVwiO1xuXG5leHBvcnQgY29uc3QgTG9jYXRpb25NYW5hZ2VyID0gKCgpID0+IHtcbiAgY29uc3QgYmFja2dyb3VuZEltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFja2dyb3VuZEltZ1wiKTtcblxuICBjb25zdCBjaGFyYWN0ZXJzID0ge1xuICAgIC8vIENoYXJhY3RlciBhcnJheSBiYXNlZCBvbiB2YWx1ZXMgZnJvbSBnZXRDb29yZGluYXRlcygpIGFuZCBnZXRDb29yZGluYXRlQXJlYSgpXG4gICAgYm93c2VyOiB7IGxlZnQ6IDE0MzAsIHRvcDogMzEzMCwgcmlnaHQ6IDE3MzAsIGJvdHRvbTogMzQyNCB9LFxuICAgIG5lbzogeyBsZWZ0OiA2OTAsIHRvcDogNDcwMCwgcmlnaHQ6IDkwMCwgYm90dG9tOiA0OTAwIH0sXG4gICAgd2FsZG86IHsgbGVmdDogMTQ1MCwgdG9wOiA2NTUwLCByaWdodDogMTY1MCwgYm90dG9tOiA2NzUwIH0sXG4gICAgbWVnOiB7IGxlZnQ6IDI1NiwgdG9wOiA0ODQsIHJpZ2h0OiA0NTYsIGJvdHRvbTogNjg0IH0sXG4gICAgcGlrYWNodTogeyBsZWZ0OiA5ODIsIHRvcDogMTQzNywgcmlnaHQ6IDExODIsIGJvdHRvbTogMTYzNyB9LFxuICAgIG1pa2U6IHsgbGVmdDogMTEyMSwgdG9wOiAxNTM4LCByaWdodDogMTMyMSwgYm90dG9tOiAxNzM4IH0sXG4gICAgYnJhdm86IHsgbGVmdDogNjQ5LCB0b3A6IDg2OCwgcmlnaHQ6IDg0OSwgYm90dG9tOiAxMDY4IH0sXG4gICAgc29uaWM6IHsgbGVmdDogMTI3NCwgdG9wOiAxNzE2LCByaWdodDogMTQ3NCwgYm90dG9tOiAxOTE2IH0sXG4gICAgY2xhcmtlOiB7IGxlZnQ6IDExMTUsIHRvcDogMTUwNywgcmlnaHQ6IDEzMTUsIGJvdHRvbTogMTcwNyB9LFxuICB9O1xuXG4gIGNvbnN0IGdldENvb3JkaW5hdGVzID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgcmVjdCA9IGJhY2tncm91bmRJbWcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAvLyBjb25zb2xlLmxvZyhgWDogJHt4fSwgWTogJHt5fWApO1xuXG4gICAgY29uc3QgcmVmZXJlbmNlV2lkdGggPSAxOTIwO1xuICAgIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgY29uc3Qgc2NhbGluZ0ZhY3RvciA9IHNjcmVlbldpZHRoIC8gcmVmZXJlbmNlV2lkdGg7XG5cbiAgICBjb25zdCBzY2FsZWRYID0geCAvIHNjYWxpbmdGYWN0b3I7XG4gICAgY29uc3Qgc2NhbGVkWSA9IHkgLyBzY2FsaW5nRmFjdG9yO1xuXG4gICAgLy8gY29uc29sZS5sb2coYFNjYWxlZCBYOiAke3NjYWxlZFh9LCBTY2FsZWQgWTogJHtzY2FsZWRZfWApO1xuXG4gICAgcmV0dXJuIHsgeCwgeSwgc2NhbGVkWCwgc2NhbGVkWSB9O1xuICB9O1xuXG4gIGNvbnN0IGdldENvb3JkaW5hdGVBcmVhID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBzY2FsZWRYLCBzY2FsZWRZIH0gPSBnZXRDb29yZGluYXRlcyhldmVudCk7XG5cbiAgICBjb25zdCBhcmVhID0ge1xuICAgICAgbGVmdDogc2NhbGVkWCAtIDEwMCxcbiAgICAgIHRvcDogc2NhbGVkWSAtIDEwMCxcbiAgICAgIHJpZ2h0OiBzY2FsZWRYICsgMTAwLFxuICAgICAgYm90dG9tOiBzY2FsZWRZICsgMTAwLFxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhgQXJlYTogJHtKU09OLnN0cmluZ2lmeShhcmVhKX1gKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNoYXJhY3RlcnMsXG4gICAgZ2V0Q29vcmRpbmF0ZXMsXG4gICAgZ2V0Q29vcmRpbmF0ZUFyZWEsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgY29uc3QgRmlyZXN0b3JlTWFuYWdlciA9ICgoKSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICBjb25zdCBjaGFyYWN0ZXJzID0gTG9jYXRpb25NYW5hZ2VyLmNoYXJhY3RlcnM7XG5cbiAgY29uc3Qgc3RvcmVDaGFyYWN0ZXJMb2NhdGlvbnMgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGNoYXJhY3RlcnMpLmZvckVhY2goXG4gICAgICAgIChbY2hhcmFjdGVyLCB7IGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSB9XSkgPT4ge1xuICAgICAgICAgIHNldERvYyhkb2MoZGIsIFwiY2hhcmFjdGVyTG9jYXRpb25zXCIsIGNoYXJhY3RlciksIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtjaGFyYWN0ZXJ9IGxvY2F0aW9uIHN0b3JlZCBzdWNjZXNzZnVsbHkuYCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzdG9yaW5nICR7Y2hhcmFjdGVyfSBsb2NhdGlvbjpgLCBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHN0b3JpbmcgY2hhcmFjdGVyIGxvY2F0aW9uczpcIiwgZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRDaGFyYWN0ZXJMb2NhdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhjb2xsZWN0aW9uKGRiLCBcImNoYXJhY3RlckxvY2F0aW9uc1wiKSk7XG5cbiAgICAgIHNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBkb2MuaWQ7XG4gICAgICAgIGNvbnN0IHsgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tIH0gPSBkb2MuZGF0YSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtjaGFyYWN0ZXJ9OiAoJHtsZWZ0fSwgJHt0b3B9LCAke3JpZ2h0fSwgJHtib3R0b219KWApO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIGNoYXJhY3RlciBsb2NhdGlvbnM6XCIsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdmVyaWZ5Q2xpY2tlZFBvc2l0aW9uID0gYXN5bmMgKHgsIHksIGdhbWVDaG9pY2UpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmV0cmlldmUgdGhlIGNoYXJhY3RlciBsb2NhdGlvbnMgY29sbGVjdGlvbiBmcm9tIEZpcmVzdG9yZVxuICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKGNvbGxlY3Rpb24oZGIsIFwiY2hhcmFjdGVyTG9jYXRpb25zXCIpKTtcbiAgICAgIGxldCBmb3VuZENoYXJhY3RlciA9IG51bGw7XG5cbiAgICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIGRvY3VtZW50IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICBzbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gZG9jLmlkO1xuICAgICAgICBjb25zdCB7IGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSB9ID0gZG9jLmRhdGEoKTtcblxuICAgICAgICAvLyBDaGVjayBpZiBnYW1lQ2hvaWNlIGFuZCBjaGFyYWN0ZXIgbWF0Y2ggdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChnYW1lQ2hvaWNlID09PSBcImN5YmVycHVua1wiICYmXG4gICAgICAgICAgICAoY2hhcmFjdGVyID09PSBcImJvd3NlclwiIHx8XG4gICAgICAgICAgICAgIGNoYXJhY3RlciA9PT0gXCJuZW9cIiB8fFxuICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT09IFwid2FsZG9cIikpIHx8XG4gICAgICAgICAgKGdhbWVDaG9pY2UgPT09IFwicm9ib3RcIiAmJlxuICAgICAgICAgICAgKGNoYXJhY3RlciA9PT0gXCJtZWdcIiB8fFxuICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT09IFwicGlrYWNodVwiIHx8XG4gICAgICAgICAgICAgIGNoYXJhY3RlciA9PT0gXCJtaWtlXCIpKSB8fFxuICAgICAgICAgIChnYW1lQ2hvaWNlID09PSBcInVuaXZlcnNlXCIgJiZcbiAgICAgICAgICAgIChjaGFyYWN0ZXIgPT09IFwiYnJhdm9cIiB8fFxuICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT09IFwic29uaWNcIiB8fFxuICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT09IFwiY2xhcmtlXCIpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY2xpY2tlZCBwb3NpdGlvbiAoeCwgeSkgaXMgd2l0aGluIHRoZSBjaGFyYWN0ZXIgYXJlYVxuICAgICAgICAgIGlmICh4ID49IGxlZnQgJiYgeCA8PSByaWdodCAmJiB5ID49IHRvcCAmJiB5IDw9IGJvdHRvbSkge1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBmb3VuZENoYXJhY3RlciB2YXJpYWJsZSB0byB0aGUgbWF0Y2hpbmcgY2hhcmFjdGVyXG4gICAgICAgICAgICBmb3VuZENoYXJhY3RlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZXR1cm4gdGhlIGZvdW5kIGNoYXJhY3RlciAob3IgbnVsbCBpZiBub3QgZm91bmQpXG4gICAgICByZXR1cm4gZm91bmRDaGFyYWN0ZXI7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB2ZXJpZnlpbmcgY2xpY2tlZCBwb3NpdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrVXNlckV4aXN0cyA9IGFzeW5jICh1c2VybmFtZSwgZ2FtZUNob2ljZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyRG9jUmVmID0gZG9jKGRiLCBgdXNlclRpbWVzLSR7Z2FtZUNob2ljZX1gLCB1c2VybmFtZSk7XG4gICAgICBjb25zdCB1c2VyRG9jU25hcHNob3QgPSBhd2FpdCBnZXREb2ModXNlckRvY1JlZik7XG4gICAgICByZXR1cm4gdXNlckRvY1NuYXBzaG90LmV4aXN0cygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBpZiB1c2VyICR7dXNlcm5hbWV9IGV4aXN0czpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHN0b3JlVXNlclRpbWUgPSBhc3luYyAodXNlcm5hbWUsIHRpbWUsIGdhbWVDaG9pY2UpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2V0RG9jKGRvYyhkYiwgYHVzZXJUaW1lcy0ke2dhbWVDaG9pY2V9YCwgdXNlcm5hbWUpLCB7IHRpbWUgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHN0b3JpbmcgdXNlciB0aW1lIGZvciAke3VzZXJuYW1lfTpgLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBjb25zdCBnZXRUb3AxMFRpbWVzID0gYXN5bmMgKGdhbWVDaG9pY2UpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmV0cmlldmUgdGhlIHVzZXIgdGltZXMgY29sbGVjdGlvbiBmb3IgdGhlIHNwZWNpZmllZCBnYW1lQ2hvaWNlIGZyb20gRmlyZXN0b3JlXG4gICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MoY29sbGVjdGlvbihkYiwgYHVzZXJUaW1lcy0ke2dhbWVDaG9pY2V9YCkpO1xuXG4gICAgICBjb25zdCB1c2VyVGltZXMgPSBbXTtcbiAgICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIGRvY3VtZW50IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICBzbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBkb2MuaWQ7XG4gICAgICAgIGNvbnN0IHsgdGltZSB9ID0gZG9jLmRhdGEoKTtcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgdXNlcm5hbWUgYW5kIHRpbWUgZGF0YSBmcm9tIGVhY2ggZG9jdW1lbnQgYW5kIGFkZCBpdCB0byB0aGUgdXNlclRpbWVzIGFycmF5XG4gICAgICAgIHVzZXJUaW1lcy5wdXNoKHsgdXNlcm5hbWUsIHRpbWUgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29ydCB0aGUgdXNlclRpbWVzIGFycmF5IGJhc2VkIG9uIHRoZSB0aW1lIGluIGFzY2VuZGluZyBvcmRlclxuICAgICAgdXNlclRpbWVzLnNvcnQoKGEsIGIpID0+IGEudGltZS5sb2NhbGVDb21wYXJlKGIudGltZSkpO1xuXG4gICAgICAvLyBHZXQgdGhlIHRvcCAxMCB1c2VyIHRpbWVzIGZyb20gdGhlIHNvcnRlZCBhcnJheVxuICAgICAgY29uc3QgdG9wMTBVc2VyVGltZXMgPSB1c2VyVGltZXMuc2xpY2UoMCwgMTApO1xuXG4gICAgICByZXR1cm4gdG9wMTBVc2VyVGltZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIHVzZXIgdGltZXM6XCIsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzdG9yZUNoYXJhY3RlckxvY2F0aW9ucyxcbiAgICBnZXRDaGFyYWN0ZXJMb2NhdGlvbnMsXG4gICAgdmVyaWZ5Q2xpY2tlZFBvc2l0aW9uLFxuICAgIGNoZWNrVXNlckV4aXN0cyxcbiAgICBzdG9yZVVzZXJUaW1lLFxuICAgIGdldFRvcDEwVGltZXMsXG4gIH07XG59KSgpO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gXCIuL2FwcFwiO1xuXG5leHBvcnQgY29uc3QgUmVuZGVyZXJIZWxwZXJzID0gKCgpID0+IHtcbiAgY29uc3Qgc2V0UG9zaXRpb24gPSAoZWxlbWVudCwgeCwgeSkgPT4ge1xuICAgIGNvbnN0IHBvc2l0aW9uZWQgPSBlbGVtZW50O1xuICAgIHBvc2l0aW9uZWQuc3R5bGUubGVmdCA9IGAke3h9cHhgO1xuICAgIHBvc2l0aW9uZWQuc3R5bGUudG9wID0gYCR7eX1weGA7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlRGl2ID0gKGNsYXNzTmFtZSwgdGV4dCkgPT4ge1xuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGl2LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICBpZiAodGV4dCkge1xuICAgICAgZGl2LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGRpdjtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVCdXR0b24gPSAodGV4dCwgY2hhcmFjdGVyKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIGJ1dHRvbi50eXBlID0gXCJidXR0b25cIjtcbiAgICBidXR0b24uZGF0YXNldC5jaGFyYWN0ZXIgPSBjaGFyYWN0ZXI7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBDb250cm9sbGVyLmhhbmRsZUNoYXJhY3RlckJ1dHRvbkNsaWNrKTtcbiAgICByZXR1cm4gYnV0dG9uO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUVsZW1lbnQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQb3NpdGlvbixcbiAgICBjcmVhdGVEaXYsXG4gICAgY3JlYXRlQnV0dG9uLFxuICAgIHJlbW92ZUVsZW1lbnQsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgY29uc3QgUmVuZGVyZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50XCIpO1xuXG4gIGNvbnN0IGNpcmNsZXMgPSBbXTtcbiAgY29uc3QgcG9wdXBzID0gW107XG5cbiAgY29uc3QgY3JlYXRlU2xpZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpZGVyQ29udGFpbmVyXCIpO1xuXG4gICAgY29uc3Qgc2xpZGVyID0gUmVuZGVyZXJIZWxwZXJzLmNyZWF0ZURpdihcInNsaWRlclwiKTtcblxuICAgIC8vIENyZWF0ZSBhbiBhcnJheSBvZiBzbGlkZSBkYXRhIG9iamVjdHNcbiAgICBjb25zdCBzbGlkZURhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIGltYWdlU3JjOiBcImltYWdlcy9jeWJlcnB1bmstc2xpZGVyLmpwZ1wiLFxuICAgICAgICBjaGFyYWN0ZXJzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcIkJvd3NlclwiLCBkaWZmaWN1bHR5OiBcImVhc3lcIiwgaWNvblNyYzogXCJpbWFnZXMvYm93c2VyLnBuZ1wiIH0sXG4gICAgICAgICAgeyBuYW1lOiBcIk5lb1wiLCBkaWZmaWN1bHR5OiBcIm1lZGl1bVwiLCBpY29uU3JjOiBcImltYWdlcy9uZW8ucG5nXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiV2FsZG9cIiwgZGlmZmljdWx0eTogXCJoYXJkXCIsIGljb25TcmM6IFwiaW1hZ2VzL3dhbGRvLnBuZ1wiIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHN0YXJ0QnV0dG9uRGF0YUNob2ljZTogXCJjeWJlcnB1bmtcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltYWdlU3JjOiBcImltYWdlcy9yb2JvdC1zbGlkZXIuanBnXCIsXG4gICAgICAgIGNoYXJhY3RlcnM6IFtcbiAgICAgICAgICB7IG5hbWU6IFwiTWVnXCIsIGRpZmZpY3VsdHk6IFwiZWFzeVwiLCBpY29uU3JjOiBcImltYWdlcy9tZWcucG5nXCIgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlBpa2FjaHVcIixcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IFwibWVkaXVtXCIsXG4gICAgICAgICAgICBpY29uU3JjOiBcImltYWdlcy9waWthY2h1LnBuZ1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBuYW1lOiBcIk1pa2VcIiwgZGlmZmljdWx0eTogXCJoYXJkXCIsIGljb25TcmM6IFwiaW1hZ2VzL21pa2UucG5nXCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhcnRCdXR0b25EYXRhQ2hvaWNlOiBcInJvYm90XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbWFnZVNyYzogXCJpbWFnZXMvdW5pdmVyc2Utc2xpZGVyLmpwZ1wiLFxuICAgICAgICBjaGFyYWN0ZXJzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcIkJyYXZvXCIsIGRpZmZpY3VsdHk6IFwiZWFzeVwiLCBpY29uU3JjOiBcImltYWdlcy9icmF2by5wbmdcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJTb25pY1wiLCBkaWZmaWN1bHR5OiBcIm1lZGl1bVwiLCBpY29uU3JjOiBcImltYWdlcy9zb25pYy5wbmdcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJDbGFya2VcIiwgZGlmZmljdWx0eTogXCJoYXJkXCIsIGljb25TcmM6IFwiaW1hZ2VzL2NsYXJrZS5wbmdcIiB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGFydEJ1dHRvbkRhdGFDaG9pY2U6IFwidW5pdmVyc2VcIixcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgc2xpZGUgZGF0YSBhbmQgY3JlYXRlIGVhY2ggc2xpZGVcbiAgICBzbGlkZURhdGEuZm9yRWFjaCgoc2xpZGVJbmZvKSA9PiB7XG4gICAgICBjb25zdCBzbGlkZSA9IFJlbmRlcmVySGVscGVycy5jcmVhdGVEaXYoXCJzbGlkZVwiKTtcblxuICAgICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgaW1hZ2Uuc3JjID0gc2xpZGVJbmZvLmltYWdlU3JjO1xuICAgICAgaW1hZ2UuYWx0ID0gc2xpZGVJbmZvLmltYWdlU3JjO1xuICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuXG4gICAgICBjb25zdCBzbGlkZXJDaGFyYWN0ZXJzID0gUmVuZGVyZXJIZWxwZXJzLmNyZWF0ZURpdihcInNsaWRlckNoYXJhY3RlcnNcIik7XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgY2hhcmFjdGVycyBkYXRhIGFuZCBjcmVhdGUgZWFjaCBjaGFyYWN0ZXJcbiAgICAgIHNsaWRlSW5mby5jaGFyYWN0ZXJzLmZvckVhY2goKGNoYXJhY3RlcikgPT4ge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJEaXYgPSBSZW5kZXJlckhlbHBlcnMuY3JlYXRlRGl2KFxuICAgICAgICAgIGBzbGlkZXJDaGFyYWN0ZXIgJHtjaGFyYWN0ZXIuZGlmZmljdWx0eX1gXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgIGljb24uc3JjID0gY2hhcmFjdGVyLmljb25TcmM7XG4gICAgICAgIGljb24uY2xhc3NOYW1lID0gXCJzbGlkZXJJY29uXCI7XG4gICAgICAgIGljb24uYWx0ID0gY2hhcmFjdGVyLm5hbWU7XG4gICAgICAgIGNoYXJhY3RlckRpdi5hcHBlbmRDaGlsZChpY29uKTtcblxuICAgICAgICBjb25zdCB0ZXh0RGl2ID0gUmVuZGVyZXJIZWxwZXJzLmNyZWF0ZURpdihcInRleHRcIik7XG5cbiAgICAgICAgY29uc3QgbmFtZUhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIG5hbWVIZWFkaW5nLnRleHRDb250ZW50ID0gY2hhcmFjdGVyLm5hbWU7XG4gICAgICAgIHRleHREaXYuYXBwZW5kQ2hpbGQobmFtZUhlYWRpbmcpO1xuXG4gICAgICAgIGNvbnN0IGRpZmZpY3VsdHlQYXJhZ3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgZGlmZmljdWx0eVBhcmFncmFwaC50ZXh0Q29udGVudCA9IGNoYXJhY3Rlci5kaWZmaWN1bHR5O1xuICAgICAgICB0ZXh0RGl2LmFwcGVuZENoaWxkKGRpZmZpY3VsdHlQYXJhZ3JhcGgpO1xuXG4gICAgICAgIGNoYXJhY3RlckRpdi5hcHBlbmRDaGlsZCh0ZXh0RGl2KTtcbiAgICAgICAgc2xpZGVyQ2hhcmFjdGVycy5hcHBlbmRDaGlsZChjaGFyYWN0ZXJEaXYpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCBzdGFydCBidXR0b25cbiAgICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHN0YXJ0QnV0dG9uLmNsYXNzTmFtZSA9IFwic3RhcnRCdXR0b25cIjtcbiAgICAgIHN0YXJ0QnV0dG9uLmRhdGFzZXQuY2hvaWNlID0gc2xpZGVJbmZvLnN0YXJ0QnV0dG9uRGF0YUNob2ljZTtcbiAgICAgIHN0YXJ0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTdGFydCBHYW1lXCI7XG4gICAgICBzbGlkZXJDaGFyYWN0ZXJzLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTtcblxuICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQoc2xpZGVyQ2hhcmFjdGVycyk7XG4gICAgICBzbGlkZXIuYXBwZW5kQ2hpbGQoc2xpZGUpO1xuXG4gICAgICAvLyBBZGQgYWN0aXZlIGNsYXNzIHRvIGluaXRpYWwgc2xpZGVcbiAgICAgIGlmIChzbGlkZUluZm8uc3RhcnRCdXR0b25EYXRhQ2hvaWNlID09PSBcImN5YmVycHVua1wiKSB7XG4gICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzbGlkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2xpZGVyKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVGZWVkYmFja01zZyA9IChtZXNzYWdlLCB4LCB5LCBjb2xvciA9IFwicmVkXCIpID0+IHtcbiAgICBjb25zdCBmZWVkYmFja01zZyA9IFJlbmRlcmVySGVscGVycy5jcmVhdGVEaXYoXCJmZWVkYmFja1wiLCBtZXNzYWdlKTtcbiAgICBSZW5kZXJlckhlbHBlcnMuc2V0UG9zaXRpb24oZmVlZGJhY2tNc2csIHggLSAxNTAsIHkgLSAxMDApO1xuICAgIGZlZWRiYWNrTXNnLnN0eWxlLmJhY2tncm91bmQgPSBgcmdiYSgke1xuICAgICAgY29sb3IgPT09IFwiZ3JlZW5cIiA/IFwiMCwgMjU1LCAwXCIgOiBcIjI1NSwgMCwgMFwiXG4gICAgfSwgMC43KWA7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChmZWVkYmFja01zZyk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZlZWRiYWNrTXNnLnJlbW92ZSgpO1xuICAgIH0sIDUwMDApO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUNpcmNsZSA9ICgpID0+IHtcbiAgICBpZiAoY2lyY2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBjaXJjbGVUb1JlbW92ZSA9IGNpcmNsZXMucG9wKCk7XG4gICAgICBSZW5kZXJlckhlbHBlcnMucmVtb3ZlRWxlbWVudChjaXJjbGVUb1JlbW92ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUNpcmNsZSA9ICh4LCB5KSA9PiB7XG4gICAgY29uc3QgY2lyY2xlID0gUmVuZGVyZXJIZWxwZXJzLmNyZWF0ZURpdihcImNpcmNsZVwiKTtcbiAgICBSZW5kZXJlckhlbHBlcnMuc2V0UG9zaXRpb24oY2lyY2xlLCB4IC0gNTAsIHkgLSA1MCk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICAgIGNpcmNsZXMucHVzaChjaXJjbGUpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZVBvcHVwID0gKCkgPT4ge1xuICAgIGlmIChwb3B1cHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcG9wdXBUb1JlbW92ZSA9IHBvcHVwcy5wb3AoKTtcbiAgICAgIFJlbmRlcmVySGVscGVycy5yZW1vdmVFbGVtZW50KHBvcHVwVG9SZW1vdmUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjcmVhdGVQb3B1cCA9ICh4LCB5LCBmb3VuZENoYXJhY3RlcnMpID0+IHtcbiAgICBjb25zdCBwb3B1cCA9IFJlbmRlcmVySGVscGVycy5jcmVhdGVEaXYoXCJjaG9pY2VcIik7XG5cbiAgICBjb25zdCBtYXhYID0gd2luZG93LmlubmVyV2lkdGggLSAxNTA7XG4gICAgY29uc3QgcG9wdXBYID0geCArIDYwO1xuXG4gICAgLy8gU2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wdXAgYmFzZWQgb24gdGhlIGNvb3JkaW5hdGVzICh4LCB5KSBvZiB0aGUgY2xpY2sgZXZlbnRcbiAgICBpZiAocG9wdXBYID4gbWF4WCkge1xuICAgICAgLy8gUG9zaXRpb24gdGhlIHBvcHVwIHRvIHRoZSBsZWZ0IGlmIGNsaWNrZWQgcG9zaXRpb24gZXhjZWVkcyB0aGUgbWF4aW11bSB4LWNvb3JkaW5hdGVcbiAgICAgIFJlbmRlcmVySGVscGVycy5zZXRQb3NpdGlvbihwb3B1cCwgeCAtIDE2MCwgeSAtIDcwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIHBvc2l0aW9uIHRoZSBwb3B1cCB0byB0aGUgcmlnaHRcbiAgICAgIFJlbmRlcmVySGVscGVycy5zZXRQb3NpdGlvbihwb3B1cCwgeCArIDYwLCB5IC0gNzApO1xuICAgIH1cblxuICAgIGNvbnN0IGdhbWVDaG9pY2UgPSBDb250cm9sbGVyLmdldEdhbWVDaG9pY2UoKTtcblxuICAgIGxldCBvcHRpb25zO1xuXG4gICAgaWYgKGdhbWVDaG9pY2UgPT09IFwiY3liZXJwdW5rXCIpIHtcbiAgICAgIG9wdGlvbnMgPSBbXG4gICAgICAgIHsgdGV4dDogXCJCb3dzZXJcIiwgY2hhcmFjdGVyOiBcImJvd3NlclwiIH0sXG4gICAgICAgIHsgdGV4dDogXCJOZW9cIiwgY2hhcmFjdGVyOiBcIm5lb1wiIH0sXG4gICAgICAgIHsgdGV4dDogXCJXYWxkb1wiLCBjaGFyYWN0ZXI6IFwid2FsZG9cIiB9LFxuICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKGdhbWVDaG9pY2UgPT09IFwicm9ib3RcIikge1xuICAgICAgb3B0aW9ucyA9IFtcbiAgICAgICAgeyB0ZXh0OiBcIk1lZ1wiLCBjaGFyYWN0ZXI6IFwibWVnXCIgfSxcbiAgICAgICAgeyB0ZXh0OiBcIlBpa2FjaHVcIiwgY2hhcmFjdGVyOiBcInBpa2FjaHVcIiB9LFxuICAgICAgICB7IHRleHQ6IFwiTWlrZVwiLCBjaGFyYWN0ZXI6IFwibWlrZVwiIH0sXG4gICAgICBdO1xuICAgIH0gZWxzZSBpZiAoZ2FtZUNob2ljZSA9PT0gXCJ1bml2ZXJzZVwiKSB7XG4gICAgICBvcHRpb25zID0gW1xuICAgICAgICB7IHRleHQ6IFwiQnJhdm9cIiwgY2hhcmFjdGVyOiBcImJyYXZvXCIgfSxcbiAgICAgICAgeyB0ZXh0OiBcIlNvbmljXCIsIGNoYXJhY3RlcjogXCJzb25pY1wiIH0sXG4gICAgICAgIHsgdGV4dDogXCJDbGFya2VcIiwgY2hhcmFjdGVyOiBcImNsYXJrZVwiIH0sXG4gICAgICBdO1xuICAgIH1cblxuICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCBjaG9pY2UgPSBSZW5kZXJlckhlbHBlcnMuY3JlYXRlQnV0dG9uKFxuICAgICAgICBvcHRpb24udGV4dCxcbiAgICAgICAgb3B0aW9uLmNoYXJhY3RlclxuICAgICAgKTtcblxuICAgICAgaWYgKGZvdW5kQ2hhcmFjdGVycy5pbmNsdWRlcyhvcHRpb24uY2hhcmFjdGVyKSkge1xuICAgICAgICBjaG9pY2UuY2xhc3NMaXN0LmFkZChcImZvdW5kXCIpO1xuICAgICAgICBjaG9pY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgQ29udHJvbGxlci5oYW5kbGVDaGFyYWN0ZXJCdXR0b25DbGlja1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBwb3B1cC5hcHBlbmRDaGlsZChjaG9pY2UpO1xuICAgIH0pO1xuXG4gICAgY29udGVudC5hcHBlbmRDaGlsZChwb3B1cCk7XG4gICAgcG9wdXBzLnB1c2gocG9wdXApO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZVRhYmxlID0gKHRvcDEwVXNlclRpbWVzKSA9PiB7XG4gICAgY29uc3QgZ2FtZUNob2ljZSA9IENvbnRyb2xsZXIuZ2V0R2FtZUNob2ljZSgpO1xuXG4gICAgY29uc3QgbGVhZGVyYm9hcmRIZWFkaW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsZWFkZXJib2FyZEhlYWRpbmdcIik7XG4gICAgY29uc3QgZm9ybWF0dGVkR2FtZUNob2ljZSA9XG4gICAgICBnYW1lQ2hvaWNlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZ2FtZUNob2ljZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgIGxlYWRlcmJvYXJkSGVhZGluZy50ZXh0Q29udGVudCA9IGBUb3AgMTAgRm9yICR7Zm9ybWF0dGVkR2FtZUNob2ljZX06YDtcblxuICAgIGNvbnN0IHRpbWVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGltZXJcIik7XG4gICAgY29uc3QgY3VycmVudFVzZXJUaW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50VXNlclRpbWVcIik7XG4gICAgY3VycmVudFVzZXJUaW1lLnRleHRDb250ZW50ID0gYFlvdXIgdGltZTogJHt0aW1lckVsZW1lbnQudGV4dENvbnRlbnR9LmA7XG5cbiAgICBjb25zdCBzY29yZWJvYXJkVGFibGVCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YWJsZUJvZHlcIik7XG4gICAgc2NvcmVib2FyZFRhYmxlQm9keS50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICB0b3AxMFVzZXJUaW1lcy5mb3JFYWNoKCh1c2VyVGltZSkgPT4ge1xuICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgY29uc3QgdXNlcm5hbWVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgdXNlcm5hbWVDZWxsLnRleHRDb250ZW50ID0gdXNlclRpbWUudXNlcm5hbWU7XG4gICAgICBjb25zdCB0aW1lQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgIHRpbWVDZWxsLnRleHRDb250ZW50ID0gdXNlclRpbWUudGltZTtcblxuICAgICAgcm93LmFwcGVuZENoaWxkKHVzZXJuYW1lQ2VsbCk7XG4gICAgICByb3cuYXBwZW5kQ2hpbGQodGltZUNlbGwpO1xuICAgICAgc2NvcmVib2FyZFRhYmxlQm9keS5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlU2xpZGVyLFxuICAgIGNyZWF0ZUZlZWRiYWNrTXNnLFxuICAgIHJlbW92ZUNpcmNsZSxcbiAgICBjcmVhdGVDaXJjbGUsXG4gICAgcmVtb3ZlUG9wdXAsXG4gICAgY3JlYXRlUG9wdXAsXG4gICAgY3JlYXRlVGFibGUsXG4gIH07XG59KSgpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyXCI7XG5pbXBvcnQgeyBGaXJlc3RvcmVNYW5hZ2VyIH0gZnJvbSBcIi4vYXBwLWxvZ2ljXCI7XG5cbmV4cG9ydCBjb25zdCBBcHBIZWxwZXJzID0gKCgpID0+IHtcbiAgY29uc3QgdGltZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aW1lclwiKTtcblxuICBsZXQgdGltZXJJbnRlcnZhbDtcbiAgbGV0IGN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgY29uc3QgZm9ybWF0VGltZSA9IChtaWxsaXNlY29uZHMpID0+IHtcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzIC8gMzYwMDAwMCk7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKG1pbGxpc2Vjb25kcyAlIDM2MDAwMDApIC8gNjAwMDApO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChtaWxsaXNlY29uZHMgJSA2MDAwMCkgLyAxMDAwKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRIb3VycyA9IFN0cmluZyhob3VycykucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IGZvcm1hdHRlZE1pbnV0ZXMgPSBTdHJpbmcobWludXRlcykucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IGZvcm1hdHRlZFNlY29uZHMgPSBTdHJpbmcoc2Vjb25kcykucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IGZvcm1hdHRlZE1pbGxpc2Vjb25kcyA9IFN0cmluZyhtaWxsaXNlY29uZHMgJSAxMDAwKS5wYWRTdGFydCgzLCBcIjBcIik7XG4gICAgcmV0dXJuIGAke2Zvcm1hdHRlZEhvdXJzfToke2Zvcm1hdHRlZE1pbnV0ZXN9OiR7Zm9ybWF0dGVkU2Vjb25kc30uJHtmb3JtYXR0ZWRNaWxsaXNlY29uZHN9YDtcbiAgfTtcblxuICBjb25zdCBzdGFydFRpbWVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgY29uc3QgdXBkYXRlVGltZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgY29uc3QgZWxhcHNlZE1pbGxpc2Vjb25kcyA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGZvcm1hdFRpbWUoZWxhcHNlZE1pbGxpc2Vjb25kcyk7XG4gICAgICB0aW1lckVsZW1lbnQudGV4dENvbnRlbnQgPSBmb3JtYXR0ZWRUaW1lO1xuICAgIH07XG5cbiAgICB0aW1lckludGVydmFsID0gc2V0SW50ZXJ2YWwodXBkYXRlVGltZXIsIDEpO1xuICB9O1xuXG4gIGNvbnN0IHN0b3BUaW1lciA9ICgpID0+IHtcbiAgICBjbGVhckludGVydmFsKHRpbWVySW50ZXJ2YWwpO1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0VGltZXIgPSAoKSA9PiB7XG4gICAgc3RvcFRpbWVyKCk7XG4gICAgdGltZXJFbGVtZW50LnRleHRDb250ZW50ID0gXCIwMDowMDowMFwiO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUNvdW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvdW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY291bnRcIik7XG4gICAgY29uc3QgZm91bmRDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ3JheWVkLW91dFwiKS5sZW5ndGg7XG4gICAgY291bnRFbGVtZW50LnRleHRDb250ZW50ID0gYCR7Zm91bmRDb3VudH0vM2A7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRDb3VudCA9ICgpID0+IHtcbiAgICBjb25zdCBjb3VudEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvdW50XCIpO1xuICAgIGNvdW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiMC8zXCI7XG4gIH07XG5cbiAgY29uc3QgZ3JheU91dENoYXJhY3Rlckljb24gPSAoY2hhcmFjdGVySWQpID0+IHtcbiAgICBjb25zdCBjaGFyYWN0ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Y2hhcmFjdGVySWR9YCk7XG4gICAgaWYgKGNoYXJhY3RlckVsZW1lbnQpIHtcbiAgICAgIGNoYXJhY3RlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImdyYXllZC1vdXRcIik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNsZWFyQ2hhcmFjdGVySWNvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgY2hhcmFjdGVySWRzID0gW1xuICAgICAgXCJib3dzZXJcIixcbiAgICAgIFwibmVvXCIsXG4gICAgICBcIndhbGRvXCIsXG4gICAgICBcIm1lZ1wiLFxuICAgICAgXCJwaWthY2h1XCIsXG4gICAgICBcIm1pa2VcIixcbiAgICAgIFwiYnJhdm9cIixcbiAgICAgIFwic29uaWNcIixcbiAgICAgIFwiY2xhcmtlXCIsXG4gICAgXTtcbiAgICBjaGFyYWN0ZXJJZHMuZm9yRWFjaCgoY2hhcmFjdGVySWQpID0+IHtcbiAgICAgIGNvbnN0IGNoYXJhY3RlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtjaGFyYWN0ZXJJZH1gKTtcbiAgICAgIGlmIChjaGFyYWN0ZXJFbGVtZW50KSB7XG4gICAgICAgIGNoYXJhY3RlckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImdyYXllZC1vdXRcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2hvd01vZGFsID0gKG1vZGFsKSA9PiB7XG4gICAgY29uc3Qgb3ZlcmxheSA9IG1vZGFsLmNsb3Nlc3QoXCIub3ZlcmxheVwiKTtcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gIH07XG5cbiAgY29uc3QgaGlkZU1vZGFsID0gKG1vZGFsKSA9PiB7XG4gICAgY29uc3Qgb3ZlcmxheSA9IG1vZGFsLmNsb3Nlc3QoXCIub3ZlcmxheVwiKTtcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH07XG5cbiAgY29uc3QgZ2V0TGVhZGVyYm9hcmQgPSAoZ2FtZUNob2ljZSwgc3VibWl0QnV0dG9uKSA9PiB7XG4gICAgY29uc3QgdXNlcm5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZW5kZ2FtZSBpbnB1dFwiKTtcbiAgICBjb25zdCB1c2VybmFtZUVycm9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN1c2VybmFtZUVycm9yXCIpO1xuXG4gICAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGZvcm0gc3VibWlzc2lvbiBiZWhhdmlvclxuXG4gICAgICBjb25zdCB1c2VybmFtZSA9IHVzZXJuYW1lSW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgaWYgKHVzZXJuYW1lKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIGFscmVhZHkgZXhpc3RzIGluIHRoZSBsZWFkZXJib2FyZCBmb3IgdGhlIGdpdmVuIGdhbWVDaG9pY2VcbiAgICAgICAgY29uc3QgdXNlckV4aXN0cyA9IGF3YWl0IEZpcmVzdG9yZU1hbmFnZXIuY2hlY2tVc2VyRXhpc3RzKFxuICAgICAgICAgIHVzZXJuYW1lLFxuICAgICAgICAgIGdhbWVDaG9pY2VcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXNlckV4aXN0cykge1xuICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGFscmVhZHkgZXhpc3RzLCBkaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2UgYW5kIHJldHVybiB3aXRob3V0IGZ1cnRoZXIgYWN0aW9uXG4gICAgICAgICAgdXNlcm5hbWVFcnJvci50ZXh0Q29udGVudCA9IGBVc2VybmFtZSBcIiR7dXNlcm5hbWV9XCIgaXMgYWxyZWFkeSB0YWtlbiFgO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVzZXJuYW1lRXJyb3IudGV4dENvbnRlbnQgPSBcIlwiOyAvLyBDbGVhciBlcnJvciBtZXNzYWdlXG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkbyB0aGUgZm9sbG93aW5nIHRoaW5ncy4uLlxuICAgICAgICBGaXJlc3RvcmVNYW5hZ2VyLnN0b3JlVXNlclRpbWUoXG4gICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgdGltZXJFbGVtZW50LnRleHRDb250ZW50LFxuICAgICAgICAgIGdhbWVDaG9pY2VcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9wMTBVc2VyVGltZXMgPSBhd2FpdCBGaXJlc3RvcmVNYW5hZ2VyLmdldFRvcDEwVGltZXMoZ2FtZUNob2ljZSk7XG4gICAgICAgIFJlbmRlcmVyLmNyZWF0ZVRhYmxlKHRvcDEwVXNlclRpbWVzKTtcbiAgICAgICAgc2hvd01vZGFsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwubGVhZGVyYm9hcmRcIikpO1xuICAgICAgICBoaWRlTW9kYWwoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC5lbmRnYW1lXCIpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVTdWJtaXQpO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUFjdGl2ZURvdCA9ICgpID0+IHtcbiAgICBjb25zdCBkb3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kb3RcIik7XG4gICAgZG90cy5mb3JFYWNoKChkb3QsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPT09IGN1cnJlbnRTbGlkZSkge1xuICAgICAgICBkb3QuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvdC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUFjdGl2ZVNsaWRlID0gKGRpcmVjdGlvbikgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2xpZGVcIik7XG4gICAgY29uc3QgdG90YWxTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuXG4gICAgc2xpZGVzW2N1cnJlbnRTbGlkZV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGluZGV4IG9mIHRoZSBzbGlkZVxuICAgICAgY3VycmVudFNsaWRlID0gKGN1cnJlbnRTbGlkZSAtIDEgKyB0b3RhbFNsaWRlcykgJSB0b3RhbFNsaWRlcztcbiAgICAgIC8vIFNsaWRlIGluIGZyb20gdGhlIGxlZnRcbiAgICAgIHNsaWRlc1tjdXJyZW50U2xpZGVdLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgtMTAwJSlcIjtcbiAgICAgIHNsaWRlc1tjdXJyZW50U2xpZGVdLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGluZGV4IG9mIHRoZSBzbGlkZVxuICAgICAgY3VycmVudFNsaWRlID0gKGN1cnJlbnRTbGlkZSArIDEpICUgdG90YWxTbGlkZXM7XG4gICAgICAvLyBTbGlkZSBpbiBmcm9tIHRoZSByaWdodFxuICAgICAgc2xpZGVzW2N1cnJlbnRTbGlkZV0uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKDEwMCUpXCI7XG4gICAgICBzbGlkZXNbY3VycmVudFNsaWRlXS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBcImFjdGl2ZVwiIGNsYXNzIHRvIHRoZSBuZXcgY3VycmVudCBzbGlkZVxuICAgIHNsaWRlc1tjdXJyZW50U2xpZGVdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIEFjdGl2YXRlIHRyYW5zaXRpb24gYW5kIG1vdmUgdGhlIGN1cnJlbnQgc2xpZGUgdG8gdGhlIGNlbnRlclxuICAgICAgc2xpZGVzW2N1cnJlbnRTbGlkZV0uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKDApXCI7XG4gICAgICBzbGlkZXNbY3VycmVudFNsaWRlXS5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgY29uc3Qgc2V0QmFja2dyb3VuZEltYWdlID0gKCkgPT4ge1xuICAgIGNvbnN0IGJhY2tncm91bmRJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JhY2tncm91bmRJbWdcIik7XG4gICAgY29uc3QgZ2FtZUNob2ljZSA9IENvbnRyb2xsZXIuZ2V0R2FtZUNob2ljZSgpO1xuXG4gICAgc3dpdGNoIChnYW1lQ2hvaWNlKSB7XG4gICAgICBjYXNlIFwiY3liZXJwdW5rXCI6XG4gICAgICAgIGJhY2tncm91bmRJbWcuc3JjID0gXCJpbWFnZXMvY3liZXJwdW5rLWNpdHkuanBnXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJvYm90XCI6XG4gICAgICAgIGJhY2tncm91bmRJbWcuc3JjID0gXCJpbWFnZXMvcm9ib3QtY2l0eS5qcGdcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidW5pdmVyc2VcIjpcbiAgICAgICAgYmFja2dyb3VuZEltZy5zcmMgPSBcImltYWdlcy91bml2ZXJzZS0xMTMuanBnXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYmFja2dyb3VuZEltZy5zcmMgPSBcImltYWdlcy9jeWJlcnB1bmstY2l0eS5qcGdcIjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0Q2hhcmFjdGVySWNvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgaWNvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoYXJhY3RlciA+IC5pY29uXCIpO1xuICAgIGNvbnN0IHRpdGxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2hhcmFjdGVyID4gLnRleHQgPiBoM1wiKTtcbiAgICBjb25zdCBnYW1lQ2hvaWNlID0gQ29udHJvbGxlci5nZXRHYW1lQ2hvaWNlKCk7XG5cbiAgICBjb25zdCBjaGFyYWN0ZXJEYXRhID0ge1xuICAgICAgLy8gRGVmaW5lIHRoZSBjaGFyYWN0ZXIgZGF0YSBmb3IgZWFjaCBnYW1lQ2hvaWNlXG4gICAgICBjeWJlcnB1bms6IFtcbiAgICAgICAgeyBpY29uOiBcImltYWdlcy9ib3dzZXIucG5nXCIsIHRpdGxlOiBcIkJvd3NlclwiIH0sXG4gICAgICAgIHsgaWNvbjogXCJpbWFnZXMvbmVvLnBuZ1wiLCB0aXRsZTogXCJOZW9cIiB9LFxuICAgICAgICB7IGljb246IFwiaW1hZ2VzL3dhbGRvLnBuZ1wiLCB0aXRsZTogXCJXYWxkb1wiIH0sXG4gICAgICBdLFxuICAgICAgcm9ib3Q6IFtcbiAgICAgICAgeyBpY29uOiBcImltYWdlcy9tZWcucG5nXCIsIHRpdGxlOiBcIk1lZ1wiIH0sXG4gICAgICAgIHsgaWNvbjogXCJpbWFnZXMvcGlrYWNodS5wbmdcIiwgdGl0bGU6IFwiUGlrYWNodVwiIH0sXG4gICAgICAgIHsgaWNvbjogXCJpbWFnZXMvbWlrZS5wbmdcIiwgdGl0bGU6IFwiTWlrZVwiIH0sXG4gICAgICBdLFxuICAgICAgdW5pdmVyc2U6IFtcbiAgICAgICAgeyBpY29uOiBcImltYWdlcy9icmF2by5wbmdcIiwgdGl0bGU6IFwiSm9obm55IEJyYXZvXCIgfSxcbiAgICAgICAgeyBpY29uOiBcImltYWdlcy9zb25pYy5wbmdcIiwgdGl0bGU6IFwiU29uaWNcIiB9LFxuICAgICAgICB7IGljb246IFwiaW1hZ2VzL2NsYXJrZS5wbmdcIiwgdGl0bGU6IFwiSXNhYWMgQ2xhcmtlXCIgfSxcbiAgICAgIF0sXG4gICAgfTtcblxuICAgIC8vIFJldHJpZXZlIHRoZSBjaGFyYWN0ZXIgZGF0YSBiYXNlZCBvbiB0aGUgZ2FtZSBjaG9pY2VcbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gY2hhcmFjdGVyRGF0YVtnYW1lQ2hvaWNlXSB8fCBjaGFyYWN0ZXJEYXRhLmRlZmF1bHQ7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGljb25zIGFuZCB0aXRsZXMgb2YgdGhlIGNoYXJhY3RlcnNcbiAgICBjaGFyYWN0ZXJzLmZvckVhY2goKGNoYXJhY3RlciwgaW5kZXgpID0+IHtcbiAgICAgIGljb25zW2luZGV4XS5zcmMgPSBjaGFyYWN0ZXIuaWNvbjtcbiAgICAgIHRpdGxlc1tpbmRleF0udGV4dENvbnRlbnQgPSBjaGFyYWN0ZXIudGl0bGU7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2V0Q2hhcmFjdGVySWQgPSAoKSA9PiB7XG4gICAgY29uc3QgY2hhcmFjdGVyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoYXJhY3RlclwiKTtcbiAgICBjaGFyYWN0ZXJFbGVtZW50cy5mb3JFYWNoKChjaGFyYWN0ZXJFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBjaGFyYWN0ZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICBpZiAoaW1hZ2VFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGltYWdlTmFtZSA9IGltYWdlRWxlbWVudC5zcmMuc3BsaXQoXCIvXCIpLnBvcCgpLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgY2hhcmFjdGVyRWxlbWVudC5pZCA9IGltYWdlTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0VGltZXIsXG4gICAgc3RvcFRpbWVyLFxuICAgIHJlc2V0VGltZXIsXG4gICAgcmVzZXRDb3VudCxcbiAgICB1cGRhdGVDb3VudCxcbiAgICBncmF5T3V0Q2hhcmFjdGVySWNvbixcbiAgICBjbGVhckNoYXJhY3Rlckljb25zLFxuICAgIHNob3dNb2RhbCxcbiAgICBoaWRlTW9kYWwsXG4gICAgZ2V0TGVhZGVyYm9hcmQsXG4gICAgdXBkYXRlQWN0aXZlRG90LFxuICAgIHVwZGF0ZUFjdGl2ZVNsaWRlLFxuICAgIHNldEJhY2tncm91bmRJbWFnZSxcbiAgICBzZXRDaGFyYWN0ZXJJY29ucyxcbiAgICBzZXRDaGFyYWN0ZXJJZCxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBjb25zdCBMb2dpY0hlbHBlcnMgPSAoKCkgPT4ge1xuICAvLyAuLi5cbn0pKCk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tY3ljbGUgKi9cbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyXCI7XG5pbXBvcnQgeyBBcHBIZWxwZXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IEZpcmVzdG9yZU1hbmFnZXIsIExvY2F0aW9uTWFuYWdlciB9IGZyb20gXCIuL2FwcC1sb2dpY1wiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGNvbnN0IENvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50XCIpO1xuICBjb25zdCBkcm9wZG93bkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcGRvd25CdXR0b25cIik7XG4gIGNvbnN0IGRyb3Bkb3duTWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcGRvd25NZW51XCIpO1xuICBjb25zdCBwbGF5QWdhaW5CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BsYXlBZ2FpbkJ1dHRvblwiKTtcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdWJtaXRVc2VybmFtZVwiKTtcbiAgY29uc3QgaW5pdGlhbE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC5pbml0aWFsXCIpO1xuICBjb25zdCBlbmRnYW1lTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLmVuZGdhbWVcIik7XG4gIGNvbnN0IGxlYWRlcmJvYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLmxlYWRlcmJvYXJkXCIpO1xuICBjb25zdCBsZWZ0QXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFycm93LmxlZnRcIik7XG4gIGNvbnN0IHJpZ2h0QXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFycm93LnJpZ2h0XCIpO1xuICBjb25zdCB1c2VybmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbmRnYW1lIGlucHV0XCIpO1xuXG4gIGxldCBpc0dhbWVTdGFydGVkID0gZmFsc2U7XG4gIGxldCBpc0FkZGluZ0NpcmNsZSA9IGZhbHNlO1xuICBsZXQgaXNBZGRpbmdQb3B1cCA9IGZhbHNlO1xuICBsZXQgc2VsZWN0ZWRDaGFyYWN0ZXIgPSBudWxsO1xuICBsZXQgZ2FtZUNob2ljZSA9IG51bGw7XG4gIGNvbnN0IGZvdW5kQ2hhcmFjdGVycyA9IFtdO1xuXG4gIGNvbnN0IHN0YXJ0R2FtZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGNsaWNrZWRCdXR0b24gPSBldmVudC50YXJnZXQ7IC8vIEdldCBjbGlja2VkIGJ1dHRvblxuICAgIGdhbWVDaG9pY2UgPSBjbGlja2VkQnV0dG9uLmRhdGFzZXQuY2hvaWNlOyAvLyBTdG9yZSBkYXRhIGF0dHJpYnV0ZSB2YWx1ZSBpbiBhIHZhcmlhYmxlXG5cbiAgICBpZiAoIWlzR2FtZVN0YXJ0ZWQpIHtcbiAgICAgIEFwcEhlbHBlcnMuaGlkZU1vZGFsKGluaXRpYWxNb2RhbCk7XG4gICAgICBBcHBIZWxwZXJzLnN0YXJ0VGltZXIoKTtcbiAgICAgIGlzR2FtZVN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgaXNBZGRpbmdDaXJjbGUgPSB0cnVlO1xuICAgICAgaXNBZGRpbmdQb3B1cCA9IHRydWU7XG4gICAgICBBcHBIZWxwZXJzLnNldEJhY2tncm91bmRJbWFnZSgpO1xuICAgICAgQXBwSGVscGVycy5zZXRDaGFyYWN0ZXJJY29ucygpO1xuICAgICAgQXBwSGVscGVycy5zZXRDaGFyYWN0ZXJJZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBnYW1lQ2hvaWNlO1xuICB9O1xuXG4gIC8vIEdldHRlciBmdW5jdGlvbiB1c2VkIHRvIGV4cG9zZSBnYW1lQ2hvaWNlIHZhcmlhYmxlIHRvIG90aGVyIG1vZHVsZXNcbiAgY29uc3QgZ2V0R2FtZUNob2ljZSA9ICgpID0+IGdhbWVDaG9pY2U7XG5cbiAgY29uc3QgcmVzZXRHYW1lID0gKCkgPT4ge1xuICAgIGlzR2FtZVN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBpc0FkZGluZ0NpcmNsZSA9IGZhbHNlO1xuICAgIGlzQWRkaW5nUG9wdXAgPSBmYWxzZTtcbiAgICBzZWxlY3RlZENoYXJhY3RlciA9IG51bGw7XG4gICAgZm91bmRDaGFyYWN0ZXJzLmxlbmd0aCA9IDA7XG4gICAgdXNlcm5hbWVJbnB1dC52YWx1ZSA9IFwiXCI7XG5cbiAgICBBcHBIZWxwZXJzLnJlc2V0Q291bnQoKTtcbiAgICBBcHBIZWxwZXJzLnJlc2V0VGltZXIoKTtcbiAgICBBcHBIZWxwZXJzLmNsZWFyQ2hhcmFjdGVySWNvbnMoKTtcbiAgICBBcHBIZWxwZXJzLmhpZGVNb2RhbChsZWFkZXJib2FyZE1vZGFsKTtcbiAgICBBcHBIZWxwZXJzLmhpZGVNb2RhbChlbmRnYW1lTW9kYWwpO1xuICAgIEFwcEhlbHBlcnMuc2hvd01vZGFsKGluaXRpYWxNb2RhbCk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ29udGVudENsaWNrID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgLy8gQXZvaWQgYWRkaW5nIGNpcmNsZXMvcG9wdXBzIG9uIGhlYWRlciwgZm9vdGVyLCBhbmQgb3ZlcmxheXNcbiAgICBpZiAoXG4gICAgICAhaXNHYW1lU3RhcnRlZCB8fFxuICAgICAgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCJoZWFkZXJcIikgfHxcbiAgICAgIGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiZm9vdGVyXCIpIHx8XG4gICAgICBldmVudC50YXJnZXQuY2xvc2VzdChcIi5vdmVybGF5XCIpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzQWRkaW5nQ2lyY2xlKSB7XG4gICAgICAvLyBSZW5kZXIgY2lyY2xlL3BvcHVwXG4gICAgICBjb25zdCB7IHgsIHksIHNjYWxlZFgsIHNjYWxlZFkgfSA9IExvY2F0aW9uTWFuYWdlci5nZXRDb29yZGluYXRlcyhldmVudCk7XG4gICAgICBSZW5kZXJlci5jcmVhdGVDaXJjbGUoeCwgeSk7XG4gICAgICBSZW5kZXJlci5jcmVhdGVQb3B1cCh4LCB5LCBmb3VuZENoYXJhY3RlcnMpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBDaGVjayB3aXRoIGRhdGFiYXNlIGlmIGNoYXJhY3RlciBpcyB3aXRoaW4gY2xpY2tlZCBhcmVhXG4gICAgICAgIHNlbGVjdGVkQ2hhcmFjdGVyID0gYXdhaXQgRmlyZXN0b3JlTWFuYWdlci52ZXJpZnlDbGlja2VkUG9zaXRpb24oXG4gICAgICAgICAgc2NhbGVkWCxcbiAgICAgICAgICBzY2FsZWRZLFxuICAgICAgICAgIGdhbWVDaG9pY2VcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB2ZXJpZnlpbmcgY2xpY2tlZCBwb3NpdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZW1vdmUgY2lyY2xlL3BvcHVwXG4gICAgICBSZW5kZXJlci5yZW1vdmVDaXJjbGUoKTtcbiAgICAgIFJlbmRlcmVyLnJlbW92ZVBvcHVwKCk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGJldHdlZW4gYWRkaW5nIGFuZCByZW1vdmluZyBjaXJjbGVzL3BvcHVwcyBmb3IgZWFjaCBjbGlja1xuICAgIGlzQWRkaW5nQ2lyY2xlID0gIWlzQWRkaW5nQ2lyY2xlO1xuICAgIGlzQWRkaW5nUG9wdXAgPSAhaXNBZGRpbmdQb3B1cDtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGFyYWN0ZXJCdXR0b25DbGljayA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gTG9jYXRpb25NYW5hZ2VyLmdldENvb3JkaW5hdGVzKGV2ZW50KTtcbiAgICBSZW5kZXJlci5yZW1vdmVQb3B1cCgpO1xuXG4gICAgY29uc3QgY2xpY2tlZENoYXJhY3RlciA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmNoYXJhY3RlcjtcblxuICAgIC8vIElmIHRoZSBjaG9zZW4gY2hhcmFjdGVyIGZyb20gdGhlIHBvcHVwIChjbGlja2VkQ2hhcmFjdGVyKSBpcyBlcXVhbCB0byB0aGUgY2hhcmFjdGVyXG4gICAgLy8gc3RvcmVkIGluIHRoZSBkYXRhYmFzZSAoc2VsZWN0ZWRDaGFyYWN0ZXIpLi4uXG4gICAgaWYgKHNlbGVjdGVkQ2hhcmFjdGVyID09PSBjbGlja2VkQ2hhcmFjdGVyKSB7XG4gICAgICAvLyAuLi4gZG8gdGhlIGZvbGxvd2luZyB0aGluZ3MgLi4uXG4gICAgICBjb25zdCBmb3JtYXR0ZWRDaGFyYWN0ZXIgPVxuICAgICAgICBzZWxlY3RlZENoYXJhY3Rlci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArXG4gICAgICAgIHNlbGVjdGVkQ2hhcmFjdGVyLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBSZW5kZXJlci5jcmVhdGVGZWVkYmFja01zZyhgRm91bmQgJHtmb3JtYXR0ZWRDaGFyYWN0ZXJ9IWAsIHgsIHksIFwiZ3JlZW5cIik7XG5cbiAgICAgIEFwcEhlbHBlcnMuZ3JheU91dENoYXJhY3Rlckljb24oY2xpY2tlZENoYXJhY3Rlcik7XG4gICAgICBBcHBIZWxwZXJzLnVwZGF0ZUNvdW50KCk7XG5cbiAgICAgIGZvdW5kQ2hhcmFjdGVycy5wdXNoKGNsaWNrZWRDaGFyYWN0ZXIpO1xuICAgICAgUmVuZGVyZXIucmVtb3ZlUG9wdXAoKTtcbiAgICAgIFJlbmRlcmVyLmNyZWF0ZVBvcHVwKHgsIHksIGZvdW5kQ2hhcmFjdGVycyk7XG5cbiAgICAgIGlmIChmb3VuZENoYXJhY3RlcnMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIEFwcEhlbHBlcnMuc3RvcFRpbWVyKCk7XG4gICAgICAgIEFwcEhlbHBlcnMuZ2V0TGVhZGVyYm9hcmQoZ2FtZUNob2ljZSwgc3VibWl0QnV0dG9uKTtcbiAgICAgICAgQXBwSGVscGVycy5zaG93TW9kYWwoZW5kZ2FtZU1vZGFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLi4uIG90aGVyd2lzZSBkbyB0aGlzXG4gICAgICBSZW5kZXJlci5jcmVhdGVGZWVkYmFja01zZyhcIktlZXAgbG9va2luZyFcIiwgeCwgeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgUmVuZGVyZXIuY3JlYXRlU2xpZGVyKCk7XG5cbiAgICBsZWZ0QXJyb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIEFwcEhlbHBlcnMudXBkYXRlQWN0aXZlU2xpZGUoXCJsZWZ0XCIpO1xuICAgICAgQXBwSGVscGVycy51cGRhdGVBY3RpdmVEb3QoKTtcbiAgICB9KTtcblxuICAgIHJpZ2h0QXJyb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIEFwcEhlbHBlcnMudXBkYXRlQWN0aXZlU2xpZGUoXCJyaWdodFwiKTtcbiAgICAgIEFwcEhlbHBlcnMudXBkYXRlQWN0aXZlRG90KCk7XG4gICAgfSk7XG5cbiAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDb250ZW50Q2xpY2spO1xuXG4gICAgY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2hvaWNlIGJ1dHRvblwiKTtcbiAgICBidXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDaGFyYWN0ZXJCdXR0b25DbGljayk7XG4gICAgfSk7XG5cbiAgICBkcm9wZG93bkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgZHJvcGRvd25NZW51LmNsYXNzTGlzdC50b2dnbGUoXCJzaG93XCIpO1xuICAgICAgZHJvcGRvd25CdXR0b24udGV4dENvbnRlbnQgPSBkcm9wZG93bk1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKVxuICAgICAgICA/IFwi4payIEhpZGUgQ2hhcmFjdGVycyDilrJcIlxuICAgICAgICA6IFwi4pa8IFNob3cgQ2hhcmFjdGVycyDilrxcIjtcbiAgICB9KTtcblxuICAgIGNvbnN0IHN0YXJ0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3RhcnRCdXR0b25cIik7XG4gICAgc3RhcnRCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzdGFydEdhbWUpO1xuICAgICAgY29uc29sZS5sb2coXCJjbGlja2VkXCIpO1xuICAgIH0pO1xuXG4gICAgcGxheUFnYWluQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByZXNldEdhbWUpO1xuXG4gICAgQXBwSGVscGVycy5oaWRlTW9kYWwobGVhZGVyYm9hcmRNb2RhbCk7XG4gICAgQXBwSGVscGVycy5oaWRlTW9kYWwoZW5kZ2FtZU1vZGFsKTtcbiAgICBBcHBIZWxwZXJzLnNob3dNb2RhbChpbml0aWFsTW9kYWwpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaW5pdCxcbiAgICBoYW5kbGVDaGFyYWN0ZXJCdXR0b25DbGljayxcbiAgICBnZXRHYW1lQ2hvaWNlLFxuICB9O1xufSkoKTtcblxuQ29udHJvbGxlci5pbml0KCk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXyg5NTQpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2OCk7XG4iXSwibmFtZXMiOlsic3RyaW5nVG9CeXRlQXJyYXkkMSIsInN0ciIsIm91dCIsInAiLCJpIiwibGVuZ3RoIiwiYyIsImNoYXJDb2RlQXQiLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiY2hhclRvQnl0ZU1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJFTkNPREVEX1ZBTFMiLCJ0aGlzIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJpbml0XyIsImJ5dGVUb0NoYXJNYXAiLCJvdXRwdXQiLCJieXRlMSIsImhhdmVCeXRlMiIsImJ5dGUyIiwiaGF2ZUJ5dGUzIiwiYnl0ZTMiLCJvdXRCeXRlMSIsIm91dEJ5dGUyIiwib3V0Qnl0ZTMiLCJvdXRCeXRlNCIsInB1c2giLCJqb2luIiwiZW5jb2RlU3RyaW5nIiwiYnRvYSIsImRlY29kZVN0cmluZyIsImJ5dGVzIiwicG9zIiwiYzEiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjMiIsInUiLCJjMyIsImJ5dGVBcnJheVRvU3RyaW5nIiwiZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkiLCJjaGFyVG9CeXRlTWFwIiwiY2hhckF0IiwiYnl0ZTQiLCJEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJhcmd1bWVudHMiLCJuYW1lIiwiYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmciLCJ1dGY4Qnl0ZXMiLCJiYXNlNjRFbmNvZGUiLCJyZXBsYWNlIiwiZ2V0RGVmYXVsdHMiLCJzZWxmIiwid2luZG93IiwiZyIsImdldEdsb2JhbCIsIl9fRklSRUJBU0VfREVGQVVMVFNfXyIsInByb2Nlc3MiLCJkZWZhdWx0c0pzb25TdHJpbmciLCJKU09OIiwicGFyc2UiLCJnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSIsImRvY3VtZW50IiwibWF0Y2giLCJjb29raWUiLCJlIiwiZGVjb2RlZCIsImNvbnNvbGUiLCJlcnJvciIsImJhc2U2NERlY29kZSIsImdldERlZmF1bHRzRnJvbUNvb2tpZSIsImluZm8iLCJnZXREZWZhdWx0QXBwQ29uZmlnIiwiX2EiLCJjb25maWciLCJEZWZlcnJlZCIsInJlamVjdCIsInJlc29sdmUiLCJwcm9taXNlIiwiUHJvbWlzZSIsIndyYXBDYWxsYmFjayIsImNhbGxiYWNrIiwidmFsdWUiLCJjYXRjaCIsIkZpcmViYXNlRXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImN1c3RvbURhdGEiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiRXJyb3JGYWN0b3J5IiwiY3JlYXRlIiwic2VydmljZSIsInNlcnZpY2VOYW1lIiwiZXJyb3JzIiwiZGF0YSIsImZ1bGxDb2RlIiwidGVtcGxhdGUiLCJQQVRURVJOIiwiXyIsImtleSIsInJlcGxhY2VUZW1wbGF0ZSIsImZ1bGxNZXNzYWdlIiwiYSIsImIiLCJhS2V5cyIsImtleXMiLCJiS2V5cyIsImsiLCJpbmNsdWRlcyIsImFQcm9wIiwiYlByb3AiLCJpc09iamVjdCIsInRoaW5nIiwiX2RlbGVnYXRlIiwiQ29tcG9uZW50IiwiaW5zdGFuY2VGYWN0b3J5IiwidHlwZSIsIm11bHRpcGxlSW5zdGFuY2VzIiwic2VydmljZVByb3BzIiwiaW5zdGFudGlhdGlvbk1vZGUiLCJvbkluc3RhbmNlQ3JlYXRlZCIsInNldEluc3RhbnRpYXRpb25Nb2RlIiwibW9kZSIsInNldE11bHRpcGxlSW5zdGFuY2VzIiwic2V0U2VydmljZVByb3BzIiwicHJvcHMiLCJzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayIsIkRFRkFVTFRfRU5UUllfTkFNRSIsIlByb3ZpZGVyIiwiY29udGFpbmVyIiwiY29tcG9uZW50IiwiaW5zdGFuY2VzIiwiTWFwIiwiaW5zdGFuY2VzRGVmZXJyZWQiLCJpbnN0YW5jZXNPcHRpb25zIiwib25Jbml0Q2FsbGJhY2tzIiwiZ2V0IiwiaWRlbnRpZmllciIsIm5vcm1hbGl6ZWRJZGVudGlmaWVyIiwibm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyIiwiaGFzIiwiZGVmZXJyZWQiLCJzZXQiLCJpc0luaXRpYWxpemVkIiwic2hvdWxkQXV0b0luaXRpYWxpemUiLCJpbnN0YW5jZSIsImdldE9ySW5pdGlhbGl6ZVNlcnZpY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJnZXRJbW1lZGlhdGUiLCJvcHRpb25zIiwib3B0aW9uYWwiLCJnZXRDb21wb25lbnQiLCJzZXRDb21wb25lbnQiLCJpc0NvbXBvbmVudEVhZ2VyIiwiaW5zdGFuY2VEZWZlcnJlZCIsImVudHJpZXMiLCJjbGVhckluc3RhbmNlIiwiZGVsZXRlIiwiYXN5bmMiLCJzZXJ2aWNlcyIsImZyb20iLCJ2YWx1ZXMiLCJhbGwiLCJmaWx0ZXIiLCJtYXAiLCJJTlRFUk5BTCIsIl9kZWxldGUiLCJpc0NvbXBvbmVudFNldCIsImdldE9wdGlvbnMiLCJpbml0aWFsaXplIiwib3B0cyIsIm9uSW5pdCIsImV4aXN0aW5nQ2FsbGJhY2tzIiwiU2V0IiwiYWRkIiwiZXhpc3RpbmdJbnN0YW5jZSIsImludm9rZU9uSW5pdENhbGxiYWNrcyIsImNhbGxiYWNrcyIsInVuZGVmaW5lZCIsIkNvbXBvbmVudENvbnRhaW5lciIsInByb3ZpZGVycyIsImFkZENvbXBvbmVudCIsInByb3ZpZGVyIiwiZ2V0UHJvdmlkZXIiLCJhZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImdldFByb3ZpZGVycyIsIkxvZ0xldmVsIiwibGV2ZWxTdHJpbmdUb0VudW0iLCJERUJVRyIsIlZFUkJPU0UiLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZGVmYXVsdExvZ0xldmVsIiwiQ29uc29sZU1ldGhvZCIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsImFyZ3MiLCJsb2dMZXZlbCIsIm5vdyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIm1ldGhvZCIsIkxvZ2dlciIsIl9sb2dMZXZlbCIsIl9sb2dIYW5kbGVyIiwiX3VzZXJMb2dIYW5kbGVyIiwidmFsIiwiVHlwZUVycm9yIiwic2V0TG9nTGV2ZWwiLCJsb2dIYW5kbGVyIiwidXNlckxvZ0hhbmRsZXIiLCJkZWJ1ZyIsImxvZyIsIndhcm4iLCJpbnN0YW5jZU9mQW55Iiwib2JqZWN0IiwiY29uc3RydWN0b3JzIiwic29tZSIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJjdXJzb3JSZXF1ZXN0TWFwIiwiV2Vha01hcCIsInRyYW5zYWN0aW9uRG9uZU1hcCIsInRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCIsInRyYW5zZm9ybUNhY2hlIiwicmV2ZXJzZVRyYW5zZm9ybUNhY2hlIiwiaWRiUHJveHlUcmFwcyIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsIklEQlRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmVOYW1lcyIsIm9iamVjdFN0b3JlIiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsImZ1bmMiLCJJREJEYXRhYmFzZSIsInRyYW5zYWN0aW9uIiwiSURCQ3Vyc29yIiwiYWR2YW5jZSIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5IiwiYXBwbHkiLCJ1bndyYXAiLCJzdG9yZU5hbWVzIiwidHgiLCJjYWxsIiwic29ydCIsImRvbmUiLCJ1bmxpc3RlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb21wbGV0ZSIsIkRPTUV4Y2VwdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJPYmplY3RTdG9yZSIsIklEQkluZGV4IiwiUHJveHkiLCJJREJSZXF1ZXN0IiwicmVxdWVzdCIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ0aGVuIiwicHJvbWlzaWZ5UmVxdWVzdCIsIm5ld1ZhbHVlIiwicmVhZE1ldGhvZHMiLCJ3cml0ZU1ldGhvZHMiLCJjYWNoZWRNZXRob2RzIiwiZ2V0TWV0aG9kIiwidGFyZ2V0RnVuY05hbWUiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJzdG9yZU5hbWUiLCJzdG9yZSIsImluZGV4Iiwic2hpZnQiLCJvbGRUcmFwcyIsIlBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwiLCJnZXRQbGF0Zm9ybUluZm9TdHJpbmciLCJpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIiLCJsaWJyYXJ5IiwidmVyc2lvbiIsImxvZ1N0cmluZyIsIm5hbWUkbyIsInZlcnNpb24kMSIsImxvZ2dlciIsIlBMQVRGT1JNX0xPR19TVFJJTkciLCJfYXBwcyIsIl9jb21wb25lbnRzIiwiX2FkZENvbXBvbmVudCIsImFwcCIsIl9yZWdpc3RlckNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJFUlJPUl9GQUNUT1JZIiwiRmlyZWJhc2VBcHBJbXBsIiwiX2lzRGVsZXRlZCIsIl9vcHRpb25zIiwiYXNzaWduIiwiX2NvbmZpZyIsIl9uYW1lIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIl9jb250YWluZXIiLCJjaGVja0Rlc3Ryb3llZCIsImlzRGVsZXRlZCIsImFwcE5hbWUiLCJpbml0aWFsaXplQXBwIiwicmF3Q29uZmlnIiwiZXhpc3RpbmdBcHAiLCJuZXdBcHAiLCJyZWdpc3RlclZlcnNpb24iLCJsaWJyYXJ5S2V5T3JOYW1lIiwidmFyaWFudCIsImxpYnJhcnlNaXNtYXRjaCIsInZlcnNpb25NaXNtYXRjaCIsIndhcm5pbmciLCJEQl9OQU1FIiwiREJfVkVSU0lPTiIsIlNUT1JFX05BTUUiLCJkYlByb21pc2UiLCJnZXREYlByb21pc2UiLCJibG9ja2VkIiwidXBncmFkZSIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImluZGV4ZWREQiIsIm9wZW4iLCJvcGVuUHJvbWlzZSIsImV2ZW50Iiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJkYiIsIm9wZW5EQiIsImNyZWF0ZU9iamVjdFN0b3JlIiwib3JpZ2luYWxFcnJvck1lc3NhZ2UiLCJ3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQiIsImhlYXJ0YmVhdE9iamVjdCIsInB1dCIsImNvbXB1dGVLZXkiLCJpZGJHZXRFcnJvciIsImFwcElkIiwiSGVhcnRiZWF0U2VydmljZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlIiwiX3N0b3JhZ2UiLCJIZWFydGJlYXRTdG9yYWdlSW1wbCIsIl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlIiwicmVhZCIsImFnZW50IiwiZGF0ZSIsImdldFVUQ0RhdGVTdHJpbmciLCJsYXN0U2VudEhlYXJ0YmVhdERhdGUiLCJoZWFydGJlYXRzIiwic2luZ2xlRGF0ZUhlYXJ0YmVhdCIsImhiVGltZXN0YW1wIiwidmFsdWVPZiIsIm92ZXJ3cml0ZSIsImhlYXJ0YmVhdHNUb1NlbmQiLCJ1bnNlbnRFbnRyaWVzIiwiaGVhcnRiZWF0c0NhY2hlIiwibWF4U2l6ZSIsInNsaWNlIiwiaGVhcnRiZWF0RW50cnkiLCJmaW5kIiwiaGIiLCJkYXRlcyIsImNvdW50Qnl0ZXMiLCJwb3AiLCJleHRyYWN0SGVhcnRiZWF0c0ZvckhlYWRlciIsImhlYWRlclN0cmluZyIsInN0cmluZ2lmeSIsInN1YnN0cmluZyIsIl9jYW5Vc2VJbmRleGVkREJQcm9taXNlIiwicnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjayIsInByZUV4aXN0IiwiREJfQ0hFQ0tfTkFNRSIsIm9uc3VjY2VzcyIsImNsb3NlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbmVycm9yIiwiaWRiSGVhcnRiZWF0T2JqZWN0IiwicmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCIiwiaGVhcnRiZWF0c09iamVjdCIsImV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsImVzbSIsImdvb2ciLCJsIiwiYWEiLCJjYSIsIk1hdGgiLCJyYW5kb20iLCJkYSIsImVhIiwiYmluZCIsImZhIiwiZCIsInVuc2hpZnQiLCJxIiwiRnVuY3Rpb24iLCJ0b1N0cmluZyIsImluZGV4T2YiLCJoYSIsInIiLCIkIiwiYWMiLCJmIiwiaCIsIm4iLCJ2IiwicyIsIm8iLCJzYSIsIk4iLCJoYXNPd25Qcm9wZXJ0eSIsImthIiwibWEiLCJuYSIsInciLCJkZWZhdWx0UHJldmVudGVkIiwib2EiLCJkZWZpbmVQcm9wZXJ0eSIsIngiLCJ0ZXN0IiwicGEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ5IiwicWEiLCJ6YSIsIkRhIiwidGEiLCJ6IiwidWEiLCJ2YSIsIndhIiwidG9Mb3dlckNhc2UiLCJ4YSIsInlhIiwiZG9jdW1lbnRNb2RlIiwiQWEiLCJCYSIsImV4ZWMiLCJDYSIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIkZhIiwiQSIsInJlbGF0ZWRUYXJnZXQiLCJidXR0b24iLCJzY3JlZW5ZIiwic2NyZWVuWCIsImNsaWVudFkiLCJjbGllbnRYIiwibWV0YUtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInN0YXRlIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJjaGFuZ2VkVG91Y2hlcyIsInNyY0VsZW1lbnQiLCJub2RlTmFtZSIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwicGFnZVgiLCJwYWdlWSIsIkdhIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsIkhhIiwiSWEiLCJKYSIsImxpc3RlbmVyIiwicHJveHkiLCJzcmMiLCJjYXB0dXJlIiwibGEiLCJpYSIsIkthIiwiTmEiLCJQYSIsIlFhIiwic3BsaXQiLCJSYSIsIlNhIiwiVWEiLCJzcGxpY2UiLCJUYSIsIlZhIiwiV2EiLCJZYSIsIm9uY2UiLCJaYSIsIiRhIiwiTyIsImFiIiwiYmIiLCJlYiIsImNiIiwiYXR0YWNoRXZlbnQiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiUCIsImZiIiwiZ2IiLCJkZXRhY2hFdmVudCIsImhhbmRsZUV2ZW50IiwiQiIsIlMiLCJKIiwiQyIsImliIiwiY29uY2F0IiwidCIsImpiIiwibGIiLCJtYiIsIm5leHQiLCJvYiIsImoiLCJwYiIsInJlc2V0IiwicWIiLCJyYiIsInNldFRpbWVvdXQiLCJzYiIsInRiIiwidmIiLCJ1YiIsIndiIiwieGIiLCJnYSIsIlQiLCJjbGVhclRpbWVvdXQiLCJ5YiIsIk51bWJlciIsInpiIiwibSIsInN0YXJ0IiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJGYiIsIkdiIiwiRCIsIkpiIiwiRWEiLCJFIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlNUQVRfRVZFTlQiLCJzdGF0IiwiRiIsIlFiIiwic2l6ZSIsIlJiIiwiU2IiLCJOT19FUlJPUiIsIkViIiwiVElNRU9VVCIsIkliIiwiVGIiLCJLYiIsIiRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJPUEVOIiwiSGIiLCJZYiIsIlpiIiwiYmMiLCJXIiwiVSIsImNjIiwiViIsIkkiLCJMIiwiRyIsIlkiLCJNIiwiYmEiLCJLIiwiZGMiLCJYTUxIdHRwUmVxdWVzdCIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJuYiIsIm9jIiwicmMiLCJ1YyIsInFjIiwidmMiLCJwYyIsImlzTmFOIiwid2MiLCJuYyIsIkgiLCJzYyIsImFib3J0IiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsInJhIiwiTGEiLCJNYSIsImdldFJlc3BvbnNlSGVhZGVyIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiS2MiLCJmb3JFYWNoIiwiWiIsIkpjIiwiSWMiLCJqYSIsIm1jIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJzdHJlYW0iLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJ0cmltIiwiT2EiLCJ0YyIsImNhbmNlbCIsIkxjIiwiUmVnRXhwIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIiRjIiwiWGMiLCJTYyIsIlljIiwiZmxvb3IiLCJhYnMiLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJaYyIsIlRjIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiVWMiLCJWYyIsIldjIiwiTWMiLCJhZCIsImNkIiwiZGQiLCJQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmciLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJuZXh0SG9wUHJvdG9jb2wiLCJlZCIsImZkIiwiY2xlYXIiLCJnZCIsImhkIiwiaWQiLCJrZCIsIm9ubG9hZCIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJsZCIsIm1kIiwicmVhZHlTdGF0ZSIsIm5kIiwic3RhdHVzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiSGVhZGVycyIsInFkIiwiWGEiLCJwZCIsIm9kIiwic2VuZCIsImhlYWRlcnMiLCJjcmVkZW50aWFscyIsImNhY2hlIiwiYm9keSIsImZldGNoIiwiUmVxdWVzdCIsImFycmF5QnVmZmVyIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJ0ZXh0IiwiVWludDhBcnJheSIsInNldFJlcXVlc3RIZWFkZXIiLCJhcHBlbmQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwieWQiLCJ6ZCIsIkFkIiwibG9jYXRpb24iLCJwcm90b2NvbCIsIndkIiwibW96UmVzcG9uc2VBcnJheUJ1ZmZlciIsIkJkIiwiQ2QiLCJEZCIsImludGVybmFsQ2hhbm5lbFBhcmFtcyIsIkVkIiwieG1sSHR0cEZhY3RvcnkiLCJzdXBwb3J0c0Nyb3NzRG9tYWluWGhyIiwiY29uY3VycmVudFJlcXVlc3RMaW1pdCIsImZhc3RIYW5kc2hha2UiLCJlbmNvZGVJbml0TWVzc2FnZUhlYWRlcnMiLCJmb3JjZUxvbmdQb2xsaW5nIiwiZGV0ZWN0QnVmZmVyaW5nUHJveHkiLCJsb25nUG9sbGluZ1RpbWVvdXQiLCJGZCIsIkdkIiwic2VuZEJlYWNvbiIsIkltYWdlIiwiSGQiLCJMZCIsIktkIiwicm91bmQiLCJtaW4iLCJtYXgiLCJKZCIsIk1kIiwiSWQiLCJpc0FjdGl2ZSIsImpkIiwiaG9zdG5hbWUiLCJwb3J0IiwiTmQiLCJPZCIsIlEiLCJtZXNzYWdlVXJsUGFyYW1zIiwibWVzc2FnZUhlYWRlcnMiLCJjbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkIiwiaW5pdE1lc3NhZ2VIZWFkZXJzIiwibWVzc2FnZUNvbnRlbnRUeXBlIiwic2VuZFJhd0pzb24iLCJodHRwU2Vzc2lvbklkUGFyYW0iLCJSIiwiUGQiLCJfX2hlYWRlcnNfXyIsInN0YXR1c0NvZGUiLCJfX3N0YXR1c19fIiwiX19zbV9fIiwiUWQiLCJibG9ja1NpemUiLCJTZCIsInRvVXBwZXJDYXNlIiwiZ2V0UHJvdG90eXBlT2YiLCJGb3JtRGF0YSIsIndpdGhDcmVkZW50aWFscyIsInRpbWVvdXQiLCJ4ZCIsImtiIiwiX19kYXRhX18iLCJUZCIsImlzRmluaXRlIiwiVWQiLCJXZCIsIlhkIiwiWCIsIlpkIiwiJGQiLCJhZSIsIllkIiwiYmUiLCJjZWlsIiwiTE4yIiwicG93IiwiYW5kIiwib3IiLCJ4b3IiLCJjcmVhdGVXZWJDaGFubmVsIiwiSFRUUF9FUlJPUiIsIkNPTVBMRVRFIiwiRXZlbnRUeXBlIiwiQ0xPU0UiLCJNRVNTQUdFIiwibGlzdGVuIiwibGlzdGVuT25jZSIsImdldExhc3RFcnJvciIsImdldExhc3RFcnJvckNvZGUiLCJnZXRTdGF0dXMiLCJnZXRSZXNwb25zZUpzb24iLCJnZXRSZXNwb25zZVRleHQiLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJkaWdlc3QiLCJ1cGRhdGUiLCJtdWx0aXBseSIsIm1vZHVsbyIsImNvbXBhcmUiLCJ0b051bWJlciIsImdldEJpdHMiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIlZkIiwiY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCIsImdldFN0YXRFdmVudFRhcmdldCIsIkVycm9yQ29kZSIsIkV2ZW50IiwiU3RhdCIsIlBST1hZIiwiTk9QUk9YWSIsIkZldGNoWG1sSHR0cEZhY3RvcnkiLCJXZWJDaGFubmVsIiwiWGhySW8iLCJNZDUiLCJJbnRlZ2VyIiwidWlkIiwiaXNBdXRoZW50aWNhdGVkIiwidG9LZXkiLCJpc0VxdWFsIiwiVU5BVVRIRU5USUNBVEVEIiwiR09PR0xFX0NSRURFTlRJQUxTIiwiRklSU1RfUEFSVFkiLCJNT0NLX1VTRVIiLCJPSyIsIkNBTkNFTExFRCIsIlVOS05PV04iLCJJTlZBTElEX0FSR1VNRU5UIiwiREVBRExJTkVfRVhDRUVERUQiLCJOT1RfRk9VTkQiLCJBTFJFQURZX0VYSVNUUyIsIlBFUk1JU1NJT05fREVOSUVEIiwiUkVTT1VSQ0VfRVhIQVVTVEVEIiwiRkFJTEVEX1BSRUNPTkRJVElPTiIsIkFCT1JURUQiLCJPVVRfT0ZfUkFOR0UiLCJVTklNUExFTUVOVEVEIiwiVU5BVkFJTEFCTEUiLCJEQVRBX0xPU1MiLCJ1c2VyIiwiZ2V0VG9rZW4iLCJpbnZhbGlkYXRlVG9rZW4iLCJlbnF1ZXVlUmV0cnlhYmxlIiwic2h1dGRvd24iLCJ0b2tlbiIsImNoYW5nZUxpc3RlbmVyIiwiY3VycmVudFVzZXIiLCJmb3JjZVJlZnJlc2giLCJhdXRoIiwiYWRkQXV0aFRva2VuTGlzdGVuZXIiLCJhY2Nlc3NUb2tlbiIsInJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyIiwiZ2V0VWlkIiwiYXBwQ2hlY2siLCJhZGRUb2tlbkxpc3RlbmVyIiwicmVtb3ZlVG9rZW5MaXN0ZW5lciIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwidHQiLCJzdGF0aWMiLCJldCIsIm50IiwiZXZlcnkiLCJpdCIsInNlY29uZHMiLCJuYW5vc2Vjb25kcyIsImZyb21NaWxsaXMiLCJnZXRUaW1lIiwidG9EYXRlIiwidG9NaWxsaXMiLCJfY29tcGFyZVRvIiwidG9KU09OIiwicGFkU3RhcnQiLCJydCIsInRpbWVzdGFtcCIsImNvbXBhcmVUbyIsInRvTWljcm9zZWNvbmRzIiwidG9UaW1lc3RhbXAiLCJvdCIsInNlZ21lbnRzIiwib2Zmc2V0IiwibGVuIiwiY29tcGFyYXRvciIsImNoaWxkIiwibGltaXQiLCJjb25zdHJ1Y3QiLCJwb3BGaXJzdCIsInBvcExhc3QiLCJmaXJzdFNlZ21lbnQiLCJsYXN0U2VnbWVudCIsImlzRW1wdHkiLCJpc1ByZWZpeE9mIiwiaXNJbW1lZGlhdGVQYXJlbnRPZiIsInRvQXJyYXkiLCJ1dCIsImNhbm9uaWNhbFN0cmluZyIsImN0IiwiYXQiLCJpc1ZhbGlkSWRlbnRpZmllciIsImlzS2V5RmllbGQiLCJodCIsInBhdGgiLCJlbXB0eVBhdGgiLCJjb2xsZWN0aW9uR3JvdXAiLCJoYXNDb2xsZWN0aW9uSWQiLCJnZXRDb2xsZWN0aW9uR3JvdXAiLCJnZXRDb2xsZWN0aW9uUGF0aCIsInB0IiwiSXQiLCJyZWFkVGltZSIsImRvY3VtZW50S2V5IiwibGFyZ2VzdEJhdGNoSWQiLCJlbXB0eSIsIlR0IiwiRXQiLCJBdCIsIm9uQ29tbWl0dGVkTGlzdGVuZXJzIiwiYWRkT25Db21taXR0ZWRMaXN0ZW5lciIsInJhaXNlT25Db21taXR0ZWRFdmVudCIsInZ0IiwiUnQiLCJuZXh0Q2FsbGJhY2siLCJjYXRjaENhbGxiYWNrIiwiaXNEb25lIiwiY2FsbGJhY2tBdHRhY2hlZCIsIndyYXBGYWlsdXJlIiwid3JhcFN1Y2Nlc3MiLCJ0b1Byb21pc2UiLCJ3cmFwVXNlckZ1bmN0aW9uIiwid2FpdEZvciIsIkR0IiwiT3QiLCJwcmV2aW91c1ZhbHVlIiwic2VxdWVuY2VOdW1iZXJIYW5kbGVyIiwid3JpdGVTZXF1ZW5jZU51bWJlciIsIkZ0IiwiQnQiLCJtZSIsImdlIiwieWUiLCJwZSIsInJvb3QiLCJUZSIsIkVNUFRZIiwiaW5zZXJ0IiwiY29weSIsIkJMQUNLIiwicmVtb3ZlIiwibGVmdCIsInJpZ2h0IiwibWluS2V5IiwibWF4S2V5IiwiaW5vcmRlclRyYXZlcnNhbCIsInJldmVyc2VUcmF2ZXJzYWwiLCJnZXRJdGVyYXRvciIsIkllIiwiZ2V0SXRlcmF0b3JGcm9tIiwiZ2V0UmV2ZXJzZUl0ZXJhdG9yIiwiZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbSIsImlzUmV2ZXJzZSIsIm5vZGVTdGFjayIsImdldE5leHQiLCJoYXNOZXh0IiwicGVlayIsImNvbG9yIiwiUkVEIiwiZml4VXAiLCJyZW1vdmVNaW4iLCJpc1JlZCIsIm1vdmVSZWRMZWZ0Iiwicm90YXRlUmlnaHQiLCJtb3ZlUmVkUmlnaHQiLCJyb3RhdGVMZWZ0IiwiY29sb3JGbGlwIiwiY2hlY2tNYXhEZXB0aCIsImNoZWNrIiwiRWUiLCJmaXJzdCIsImxhc3QiLCJmb3JFYWNoSW5SYW5nZSIsImZvckVhY2hXaGlsZSIsImZpcnN0QWZ0ZXJPckVxdWFsIiwiQWUiLCJ1bmlvbldpdGgiLCJpdGVyIiwiUmUiLCJmaWVsZHMiLCJjb3ZlcnMiLCJQZSIsIlZlIiwiYmluYXJ5U3RyaW5nIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0b0Jhc2U2NCIsInRvVWludDhBcnJheSIsImFwcHJveGltYXRlQnl0ZVNpemUiLCJFTVBUWV9CWVRFX1NUUklORyIsIlNlIiwiRGUiLCJzdWJzdHIiLCJuYW5vcyIsIkNlIiwieGUiLCJmcm9tQmFzZTY0U3RyaW5nIiwiZnJvbVVpbnQ4QXJyYXkiLCJOZSIsIm1hcFZhbHVlIiwiX190eXBlX18iLCJzdHJpbmdWYWx1ZSIsImtlIiwiX19wcmV2aW91c192YWx1ZV9fIiwiTWUiLCJfX2xvY2FsX3dyaXRlX3RpbWVfXyIsInRpbWVzdGFtcFZhbHVlIiwiJGUiLCJkYXRhYmFzZUlkIiwicGVyc2lzdGVuY2VLZXkiLCJob3N0Iiwic3NsIiwiYXV0b0RldGVjdExvbmdQb2xsaW5nIiwibG9uZ1BvbGxpbmdPcHRpb25zIiwidXNlRmV0Y2hTdHJlYW1zIiwiT2UiLCJwcm9qZWN0SWQiLCJkYXRhYmFzZSIsImlzRGVmYXVsdERhdGFiYXNlIiwiRmUiLCJMZSIsImVuIiwicWUiLCJib29sZWFuVmFsdWUiLCJieXRlc1ZhbHVlIiwicmVmZXJlbmNlVmFsdWUiLCJnZW9Qb2ludFZhbHVlIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJpbnRlZ2VyVmFsdWUiLCJkb3VibGVWYWx1ZSIsImFycmF5VmFsdWUiLCJVZSIsIktlIiwiR2UiLCJRZSIsImplIiwiZnJvbU5hbWUiLCJIZSIsIkplIiwiWWUiLCJYZSIsIlplIiwidG4iLCJ1biIsImZpZWxkIiwiZ2V0RmllbGRzTWFwIiwic2V0QWxsIiwiYXBwbHlDaGFuZ2VzIiwiY2xvbmUiLCJjbiIsImFuIiwiZG9jdW1lbnRUeXBlIiwiY3JlYXRlVGltZSIsImRvY3VtZW50U3RhdGUiLCJjb252ZXJ0VG9Gb3VuZERvY3VtZW50IiwiY29udmVydFRvTm9Eb2N1bWVudCIsImNvbnZlcnRUb1Vua25vd25Eb2N1bWVudCIsInNldEhhc0NvbW1pdHRlZE11dGF0aW9ucyIsInNldEhhc0xvY2FsTXV0YXRpb25zIiwic2V0UmVhZFRpbWUiLCJoYXNMb2NhbE11dGF0aW9ucyIsImhhc0NvbW1pdHRlZE11dGF0aW9ucyIsImhhc1BlbmRpbmdXcml0ZXMiLCJpc1ZhbGlkRG9jdW1lbnQiLCJpc0ZvdW5kRG9jdW1lbnQiLCJpc05vRG9jdW1lbnQiLCJpc1Vua25vd25Eb2N1bWVudCIsIm11dGFibGVDb3B5IiwiaG4iLCJwb3NpdGlvbiIsImluY2x1c2l2ZSIsImxuIiwiZGlyIiwiZm4iLCJkbiIsInduIiwiX24iLCJtbiIsIm9wIiwiY3JlYXRlS2V5RmllbGRJbkZpbHRlciIsIlBuIiwiRG4iLCJDbiIsInhuIiwiTm4iLCJibiIsIlZuIiwibWF0Y2hlcyIsIm1hdGNoZXNDb21wYXJpc29uIiwiaXNJbmVxdWFsaXR5IiwiZ2V0RmxhdHRlbmVkRmlsdGVycyIsImdldEZpbHRlcnMiLCJnZXRGaXJzdEluZXF1YWxpdHlGaWVsZCIsImduIiwiZmlsdGVycyIsImx0IiwieW4iLCJyZWR1Y2UiLCJmdCIsIkluIiwiVG4iLCJFbiIsIkFuIiwiUm4iLCJTbiIsIm51bGxWYWx1ZSIsImtuIiwib3JkZXJCeSIsInN0YXJ0QXQiLCJlbmRBdCIsImR0IiwiTW4iLCIkbiIsIk9uIiwiRm4iLCJpc0RvY3VtZW50S2V5IiwiVW4iLCJleHBsaWNpdE9yZGVyQnkiLCJsaW1pdFR5cGUiLCJ3dCIsIl90IiwiR24iLCJRbiIsIkhuIiwiem4iLCJqbiIsImtleUZpZWxkIiwiSm4iLCJYbiIsIlpuIiwidHMiLCJlcyIsIm5zIiwiaXMiLCJycyIsIm9zIiwibWFwS2V5Rm4iLCJlcXVhbHNGbiIsImlubmVyIiwiaW5uZXJTaXplIiwidXMiLCJjcyIsImFzIiwiaHMiLCJscyIsIm92ZXJsYXllZERvY3VtZW50IiwiZnMiLCJ3cyIsImRzIiwiX3MiLCJtcyIsImdzIiwieXMiLCJJcyIsInVzZVByb3RvM0pzb24iLCJUcyIsIkVzIiwiaXNJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJMdCIsIkFzIiwidnMiLCJicyIsIlZzIiwiU3MiLCJEcyIsIkNzIiwiUHMiLCJOcyIsImd0Iiwic2VyaWFsaXplciIsIlJzIiwieHMiLCJlbGVtZW50cyIsImtzIiwiT3MiLCJ0cmFuc2Zvcm1SZXN1bHRzIiwiRnMiLCJ1cGRhdGVUaW1lIiwiZXhpc3RzIiwiaXNOb25lIiwiQnMiLCJMcyIsInFzIiwiWXMiLCJub25lIiwianMiLCJ6cyIsIlVzIiwiSHMiLCJmaWVsZFRyYW5zZm9ybXMiLCJwcmVjb25kaXRpb24iLCJXcyIsIktzIiwiSnMiLCJmaWVsZE1hc2siLCJHcyIsInRyYW5zZm9ybSIsIlFzIiwiJHMiLCJnZXRGaWVsZE1hc2siLCJYcyIsIlpzIiwiYmF0Y2hJZCIsImxvY2FsV3JpdGVUaW1lIiwiYmFzZU11dGF0aW9ucyIsIm11dGF0aW9ucyIsImFwcGx5VG9SZW1vdGVEb2N1bWVudCIsIm11dGF0aW9uUmVzdWx0cyIsImFwcGx5VG9Mb2NhbFZpZXciLCJhcHBseVRvTG9jYWxEb2N1bWVudFNldCIsIm11dGF0ZWRGaWVsZHMiLCJ0aSIsImJhdGNoIiwiY29tbWl0VmVyc2lvbiIsImRvY1ZlcnNpb25zIiwiZWkiLCJtdXRhdGlvbiIsImdldEtleSIsInNpIiwiY291bnQiLCJ1bmNoYW5nZWROYW1lcyIsImlpIiwicmkiLCJ1aSIsImNpIiwib25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaENhbGxiYWNrcyIsImFpIiwib25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCIsIm5vdGlmeU9uRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2giLCJsaSIsImZpIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJkaSIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiZ2V0VWludDMyIiwid2kiLCJiaXRtYXAiLCJwYWRkaW5nIiwiaGFzaENvdW50IiwiX2kiLCJtaSIsInNuYXBzaG90VmVyc2lvbiIsInRhcmdldENoYW5nZXMiLCJ0YXJnZXRNaXNtYXRjaGVzIiwiZG9jdW1lbnRVcGRhdGVzIiwicmVzb2x2ZWRMaW1ib0RvY3VtZW50cyIsImdpIiwiY3JlYXRlU3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2VGb3JDdXJyZW50Q2hhbmdlIiwicmVzdW1lVG9rZW4iLCJjdXJyZW50IiwiYWRkZWREb2N1bWVudHMiLCJtb2RpZmllZERvY3VtZW50cyIsInJlbW92ZWREb2N1bWVudHMiLCJ5aSIsIlB0IiwicmVtb3ZlZFRhcmdldElkcyIsImJ0IiwicGkiLCJ0YXJnZXRJZCIsIlZ0IiwiSWkiLCJ0YXJnZXRJZHMiLCJjYXVzZSIsIlRpIiwiU3QiLCJ2aSIsIkN0IiwieHQiLCJOdCIsImt0IiwiTXQiLCIkdCIsInF0IiwiVXQiLCJLdCIsIkVpIiwiR3QiLCJRdCIsImp0IiwienQiLCJBaSIsIld0IiwiSHQiLCJKdCIsIll0IiwiWHQiLCJmb3JFYWNoVGFyZ2V0IiwiWnQiLCJ0ZSIsInJlbW92ZVRhcmdldCIsImVlIiwibmUiLCJzZSIsIm5ld05vRG9jdW1lbnQiLCJpZSIsInJlIiwibG9jYWxDYWNoZUNvdW50IiwiZXhpc3RlbmNlRmlsdGVyQ291bnQiLCJibG9vbUZpbHRlciIsImFwcGxpZWQiLCJiaXRtYXBMZW5ndGgiLCJiaXRzIiwib2UiLCJnZXRSZW1vdGVLZXlzRm9yVGFyZ2V0IiwidWUiLCJjZSIsInB1cnBvc2UiLCJoZSIsImxlIiwiUmkiLCJhc2MiLCJkZXNjIiwiUGkiLCJpbiIsImJpIiwiVmkiLCJTaSIsIkRpIiwiQ2kiLCJ4aSIsIk5pIiwiZnJvbVRpbWVzdGFtcCIsImtpIiwiTWkiLCJ1ciIsIiRpIiwiT2kiLCJxaSIsIkZpIiwiTGkiLCJVaSIsIkhpIiwiZG9jdW1lbnRzIiwiSmkiLCJzdHJ1Y3R1cmVkUXVlcnkiLCJwYXJlbnQiLCJjb2xsZWN0aW9uSWQiLCJhbGxEZXNjZW5kYW50cyIsInJyIiwid2hlcmUiLCJzciIsImRpcmVjdGlvbiIsInRyIiwiYmVmb3JlIiwiWWkiLCJCaSIsIlppIiwiaXIiLCJLbiIsInVuYXJ5RmlsdGVyIiwiTmFOIiwiZmllbGRGaWx0ZXIiLCJjb21wb3NpdGVGaWx0ZXIiLCJlciIsIm5yIiwiZmllbGRQYXRoIiwiZnJvbVNlcnZlckZvcm1hdCIsImZpZWxkUGF0aHMiLCJjciIsInNlcXVlbmNlTnVtYmVyIiwibGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiIsImV4cGVjdGVkQ291bnQiLCJ3aXRoU2VxdWVuY2VOdW1iZXIiLCJ3aXRoUmVzdW1lVG9rZW4iLCJ3aXRoRXhwZWN0ZWRDb3VudCIsIndpdGhMYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uIiwiYXIiLCJmZSIsInlyIiwiYnIiLCJfZSIsInZlIiwienIiLCJybiIsIldyIiwiYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgiLCJnZXRDb2xsZWN0aW9uUGFyZW50cyIsImdldEVudHJpZXMiLCJhZGRGaWVsZEluZGV4IiwiZGVsZXRlRmllbGRJbmRleCIsImdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0IiwiZ2V0SW5kZXhUeXBlIiwiZ2V0RmllbGRJbmRleGVzIiwiZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlIiwiZ2V0TWluT2Zmc2V0IiwiZ2V0TWluT2Zmc2V0RnJvbUNvbGxlY3Rpb25Hcm91cCIsInVwZGF0ZUNvbGxlY3Rpb25Hcm91cCIsInVwZGF0ZUluZGV4RW50cmllcyIsInNvIiwiY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCIsInBlcmNlbnRpbGVUb0NvbGxlY3QiLCJtYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0IiwiREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUiLCJERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QiLCJERUZBVUxUIiwiRElTQUJMRUQiLCJsbyIsInZvIiwiY2hhbmdlcyIsImNoYW5nZXNBcHBsaWVkIiwiYWRkRW50cnkiLCJhc3NlcnROb3RBcHBsaWVkIiwicmVtb3ZlRW50cnkiLCJuZXdJbnZhbGlkRG9jdW1lbnQiLCJnZXRFbnRyeSIsImdldEZyb21DYWNoZSIsImdldEFsbEZyb21DYWNoZSIsIk5vIiwia28iLCJyZW1vdGVEb2N1bWVudENhY2hlIiwibXV0YXRpb25RdWV1ZSIsImRvY3VtZW50T3ZlcmxheUNhY2hlIiwiaW5kZXhNYW5hZ2VyIiwiZ2V0RG9jdW1lbnQiLCJnZXRPdmVybGF5IiwiZ2V0RG9jdW1lbnRzIiwiZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHMiLCJwb3B1bGF0ZU92ZXJsYXlzIiwiY29tcHV0ZVZpZXdzIiwiZ2V0T3ZlcmxheWVkRG9jdW1lbnRzIiwiZ2V0T3ZlcmxheXMiLCJyZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5cyIsImdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyIsInNhdmVPdmVybGF5cyIsInJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzRm9yRG9jdW1lbnRLZXlzIiwiZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSIsImdldERvY3VtZW50c01hdGNoaW5nRG9jdW1lbnRRdWVyeSIsIlduIiwiZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uR3JvdXBRdWVyeSIsImdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5IiwiZ2V0TmV4dERvY3VtZW50cyIsImdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAiLCJnZXRPdmVybGF5c0ZvckNvbGxlY3Rpb25Hcm91cCIsImdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbiIsIk1vIiwiZ2V0QnVuZGxlTWV0YWRhdGEiLCJzYXZlQnVuZGxlTWV0YWRhdGEiLCJnZXROYW1lZFF1ZXJ5Iiwic2F2ZU5hbWVkUXVlcnkiLCJxdWVyeSIsImJ1bmRsZWRRdWVyeSIsIiRvIiwib3ZlcmxheXMiLCJ3ZSIsInJlbW92ZU92ZXJsYXlzRm9yQmF0Y2hJZCIsIk9vIiwiRm8iLCJhZGRSZWZlcmVuY2UiLCJyZW1vdmVSZWZlcmVuY2UiLCJwcyIsImNvbnRhaW5zS2V5IiwiQm8iLCJyZWZlcmVuY2VEZWxlZ2F0ZSIsImNoZWNrRW1wdHkiLCJhZGRNdXRhdGlvbkJhdGNoIiwibG9va3VwTXV0YXRpb25CYXRjaCIsImdldE5leHRNdXRhdGlvbkJhdGNoQWZ0ZXJCYXRjaElkIiwiZ2V0SGlnaGVzdFVuYWNrbm93bGVkZ2VkQmF0Y2hJZCIsImdldEFsbE11dGF0aW9uQmF0Y2hlcyIsImdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5IiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdRdWVyeSIsInJlbW92ZU11dGF0aW9uQmF0Y2giLCJtYXJrUG90ZW50aWFsbHlPcnBoYW5lZCIsInBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrIiwiTG8iLCJkb2NzIiwic2V0SW5kZXhNYW5hZ2VyIiwibmV3Q2hhbmdlQnVmZmVyIiwicW8iLCJnZXRTaXplIiwiVW8iLCJwZXJzaXN0ZW5jZSIsImxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24iLCJoaWdoZXN0VGFyZ2V0SWQiLCJ0YXJnZXRDb3VudCIsIk1zIiwiZ2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiIsImdldEhpZ2hlc3RTZXF1ZW5jZU51bWJlciIsImFsbG9jYXRlVGFyZ2V0SWQiLCJzZXRUYXJnZXRzTWV0YWRhdGEiLCJhZGRUYXJnZXREYXRhIiwidXBkYXRlVGFyZ2V0RGF0YSIsInJlbW92ZVRhcmdldERhdGEiLCJyZW1vdmVUYXJnZXRzIiwicmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQiLCJnZXRUYXJnZXRDb3VudCIsImdldFRhcmdldERhdGEiLCJhZGRNYXRjaGluZ0tleXMiLCJyZW1vdmVNYXRjaGluZ0tleXMiLCJnZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCIsIktvIiwic3RhcnRlZCIsInNldERhdGFiYXNlRGVsZXRlZExpc3RlbmVyIiwic2V0TmV0d29ya0VuYWJsZWQiLCJnZXRJbmRleE1hbmFnZXIiLCJnZXREb2N1bWVudE92ZXJsYXlDYWNoZSIsImdldE11dGF0aW9uUXVldWUiLCJnZXRUYXJnZXRDYWNoZSIsImdldFJlbW90ZURvY3VtZW50Q2FjaGUiLCJnZXRCdW5kbGVDYWNoZSIsInJ1blRyYW5zYWN0aW9uIiwiR28iLCJjdXJyZW50U2VxdWVuY2VOdW1iZXIiLCJRbyIsImZyb21QYXRoIiwidXBkYXRlTGltYm9Eb2N1bWVudCIsInR1IiwiZnJvbUNhY2hlIiwiZG9jQ2hhbmdlcyIsImRvYyIsImV1IiwiS2kiLCJHaSIsIlFpIiwiamkiLCJ6aSIsIldpIiwieXQiLCJudSIsIlhpIiwibG9jYWxEb2N1bWVudHMiLCJjb2xsZWN0R2FyYmFnZSIsImNvbGxlY3QiLCJpdSIsInJlbW92ZWRCYXRjaElkcyIsImFkZGVkQmF0Y2hJZHMiLCJvdSIsImF1IiwibHUiLCJmdSIsIl91Iiwic3MiLCJSdSIsImFjdGl2ZVRhcmdldElkcyIsImxyIiwiZHIiLCJociIsInVwZGF0ZVRpbWVNcyIsImJ1IiwiSHIiLCJKciIsIm9ubGluZVN0YXRlSGFuZGxlciIsImFkZFBlbmRpbmdNdXRhdGlvbiIsInVwZGF0ZU11dGF0aW9uU3RhdGUiLCJhZGRMb2NhbFF1ZXJ5VGFyZ2V0IiwidXBkYXRlUXVlcnlTdGF0ZSIsInJlbW92ZUxvY2FsUXVlcnlUYXJnZXQiLCJpc0xvY2FsUXVlcnlUYXJnZXQiLCJjbGVhclF1ZXJ5U3RhdGUiLCJnZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMiLCJpc0FjdGl2ZVF1ZXJ5VGFyZ2V0IiwiaGFuZGxlVXNlckNoYW5nZSIsInNldE9ubGluZVN0YXRlIiwibm90aWZ5QnVuZGxlTG9hZGVkIiwiVnUiLCJZciIsIlN1IiwiWHIiLCJaciIsImVvIiwibm8iLCJpbyIsIkR1IiwiQ3UiLCJ4dSIsIkJhdGNoR2V0RG9jdW1lbnRzIiwiQ29tbWl0IiwiUnVuUXVlcnkiLCJSdW5BZ2dyZWdhdGlvblF1ZXJ5IiwiTnUiLCJybyIsIm9vIiwidW8iLCJjbyIsImFvIiwiaG8iLCJvbk1lc3NhZ2UiLCJmbyIsIndvIiwiX28iLCJrdSIsIk11IiwiZGF0YWJhc2VJbmZvIiwibW8iLCJ5byIsInBvIiwiSW8iLCJUbyIsIkVvIiwiQW8iLCJSbyIsImZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNcyIsInRpbWVvdXRTZWNvbmRzIiwiT3UiLCJGdSIsIkJ1IiwidGltZXJJZCIsIlBvIiwiYm8iLCJWbyIsIlNvIiwiRG8iLCJDbyIsInhvIiwiZW5xdWV1ZUFmdGVyRGVsYXkiLCJza2lwRGVsYXkiLCJMdSIsImNvbm5lY3Rpb24iLCJhdXRoQ3JlZGVudGlhbHNQcm92aWRlciIsImFwcENoZWNrQ3JlZGVudGlhbHNQcm92aWRlciIsImpvIiwiem8iLCJXbyIsIkhvIiwiSm8iLCJZbyIsIlhvIiwiWm8iLCJlbnF1ZXVlQW5kRm9yZ2V0IiwicXUiLCJ0YXJnZXRDaGFuZ2UiLCJ0YXJnZXRDaGFuZ2VUeXBlIiwiZG9jdW1lbnRDaGFuZ2UiLCJuZXdGb3VuZERvY3VtZW50IiwiZG9jdW1lbnREZWxldGUiLCJkb2N1bWVudFJlbW92ZSIsInN1IiwiYWRkVGFyZ2V0IiwibGFiZWxzIiwiVXUiLCJydSIsImxhc3RTdHJlYW1Ub2tlbiIsInV1Iiwic3RyZWFtVG9rZW4iLCJ3cml0ZVJlc3VsdHMiLCJjb21taXRUaW1lIiwiY3UiLCJodSIsIndyaXRlcyIsInVwZGF0ZU1hc2siLCJ2ZXJpZnkiLCJ1cGRhdGVUcmFuc2Zvcm1zIiwic2V0VG9TZXJ2ZXJWYWx1ZSIsImFwcGVuZE1pc3NpbmdFbGVtZW50cyIsInJlbW92ZUFsbEZyb21BcnJheSIsImluY3JlbWVudCIsImN1cnJlbnREb2N1bWVudCIsIkt1IiwiYXV0aENyZWRlbnRpYWxzIiwiYXBwQ2hlY2tDcmVkZW50aWFscyIsInRlcm1pbmF0ZSIsIlF1IiwiYXN5bmNRdWV1ZSIsInd1IiwibXUiLCJndSIsInl1IiwicHUiLCJJdSIsIlR1IiwianUiLCJsb2NhbFN0b3JlIiwiZGF0YXN0b3JlIiwicmVtb3RlU3luY2VyIiwiRXUiLCJBdSIsInZ1IiwiUHUiLCJXdSIsInp1IiwiSHUiLCJadSIsIll1IiwiSnUiLCJYdSIsInJlamVjdExpc3RlbiIsImFwcGx5UmVtb3RlRXZlbnQiLCJfYyIsImFwcGx5U3VjY2Vzc2Z1bFdyaXRlIiwib2kiLCJyZWplY3RGYWlsZWRXcml0ZSIsInZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MiLCJoYW5kbGVDcmVkZW50aWFsQ2hhbmdlIiwic3RvcCIsInRhcmdldFRpbWVNcyIsInJlbW92YWxDYWxsYmFjayIsInRpbWVySGFuZGxlIiwiaGFuZGxlRGVsYXlFbGFwc2VkIiwia2V5ZWRNYXAiLCJzb3J0ZWRTZXQiLCJ0cmFjayIsIm9sZERvY3MiLCJtdXRhdGVkS2V5cyIsInN5bmNTdGF0ZUNoYW5nZWQiLCJleGNsdWRlc01ldGFkYXRhQ2hhbmdlcyIsImhhc0NhY2hlZFJlc3VsdHMiLCJlbXB0eVNldCIsImxpc3RlbmVycyIsInF1ZXJpZXMiLCJvbmxpbmVTdGF0ZSIsIm9uTGlzdGVuIiwib25FcnJvciIsIiR1Iiwib25Vbmxpc3RlbiIsImluY2x1ZGVNZXRhZGF0YUNoYW5nZXMiLCJmcm9tSW5pdGlhbERvY3VtZW50cyIsInNuYXBzaG90IiwidmlldyIsInJlbW90ZVN0b3JlIiwiZXZlbnRNYW5hZ2VyIiwic2hhcmVkQ2xpZW50U3RhdGUiLCJtYXhDb25jdXJyZW50TGltYm9SZXNvbHV0aW9ucyIsImlzUHJpbWFyeUNsaWVudCIsInRyYWNrUmVtb3ZhbHMiLCJzeW5jaHJvbml6ZVRhYnMiLCJjcmVhdGVTaGFyZWRDbGllbnRTdGF0ZSIsImNyZWF0ZVBlcnNpc3RlbmNlIiwiY3JlYXRlTG9jYWxTdG9yZSIsImdjU2NoZWR1bGVyIiwiY3JlYXRlR2FyYmFnZUNvbGxlY3Rpb25TY2hlZHVsZXIiLCJpbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIiLCJjcmVhdGVJbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIiLCJpbml0aWFsVXNlciIsImNyZWF0ZURhdGFzdG9yZSIsImNyZWF0ZVJlbW90ZVN0b3JlIiwiY3JlYXRlRXZlbnRNYW5hZ2VyIiwic3luY0VuZ2luZSIsImNyZWF0ZVN5bmNFbmdpbmUiLCJvYnNlcnZlciIsIm11dGVkIiwiY2xpZW50SWQiLCJhdXRoQ3JlZGVudGlhbExpc3RlbmVyIiwiYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIiLCJzZXRDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIiLCJzZXRBcHBDaGVja1Rva2VuQ2hhbmdlTGlzdGVuZXIiLCJ2ZXJpZnlOb3RUZXJtaW5hdGVkIiwiaXNTaHV0dGluZ0Rvd24iLCJlbnRlclJlc3RyaWN0ZWRNb2RlIiwiZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQiLCJfb25saW5lQ29tcG9uZW50cyIsIl9vZmZsaW5lQ29tcG9uZW50cyIsImdldENvbmZpZ3VyYXRpb24iLCJfdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciIsIl9vZmZsaW5lIiwiX29ubGluZSIsInRoIiwiZWgiLCJuaCIsImloIiwicmgiLCJvaCIsInVoIiwiYWgiLCJpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzIiwibG9jYWxDYWNoZSIsImNhY2hlU2l6ZUJ5dGVzIiwic2giLCJleHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nIiwiZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nIiwiZXhwZXJpbWVudGFsTG9uZ1BvbGxpbmdPcHRpb25zIiwiaGgiLCJfYXV0aENyZWRlbnRpYWxzIiwiX2FwcENoZWNrQ3JlZGVudGlhbHMiLCJfZGF0YWJhc2VJZCIsIl9hcHAiLCJfcGVyc2lzdGVuY2VLZXkiLCJfc2V0dGluZ3MiLCJfc2V0dGluZ3NGcm96ZW4iLCJfaW5pdGlhbGl6ZWQiLCJfdGVybWluYXRlZCIsIl90ZXJtaW5hdGVUYXNrIiwiX3NldFNldHRpbmdzIiwic2Vzc2lvbkluZGV4IiwiaWFtVG9rZW4iLCJhdXRoVG9rZW5GYWN0b3J5IiwiY2xpZW50IiwiX2dldFNldHRpbmdzIiwiX2ZyZWV6ZVNldHRpbmdzIiwiX3Rlcm1pbmF0ZSIsInNldHRpbmdzIiwiZmgiLCJjb252ZXJ0ZXIiLCJfa2V5IiwiZmlyZXN0b3JlIiwiX3BhdGgiLCJ3aCIsIndpdGhDb252ZXJ0ZXIiLCJkaCIsIl9xdWVyeSIsIl9oIiwiZ2giLCJJaCIsInZpc2liaWxpdHlTdGF0ZSIsImVucXVldWUiLCJzdGFjayIsImNyZWF0ZUFuZFNjaGVkdWxlIiwidmgiLCJfcXVldWUiLCJfZmlyZXN0b3JlQ2xpZW50IiwiVmgiLCJiaCIsIl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIiLCJfb25saW5lQ29tcG9uZW50UHJvdmlkZXIiLCJfb2ZmbGluZUtpbmQiLCJraW5kIiwiVWgiLCJfYnl0ZVN0cmluZyIsIktoIiwiX2ludGVybmFsUGF0aCIsIlFoIiwiX21ldGhvZE5hbWUiLCJqaCIsIl9sYXQiLCJfbG9uZyIsInpoIiwiV2giLCJ0b011dGF0aW9uIiwiSmgiLCJZaCIsImdsIiwibWV0aG9kTmFtZSIsImNvbnRhaW5zIiwiWGgiLCJaaCIsInRsIiwibWVyZ2UiLCJtZXJnZUZpZWxkcyIsImRsIiwibGwiLCJ3bCIsInlsIiwiaGwiLCJmbCIsIl90b0ZpZWxkVHJhbnNmb3JtIiwiZnJvbURhdGUiLCJtbCIsIl9sIiwic2VhcmNoIiwicGwiLCJfZmlyZXN0b3JlIiwiX3VzZXJEYXRhV3JpdGVyIiwiX2RvY3VtZW50IiwiX2NvbnZlcnRlciIsInJlZiIsIklsIiwiZnJvbUZpcmVzdG9yZSIsImNvbnZlcnRWYWx1ZSIsIlRsIiwiV2wiLCJjb252ZXJ0VGltZXN0YW1wIiwiY29udmVydFNlcnZlclRpbWVzdGFtcCIsImNvbnZlcnRCeXRlcyIsImNvbnZlcnRSZWZlcmVuY2UiLCJjb252ZXJ0R2VvUG9pbnQiLCJjb252ZXJ0QXJyYXkiLCJjb252ZXJ0T2JqZWN0IiwiY29udmVydE9iamVjdE1hcCIsImNvbnZlcnREb2N1bWVudEtleSIsIm5mIiwic2YiLCJfZmlyZXN0b3JlSW1wbCIsIm1ldGFkYXRhIiwicmYiLCJzZXJ2ZXJUaW1lc3RhbXBzIiwib2YiLCJfc25hcHNob3QiLCJfY2FjaGVkQ2hhbmdlcyIsIl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJ1ZiIsImhmIiwiZGYiLCJFbCIsInNvdXJjZSIsIm1mIiwidG9GaXJlc3RvcmUiLCJIbCIsIkVmIiwiaGVhcnRiZWF0Q29udHJvbGxlciIsInRyaWdnZXJIZWFydGJlYXQiLCJnZXRBcHAiLCJwcm9kdWN0TmFtZSIsIl9iIiwiZW11bGF0b3JIb3N0cyIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJzZXBhcmF0b3JJbmRleCIsImxhc3RJbmRleE9mIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0IiwibW9ja1VzZXJUb2tlbiIsInByb2plY3QiLCJpYXQiLCJzdWIiLCJ1c2VyX2lkIiwicGF5bG9hZCIsImlzcyIsImF1ZCIsImV4cCIsImF1dGhfdGltZSIsImZpcmViYXNlIiwic2lnbl9pbl9wcm92aWRlciIsImlkZW50aXRpZXMiLCJhbGciLCJjcmVhdGVNb2NrVXNlclRva2VuIiwibGgiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiTG9jYXRpb25NYW5hZ2VyIiwiYmFja2dyb3VuZEltZyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29vcmRpbmF0ZXMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwic2NhbGluZ0ZhY3RvciIsImlubmVyV2lkdGgiLCJzY2FsZWRYIiwic2NhbGVkWSIsImNoYXJhY3RlcnMiLCJib3dzZXIiLCJib3R0b20iLCJuZW8iLCJ3YWxkbyIsIm1lZyIsInBpa2FjaHUiLCJtaWtlIiwiYnJhdm8iLCJzb25pYyIsImNsYXJrZSIsImdldENvb3JkaW5hdGVBcmVhIiwiYXJlYSIsIkZpcmVzdG9yZU1hbmFnZXIiLCJzdG9yZUNoYXJhY3RlckxvY2F0aW9ucyIsImNoYXJhY3RlciIsImdldENoYXJhY3RlckxvY2F0aW9ucyIsInZlcmlmeUNsaWNrZWRQb3NpdGlvbiIsImdhbWVDaG9pY2UiLCJmb3VuZENoYXJhY3RlciIsImNoZWNrVXNlckV4aXN0cyIsInVzZXJuYW1lIiwidXNlckRvY1JlZiIsIkFmIiwic3RvcmVVc2VyVGltZSIsInRpbWUiLCJnZXRUb3AxMFRpbWVzIiwidXNlclRpbWVzIiwibG9jYWxlQ29tcGFyZSIsIlJlbmRlcmVySGVscGVycyIsImVsZW1lbnQiLCJwb3NpdGlvbmVkIiwic3R5bGUiLCJjbGFzc05hbWUiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJkYXRhc2V0IiwiQ29udHJvbGxlciIsImhhbmRsZUNoYXJhY3RlckJ1dHRvbkNsaWNrIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiUmVuZGVyZXIiLCJjb250ZW50IiwicXVlcnlTZWxlY3RvciIsImNpcmNsZXMiLCJwb3B1cHMiLCJjcmVhdGVTbGlkZXIiLCJzbGlkZXJDb250YWluZXIiLCJzbGlkZXIiLCJpbWFnZVNyYyIsImRpZmZpY3VsdHkiLCJpY29uU3JjIiwic3RhcnRCdXR0b25EYXRhQ2hvaWNlIiwic2xpZGVJbmZvIiwic2xpZGUiLCJpbWFnZSIsImFsdCIsImFwcGVuZENoaWxkIiwic2xpZGVyQ2hhcmFjdGVycyIsImNoYXJhY3RlckRpdiIsImljb24iLCJ0ZXh0RGl2IiwibmFtZUhlYWRpbmciLCJkaWZmaWN1bHR5UGFyYWdyYXBoIiwic3RhcnRCdXR0b24iLCJjaG9pY2UiLCJjbGFzc0xpc3QiLCJjcmVhdGVGZWVkYmFja01zZyIsImZlZWRiYWNrTXNnIiwiYmFja2dyb3VuZCIsInJlbW92ZUNpcmNsZSIsImNpcmNsZVRvUmVtb3ZlIiwiY3JlYXRlQ2lyY2xlIiwiY2lyY2xlIiwicmVtb3ZlUG9wdXAiLCJwb3B1cFRvUmVtb3ZlIiwiY3JlYXRlUG9wdXAiLCJmb3VuZENoYXJhY3RlcnMiLCJwb3B1cCIsImdldEdhbWVDaG9pY2UiLCJvcHRpb24iLCJjcmVhdGVUYWJsZSIsInRvcDEwVXNlclRpbWVzIiwibGVhZGVyYm9hcmRIZWFkaW5nIiwiZm9ybWF0dGVkR2FtZUNob2ljZSIsInRpbWVyRWxlbWVudCIsInNjb3JlYm9hcmRUYWJsZUJvZHkiLCJ1c2VyVGltZSIsInJvdyIsInVzZXJuYW1lQ2VsbCIsInRpbWVDZWxsIiwiQXBwSGVscGVycyIsInRpbWVySW50ZXJ2YWwiLCJjdXJyZW50U2xpZGUiLCJzdG9wVGltZXIiLCJjbGVhckludGVydmFsIiwic2hvd01vZGFsIiwibW9kYWwiLCJjbG9zZXN0IiwiZGlzcGxheSIsImhpZGVNb2RhbCIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWUiLCJzZXRJbnRlcnZhbCIsImZvcm1hdHRlZFRpbWUiLCJtaWxsaXNlY29uZHMiLCJob3VycyIsIm1pbnV0ZXMiLCJmb3JtYXRUaW1lIiwicmVzZXRUaW1lciIsInJlc2V0Q291bnQiLCJ1cGRhdGVDb3VudCIsImNvdW50RWxlbWVudCIsImZvdW5kQ291bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ3JheU91dENoYXJhY3Rlckljb24iLCJjaGFyYWN0ZXJJZCIsImNoYXJhY3RlckVsZW1lbnQiLCJjbGVhckNoYXJhY3Rlckljb25zIiwiZ2V0TGVhZGVyYm9hcmQiLCJzdWJtaXRCdXR0b24iLCJ1c2VybmFtZUlucHV0IiwidXNlcm5hbWVFcnJvciIsInVwZGF0ZUFjdGl2ZURvdCIsImRvdCIsInVwZGF0ZUFjdGl2ZVNsaWRlIiwic2xpZGVzIiwidG90YWxTbGlkZXMiLCJvcGFjaXR5Iiwic2V0QmFja2dyb3VuZEltYWdlIiwic2V0Q2hhcmFjdGVySWNvbnMiLCJpY29ucyIsInRpdGxlcyIsImNoYXJhY3RlckRhdGEiLCJjeWJlcnB1bmsiLCJ0aXRsZSIsInJvYm90IiwidW5pdmVyc2UiLCJkZWZhdWx0Iiwic2V0Q2hhcmFjdGVySWQiLCJpbWFnZUVsZW1lbnQiLCJpbWFnZU5hbWUiLCJkcm9wZG93bkJ1dHRvbiIsImRyb3Bkb3duTWVudSIsInBsYXlBZ2FpbkJ1dHRvbiIsImluaXRpYWxNb2RhbCIsImVuZGdhbWVNb2RhbCIsImxlYWRlcmJvYXJkTW9kYWwiLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwiaXNHYW1lU3RhcnRlZCIsImlzQWRkaW5nQ2lyY2xlIiwiaXNBZGRpbmdQb3B1cCIsInNlbGVjdGVkQ2hhcmFjdGVyIiwic3RhcnRHYW1lIiwiY2xpY2tlZEJ1dHRvbiIsInJlc2V0R2FtZSIsImhhbmRsZUNvbnRlbnRDbGljayIsImNsaWNrZWRDaGFyYWN0ZXIiLCJmb3JtYXR0ZWRDaGFyYWN0ZXIiLCJpbml0IiwidG9nZ2xlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiZW51bWVyYWJsZSIsIm9iaiJdLCJzb3VyY2VSb290IjoiIn0=