(()=>{"use strict";const e=(()=>{const e=document.getElementById("backgroundImg");return{getCoordinates:t=>{const o=e.getBoundingClientRect(),n=t.clientX-o.left,c=t.clientY-o.top;console.log(`X: ${n}, Y: ${c}`);const r=window.innerWidth,l=n/(r/1920),s=c/(r/1920),a=l-100,d=s-100,i=l+100,g=s+100;return console.log(`Scaled X: ${l}, Scaled Y: ${s}`),console.log(`Area: (${a}, ${d}) to (${i}, ${g})`),l>=1450&&l<=1650&&s>=6550&&s<=6750?console.log("Found Waldo"):console.log("Not Found"),{x:n,y:c}},formatTime:e=>{const t=Math.floor(e/3600),o=Math.floor(e%3600/60);return`${String(t).padStart(2,"0")}:${String(o).padStart(2,"0")}:${String(e%60).padStart(2,"0")}`}}})();console.log("interface.js says: this seem to be working");const t=(()=>{const e=document.getElementById("content"),n=document.getElementById("overlay"),c=[],r=[],l=(e,t)=>{const o=document.createElement("div");return o.className=e,t&&(o.textContent=t),o},s=(e,t,o)=>{const n=e;n.style.left=`${t}px`,n.style.top=`${o}px`},a=e=>{e.parentNode&&e.parentNode.removeChild(e)};return{createDiv:l,setPosition:s,createFeedbackMsg:(t,o,n)=>{const c=l("feedback",t);s(c,o-150,n-100),c.style.background="rgba(255, 0, 0, 0.7)",e.appendChild(c),setTimeout((()=>{c.remove()}),5e3)},createLink:(e,t)=>{const o=document.createElement("a");return o.textContent=e,o.href="#",o.addEventListener("click",t),o},showOverlay:()=>{n.style.display="flex"},hideOverlay:()=>{n.style.display="none"},removeElement:a,removeCircle:()=>{if(c.length>0){const e=c.pop();a(e)}},createCircle:(t,o)=>{const n=l("circle");s(n,t-50,o-50),e.appendChild(n),c.push(n)},removePopup:()=>{if(r.length>0){const e=r.pop();a(e)}},createPopup:(n,c)=>{const a=l("choice");s(a,n+60,c-70),["Bowser","Neo","Waldo"].forEach((e=>{const n=t.createLink(e,o.handleLinkClick);a.appendChild(n)})),e.appendChild(a),r.push(a)}}})(),o=(()=>{const o=document.getElementById("content"),n=document.getElementById("dropdownButton"),c=document.getElementById("dropdownMenu"),r=document.getElementById("startButton"),l=document.getElementById("timer");let s=!1,a=!1,d=!1;const i=()=>{s||(t.hideOverlay(),(()=>{let t=0;setInterval((()=>{t+=1;const o=e.formatTime(t);l.textContent=o}),1e3)})(),s=!0,a=!0,d=!0)},g=o=>{if(s&&!o.target.closest("header")&&!o.target.closest("footer")&&o.target!==r){if(a){const{x:n,y:c}=e.getCoordinates(o);t.createCircle(n,c),t.createPopup(n,c)}else t.removeCircle(),t.removePopup();a=!a,d=!d}},m=o=>{o.preventDefault(),console.log("handelLinkClick() triggered");const{x:n,y:c}=e.getCoordinates(o);t.removePopup(),t.createFeedbackMsg("Keep looking!",n,c)};return{init:()=>{o.addEventListener("click",g),document.querySelectorAll(".choice a").forEach((e=>{e.addEventListener("click",m)})),n.addEventListener("click",(()=>{c.classList.toggle("show"),n.textContent=c.classList.contains("show")?"▲ Hide Characters ▲":"▼ Show Characters ▼"})),r.addEventListener("click",i),t.showOverlay()},handleLinkClick:m}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,